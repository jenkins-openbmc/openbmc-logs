<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170823 21:48:20.397">
<suite id="s1" name="Tests" source="/tmp/fspcibld/7001/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170823 21:48:20.832" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170823 21:48:20.833" status="FAIL" starttime="20170823 21:48:20.832"></status>
</kw>
<msg timestamp="20170823 21:48:20.833" level="INFO">${has_host} = False</msg>
<status endtime="20170823 21:48:20.833" status="PASS" starttime="20170823 21:48:20.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170823 21:48:20.834" status="PASS" starttime="20170823 21:48:20.833"></status>
</kw>
<status endtime="20170823 21:48:20.834" status="PASS" starttime="20170823 21:48:20.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170823 21:48:20.835" level="INFO">${port_num} = 22</msg>
<status endtime="20170823 21:48:20.835" status="PASS" starttime="20170823 21:48:20.835"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170823 21:48:20.836" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170823 21:48:20.836" status="PASS" starttime="20170823 21:48:20.835"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170823 21:48:20.836" level="INFO">${https_num} = 443</msg>
<status endtime="20170823 21:48:20.836" status="PASS" starttime="20170823 21:48:20.836"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170823 21:48:20.837" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170823 21:48:20.837" status="PASS" starttime="20170823 21:48:20.837"></status>
</kw>
<status endtime="20170823 21:48:20.837" status="PASS" starttime="20170823 21:48:20.835"></status>
</kw>
<status endtime="20170823 21:48:20.837" status="PASS" starttime="20170823 21:48:20.834"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170823 21:48:20.838" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170823 21:48:20.838" status="FAIL" starttime="20170823 21:48:20.838"></status>
</kw>
<msg timestamp="20170823 21:48:20.838" level="INFO">${has_port} = False</msg>
<status endtime="20170823 21:48:20.838" status="PASS" starttime="20170823 21:48:20.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170823 21:48:20.840" status="PASS" starttime="20170823 21:48:20.840"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170823 21:48:20.841" status="PASS" starttime="20170823 21:48:20.840"></status>
</kw>
<status endtime="20170823 21:48:20.841" status="PASS" starttime="20170823 21:48:20.839"></status>
</kw>
<status endtime="20170823 21:48:20.841" status="PASS" starttime="20170823 21:48:20.839"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170823 21:48:20.841" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170823 21:48:22.627" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170823 21:48:22.627" status="PASS" starttime="20170823 21:48:20.841"></status>
</kw>
<status endtime="20170823 21:48:22.628" status="PASS" starttime="20170823 21:48:20.831"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:48:22.629" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170823 21:48:22.716" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170823 21:48:22.716" level="INFO">${output} = VERSION_ID="v1.99.9-33-g0199f20"</msg>
<msg timestamp="20170823 21:48:22.716" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:48:22.716" status="PASS" starttime="20170823 21:48:22.629"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170823 21:48:22.717" level="INFO">Length is 0</msg>
<status endtime="20170823 21:48:22.717" status="PASS" starttime="20170823 21:48:22.717"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170823 21:48:22.717" level="INFO">VERSION_ID="v1.99.9-33-g0199f20"</msg>
<status endtime="20170823 21:48:22.717" status="PASS" starttime="20170823 21:48:22.717"></status>
</kw>
<status endtime="20170823 21:48:22.718" status="PASS" starttime="20170823 21:48:22.628"></status>
</kw>
<status endtime="20170823 21:48:22.718" status="PASS" starttime="20170823 21:48:22.628"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:48:22.719" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170823 21:48:22.856" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170823 21:48:22.856" level="INFO">${stdout} = </msg>
<msg timestamp="20170823 21:48:22.856" level="INFO">${stderr} = sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170823 21:48:22.856" status="PASS" starttime="20170823 21:48:22.719"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170823 21:48:22.857" level="INFO">Length is 105</msg>
<msg timestamp="20170823 21:48:22.857" level="FAIL">'sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170823 21:48:22.857" status="FAIL" starttime="20170823 21:48:22.856"></status>
</kw>
<status endtime="20170823 21:48:22.857" status="FAIL" starttime="20170823 21:48:22.718"></status>
</kw>
<status endtime="20170823 21:48:22.857" status="FAIL" starttime="20170823 21:48:22.718"></status>
</kw>
<status endtime="20170823 21:48:22.857" status="PASS" starttime="20170823 21:48:22.718"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170823 21:48:23.039" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:48:23.040" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170823 21:48:23.834" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170823 21:48:23.834" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170823 21:48:23.911" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170823 21:48:23.919" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170823 21:48:23.919" level="INFO">${stderr} = </msg>
<msg timestamp="20170823 21:48:23.919" level="INFO">${rc} = 0</msg>
<status endtime="20170823 21:48:23.919" status="PASS" starttime="20170823 21:48:22.859"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170823 21:48:23.920" level="INFO">Length is 0</msg>
<status endtime="20170823 21:48:23.920" status="PASS" starttime="20170823 21:48:23.919"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170823 21:48:23.920" level="INFO">Length is 11</msg>
<status endtime="20170823 21:48:23.920" status="PASS" starttime="20170823 21:48:23.920"></status>
</kw>
<msg timestamp="20170823 21:48:23.920" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170823 21:48:23.921" status="PASS" starttime="20170823 21:48:22.858"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170823 21:48:23.921" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170823 21:48:23.921" status="PASS" starttime="20170823 21:48:23.921"></status>
</kw>
<status endtime="20170823 21:48:23.921" status="PASS" starttime="20170823 21:48:22.858"></status>
</kw>
<status endtime="20170823 21:48:23.921" status="PASS" starttime="20170823 21:48:22.858"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170823 21:48:23.923" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170823 21:48:23.924" status="FAIL" starttime="20170823 21:48:23.923"></status>
</kw>
<msg timestamp="20170823 21:48:23.924" level="INFO">${has_host} = False</msg>
<status endtime="20170823 21:48:23.924" status="PASS" starttime="20170823 21:48:23.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170823 21:48:23.925" status="PASS" starttime="20170823 21:48:23.924"></status>
</kw>
<status endtime="20170823 21:48:23.925" status="PASS" starttime="20170823 21:48:23.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170823 21:48:23.926" level="INFO">${port_num} = 22</msg>
<status endtime="20170823 21:48:23.926" status="PASS" starttime="20170823 21:48:23.926"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170823 21:48:23.927" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170823 21:48:23.927" status="PASS" starttime="20170823 21:48:23.926"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170823 21:48:23.927" level="INFO">${https_num} = 443</msg>
<status endtime="20170823 21:48:23.927" status="PASS" starttime="20170823 21:48:23.927"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170823 21:48:23.928" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170823 21:48:23.928" status="PASS" starttime="20170823 21:48:23.928"></status>
</kw>
<status endtime="20170823 21:48:23.928" status="PASS" starttime="20170823 21:48:23.926"></status>
</kw>
<status endtime="20170823 21:48:23.928" status="PASS" starttime="20170823 21:48:23.925"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170823 21:48:23.929" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170823 21:48:23.929" status="FAIL" starttime="20170823 21:48:23.929"></status>
</kw>
<msg timestamp="20170823 21:48:23.929" level="INFO">${has_port} = False</msg>
<status endtime="20170823 21:48:23.929" status="PASS" starttime="20170823 21:48:23.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170823 21:48:23.931" status="PASS" starttime="20170823 21:48:23.931"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170823 21:48:23.932" status="PASS" starttime="20170823 21:48:23.931"></status>
</kw>
<status endtime="20170823 21:48:23.932" status="PASS" starttime="20170823 21:48:23.930"></status>
</kw>
<status endtime="20170823 21:48:23.932" status="PASS" starttime="20170823 21:48:23.930"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170823 21:48:23.932" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170823 21:48:25.710" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170823 21:48:25.711" status="PASS" starttime="20170823 21:48:23.932"></status>
</kw>
<status endtime="20170823 21:48:25.711" status="PASS" starttime="20170823 21:48:23.922"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:48:25.712" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170823 21:48:25.789" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170823 21:48:25.789" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170823 21:48:25.789" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:48:25.789" status="PASS" starttime="20170823 21:48:25.712"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170823 21:48:25.790" level="INFO">Length is 0</msg>
<status endtime="20170823 21:48:25.790" status="PASS" starttime="20170823 21:48:25.789"></status>
</kw>
<msg timestamp="20170823 21:48:25.790" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170823 21:48:25.790" status="PASS" starttime="20170823 21:48:25.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170823 21:48:25.790" status="PASS" starttime="20170823 21:48:25.790"></status>
</kw>
<status endtime="20170823 21:48:25.791" status="PASS" starttime="20170823 21:48:23.922"></status>
</kw>
<status endtime="20170823 21:48:25.791" status="PASS" starttime="20170823 21:48:23.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170823 21:48:25.791" status="PASS" starttime="20170823 21:48:25.791"></status>
</kw>
<status endtime="20170823 21:48:25.791" status="PASS" starttime="20170823 21:48:20.831"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/7001/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/7001/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:48:25.882" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:48:25.882" status="PASS" starttime="20170823 21:48:25.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:25.883" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:25.883" status="PASS" starttime="20170823 21:48:25.882"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:48:25.883" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:48:25.883" status="PASS" starttime="20170823 21:48:25.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:48:25.884" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:48:25.884" status="PASS" starttime="20170823 21:48:25.884"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:48:26.063" status="PASS" starttime="20170823 21:48:25.885"></status>
</kw>
<msg timestamp="20170823 21:48:26.063" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:48:26.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:26.063" status="PASS" starttime="20170823 21:48:25.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:26.064" status="PASS" starttime="20170823 21:48:26.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:26.064" status="PASS" starttime="20170823 21:48:26.064"></status>
</kw>
<status endtime="20170823 21:48:26.064" status="PASS" starttime="20170823 21:48:25.881"></status>
</kw>
<status endtime="20170823 21:48:26.064" status="PASS" starttime="20170823 21:48:25.880"></status>
</kw>
<status endtime="20170823 21:48:26.065" status="PASS" starttime="20170823 21:48:25.880"></status>
</kw>
<kw name="FFDC On Test Case Fail" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:48:26.071" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:48:26.071" status="PASS" starttime="20170823 21:48:26.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:26.072" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:26.072" status="PASS" starttime="20170823 21:48:26.072"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:48:26.073" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:48:26.073" status="PASS" starttime="20170823 21:48:26.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:48:26.073" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:48:26.073" status="PASS" starttime="20170823 21:48:26.073"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.274" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:48:26.275" status="PASS" starttime="20170823 21:48:26.074"></status>
</kw>
<msg timestamp="20170823 21:48:26.275" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:48:26.275" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:26.275" status="PASS" starttime="20170823 21:48:26.073"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.275" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:26.276" status="PASS" starttime="20170823 21:48:26.275"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.276" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:26.276" status="PASS" starttime="20170823 21:48:26.276"></status>
</kw>
<status endtime="20170823 21:48:26.276" status="PASS" starttime="20170823 21:48:26.070"></status>
</kw>
<status endtime="20170823 21:48:26.277" status="PASS" starttime="20170823 21:48:26.070"></status>
</kw>
<status endtime="20170823 21:48:26.277" status="PASS" starttime="20170823 21:48:26.067"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:48:26.277" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 21:48:26.277" status="PASS" starttime="20170823 21:48:26.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:26.279" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:26.279" status="PASS" starttime="20170823 21:48:26.279"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:26.280" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:26.280" status="PASS" starttime="20170823 21:48:26.280"></status>
</kw>
<status endtime="20170823 21:48:26.281" status="PASS" starttime="20170823 21:48:26.280"></status>
</kw>
<status endtime="20170823 21:48:26.281" status="PASS" starttime="20170823 21:48:26.278"></status>
</kw>
<status endtime="20170823 21:48:26.281" status="PASS" starttime="20170823 21:48:26.278"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:48:26.394" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 21:48:26.394" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:26.394" status="PASS" starttime="20170823 21:48:26.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:26.396" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:26.396" status="PASS" starttime="20170823 21:48:26.396"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:26.397" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:26.397" status="PASS" starttime="20170823 21:48:26.397"></status>
</kw>
<status endtime="20170823 21:48:26.398" status="PASS" starttime="20170823 21:48:26.397"></status>
</kw>
<status endtime="20170823 21:48:26.398" status="PASS" starttime="20170823 21:48:26.395"></status>
</kw>
<status endtime="20170823 21:48:26.398" status="PASS" starttime="20170823 21:48:26.395"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:48:26.398" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:48:26.399" status="PASS" starttime="20170823 21:48:26.398"></status>
</kw>
<msg timestamp="20170823 21:48:26.399" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:26.399" status="PASS" starttime="20170823 21:48:26.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:26.399" status="PASS" starttime="20170823 21:48:26.399"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:48:26.400" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:48:26.400" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:48:26.400" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:48:26.400" status="PASS" starttime="20170823 21:48:26.400"></status>
</kw>
<msg timestamp="20170823 21:48:26.401" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170823 21:48:26.401" status="PASS" starttime="20170823 21:48:26.066"></status>
</kw>
<msg timestamp="20170823 21:48:26.401" level="INFO">${host_state} = Off</msg>
<status endtime="20170823 21:48:26.401" status="PASS" starttime="20170823 21:48:26.066"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170823 21:48:26.402" level="FAIL">Off != Quiesced</msg>
<status endtime="20170823 21:48:26.402" status="FAIL" starttime="20170823 21:48:26.402"></status>
</kw>
<msg timestamp="20170823 21:48:26.402" level="INFO">${status} = False</msg>
<status endtime="20170823 21:48:26.402" status="PASS" starttime="20170823 21:48:26.401"></status>
</kw>
<msg timestamp="20170823 21:48:26.402" level="INFO">${status} = False</msg>
<status endtime="20170823 21:48:26.402" status="PASS" starttime="20170823 21:48:26.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170823 21:48:26.403" status="PASS" starttime="20170823 21:48:26.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170823 21:48:26.404" status="PASS" starttime="20170823 21:48:26.403"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170823 21:48:26.414" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170823 21:48:26.414" status="PASS" starttime="20170823 21:48:26.404"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170823 21:48:26.423" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170823 21:48:26.423" status="PASS" starttime="20170823 21:48:26.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170823 21:48:26.425" level="INFO">${cur_time} = 2017-08-23 21:48:26:424847</msg>
<status endtime="20170823 21:48:26.425" status="PASS" starttime="20170823 21:48:26.425"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170823 21:48:26.426" level="INFO">${cur_time} = 20170823214826424847</msg>
<status endtime="20170823 21:48:26.426" status="PASS" starttime="20170823 21:48:26.425"></status>
</kw>
<status endtime="20170823 21:48:26.426" status="PASS" starttime="20170823 21:48:26.424"></status>
</kw>
<msg timestamp="20170823 21:48:26.431" level="INFO">${FFDC_TIME} = 20170823214826424847</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170823 21:48:26.432" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170823 21:48:26.432" status="PASS" starttime="20170823 21:48:26.432"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170823 21:48:26.433" level="INFO">${suite_name} = 20170823214826424847_TestsSecurityTestSsl</msg>
<status endtime="20170823 21:48:26.433" status="PASS" starttime="20170823 21:48:26.432"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170823 21:48:26.433" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170823 21:48:26.433" status="PASS" starttime="20170823 21:48:26.433"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170823 21:48:26.434" level="INFO">${test_name} = 20170823214826424847_TestSSLConnection</msg>
<status endtime="20170823 21:48:26.434" status="PASS" starttime="20170823 21:48:26.434"></status>
</kw>
<status endtime="20170823 21:48:26.434" status="PASS" starttime="20170823 21:48:26.431"></status>
</kw>
<msg timestamp="20170823 21:48:26.435" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/7001/obmc-robot/logs/20170823214826424847_TestsSecurityTestSsl/20170823214826424847_TestSSLConnection/</msg>
<msg timestamp="20170823 21:48:26.439" level="INFO">${FFDC_PREFIX} = 20170823214826424847_</msg>
<status endtime="20170823 21:48:26.439" status="PASS" starttime="20170823 21:48:26.424"></status>
</kw>
<status endtime="20170823 21:48:26.439" status="PASS" starttime="20170823 21:48:26.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170823 21:48:26.440" status="PASS" starttime="20170823 21:48:26.440"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.441" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs"&gt;/tmp/fspcibld/7001/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170823 21:48:26.441" status="PASS" starttime="20170823 21:48:26.440"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.442" level="FAIL">File '/tmp/fspcibld/7001/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170823 21:48:26.442" status="FAIL" starttime="20170823 21:48:26.442"></status>
</kw>
<msg timestamp="20170823 21:48:26.442" level="INFO">${exist} = False</msg>
<status endtime="20170823 21:48:26.442" status="PASS" starttime="20170823 21:48:26.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.443" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:48:26.443" status="PASS" starttime="20170823 21:48:26.443"></status>
</kw>
<status endtime="20170823 21:48:26.443" status="PASS" starttime="20170823 21:48:26.442"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170823 21:48:26.444" status="PASS" starttime="20170823 21:48:26.444"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170823 21:48:26.445" level="INFO">${cur_time} = 2017-08-23 21:48:26:444827</msg>
<status endtime="20170823 21:48:26.445" status="PASS" starttime="20170823 21:48:26.445"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170823 21:48:26.446" level="INFO">${cur_time} = 20170823214826444827</msg>
<status endtime="20170823 21:48:26.446" status="PASS" starttime="20170823 21:48:26.445"></status>
</kw>
<msg timestamp="20170823 21:48:26.446" level="INFO">${cur_time} = 20170823214826444827</msg>
<status endtime="20170823 21:48:26.446" status="PASS" starttime="20170823 21:48:26.444"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.447" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:48:26.447" status="PASS" starttime="20170823 21:48:26.446"></status>
</kw>
<status endtime="20170823 21:48:26.447" status="PASS" starttime="20170823 21:48:26.404"></status>
</kw>
<status endtime="20170823 21:48:26.447" status="PASS" starttime="20170823 21:48:26.065"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170823 21:48:26.447" status="PASS" critical="yes" starttime="20170823 21:48:25.879"></status>
</test>
<kw name="Delete All Sessions" type="teardown" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:48:26.448" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:48:26.448" status="PASS" starttime="20170823 21:48:26.448"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170823 21:48:26.448" status="PASS" starttime="20170823 21:48:25.794"></status>
</suite>
<status endtime="20170823 21:48:26.450" status="PASS" starttime="20170823 21:48:25.791"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/7001/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" type="setup" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170823 21:48:26.487" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170823 21:48:26.487" status="PASS" starttime="20170823 21:48:26.487"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170823 21:48:26.488" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170823 21:48:26.489" status="PASS" starttime="20170823 21:48:26.488"></status>
</kw>
<msg timestamp="20170823 21:48:26.489" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170823 21:48:26.489" status="PASS" starttime="20170823 21:48:26.487"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170823 21:48:26.491" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170823 21:48:26.491" status="PASS" starttime="20170823 21:48:26.491"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170823 21:48:26.492" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170823 21:48:26.492" status="PASS" starttime="20170823 21:48:26.492"></status>
</kw>
<msg timestamp="20170823 21:48:26.493" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170823 21:48:26.493" status="PASS" starttime="20170823 21:48:26.490"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:48:26.494" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170823 21:48:26.494" status="PASS" starttime="20170823 21:48:26.493"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 21:48:26.494" status="PASS" starttime="20170823 21:48:26.494"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170823 21:48:26.499" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170823 21:48:26.502" level="INFO">${rc} = 0</msg>
<msg timestamp="20170823 21:48:26.502" level="INFO">${output} = /tmp/fspcibld/7001/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170823 21:48:26.502" status="PASS" starttime="20170823 21:48:26.494"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170823 21:48:26.505" status="PASS" starttime="20170823 21:48:26.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170823 21:48:26.506" status="PASS" starttime="20170823 21:48:26.505"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:48:26.507" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170823 21:48:26.507" status="PASS" starttime="20170823 21:48:26.506"></status>
</kw>
<msg timestamp="20170823 21:48:26.507" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170823 21:48:26.507" status="PASS" starttime="20170823 21:48:26.493"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:48:26.508" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170823 21:48:26.508" status="PASS" starttime="20170823 21:48:26.507"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 21:48:26.508" status="PASS" starttime="20170823 21:48:26.508"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170823 21:48:26.520" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170823 21:48:26.545" level="INFO">${rc} = 0</msg>
<msg timestamp="20170823 21:48:26.546" level="INFO">${os_con_pid} = </msg>
<status endtime="20170823 21:48:26.546" status="PASS" starttime="20170823 21:48:26.509"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170823 21:48:26.549" status="PASS" starttime="20170823 21:48:26.548"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:48:26.549" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170823 21:48:26.549" status="PASS" starttime="20170823 21:48:26.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 21:48:26.551" status="PASS" starttime="20170823 21:48:26.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170823 21:48:26.551" level="INFO">${rc} = None</msg>
<msg timestamp="20170823 21:48:26.551" level="INFO">${output} = None</msg>
<status endtime="20170823 21:48:26.551" status="PASS" starttime="20170823 21:48:26.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170823 21:48:26.552" status="PASS" starttime="20170823 21:48:26.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.556" level="FAIL">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status endtime="20170823 21:48:26.556" status="FAIL" starttime="20170823 21:48:26.555"></status>
</kw>
<status endtime="20170823 21:48:26.556" status="PASS" starttime="20170823 21:48:26.553"></status>
</kw>
<status endtime="20170823 21:48:26.556" status="PASS" starttime="20170823 21:48:26.552"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170823 21:48:26.557" level="INFO">${output} = </msg>
<status endtime="20170823 21:48:26.557" status="PASS" starttime="20170823 21:48:26.556"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170823 21:48:26.557" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170823 21:48:26.557" status="PASS" starttime="20170823 21:48:26.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170823 21:48:26.607" status="PASS" starttime="20170823 21:48:26.558"></status>
</kw>
<msg timestamp="20170823 21:48:26.608" level="INFO">${rc} = 1</msg>
<msg timestamp="20170823 21:48:26.608" level="INFO">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status endtime="20170823 21:48:26.608" status="PASS" starttime="20170823 21:48:26.558"></status>
</kw>
<msg timestamp="20170823 21:48:26.609" level="INFO">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status endtime="20170823 21:48:26.609" status="PASS" starttime="20170823 21:48:26.489"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170823 21:48:26.611" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170823 21:48:26.611" status="PASS" starttime="20170823 21:48:26.610"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:48:26.612" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170823 21:48:26.612" status="PASS" starttime="20170823 21:48:26.612"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 21:48:26.613" status="PASS" starttime="20170823 21:48:26.612"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170823 21:48:26.616" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170823 21:48:26.619" level="INFO">${rc} = 0</msg>
<msg timestamp="20170823 21:48:26.619" level="INFO">${output} = /tmp/fspcibld/7001/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170823 21:48:26.619" status="PASS" starttime="20170823 21:48:26.613"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170823 21:48:26.622" status="PASS" starttime="20170823 21:48:26.621"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170823 21:48:26.623" status="PASS" starttime="20170823 21:48:26.623"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:48:26.624" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170823 21:48:26.624" status="PASS" starttime="20170823 21:48:26.624"></status>
</kw>
<msg timestamp="20170823 21:48:26.624" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170823 21:48:26.625" status="PASS" starttime="20170823 21:48:26.611"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:48:26.625" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170823 21:48:26.625" status="PASS" starttime="20170823 21:48:26.625"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 21:48:26.626" status="PASS" starttime="20170823 21:48:26.625"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170823 21:48:26.629" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170823 21:48:26.632" level="INFO">${rc} = 0</msg>
<msg timestamp="20170823 21:48:26.632" level="INFO">${output} = </msg>
<status endtime="20170823 21:48:26.632" status="PASS" starttime="20170823 21:48:26.626"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170823 21:48:26.636" status="PASS" starttime="20170823 21:48:26.635"></status>
</kw>
<status endtime="20170823 21:48:26.637" status="PASS" starttime="20170823 21:48:26.486"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170823 21:48:26.638" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170823 21:48:26.641" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170823 21:48:26.641" status="PASS" starttime="20170823 21:48:26.640"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:48:26.643" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170823 21:48:26.643" status="PASS" starttime="20170823 21:48:26.642"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:48:26.648" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:48:26.649" status="PASS" starttime="20170823 21:48:26.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:26.650" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:26.650" status="PASS" starttime="20170823 21:48:26.649"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:48:26.650" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:48:26.650" status="PASS" starttime="20170823 21:48:26.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:48:26.651" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:48:26.651" status="PASS" starttime="20170823 21:48:26.651"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:48:27.130" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:48:27.130" status="PASS" starttime="20170823 21:48:26.652"></status>
</kw>
<msg timestamp="20170823 21:48:27.130" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:48:27.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:27.130" status="PASS" starttime="20170823 21:48:26.651"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:48:27.131" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:27.131" status="PASS" starttime="20170823 21:48:27.131"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:27.132" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:27.132" status="PASS" starttime="20170823 21:48:27.132"></status>
</kw>
<status endtime="20170823 21:48:27.132" status="PASS" starttime="20170823 21:48:26.646"></status>
</kw>
<status endtime="20170823 21:48:27.132" status="PASS" starttime="20170823 21:48:26.645"></status>
</kw>
<status endtime="20170823 21:48:27.132" status="PASS" starttime="20170823 21:48:26.645"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:48:27.133" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170823 21:48:27.133" status="PASS" starttime="20170823 21:48:27.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:27.134" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:27.134" status="PASS" starttime="20170823 21:48:27.133"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170823 21:48:27.134" status="PASS" starttime="20170823 21:48:27.134"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:27.136" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status endtime="20170823 21:48:27.136" status="PASS" starttime="20170823 21:48:27.135"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:27.137" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170823 21:48:27.138" status="PASS" starttime="20170823 21:48:27.137"></status>
</kw>
<status endtime="20170823 21:48:27.138" status="PASS" starttime="20170823 21:48:27.137"></status>
</kw>
<status endtime="20170823 21:48:27.138" status="PASS" starttime="20170823 21:48:27.134"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:48:28.257" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170823 21:48:28.258" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:28.258" status="PASS" starttime="20170823 21:48:27.138"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:28.259" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:28.259" status="PASS" starttime="20170823 21:48:28.259"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:28.260" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:28.260" status="PASS" starttime="20170823 21:48:28.260"></status>
</kw>
<status endtime="20170823 21:48:28.261" status="PASS" starttime="20170823 21:48:28.260"></status>
</kw>
<status endtime="20170823 21:48:28.261" status="PASS" starttime="20170823 21:48:28.258"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:48:28.261" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:48:28.261" status="PASS" starttime="20170823 21:48:28.261"></status>
</kw>
<msg timestamp="20170823 21:48:28.261" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:28.261" status="PASS" starttime="20170823 21:48:26.643"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:28.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:28.262" status="PASS" starttime="20170823 21:48:28.262"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170823 21:48:28.263" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:48:28.263" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:48:28.263" level="INFO">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status endtime="20170823 21:48:28.263" status="PASS" starttime="20170823 21:48:28.262"></status>
</kw>
<status endtime="20170823 21:48:28.263" status="PASS" starttime="20170823 21:48:26.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170823 21:48:28.263" status="PASS" starttime="20170823 21:48:28.263"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:48:28.268" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:48:28.269" status="PASS" starttime="20170823 21:48:28.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:28.269" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:28.269" status="PASS" starttime="20170823 21:48:28.269"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:48:28.270" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:48:28.270" status="PASS" starttime="20170823 21:48:28.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:48:28.271" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:48:28.271" status="PASS" starttime="20170823 21:48:28.270"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:48:29.427" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:48:29.428" status="PASS" starttime="20170823 21:48:28.272"></status>
</kw>
<msg timestamp="20170823 21:48:29.428" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:48:29.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:29.428" status="PASS" starttime="20170823 21:48:28.271"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:48:29.429" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:29.429" status="PASS" starttime="20170823 21:48:29.428"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:29.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:29.429" status="PASS" starttime="20170823 21:48:29.429"></status>
</kw>
<status endtime="20170823 21:48:29.430" status="PASS" starttime="20170823 21:48:28.267"></status>
</kw>
<status endtime="20170823 21:48:29.430" status="PASS" starttime="20170823 21:48:28.267"></status>
</kw>
<status endtime="20170823 21:48:29.430" status="PASS" starttime="20170823 21:48:28.266"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:48:29.430" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:48:29.430" status="PASS" starttime="20170823 21:48:29.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:29.432" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:29.432" status="PASS" starttime="20170823 21:48:29.432"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:29.433" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:29.433" status="PASS" starttime="20170823 21:48:29.433"></status>
</kw>
<status endtime="20170823 21:48:29.434" status="PASS" starttime="20170823 21:48:29.433"></status>
</kw>
<status endtime="20170823 21:48:29.434" status="PASS" starttime="20170823 21:48:29.431"></status>
</kw>
<status endtime="20170823 21:48:29.434" status="PASS" starttime="20170823 21:48:29.431"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:48:33.935" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:48:33.936" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:33.936" status="PASS" starttime="20170823 21:48:29.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:33.938" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:33.938" status="PASS" starttime="20170823 21:48:33.937"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:33.939" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:33.939" status="PASS" starttime="20170823 21:48:33.938"></status>
</kw>
<status endtime="20170823 21:48:33.939" status="PASS" starttime="20170823 21:48:33.938"></status>
</kw>
<status endtime="20170823 21:48:33.939" status="PASS" starttime="20170823 21:48:33.937"></status>
</kw>
<status endtime="20170823 21:48:33.939" status="PASS" starttime="20170823 21:48:33.936"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:48:33.940" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:48:33.940" status="PASS" starttime="20170823 21:48:33.939"></status>
</kw>
<msg timestamp="20170823 21:48:33.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:33.940" status="PASS" starttime="20170823 21:48:28.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:33.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:33.941" status="PASS" starttime="20170823 21:48:33.940"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:48:33.941" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:48:33.941" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:48:33.941" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:48:33.941" status="PASS" starttime="20170823 21:48:33.941"></status>
</kw>
<msg timestamp="20170823 21:48:33.942" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:48:33.942" status="PASS" starttime="20170823 21:48:28.265"></status>
</kw>
<msg timestamp="20170823 21:48:33.942" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:48:33.942" status="PASS" starttime="20170823 21:48:28.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170823 21:48:33.942" status="PASS" starttime="20170823 21:48:33.942"></status>
</kw>
<status endtime="20170823 21:48:33.943" status="PASS" starttime="20170823 21:48:28.264"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:48:33.947" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:48:33.947" status="PASS" starttime="20170823 21:48:33.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:33.947" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:33.947" status="PASS" starttime="20170823 21:48:33.947"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:48:33.948" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:48:33.948" status="PASS" starttime="20170823 21:48:33.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:48:33.949" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:48:33.949" status="PASS" starttime="20170823 21:48:33.948"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:48:34.351" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:48:34.351" status="PASS" starttime="20170823 21:48:33.950"></status>
</kw>
<msg timestamp="20170823 21:48:34.352" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:48:34.352" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:34.352" status="PASS" starttime="20170823 21:48:33.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:48:34.352" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:34.353" status="PASS" starttime="20170823 21:48:34.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:34.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:34.353" status="PASS" starttime="20170823 21:48:34.353"></status>
</kw>
<status endtime="20170823 21:48:34.353" status="PASS" starttime="20170823 21:48:33.946"></status>
</kw>
<status endtime="20170823 21:48:34.353" status="PASS" starttime="20170823 21:48:33.945"></status>
</kw>
<status endtime="20170823 21:48:34.354" status="PASS" starttime="20170823 21:48:33.944"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:48:34.354" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 21:48:34.354" status="PASS" starttime="20170823 21:48:34.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:34.356" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:34.356" status="PASS" starttime="20170823 21:48:34.356"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:34.358" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:34.358" status="PASS" starttime="20170823 21:48:34.357"></status>
</kw>
<status endtime="20170823 21:48:34.358" status="PASS" starttime="20170823 21:48:34.356"></status>
</kw>
<status endtime="20170823 21:48:34.358" status="PASS" starttime="20170823 21:48:34.355"></status>
</kw>
<status endtime="20170823 21:48:34.358" status="PASS" starttime="20170823 21:48:34.354"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:48:34.522" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 21:48:34.523" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:34.523" status="PASS" starttime="20170823 21:48:34.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:34.528" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:34.528" status="PASS" starttime="20170823 21:48:34.524"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:34.529" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:34.529" status="PASS" starttime="20170823 21:48:34.529"></status>
</kw>
<status endtime="20170823 21:48:34.529" status="PASS" starttime="20170823 21:48:34.528"></status>
</kw>
<status endtime="20170823 21:48:34.529" status="PASS" starttime="20170823 21:48:34.524"></status>
</kw>
<status endtime="20170823 21:48:34.529" status="PASS" starttime="20170823 21:48:34.523"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:48:34.530" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:48:34.530" status="PASS" starttime="20170823 21:48:34.530"></status>
</kw>
<msg timestamp="20170823 21:48:34.530" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:34.530" status="PASS" starttime="20170823 21:48:33.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:34.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:34.531" status="PASS" starttime="20170823 21:48:34.530"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:48:34.531" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:48:34.531" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:48:34.532" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:48:34.532" status="PASS" starttime="20170823 21:48:34.531"></status>
</kw>
<msg timestamp="20170823 21:48:34.532" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170823 21:48:34.532" status="PASS" starttime="20170823 21:48:33.943"></status>
</kw>
<msg timestamp="20170823 21:48:34.532" level="INFO">${host_state} = Off</msg>
<status endtime="20170823 21:48:34.532" status="PASS" starttime="20170823 21:48:33.943"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170823 21:48:34.533" status="PASS" starttime="20170823 21:48:34.533"></status>
</kw>
<status endtime="20170823 21:48:34.533" status="PASS" starttime="20170823 21:48:28.264"></status>
</kw>
<status endtime="20170823 21:48:34.533" status="PASS" starttime="20170823 21:48:28.264"></status>
</kw>
<status endtime="20170823 21:48:34.533" status="PASS" starttime="20170823 21:48:26.639"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170823 21:48:34.534" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170823 21:48:34.534" status="PASS" starttime="20170823 21:48:34.534"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:48:34.536" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170823 21:48:34.536" status="PASS" starttime="20170823 21:48:34.535"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:48:34.538" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:48:34.539" status="PASS" starttime="20170823 21:48:34.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:34.539" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:34.539" status="PASS" starttime="20170823 21:48:34.539"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:48:34.540" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:48:34.540" status="PASS" starttime="20170823 21:48:34.539"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:48:34.540" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:48:34.541" status="PASS" starttime="20170823 21:48:34.540"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:48:35.281" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:48:35.281" status="PASS" starttime="20170823 21:48:34.541"></status>
</kw>
<msg timestamp="20170823 21:48:35.281" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:48:35.281" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:35.281" status="PASS" starttime="20170823 21:48:34.541"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:48:35.282" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:35.282" status="PASS" starttime="20170823 21:48:35.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:35.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:35.283" status="PASS" starttime="20170823 21:48:35.282"></status>
</kw>
<status endtime="20170823 21:48:35.283" status="PASS" starttime="20170823 21:48:34.537"></status>
</kw>
<status endtime="20170823 21:48:35.283" status="PASS" starttime="20170823 21:48:34.537"></status>
</kw>
<status endtime="20170823 21:48:35.283" status="PASS" starttime="20170823 21:48:34.536"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:48:35.283" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170823 21:48:35.284" status="PASS" starttime="20170823 21:48:35.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:35.284" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:35.284" status="PASS" starttime="20170823 21:48:35.284"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170823 21:48:35.285" status="PASS" starttime="20170823 21:48:35.284"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:35.287" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status endtime="20170823 21:48:35.287" status="PASS" starttime="20170823 21:48:35.286"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:35.288" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170823 21:48:35.288" status="PASS" starttime="20170823 21:48:35.288"></status>
</kw>
<status endtime="20170823 21:48:35.288" status="PASS" starttime="20170823 21:48:35.287"></status>
</kw>
<status endtime="20170823 21:48:35.288" status="PASS" starttime="20170823 21:48:35.285"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:48:35.769" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170823 21:48:35.769" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:35.769" status="PASS" starttime="20170823 21:48:35.288"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:35.770" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:35.770" status="PASS" starttime="20170823 21:48:35.770"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:35.771" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:35.771" status="PASS" starttime="20170823 21:48:35.771"></status>
</kw>
<status endtime="20170823 21:48:35.771" status="PASS" starttime="20170823 21:48:35.770"></status>
</kw>
<status endtime="20170823 21:48:35.771" status="PASS" starttime="20170823 21:48:35.769"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:48:35.772" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:48:35.772" status="PASS" starttime="20170823 21:48:35.772"></status>
</kw>
<msg timestamp="20170823 21:48:35.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:35.772" status="PASS" starttime="20170823 21:48:34.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:35.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:35.773" status="PASS" starttime="20170823 21:48:35.773"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170823 21:48:35.773" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:48:35.773" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:48:35.774" level="INFO">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status endtime="20170823 21:48:35.774" status="PASS" starttime="20170823 21:48:35.773"></status>
</kw>
<status endtime="20170823 21:48:35.774" status="PASS" starttime="20170823 21:48:34.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170823 21:48:35.774" status="PASS" starttime="20170823 21:48:35.774"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:48:35.779" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:48:35.780" status="PASS" starttime="20170823 21:48:35.779"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:35.780" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:35.780" status="PASS" starttime="20170823 21:48:35.780"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:48:35.781" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:48:35.781" status="PASS" starttime="20170823 21:48:35.781"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:48:35.782" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:48:35.782" status="PASS" starttime="20170823 21:48:35.781"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:48:36.476" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:48:36.476" status="PASS" starttime="20170823 21:48:35.782"></status>
</kw>
<msg timestamp="20170823 21:48:36.476" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:48:36.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:36.476" status="PASS" starttime="20170823 21:48:35.782"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:48:36.477" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:36.477" status="PASS" starttime="20170823 21:48:36.477"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:36.478" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:36.478" status="PASS" starttime="20170823 21:48:36.478"></status>
</kw>
<status endtime="20170823 21:48:36.478" status="PASS" starttime="20170823 21:48:35.778"></status>
</kw>
<status endtime="20170823 21:48:36.478" status="PASS" starttime="20170823 21:48:35.778"></status>
</kw>
<status endtime="20170823 21:48:36.478" status="PASS" starttime="20170823 21:48:35.777"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:48:36.479" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:48:36.479" status="PASS" starttime="20170823 21:48:36.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:36.481" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:36.481" status="PASS" starttime="20170823 21:48:36.480"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:36.482" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:36.482" status="PASS" starttime="20170823 21:48:36.482"></status>
</kw>
<status endtime="20170823 21:48:36.482" status="PASS" starttime="20170823 21:48:36.481"></status>
</kw>
<status endtime="20170823 21:48:36.482" status="PASS" starttime="20170823 21:48:36.480"></status>
</kw>
<status endtime="20170823 21:48:36.483" status="PASS" starttime="20170823 21:48:36.479"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:48:37.324" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:48:37.324" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:37.324" status="PASS" starttime="20170823 21:48:36.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:37.326" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:37.326" status="PASS" starttime="20170823 21:48:37.326"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:37.327" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:37.327" status="PASS" starttime="20170823 21:48:37.327"></status>
</kw>
<status endtime="20170823 21:48:37.327" status="PASS" starttime="20170823 21:48:37.326"></status>
</kw>
<status endtime="20170823 21:48:37.327" status="PASS" starttime="20170823 21:48:37.325"></status>
</kw>
<status endtime="20170823 21:48:37.328" status="PASS" starttime="20170823 21:48:37.325"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:48:37.328" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:48:37.328" status="PASS" starttime="20170823 21:48:37.328"></status>
</kw>
<msg timestamp="20170823 21:48:37.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:37.328" status="PASS" starttime="20170823 21:48:35.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:37.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:37.329" status="PASS" starttime="20170823 21:48:37.329"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:48:37.329" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:48:37.330" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:48:37.330" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:48:37.330" status="PASS" starttime="20170823 21:48:37.329"></status>
</kw>
<msg timestamp="20170823 21:48:37.330" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:48:37.330" status="PASS" starttime="20170823 21:48:35.776"></status>
</kw>
<msg timestamp="20170823 21:48:37.330" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:48:37.330" status="PASS" starttime="20170823 21:48:35.776"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:48:37.331" level="FAIL">On != Off</msg>
<status endtime="20170823 21:48:37.331" status="FAIL" starttime="20170823 21:48:37.331"></status>
</kw>
<status endtime="20170823 21:48:37.331" status="FAIL" starttime="20170823 21:48:35.775"></status>
</kw>
<status endtime="20170823 21:48:37.331" status="FAIL" starttime="20170823 21:48:35.775"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:48:47.339" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:48:47.339" status="PASS" starttime="20170823 21:48:47.338"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:47.340" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:47.340" status="PASS" starttime="20170823 21:48:47.339"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:48:47.340" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:48:47.340" status="PASS" starttime="20170823 21:48:47.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:48:47.341" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:48:47.341" status="PASS" starttime="20170823 21:48:47.341"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:48:47.517" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:48:47.517" status="PASS" starttime="20170823 21:48:47.342"></status>
</kw>
<msg timestamp="20170823 21:48:47.517" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:48:47.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:47.517" status="PASS" starttime="20170823 21:48:47.341"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:48:47.518" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:47.518" status="PASS" starttime="20170823 21:48:47.517"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:47.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:47.518" status="PASS" starttime="20170823 21:48:47.518"></status>
</kw>
<status endtime="20170823 21:48:47.519" status="PASS" starttime="20170823 21:48:47.337"></status>
</kw>
<status endtime="20170823 21:48:47.519" status="PASS" starttime="20170823 21:48:47.337"></status>
</kw>
<status endtime="20170823 21:48:47.519" status="PASS" starttime="20170823 21:48:47.336"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:48:47.519" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:48:47.519" status="PASS" starttime="20170823 21:48:47.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:47.522" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:47.522" status="PASS" starttime="20170823 21:48:47.521"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:47.523" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:47.523" status="PASS" starttime="20170823 21:48:47.522"></status>
</kw>
<status endtime="20170823 21:48:47.523" status="PASS" starttime="20170823 21:48:47.522"></status>
</kw>
<status endtime="20170823 21:48:47.523" status="PASS" starttime="20170823 21:48:47.520"></status>
</kw>
<status endtime="20170823 21:48:47.523" status="PASS" starttime="20170823 21:48:47.520"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:48:48.043" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:48:48.044" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:48.044" status="PASS" starttime="20170823 21:48:47.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:48.046" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:48.046" status="PASS" starttime="20170823 21:48:48.045"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:48.047" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:48.047" status="PASS" starttime="20170823 21:48:48.046"></status>
</kw>
<status endtime="20170823 21:48:48.047" status="PASS" starttime="20170823 21:48:48.046"></status>
</kw>
<status endtime="20170823 21:48:48.047" status="PASS" starttime="20170823 21:48:48.045"></status>
</kw>
<status endtime="20170823 21:48:48.047" status="PASS" starttime="20170823 21:48:48.044"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:48:48.048" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:48:48.048" status="PASS" starttime="20170823 21:48:48.047"></status>
</kw>
<msg timestamp="20170823 21:48:48.048" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:48.048" status="PASS" starttime="20170823 21:48:47.335"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:48.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:48.049" status="PASS" starttime="20170823 21:48:48.048"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:48:48.050" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:48:48.050" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:48:48.050" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:48:48.050" status="PASS" starttime="20170823 21:48:48.049"></status>
</kw>
<msg timestamp="20170823 21:48:48.050" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:48:48.050" status="PASS" starttime="20170823 21:48:47.334"></status>
</kw>
<msg timestamp="20170823 21:48:48.050" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:48:48.050" status="PASS" starttime="20170823 21:48:47.333"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:48:48.051" level="FAIL">On != Off</msg>
<status endtime="20170823 21:48:48.051" status="FAIL" starttime="20170823 21:48:48.051"></status>
</kw>
<status endtime="20170823 21:48:48.051" status="FAIL" starttime="20170823 21:48:47.333"></status>
</kw>
<status endtime="20170823 21:48:48.051" status="FAIL" starttime="20170823 21:48:47.332"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:48:58.059" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:48:58.059" status="PASS" starttime="20170823 21:48:58.058"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:58.060" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:58.060" status="PASS" starttime="20170823 21:48:58.060"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:48:58.061" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:48:58.061" status="PASS" starttime="20170823 21:48:58.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:48:58.061" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:48:58.061" status="PASS" starttime="20170823 21:48:58.061"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:48:58.598" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:48:58.598" status="PASS" starttime="20170823 21:48:58.062"></status>
</kw>
<msg timestamp="20170823 21:48:58.598" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:48:58.599" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:58.599" status="PASS" starttime="20170823 21:48:58.062"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:48:58.600" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:58.600" status="PASS" starttime="20170823 21:48:58.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:58.601" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:58.601" status="PASS" starttime="20170823 21:48:58.600"></status>
</kw>
<status endtime="20170823 21:48:58.601" status="PASS" starttime="20170823 21:48:58.057"></status>
</kw>
<status endtime="20170823 21:48:58.601" status="PASS" starttime="20170823 21:48:58.057"></status>
</kw>
<status endtime="20170823 21:48:58.601" status="PASS" starttime="20170823 21:48:58.056"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:48:58.602" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:48:58.602" status="PASS" starttime="20170823 21:48:58.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:58.604" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:58.604" status="PASS" starttime="20170823 21:48:58.603"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:58.605" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:58.605" status="PASS" starttime="20170823 21:48:58.605"></status>
</kw>
<status endtime="20170823 21:48:58.605" status="PASS" starttime="20170823 21:48:58.604"></status>
</kw>
<status endtime="20170823 21:48:58.605" status="PASS" starttime="20170823 21:48:58.603"></status>
</kw>
<status endtime="20170823 21:48:58.605" status="PASS" starttime="20170823 21:48:58.602"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:48:58.709" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:48:58.710" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:58.710" status="PASS" starttime="20170823 21:48:58.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:58.712" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:58.712" status="PASS" starttime="20170823 21:48:58.711"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:58.712" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:58.713" status="PASS" starttime="20170823 21:48:58.712"></status>
</kw>
<status endtime="20170823 21:48:58.713" status="PASS" starttime="20170823 21:48:58.712"></status>
</kw>
<status endtime="20170823 21:48:58.713" status="PASS" starttime="20170823 21:48:58.711"></status>
</kw>
<status endtime="20170823 21:48:58.713" status="PASS" starttime="20170823 21:48:58.710"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:48:58.713" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:48:58.713" status="PASS" starttime="20170823 21:48:58.713"></status>
</kw>
<msg timestamp="20170823 21:48:58.714" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:58.714" status="PASS" starttime="20170823 21:48:58.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:58.715" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:58.715" status="PASS" starttime="20170823 21:48:58.714"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:48:58.716" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:48:58.716" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:48:58.716" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170823 21:48:58.716" status="PASS" starttime="20170823 21:48:58.715"></status>
</kw>
<msg timestamp="20170823 21:48:58.716" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170823 21:48:58.716" status="PASS" starttime="20170823 21:48:58.054"></status>
</kw>
<msg timestamp="20170823 21:48:58.716" level="INFO">${power_state} = On</msg>
<status endtime="20170823 21:48:58.716" status="PASS" starttime="20170823 21:48:58.053"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170823 21:48:58.717" status="PASS" starttime="20170823 21:48:58.717"></status>
</kw>
<status endtime="20170823 21:48:58.717" status="PASS" starttime="20170823 21:48:58.053"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:48:58.721" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:48:58.722" status="PASS" starttime="20170823 21:48:58.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:58.722" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:58.722" status="PASS" starttime="20170823 21:48:58.722"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:48:58.723" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:48:58.723" status="PASS" starttime="20170823 21:48:58.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:48:58.723" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:48:58.724" status="PASS" starttime="20170823 21:48:58.723"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:48:59.065" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:48:59.065" status="PASS" starttime="20170823 21:48:58.724"></status>
</kw>
<msg timestamp="20170823 21:48:59.065" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:48:59.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:59.065" status="PASS" starttime="20170823 21:48:58.724"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:48:59.066" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:59.066" status="PASS" starttime="20170823 21:48:59.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:59.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:59.067" status="PASS" starttime="20170823 21:48:59.066"></status>
</kw>
<status endtime="20170823 21:48:59.067" status="PASS" starttime="20170823 21:48:58.720"></status>
</kw>
<status endtime="20170823 21:48:59.067" status="PASS" starttime="20170823 21:48:58.720"></status>
</kw>
<status endtime="20170823 21:48:59.067" status="PASS" starttime="20170823 21:48:58.719"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:48:59.068" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 21:48:59.068" status="PASS" starttime="20170823 21:48:59.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:59.070" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:59.070" status="PASS" starttime="20170823 21:48:59.069"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:59.071" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:48:59.071" status="PASS" starttime="20170823 21:48:59.071"></status>
</kw>
<status endtime="20170823 21:48:59.071" status="PASS" starttime="20170823 21:48:59.070"></status>
</kw>
<status endtime="20170823 21:48:59.071" status="PASS" starttime="20170823 21:48:59.069"></status>
</kw>
<status endtime="20170823 21:48:59.072" status="PASS" starttime="20170823 21:48:59.068"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:48:59.314" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 21:48:59.314" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:59.314" status="PASS" starttime="20170823 21:48:59.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:48:59.316" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:59.316" status="PASS" starttime="20170823 21:48:59.316"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:48:59.318" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:48:59.318" status="PASS" starttime="20170823 21:48:59.317"></status>
</kw>
<status endtime="20170823 21:48:59.318" status="PASS" starttime="20170823 21:48:59.317"></status>
</kw>
<status endtime="20170823 21:48:59.318" status="PASS" starttime="20170823 21:48:59.315"></status>
</kw>
<status endtime="20170823 21:48:59.318" status="PASS" starttime="20170823 21:48:59.315"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:48:59.318" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:48:59.319" status="PASS" starttime="20170823 21:48:59.318"></status>
</kw>
<msg timestamp="20170823 21:48:59.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:48:59.319" status="PASS" starttime="20170823 21:48:58.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:48:59.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:48:59.320" status="PASS" starttime="20170823 21:48:59.319"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:48:59.320" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:48:59.320" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:48:59.320" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170823 21:48:59.320" status="PASS" starttime="20170823 21:48:59.320"></status>
</kw>
<msg timestamp="20170823 21:48:59.320" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170823 21:48:59.321" status="PASS" starttime="20170823 21:48:58.718"></status>
</kw>
<msg timestamp="20170823 21:48:59.321" level="INFO">${host_state} = Running</msg>
<status endtime="20170823 21:48:59.321" status="PASS" starttime="20170823 21:48:58.717"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170823 21:48:59.321" status="PASS" starttime="20170823 21:48:59.321"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170823 21:48:59.324" status="PASS" starttime="20170823 21:48:59.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>New Get Boot Progress</arg>
</arguments>
<assign>
<var>${new_status}</var>
<var>${new_value}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:48:59.328" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:48:59.328" status="PASS" starttime="20170823 21:48:59.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:48:59.329" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:48:59.329" status="PASS" starttime="20170823 21:48:59.329"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:48:59.330" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:48:59.330" status="PASS" starttime="20170823 21:48:59.329"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:48:59.330" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:48:59.330" status="PASS" starttime="20170823 21:48:59.330"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:00.118" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:00.118" status="PASS" starttime="20170823 21:48:59.331"></status>
</kw>
<msg timestamp="20170823 21:49:00.118" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:00.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:00.119" status="PASS" starttime="20170823 21:48:59.331"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:00.119" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:00.119" status="PASS" starttime="20170823 21:49:00.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:00.120" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:00.120" status="PASS" starttime="20170823 21:49:00.120"></status>
</kw>
<status endtime="20170823 21:49:00.120" status="PASS" starttime="20170823 21:48:59.327"></status>
</kw>
<status endtime="20170823 21:49:00.120" status="PASS" starttime="20170823 21:48:59.326"></status>
</kw>
<status endtime="20170823 21:49:00.121" status="PASS" starttime="20170823 21:48:59.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:00.121" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:49:00.121" status="PASS" starttime="20170823 21:49:00.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:00.123" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:00.123" status="PASS" starttime="20170823 21:49:00.123"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:00.124" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:00.124" status="PASS" starttime="20170823 21:49:00.124"></status>
</kw>
<status endtime="20170823 21:49:00.124" status="PASS" starttime="20170823 21:49:00.123"></status>
</kw>
<status endtime="20170823 21:49:00.124" status="PASS" starttime="20170823 21:49:00.122"></status>
</kw>
<status endtime="20170823 21:49:00.125" status="PASS" starttime="20170823 21:49:00.121"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:00.771" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:49:00.771" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:00.771" status="PASS" starttime="20170823 21:49:00.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:00.773" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:00.773" status="PASS" starttime="20170823 21:49:00.773"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:00.774" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:00.774" status="PASS" starttime="20170823 21:49:00.774"></status>
</kw>
<status endtime="20170823 21:49:00.774" status="PASS" starttime="20170823 21:49:00.773"></status>
</kw>
<status endtime="20170823 21:49:00.774" status="PASS" starttime="20170823 21:49:00.772"></status>
</kw>
<status endtime="20170823 21:49:00.774" status="PASS" starttime="20170823 21:49:00.771"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:00.775" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:00.775" status="PASS" starttime="20170823 21:49:00.775"></status>
</kw>
<msg timestamp="20170823 21:49:00.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:00.775" status="PASS" starttime="20170823 21:48:59.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:00.776" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:00.776" status="PASS" starttime="20170823 21:49:00.775"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:00.776" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:00.776" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:00.777" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:00.777" status="PASS" starttime="20170823 21:49:00.776"></status>
</kw>
<msg timestamp="20170823 21:49:00.777" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170823 21:49:00.777" status="PASS" starttime="20170823 21:48:59.325"></status>
</kw>
<status endtime="20170823 21:49:00.777" status="PASS" starttime="20170823 21:48:59.324"></status>
</kw>
<msg timestamp="20170823 21:49:00.777" level="INFO">${new_status} = PASS</msg>
<msg timestamp="20170823 21:49:00.777" level="INFO">${new_value} = Unspecified</msg>
<status endtime="20170823 21:49:00.777" status="PASS" starttime="20170823 21:48:59.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${new_status}' == 'PASS'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
</arguments>
<msg timestamp="20170823 21:49:00.779" level="INFO">${boot_prog_method} = New</msg>
<status endtime="20170823 21:49:00.779" status="PASS" starttime="20170823 21:49:00.779"></status>
</kw>
<kw name="Rqpvars" library="gen_robot_print">
<arguments>
<arg>boot_prog_method</arg>
</arguments>
<status endtime="20170823 21:49:00.780" status="PASS" starttime="20170823 21:49:00.779"></status>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170823 21:49:00.781" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170823 21:49:00.781" status="PASS" starttime="20170823 21:49:00.781"></status>
</kw>
<status endtime="20170823 21:49:00.781" status="PASS" starttime="20170823 21:49:00.778"></status>
</kw>
<status endtime="20170823 21:49:00.781" status="PASS" starttime="20170823 21:49:00.778"></status>
</kw>
<status endtime="20170823 21:49:00.781" status="PASS" starttime="20170823 21:48:59.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:00.785" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:00.786" status="PASS" starttime="20170823 21:49:00.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:00.786" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:00.786" status="PASS" starttime="20170823 21:49:00.786"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:00.787" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:00.787" status="PASS" starttime="20170823 21:49:00.786"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:00.787" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:00.787" status="PASS" starttime="20170823 21:49:00.787"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:01.160" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:01.160" status="PASS" starttime="20170823 21:49:00.788"></status>
</kw>
<msg timestamp="20170823 21:49:01.160" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:01.160" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:01.160" status="PASS" starttime="20170823 21:49:00.788"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:01.161" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:01.161" status="PASS" starttime="20170823 21:49:01.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:01.162" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:01.162" status="PASS" starttime="20170823 21:49:01.161"></status>
</kw>
<status endtime="20170823 21:49:01.162" status="PASS" starttime="20170823 21:49:00.784"></status>
</kw>
<status endtime="20170823 21:49:01.162" status="PASS" starttime="20170823 21:49:00.784"></status>
</kw>
<status endtime="20170823 21:49:01.162" status="PASS" starttime="20170823 21:49:00.783"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:01.163" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:49:01.163" status="PASS" starttime="20170823 21:49:01.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:01.166" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:01.166" status="PASS" starttime="20170823 21:49:01.165"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:01.167" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:01.167" status="PASS" starttime="20170823 21:49:01.167"></status>
</kw>
<status endtime="20170823 21:49:01.168" status="PASS" starttime="20170823 21:49:01.166"></status>
</kw>
<status endtime="20170823 21:49:01.168" status="PASS" starttime="20170823 21:49:01.164"></status>
</kw>
<status endtime="20170823 21:49:01.168" status="PASS" starttime="20170823 21:49:01.163"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:01.296" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:49:01.296" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:01.296" status="PASS" starttime="20170823 21:49:01.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:01.298" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:01.298" status="PASS" starttime="20170823 21:49:01.298"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:01.299" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:01.299" status="PASS" starttime="20170823 21:49:01.299"></status>
</kw>
<status endtime="20170823 21:49:01.299" status="PASS" starttime="20170823 21:49:01.298"></status>
</kw>
<status endtime="20170823 21:49:01.299" status="PASS" starttime="20170823 21:49:01.297"></status>
</kw>
<status endtime="20170823 21:49:01.299" status="PASS" starttime="20170823 21:49:01.297"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:01.300" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:01.300" status="PASS" starttime="20170823 21:49:01.300"></status>
</kw>
<msg timestamp="20170823 21:49:01.300" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:01.300" status="PASS" starttime="20170823 21:49:00.783"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:01.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:01.301" status="PASS" starttime="20170823 21:49:01.300"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:01.301" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:01.301" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:01.301" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:01.302" status="PASS" starttime="20170823 21:49:01.301"></status>
</kw>
<msg timestamp="20170823 21:49:01.302" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170823 21:49:01.302" status="PASS" starttime="20170823 21:49:00.782"></status>
</kw>
<status endtime="20170823 21:49:01.302" status="PASS" starttime="20170823 21:49:00.782"></status>
</kw>
<msg timestamp="20170823 21:49:01.302" level="INFO">${state} = Unspecified</msg>
<status endtime="20170823 21:49:01.302" status="PASS" starttime="20170823 21:49:00.781"></status>
</kw>
<msg timestamp="20170823 21:49:01.302" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170823 21:49:01.302" status="PASS" starttime="20170823 21:48:59.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170823 21:49:01.303" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170823 21:49:01.303" status="FAIL" starttime="20170823 21:49:01.303"></status>
</kw>
<status endtime="20170823 21:49:01.303" status="FAIL" starttime="20170823 21:48:59.322"></status>
</kw>
<msg timestamp="20170823 21:49:01.303" level="INFO">${status} = False</msg>
<status endtime="20170823 21:49:01.304" status="PASS" starttime="20170823 21:48:59.322"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170823 21:49:01.304" status="PASS" starttime="20170823 21:49:01.304"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:01.309" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:01.310" status="PASS" starttime="20170823 21:49:01.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:01.311" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:01.311" status="PASS" starttime="20170823 21:49:01.310"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:01.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:01.311" status="PASS" starttime="20170823 21:49:01.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:01.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:01.312" status="PASS" starttime="20170823 21:49:01.312"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:02.666" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:02.666" status="PASS" starttime="20170823 21:49:01.313"></status>
</kw>
<msg timestamp="20170823 21:49:02.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:02.667" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:02.667" status="PASS" starttime="20170823 21:49:01.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:02.667" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:02.667" status="PASS" starttime="20170823 21:49:02.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:02.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:02.668" status="PASS" starttime="20170823 21:49:02.668"></status>
</kw>
<status endtime="20170823 21:49:02.668" status="PASS" starttime="20170823 21:49:01.308"></status>
</kw>
<status endtime="20170823 21:49:02.668" status="PASS" starttime="20170823 21:49:01.307"></status>
</kw>
<status endtime="20170823 21:49:02.668" status="PASS" starttime="20170823 21:49:01.307"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:02.669" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:49:02.669" status="PASS" starttime="20170823 21:49:02.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:02.672" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:02.672" status="PASS" starttime="20170823 21:49:02.671"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:02.673" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:02.674" status="PASS" starttime="20170823 21:49:02.673"></status>
</kw>
<status endtime="20170823 21:49:02.674" status="PASS" starttime="20170823 21:49:02.672"></status>
</kw>
<status endtime="20170823 21:49:02.674" status="PASS" starttime="20170823 21:49:02.670"></status>
</kw>
<status endtime="20170823 21:49:02.674" status="PASS" starttime="20170823 21:49:02.669"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:02.834" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:49:02.834" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:02.834" status="PASS" starttime="20170823 21:49:02.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:02.836" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:02.836" status="PASS" starttime="20170823 21:49:02.836"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:02.837" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:02.837" status="PASS" starttime="20170823 21:49:02.837"></status>
</kw>
<status endtime="20170823 21:49:02.837" status="PASS" starttime="20170823 21:49:02.836"></status>
</kw>
<status endtime="20170823 21:49:02.837" status="PASS" starttime="20170823 21:49:02.835"></status>
</kw>
<status endtime="20170823 21:49:02.838" status="PASS" starttime="20170823 21:49:02.835"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:02.838" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:02.838" status="PASS" starttime="20170823 21:49:02.838"></status>
</kw>
<msg timestamp="20170823 21:49:02.838" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:02.838" status="PASS" starttime="20170823 21:49:01.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:02.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:02.839" status="PASS" starttime="20170823 21:49:02.838"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:02.840" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:02.840" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:02.840" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:02.840" status="PASS" starttime="20170823 21:49:02.839"></status>
</kw>
<msg timestamp="20170823 21:49:02.840" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170823 21:49:02.840" status="PASS" starttime="20170823 21:49:01.305"></status>
</kw>
<msg timestamp="20170823 21:49:02.840" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170823 21:49:02.840" status="PASS" starttime="20170823 21:49:01.304"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170823 21:49:02.841" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 21:49:02.841" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170823 21:49:02.841" status="FAIL" starttime="20170823 21:49:02.841"></status>
</kw>
<status endtime="20170823 21:49:02.841" status="FAIL" starttime="20170823 21:48:59.322"></status>
</kw>
<status endtime="20170823 21:49:02.841" status="FAIL" starttime="20170823 21:48:58.052"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:12.851" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:12.852" status="PASS" starttime="20170823 21:49:12.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:12.852" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:12.852" status="PASS" starttime="20170823 21:49:12.852"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:12.853" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:12.853" status="PASS" starttime="20170823 21:49:12.852"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:12.854" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:12.854" status="PASS" starttime="20170823 21:49:12.853"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:13.366" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:13.366" status="PASS" starttime="20170823 21:49:12.855"></status>
</kw>
<msg timestamp="20170823 21:49:13.366" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:13.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:13.366" status="PASS" starttime="20170823 21:49:12.854"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:13.367" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:13.367" status="PASS" starttime="20170823 21:49:13.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:13.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:13.368" status="PASS" starttime="20170823 21:49:13.367"></status>
</kw>
<status endtime="20170823 21:49:13.368" status="PASS" starttime="20170823 21:49:12.846"></status>
</kw>
<status endtime="20170823 21:49:13.368" status="PASS" starttime="20170823 21:49:12.845"></status>
</kw>
<status endtime="20170823 21:49:13.368" status="PASS" starttime="20170823 21:49:12.845"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:13.369" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:49:13.369" status="PASS" starttime="20170823 21:49:13.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:13.371" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:13.371" status="PASS" starttime="20170823 21:49:13.370"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:13.372" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:13.372" status="PASS" starttime="20170823 21:49:13.371"></status>
</kw>
<status endtime="20170823 21:49:13.372" status="PASS" starttime="20170823 21:49:13.371"></status>
</kw>
<status endtime="20170823 21:49:13.372" status="PASS" starttime="20170823 21:49:13.369"></status>
</kw>
<status endtime="20170823 21:49:13.372" status="PASS" starttime="20170823 21:49:13.369"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:13.748" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:49:13.748" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:13.748" status="PASS" starttime="20170823 21:49:13.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:13.750" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:13.750" status="PASS" starttime="20170823 21:49:13.750"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:13.752" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:13.752" status="PASS" starttime="20170823 21:49:13.751"></status>
</kw>
<status endtime="20170823 21:49:13.752" status="PASS" starttime="20170823 21:49:13.751"></status>
</kw>
<status endtime="20170823 21:49:13.752" status="PASS" starttime="20170823 21:49:13.749"></status>
</kw>
<status endtime="20170823 21:49:13.752" status="PASS" starttime="20170823 21:49:13.749"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:13.752" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:13.753" status="PASS" starttime="20170823 21:49:13.752"></status>
</kw>
<msg timestamp="20170823 21:49:13.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:13.753" status="PASS" starttime="20170823 21:49:12.844"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:13.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:13.754" status="PASS" starttime="20170823 21:49:13.753"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:13.754" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:13.754" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:13.754" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:13.754" status="PASS" starttime="20170823 21:49:13.754"></status>
</kw>
<msg timestamp="20170823 21:49:13.755" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170823 21:49:13.755" status="PASS" starttime="20170823 21:49:12.843"></status>
</kw>
<msg timestamp="20170823 21:49:13.755" level="INFO">${power_state} = On</msg>
<status endtime="20170823 21:49:13.755" status="PASS" starttime="20170823 21:49:12.843"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170823 21:49:13.756" status="PASS" starttime="20170823 21:49:13.755"></status>
</kw>
<status endtime="20170823 21:49:13.756" status="PASS" starttime="20170823 21:49:12.843"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:13.759" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:13.760" status="PASS" starttime="20170823 21:49:13.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:13.760" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:13.760" status="PASS" starttime="20170823 21:49:13.760"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:13.761" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:13.761" status="PASS" starttime="20170823 21:49:13.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:13.761" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:13.761" status="PASS" starttime="20170823 21:49:13.761"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:14.085" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:14.085" status="PASS" starttime="20170823 21:49:13.762"></status>
</kw>
<msg timestamp="20170823 21:49:14.085" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:14.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:14.085" status="PASS" starttime="20170823 21:49:13.762"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:14.086" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:14.086" status="PASS" starttime="20170823 21:49:14.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:14.087" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:14.087" status="PASS" starttime="20170823 21:49:14.086"></status>
</kw>
<status endtime="20170823 21:49:14.087" status="PASS" starttime="20170823 21:49:13.758"></status>
</kw>
<status endtime="20170823 21:49:14.087" status="PASS" starttime="20170823 21:49:13.758"></status>
</kw>
<status endtime="20170823 21:49:14.087" status="PASS" starttime="20170823 21:49:13.757"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:14.087" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 21:49:14.088" status="PASS" starttime="20170823 21:49:14.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:14.091" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:14.091" status="PASS" starttime="20170823 21:49:14.089"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:14.092" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:14.092" status="PASS" starttime="20170823 21:49:14.092"></status>
</kw>
<status endtime="20170823 21:49:14.092" status="PASS" starttime="20170823 21:49:14.091"></status>
</kw>
<status endtime="20170823 21:49:14.092" status="PASS" starttime="20170823 21:49:14.088"></status>
</kw>
<status endtime="20170823 21:49:14.092" status="PASS" starttime="20170823 21:49:14.088"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:14.329" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 21:49:14.329" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:14.329" status="PASS" starttime="20170823 21:49:14.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:14.331" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:14.331" status="PASS" starttime="20170823 21:49:14.330"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:14.331" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:14.332" status="PASS" starttime="20170823 21:49:14.331"></status>
</kw>
<status endtime="20170823 21:49:14.332" status="PASS" starttime="20170823 21:49:14.331"></status>
</kw>
<status endtime="20170823 21:49:14.332" status="PASS" starttime="20170823 21:49:14.330"></status>
</kw>
<status endtime="20170823 21:49:14.332" status="PASS" starttime="20170823 21:49:14.329"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:14.332" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:14.332" status="PASS" starttime="20170823 21:49:14.332"></status>
</kw>
<msg timestamp="20170823 21:49:14.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:14.333" status="PASS" starttime="20170823 21:49:13.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:14.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:14.333" status="PASS" starttime="20170823 21:49:14.333"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:14.334" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:14.334" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:14.334" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:14.334" status="PASS" starttime="20170823 21:49:14.333"></status>
</kw>
<msg timestamp="20170823 21:49:14.334" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170823 21:49:14.334" status="PASS" starttime="20170823 21:49:13.756"></status>
</kw>
<msg timestamp="20170823 21:49:14.335" level="INFO">${host_state} = Running</msg>
<status endtime="20170823 21:49:14.335" status="PASS" starttime="20170823 21:49:13.756"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170823 21:49:14.335" status="PASS" starttime="20170823 21:49:14.335"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170823 21:49:14.338" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170823 21:49:14.338" status="PASS" starttime="20170823 21:49:14.338"></status>
</kw>
<status endtime="20170823 21:49:14.338" status="PASS" starttime="20170823 21:49:14.337"></status>
</kw>
<status endtime="20170823 21:49:14.338" status="PASS" starttime="20170823 21:49:14.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:14.342" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:14.343" status="PASS" starttime="20170823 21:49:14.342"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:14.343" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:14.343" status="PASS" starttime="20170823 21:49:14.343"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:14.344" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:14.344" status="PASS" starttime="20170823 21:49:14.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:14.345" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:14.345" status="PASS" starttime="20170823 21:49:14.344"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:15.978" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:15.978" status="PASS" starttime="20170823 21:49:14.345"></status>
</kw>
<msg timestamp="20170823 21:49:15.978" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:15.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:15.978" status="PASS" starttime="20170823 21:49:14.345"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:15.979" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:15.979" status="PASS" starttime="20170823 21:49:15.978"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:15.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:15.979" status="PASS" starttime="20170823 21:49:15.979"></status>
</kw>
<status endtime="20170823 21:49:15.980" status="PASS" starttime="20170823 21:49:14.342"></status>
</kw>
<status endtime="20170823 21:49:15.980" status="PASS" starttime="20170823 21:49:14.341"></status>
</kw>
<status endtime="20170823 21:49:15.980" status="PASS" starttime="20170823 21:49:14.340"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:15.980" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:49:15.980" status="PASS" starttime="20170823 21:49:15.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:15.982" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:15.982" status="PASS" starttime="20170823 21:49:15.982"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:15.983" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:15.984" status="PASS" starttime="20170823 21:49:15.983"></status>
</kw>
<status endtime="20170823 21:49:15.984" status="PASS" starttime="20170823 21:49:15.983"></status>
</kw>
<status endtime="20170823 21:49:15.984" status="PASS" starttime="20170823 21:49:15.981"></status>
</kw>
<status endtime="20170823 21:49:15.984" status="PASS" starttime="20170823 21:49:15.981"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:16.549" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:49:16.549" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:16.549" status="PASS" starttime="20170823 21:49:15.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:16.551" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:16.551" status="PASS" starttime="20170823 21:49:16.550"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:16.552" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:16.552" status="PASS" starttime="20170823 21:49:16.552"></status>
</kw>
<status endtime="20170823 21:49:16.552" status="PASS" starttime="20170823 21:49:16.551"></status>
</kw>
<status endtime="20170823 21:49:16.552" status="PASS" starttime="20170823 21:49:16.550"></status>
</kw>
<status endtime="20170823 21:49:16.553" status="PASS" starttime="20170823 21:49:16.549"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:16.553" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:16.553" status="PASS" starttime="20170823 21:49:16.553"></status>
</kw>
<msg timestamp="20170823 21:49:16.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:16.553" status="PASS" starttime="20170823 21:49:14.340"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:16.554" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:16.554" status="PASS" starttime="20170823 21:49:16.553"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:16.554" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:16.554" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:16.555" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:16.555" status="PASS" starttime="20170823 21:49:16.554"></status>
</kw>
<msg timestamp="20170823 21:49:16.555" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:49:16.555" status="PASS" starttime="20170823 21:49:14.339"></status>
</kw>
<status endtime="20170823 21:49:16.555" status="PASS" starttime="20170823 21:49:14.339"></status>
</kw>
<msg timestamp="20170823 21:49:16.555" level="INFO">${state} = MotherboardInit</msg>
<status endtime="20170823 21:49:16.555" status="PASS" starttime="20170823 21:49:14.338"></status>
</kw>
<msg timestamp="20170823 21:49:16.556" level="INFO">${boot_progress} = MotherboardInit</msg>
<status endtime="20170823 21:49:16.556" status="PASS" starttime="20170823 21:49:14.336"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170823 21:49:16.557" level="FAIL">MotherboardInit != OSStart</msg>
<status endtime="20170823 21:49:16.557" status="FAIL" starttime="20170823 21:49:16.556"></status>
</kw>
<status endtime="20170823 21:49:16.557" status="FAIL" starttime="20170823 21:49:14.336"></status>
</kw>
<msg timestamp="20170823 21:49:16.557" level="INFO">${status} = False</msg>
<status endtime="20170823 21:49:16.557" status="PASS" starttime="20170823 21:49:14.336"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170823 21:49:16.558" status="PASS" starttime="20170823 21:49:16.557"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:16.561" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:16.562" status="PASS" starttime="20170823 21:49:16.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:16.562" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:16.562" status="PASS" starttime="20170823 21:49:16.562"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:16.563" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:16.563" status="PASS" starttime="20170823 21:49:16.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:16.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:16.564" status="PASS" starttime="20170823 21:49:16.563"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:16.964" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:16.964" status="PASS" starttime="20170823 21:49:16.564"></status>
</kw>
<msg timestamp="20170823 21:49:16.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:16.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:16.964" status="PASS" starttime="20170823 21:49:16.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:16.965" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:16.965" status="PASS" starttime="20170823 21:49:16.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:16.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:16.966" status="PASS" starttime="20170823 21:49:16.965"></status>
</kw>
<status endtime="20170823 21:49:16.966" status="PASS" starttime="20170823 21:49:16.561"></status>
</kw>
<status endtime="20170823 21:49:16.966" status="PASS" starttime="20170823 21:49:16.560"></status>
</kw>
<status endtime="20170823 21:49:16.966" status="PASS" starttime="20170823 21:49:16.560"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:16.967" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:49:16.967" status="PASS" starttime="20170823 21:49:16.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:16.969" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:16.969" status="PASS" starttime="20170823 21:49:16.968"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:16.970" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:16.970" status="PASS" starttime="20170823 21:49:16.970"></status>
</kw>
<status endtime="20170823 21:49:16.970" status="PASS" starttime="20170823 21:49:16.969"></status>
</kw>
<status endtime="20170823 21:49:16.970" status="PASS" starttime="20170823 21:49:16.967"></status>
</kw>
<status endtime="20170823 21:49:16.970" status="PASS" starttime="20170823 21:49:16.967"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:17.632" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:49:17.632" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:17.632" status="PASS" starttime="20170823 21:49:16.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:17.634" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:17.634" status="PASS" starttime="20170823 21:49:17.633"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:17.635" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:17.635" status="PASS" starttime="20170823 21:49:17.635"></status>
</kw>
<status endtime="20170823 21:49:17.635" status="PASS" starttime="20170823 21:49:17.634"></status>
</kw>
<status endtime="20170823 21:49:17.635" status="PASS" starttime="20170823 21:49:17.633"></status>
</kw>
<status endtime="20170823 21:49:17.635" status="PASS" starttime="20170823 21:49:17.632"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:17.636" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:17.636" status="PASS" starttime="20170823 21:49:17.636"></status>
</kw>
<msg timestamp="20170823 21:49:17.636" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:17.636" status="PASS" starttime="20170823 21:49:16.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:17.637" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:17.637" status="PASS" starttime="20170823 21:49:17.636"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:17.637" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:17.637" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:17.637" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:17.637" status="PASS" starttime="20170823 21:49:17.637"></status>
</kw>
<msg timestamp="20170823 21:49:17.638" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:49:17.638" status="PASS" starttime="20170823 21:49:16.558"></status>
</kw>
<msg timestamp="20170823 21:49:17.638" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:49:17.638" status="PASS" starttime="20170823 21:49:16.558"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170823 21:49:17.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 21:49:17.639" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:49:17.639" status="FAIL" starttime="20170823 21:49:17.638"></status>
</kw>
<status endtime="20170823 21:49:17.639" status="FAIL" starttime="20170823 21:49:14.335"></status>
</kw>
<status endtime="20170823 21:49:17.639" status="FAIL" starttime="20170823 21:49:12.842"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:27.644" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:27.645" status="PASS" starttime="20170823 21:49:27.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:27.646" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:27.646" status="PASS" starttime="20170823 21:49:27.645"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:27.647" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:27.647" status="PASS" starttime="20170823 21:49:27.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:27.648" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:27.648" status="PASS" starttime="20170823 21:49:27.647"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:28.026" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:28.026" status="PASS" starttime="20170823 21:49:27.649"></status>
</kw>
<msg timestamp="20170823 21:49:28.027" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:28.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:28.027" status="PASS" starttime="20170823 21:49:27.648"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:28.028" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:28.028" status="PASS" starttime="20170823 21:49:28.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:28.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:28.029" status="PASS" starttime="20170823 21:49:28.028"></status>
</kw>
<status endtime="20170823 21:49:28.029" status="PASS" starttime="20170823 21:49:27.643"></status>
</kw>
<status endtime="20170823 21:49:28.029" status="PASS" starttime="20170823 21:49:27.643"></status>
</kw>
<status endtime="20170823 21:49:28.029" status="PASS" starttime="20170823 21:49:27.642"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:28.030" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:49:28.030" status="PASS" starttime="20170823 21:49:28.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:28.032" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:28.032" status="PASS" starttime="20170823 21:49:28.032"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:28.033" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:28.033" status="PASS" starttime="20170823 21:49:28.033"></status>
</kw>
<status endtime="20170823 21:49:28.033" status="PASS" starttime="20170823 21:49:28.032"></status>
</kw>
<status endtime="20170823 21:49:28.033" status="PASS" starttime="20170823 21:49:28.031"></status>
</kw>
<status endtime="20170823 21:49:28.034" status="PASS" starttime="20170823 21:49:28.030"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:29.448" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:49:29.448" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:29.448" status="PASS" starttime="20170823 21:49:28.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:29.450" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:29.450" status="PASS" starttime="20170823 21:49:29.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:29.451" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:29.451" status="PASS" starttime="20170823 21:49:29.451"></status>
</kw>
<status endtime="20170823 21:49:29.451" status="PASS" starttime="20170823 21:49:29.450"></status>
</kw>
<status endtime="20170823 21:49:29.451" status="PASS" starttime="20170823 21:49:29.449"></status>
</kw>
<status endtime="20170823 21:49:29.451" status="PASS" starttime="20170823 21:49:29.448"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:29.452" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:29.452" status="PASS" starttime="20170823 21:49:29.452"></status>
</kw>
<msg timestamp="20170823 21:49:29.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:29.452" status="PASS" starttime="20170823 21:49:27.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:29.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:29.453" status="PASS" starttime="20170823 21:49:29.453"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:29.454" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:29.454" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:29.454" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:29.454" status="PASS" starttime="20170823 21:49:29.454"></status>
</kw>
<msg timestamp="20170823 21:49:29.455" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170823 21:49:29.455" status="PASS" starttime="20170823 21:49:27.641"></status>
</kw>
<msg timestamp="20170823 21:49:29.455" level="INFO">${power_state} = On</msg>
<status endtime="20170823 21:49:29.455" status="PASS" starttime="20170823 21:49:27.640"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170823 21:49:29.456" status="PASS" starttime="20170823 21:49:29.456"></status>
</kw>
<status endtime="20170823 21:49:29.456" status="PASS" starttime="20170823 21:49:27.640"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:29.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:29.462" status="PASS" starttime="20170823 21:49:29.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:29.462" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:29.463" status="PASS" starttime="20170823 21:49:29.462"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:29.463" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:29.463" status="PASS" starttime="20170823 21:49:29.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:29.464" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:29.464" status="PASS" starttime="20170823 21:49:29.463"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:30.204" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:30.205" status="PASS" starttime="20170823 21:49:29.464"></status>
</kw>
<msg timestamp="20170823 21:49:30.205" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:30.205" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:30.205" status="PASS" starttime="20170823 21:49:29.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:30.205" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:30.205" status="PASS" starttime="20170823 21:49:30.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:30.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:30.206" status="PASS" starttime="20170823 21:49:30.206"></status>
</kw>
<status endtime="20170823 21:49:30.206" status="PASS" starttime="20170823 21:49:29.460"></status>
</kw>
<status endtime="20170823 21:49:30.206" status="PASS" starttime="20170823 21:49:29.460"></status>
</kw>
<status endtime="20170823 21:49:30.206" status="PASS" starttime="20170823 21:49:29.459"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:30.207" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 21:49:30.207" status="PASS" starttime="20170823 21:49:30.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:30.209" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:30.209" status="PASS" starttime="20170823 21:49:30.208"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:30.210" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:30.210" status="PASS" starttime="20170823 21:49:30.210"></status>
</kw>
<status endtime="20170823 21:49:30.210" status="PASS" starttime="20170823 21:49:30.209"></status>
</kw>
<status endtime="20170823 21:49:30.210" status="PASS" starttime="20170823 21:49:30.208"></status>
</kw>
<status endtime="20170823 21:49:30.210" status="PASS" starttime="20170823 21:49:30.207"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:31.061" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 21:49:31.062" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:31.062" status="PASS" starttime="20170823 21:49:30.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:31.064" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:31.064" status="PASS" starttime="20170823 21:49:31.063"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:31.065" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:31.065" status="PASS" starttime="20170823 21:49:31.065"></status>
</kw>
<status endtime="20170823 21:49:31.065" status="PASS" starttime="20170823 21:49:31.064"></status>
</kw>
<status endtime="20170823 21:49:31.065" status="PASS" starttime="20170823 21:49:31.062"></status>
</kw>
<status endtime="20170823 21:49:31.065" status="PASS" starttime="20170823 21:49:31.062"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:31.066" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:31.066" status="PASS" starttime="20170823 21:49:31.066"></status>
</kw>
<msg timestamp="20170823 21:49:31.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:31.066" status="PASS" starttime="20170823 21:49:29.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:31.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:31.067" status="PASS" starttime="20170823 21:49:31.066"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:31.067" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:31.067" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:31.067" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:31.067" status="PASS" starttime="20170823 21:49:31.067"></status>
</kw>
<msg timestamp="20170823 21:49:31.068" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170823 21:49:31.068" status="PASS" starttime="20170823 21:49:29.457"></status>
</kw>
<msg timestamp="20170823 21:49:31.068" level="INFO">${host_state} = Running</msg>
<status endtime="20170823 21:49:31.068" status="PASS" starttime="20170823 21:49:29.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170823 21:49:31.069" status="PASS" starttime="20170823 21:49:31.068"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170823 21:49:31.072" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170823 21:49:31.072" status="PASS" starttime="20170823 21:49:31.071"></status>
</kw>
<status endtime="20170823 21:49:31.072" status="PASS" starttime="20170823 21:49:31.071"></status>
</kw>
<status endtime="20170823 21:49:31.072" status="PASS" starttime="20170823 21:49:31.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:31.076" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:31.076" status="PASS" starttime="20170823 21:49:31.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:31.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:31.077" status="PASS" starttime="20170823 21:49:31.076"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:31.077" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:31.077" status="PASS" starttime="20170823 21:49:31.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:31.078" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:31.078" status="PASS" starttime="20170823 21:49:31.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:31.453" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:31.453" status="PASS" starttime="20170823 21:49:31.079"></status>
</kw>
<msg timestamp="20170823 21:49:31.453" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:31.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:31.453" status="PASS" starttime="20170823 21:49:31.078"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:31.454" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:31.454" status="PASS" starttime="20170823 21:49:31.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:31.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:31.454" status="PASS" starttime="20170823 21:49:31.454"></status>
</kw>
<status endtime="20170823 21:49:31.455" status="PASS" starttime="20170823 21:49:31.075"></status>
</kw>
<status endtime="20170823 21:49:31.455" status="PASS" starttime="20170823 21:49:31.075"></status>
</kw>
<status endtime="20170823 21:49:31.455" status="PASS" starttime="20170823 21:49:31.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:31.455" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:49:31.455" status="PASS" starttime="20170823 21:49:31.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:31.457" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:31.457" status="PASS" starttime="20170823 21:49:31.457"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:31.458" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:31.458" status="PASS" starttime="20170823 21:49:31.458"></status>
</kw>
<status endtime="20170823 21:49:31.459" status="PASS" starttime="20170823 21:49:31.458"></status>
</kw>
<status endtime="20170823 21:49:31.459" status="PASS" starttime="20170823 21:49:31.456"></status>
</kw>
<status endtime="20170823 21:49:31.459" status="PASS" starttime="20170823 21:49:31.456"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:32.348" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:49:32.348" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:32.348" status="PASS" starttime="20170823 21:49:31.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:32.350" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:32.350" status="PASS" starttime="20170823 21:49:32.350"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:32.351" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:32.351" status="PASS" starttime="20170823 21:49:32.351"></status>
</kw>
<status endtime="20170823 21:49:32.351" status="PASS" starttime="20170823 21:49:32.350"></status>
</kw>
<status endtime="20170823 21:49:32.351" status="PASS" starttime="20170823 21:49:32.349"></status>
</kw>
<status endtime="20170823 21:49:32.351" status="PASS" starttime="20170823 21:49:32.349"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:32.352" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:32.352" status="PASS" starttime="20170823 21:49:32.352"></status>
</kw>
<msg timestamp="20170823 21:49:32.352" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:32.352" status="PASS" starttime="20170823 21:49:31.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:32.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:32.353" status="PASS" starttime="20170823 21:49:32.352"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:32.354" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:32.354" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:32.354" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:32.354" status="PASS" starttime="20170823 21:49:32.353"></status>
</kw>
<msg timestamp="20170823 21:49:32.354" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:49:32.354" status="PASS" starttime="20170823 21:49:31.073"></status>
</kw>
<status endtime="20170823 21:49:32.354" status="PASS" starttime="20170823 21:49:31.073"></status>
</kw>
<msg timestamp="20170823 21:49:32.355" level="INFO">${state} = MotherboardInit</msg>
<status endtime="20170823 21:49:32.355" status="PASS" starttime="20170823 21:49:31.072"></status>
</kw>
<msg timestamp="20170823 21:49:32.355" level="INFO">${boot_progress} = MotherboardInit</msg>
<status endtime="20170823 21:49:32.355" status="PASS" starttime="20170823 21:49:31.070"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170823 21:49:32.355" level="FAIL">MotherboardInit != OSStart</msg>
<status endtime="20170823 21:49:32.356" status="FAIL" starttime="20170823 21:49:32.355"></status>
</kw>
<status endtime="20170823 21:49:32.356" status="FAIL" starttime="20170823 21:49:31.070"></status>
</kw>
<msg timestamp="20170823 21:49:32.356" level="INFO">${status} = False</msg>
<status endtime="20170823 21:49:32.356" status="PASS" starttime="20170823 21:49:31.069"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170823 21:49:32.356" status="PASS" starttime="20170823 21:49:32.356"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:32.360" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:32.361" status="PASS" starttime="20170823 21:49:32.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:32.361" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:32.361" status="PASS" starttime="20170823 21:49:32.361"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:32.362" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:32.362" status="PASS" starttime="20170823 21:49:32.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:32.363" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:32.363" status="PASS" starttime="20170823 21:49:32.362"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:32.828" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:32.828" status="PASS" starttime="20170823 21:49:32.363"></status>
</kw>
<msg timestamp="20170823 21:49:32.828" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:32.828" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:32.828" status="PASS" starttime="20170823 21:49:32.363"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:32.828" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:32.829" status="PASS" starttime="20170823 21:49:32.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:32.829" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:32.829" status="PASS" starttime="20170823 21:49:32.829"></status>
</kw>
<status endtime="20170823 21:49:32.829" status="PASS" starttime="20170823 21:49:32.359"></status>
</kw>
<status endtime="20170823 21:49:32.830" status="PASS" starttime="20170823 21:49:32.359"></status>
</kw>
<status endtime="20170823 21:49:32.830" status="PASS" starttime="20170823 21:49:32.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:32.830" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:49:32.830" status="PASS" starttime="20170823 21:49:32.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:32.832" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:32.832" status="PASS" starttime="20170823 21:49:32.832"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:32.833" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:32.833" status="PASS" starttime="20170823 21:49:32.833"></status>
</kw>
<status endtime="20170823 21:49:32.833" status="PASS" starttime="20170823 21:49:32.832"></status>
</kw>
<status endtime="20170823 21:49:32.834" status="PASS" starttime="20170823 21:49:32.831"></status>
</kw>
<status endtime="20170823 21:49:32.834" status="PASS" starttime="20170823 21:49:32.830"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:33.597" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:49:33.597" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:33.597" status="PASS" starttime="20170823 21:49:32.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:33.599" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:33.599" status="PASS" starttime="20170823 21:49:33.598"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:33.600" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:33.600" status="PASS" starttime="20170823 21:49:33.600"></status>
</kw>
<status endtime="20170823 21:49:33.600" status="PASS" starttime="20170823 21:49:33.599"></status>
</kw>
<status endtime="20170823 21:49:33.600" status="PASS" starttime="20170823 21:49:33.598"></status>
</kw>
<status endtime="20170823 21:49:33.601" status="PASS" starttime="20170823 21:49:33.598"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:33.601" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:33.601" status="PASS" starttime="20170823 21:49:33.601"></status>
</kw>
<msg timestamp="20170823 21:49:33.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:33.601" status="PASS" starttime="20170823 21:49:32.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:33.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:33.602" status="PASS" starttime="20170823 21:49:33.601"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:33.602" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:33.602" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:33.603" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:33.603" status="PASS" starttime="20170823 21:49:33.602"></status>
</kw>
<msg timestamp="20170823 21:49:33.603" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:49:33.603" status="PASS" starttime="20170823 21:49:32.357"></status>
</kw>
<msg timestamp="20170823 21:49:33.603" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:49:33.603" status="PASS" starttime="20170823 21:49:32.357"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170823 21:49:33.604" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 21:49:33.604" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:49:33.604" status="FAIL" starttime="20170823 21:49:33.603"></status>
</kw>
<status endtime="20170823 21:49:33.604" status="FAIL" starttime="20170823 21:49:31.069"></status>
</kw>
<status endtime="20170823 21:49:33.604" status="FAIL" starttime="20170823 21:49:27.639"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:43.610" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:43.610" status="PASS" starttime="20170823 21:49:43.609"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:43.611" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:43.611" status="PASS" starttime="20170823 21:49:43.611"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:43.612" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:43.612" status="PASS" starttime="20170823 21:49:43.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:43.612" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:43.612" status="PASS" starttime="20170823 21:49:43.612"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:44.113" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:44.113" status="PASS" starttime="20170823 21:49:43.613"></status>
</kw>
<msg timestamp="20170823 21:49:44.113" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:44.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:44.113" status="PASS" starttime="20170823 21:49:43.613"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:44.114" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:44.114" status="PASS" starttime="20170823 21:49:44.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:44.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:44.115" status="PASS" starttime="20170823 21:49:44.114"></status>
</kw>
<status endtime="20170823 21:49:44.115" status="PASS" starttime="20170823 21:49:43.609"></status>
</kw>
<status endtime="20170823 21:49:44.115" status="PASS" starttime="20170823 21:49:43.609"></status>
</kw>
<status endtime="20170823 21:49:44.115" status="PASS" starttime="20170823 21:49:43.608"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:44.115" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:49:44.115" status="PASS" starttime="20170823 21:49:44.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:44.118" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:44.118" status="PASS" starttime="20170823 21:49:44.117"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:44.121" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:44.121" status="PASS" starttime="20170823 21:49:44.118"></status>
</kw>
<status endtime="20170823 21:49:44.122" status="PASS" starttime="20170823 21:49:44.118"></status>
</kw>
<status endtime="20170823 21:49:44.122" status="PASS" starttime="20170823 21:49:44.116"></status>
</kw>
<status endtime="20170823 21:49:44.122" status="PASS" starttime="20170823 21:49:44.116"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:44.980" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:49:44.981" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:44.981" status="PASS" starttime="20170823 21:49:44.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:44.983" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:44.983" status="PASS" starttime="20170823 21:49:44.982"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:44.984" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:44.984" status="PASS" starttime="20170823 21:49:44.984"></status>
</kw>
<status endtime="20170823 21:49:44.984" status="PASS" starttime="20170823 21:49:44.983"></status>
</kw>
<status endtime="20170823 21:49:44.984" status="PASS" starttime="20170823 21:49:44.982"></status>
</kw>
<status endtime="20170823 21:49:44.984" status="PASS" starttime="20170823 21:49:44.981"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:44.985" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:44.985" status="PASS" starttime="20170823 21:49:44.985"></status>
</kw>
<msg timestamp="20170823 21:49:44.985" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:44.985" status="PASS" starttime="20170823 21:49:43.607"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:44.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:44.986" status="PASS" starttime="20170823 21:49:44.985"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:44.986" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:44.986" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:44.986" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:44.986" status="PASS" starttime="20170823 21:49:44.986"></status>
</kw>
<msg timestamp="20170823 21:49:44.987" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170823 21:49:44.987" status="PASS" starttime="20170823 21:49:43.606"></status>
</kw>
<msg timestamp="20170823 21:49:44.987" level="INFO">${power_state} = On</msg>
<status endtime="20170823 21:49:44.987" status="PASS" starttime="20170823 21:49:43.606"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170823 21:49:44.988" status="PASS" starttime="20170823 21:49:44.987"></status>
</kw>
<status endtime="20170823 21:49:44.988" status="PASS" starttime="20170823 21:49:43.605"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:44.991" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:44.992" status="PASS" starttime="20170823 21:49:44.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:44.992" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:44.992" status="PASS" starttime="20170823 21:49:44.992"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:44.993" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:44.993" status="PASS" starttime="20170823 21:49:44.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:44.993" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:44.993" status="PASS" starttime="20170823 21:49:44.993"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:45.499" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:45.499" status="PASS" starttime="20170823 21:49:44.994"></status>
</kw>
<msg timestamp="20170823 21:49:45.499" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:45.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:45.499" status="PASS" starttime="20170823 21:49:44.994"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:45.500" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:45.500" status="PASS" starttime="20170823 21:49:45.500"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:45.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:45.501" status="PASS" starttime="20170823 21:49:45.500"></status>
</kw>
<status endtime="20170823 21:49:45.501" status="PASS" starttime="20170823 21:49:44.990"></status>
</kw>
<status endtime="20170823 21:49:45.501" status="PASS" starttime="20170823 21:49:44.990"></status>
</kw>
<status endtime="20170823 21:49:45.501" status="PASS" starttime="20170823 21:49:44.989"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:45.502" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 21:49:45.502" status="PASS" starttime="20170823 21:49:45.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:45.504" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:45.504" status="PASS" starttime="20170823 21:49:45.503"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:45.505" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:45.505" status="PASS" starttime="20170823 21:49:45.505"></status>
</kw>
<status endtime="20170823 21:49:45.505" status="PASS" starttime="20170823 21:49:45.504"></status>
</kw>
<status endtime="20170823 21:49:45.505" status="PASS" starttime="20170823 21:49:45.503"></status>
</kw>
<status endtime="20170823 21:49:45.505" status="PASS" starttime="20170823 21:49:45.502"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:46.012" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 21:49:46.012" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:46.012" status="PASS" starttime="20170823 21:49:45.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:46.014" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:46.014" status="PASS" starttime="20170823 21:49:46.013"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:46.014" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:46.015" status="PASS" starttime="20170823 21:49:46.014"></status>
</kw>
<status endtime="20170823 21:49:46.015" status="PASS" starttime="20170823 21:49:46.014"></status>
</kw>
<status endtime="20170823 21:49:46.015" status="PASS" starttime="20170823 21:49:46.013"></status>
</kw>
<status endtime="20170823 21:49:46.015" status="PASS" starttime="20170823 21:49:46.012"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:46.015" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:46.015" status="PASS" starttime="20170823 21:49:46.015"></status>
</kw>
<msg timestamp="20170823 21:49:46.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:46.016" status="PASS" starttime="20170823 21:49:44.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:46.016" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:46.016" status="PASS" starttime="20170823 21:49:46.016"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:46.017" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:46.017" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:46.017" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:46.017" status="PASS" starttime="20170823 21:49:46.016"></status>
</kw>
<msg timestamp="20170823 21:49:46.017" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170823 21:49:46.017" status="PASS" starttime="20170823 21:49:44.988"></status>
</kw>
<msg timestamp="20170823 21:49:46.018" level="INFO">${host_state} = Running</msg>
<status endtime="20170823 21:49:46.018" status="PASS" starttime="20170823 21:49:44.988"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170823 21:49:46.018" status="PASS" starttime="20170823 21:49:46.018"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170823 21:49:46.021" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170823 21:49:46.021" status="PASS" starttime="20170823 21:49:46.021"></status>
</kw>
<status endtime="20170823 21:49:46.021" status="PASS" starttime="20170823 21:49:46.020"></status>
</kw>
<status endtime="20170823 21:49:46.022" status="PASS" starttime="20170823 21:49:46.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:46.026" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:46.026" status="PASS" starttime="20170823 21:49:46.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:46.027" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:46.027" status="PASS" starttime="20170823 21:49:46.026"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:46.027" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:46.027" status="PASS" starttime="20170823 21:49:46.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:46.028" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:46.028" status="PASS" starttime="20170823 21:49:46.027"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:46.447" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:46.447" status="PASS" starttime="20170823 21:49:46.029"></status>
</kw>
<msg timestamp="20170823 21:49:46.448" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:46.448" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:46.448" status="PASS" starttime="20170823 21:49:46.028"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:46.448" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:46.448" status="PASS" starttime="20170823 21:49:46.448"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:46.449" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:46.449" status="PASS" starttime="20170823 21:49:46.449"></status>
</kw>
<status endtime="20170823 21:49:46.449" status="PASS" starttime="20170823 21:49:46.025"></status>
</kw>
<status endtime="20170823 21:49:46.449" status="PASS" starttime="20170823 21:49:46.024"></status>
</kw>
<status endtime="20170823 21:49:46.449" status="PASS" starttime="20170823 21:49:46.024"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:46.450" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:49:46.450" status="PASS" starttime="20170823 21:49:46.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:46.453" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:46.453" status="PASS" starttime="20170823 21:49:46.452"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:46.454" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:46.454" status="PASS" starttime="20170823 21:49:46.454"></status>
</kw>
<status endtime="20170823 21:49:46.455" status="PASS" starttime="20170823 21:49:46.454"></status>
</kw>
<status endtime="20170823 21:49:46.455" status="PASS" starttime="20170823 21:49:46.451"></status>
</kw>
<status endtime="20170823 21:49:46.455" status="PASS" starttime="20170823 21:49:46.451"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:47.165" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:49:47.165" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:47.165" status="PASS" starttime="20170823 21:49:46.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:47.167" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:47.167" status="PASS" starttime="20170823 21:49:47.166"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:47.167" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:47.168" status="PASS" starttime="20170823 21:49:47.167"></status>
</kw>
<status endtime="20170823 21:49:47.168" status="PASS" starttime="20170823 21:49:47.167"></status>
</kw>
<status endtime="20170823 21:49:47.168" status="PASS" starttime="20170823 21:49:47.166"></status>
</kw>
<status endtime="20170823 21:49:47.168" status="PASS" starttime="20170823 21:49:47.165"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:47.168" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:47.168" status="PASS" starttime="20170823 21:49:47.168"></status>
</kw>
<msg timestamp="20170823 21:49:47.169" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:47.169" status="PASS" starttime="20170823 21:49:46.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:47.169" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:47.169" status="PASS" starttime="20170823 21:49:47.169"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:47.170" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:47.170" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:47.170" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:47.170" status="PASS" starttime="20170823 21:49:47.169"></status>
</kw>
<msg timestamp="20170823 21:49:47.170" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:49:47.170" status="PASS" starttime="20170823 21:49:46.023"></status>
</kw>
<status endtime="20170823 21:49:47.171" status="PASS" starttime="20170823 21:49:46.022"></status>
</kw>
<msg timestamp="20170823 21:49:47.171" level="INFO">${state} = MotherboardInit</msg>
<status endtime="20170823 21:49:47.171" status="PASS" starttime="20170823 21:49:46.022"></status>
</kw>
<msg timestamp="20170823 21:49:47.171" level="INFO">${boot_progress} = MotherboardInit</msg>
<status endtime="20170823 21:49:47.171" status="PASS" starttime="20170823 21:49:46.019"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170823 21:49:47.172" level="FAIL">MotherboardInit != OSStart</msg>
<status endtime="20170823 21:49:47.172" status="FAIL" starttime="20170823 21:49:47.171"></status>
</kw>
<status endtime="20170823 21:49:47.172" status="FAIL" starttime="20170823 21:49:46.019"></status>
</kw>
<msg timestamp="20170823 21:49:47.172" level="INFO">${status} = False</msg>
<status endtime="20170823 21:49:47.172" status="PASS" starttime="20170823 21:49:46.019"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170823 21:49:47.172" status="PASS" starttime="20170823 21:49:47.172"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:47.176" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:47.177" status="PASS" starttime="20170823 21:49:47.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:47.177" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:47.177" status="PASS" starttime="20170823 21:49:47.177"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:47.178" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:47.178" status="PASS" starttime="20170823 21:49:47.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:47.179" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:47.179" status="PASS" starttime="20170823 21:49:47.178"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:47.544" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:47.544" status="PASS" starttime="20170823 21:49:47.179"></status>
</kw>
<msg timestamp="20170823 21:49:47.544" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:47.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:47.544" status="PASS" starttime="20170823 21:49:47.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:47.545" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:47.545" status="PASS" starttime="20170823 21:49:47.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:47.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:47.546" status="PASS" starttime="20170823 21:49:47.545"></status>
</kw>
<status endtime="20170823 21:49:47.546" status="PASS" starttime="20170823 21:49:47.175"></status>
</kw>
<status endtime="20170823 21:49:47.546" status="PASS" starttime="20170823 21:49:47.175"></status>
</kw>
<status endtime="20170823 21:49:47.546" status="PASS" starttime="20170823 21:49:47.174"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:47.546" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:49:47.547" status="PASS" starttime="20170823 21:49:47.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:47.549" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:47.549" status="PASS" starttime="20170823 21:49:47.548"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:47.550" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:49:47.550" status="PASS" starttime="20170823 21:49:47.549"></status>
</kw>
<status endtime="20170823 21:49:47.550" status="PASS" starttime="20170823 21:49:47.549"></status>
</kw>
<status endtime="20170823 21:49:47.550" status="PASS" starttime="20170823 21:49:47.547"></status>
</kw>
<status endtime="20170823 21:49:47.550" status="PASS" starttime="20170823 21:49:47.547"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:48.565" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:49:48.565" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:48.565" status="PASS" starttime="20170823 21:49:47.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:48.567" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:48.567" status="PASS" starttime="20170823 21:49:48.566"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:48.568" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:48.568" status="PASS" starttime="20170823 21:49:48.568"></status>
</kw>
<status endtime="20170823 21:49:48.568" status="PASS" starttime="20170823 21:49:48.567"></status>
</kw>
<status endtime="20170823 21:49:48.568" status="PASS" starttime="20170823 21:49:48.566"></status>
</kw>
<status endtime="20170823 21:49:48.568" status="PASS" starttime="20170823 21:49:48.566"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:48.569" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:48.569" status="PASS" starttime="20170823 21:49:48.569"></status>
</kw>
<msg timestamp="20170823 21:49:48.569" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:48.569" status="PASS" starttime="20170823 21:49:47.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:48.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:48.570" status="PASS" starttime="20170823 21:49:48.569"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:48.570" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:48.570" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:48.570" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:48.571" status="PASS" starttime="20170823 21:49:48.570"></status>
</kw>
<msg timestamp="20170823 21:49:48.571" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:49:48.571" status="PASS" starttime="20170823 21:49:47.173"></status>
</kw>
<msg timestamp="20170823 21:49:48.571" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:49:48.571" status="PASS" starttime="20170823 21:49:47.173"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170823 21:49:48.572" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 21:49:48.572" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:49:48.572" status="FAIL" starttime="20170823 21:49:48.571"></status>
</kw>
<status endtime="20170823 21:49:48.572" status="FAIL" starttime="20170823 21:49:46.018"></status>
</kw>
<status endtime="20170823 21:49:48.572" status="FAIL" starttime="20170823 21:49:43.605"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:58.578" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:58.578" status="PASS" starttime="20170823 21:49:58.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:58.579" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:58.579" status="PASS" starttime="20170823 21:49:58.578"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:58.579" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:58.579" status="PASS" starttime="20170823 21:49:58.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:58.580" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:58.580" status="PASS" starttime="20170823 21:49:58.580"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:58.981" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:58.981" status="PASS" starttime="20170823 21:49:58.581"></status>
</kw>
<msg timestamp="20170823 21:49:58.982" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:58.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:58.982" status="PASS" starttime="20170823 21:49:58.580"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:58.982" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:58.983" status="PASS" starttime="20170823 21:49:58.982"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:58.983" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:58.983" status="PASS" starttime="20170823 21:49:58.983"></status>
</kw>
<status endtime="20170823 21:49:58.983" status="PASS" starttime="20170823 21:49:58.577"></status>
</kw>
<status endtime="20170823 21:49:58.983" status="PASS" starttime="20170823 21:49:58.576"></status>
</kw>
<status endtime="20170823 21:49:58.984" status="PASS" starttime="20170823 21:49:58.576"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:58.984" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:49:58.984" status="PASS" starttime="20170823 21:49:58.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:58.986" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:58.986" status="PASS" starttime="20170823 21:49:58.986"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:58.988" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:58.988" status="PASS" starttime="20170823 21:49:58.987"></status>
</kw>
<status endtime="20170823 21:49:58.988" status="PASS" starttime="20170823 21:49:58.987"></status>
</kw>
<status endtime="20170823 21:49:58.988" status="PASS" starttime="20170823 21:49:58.985"></status>
</kw>
<status endtime="20170823 21:49:58.988" status="PASS" starttime="20170823 21:49:58.985"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:49:59.256" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:49:59.256" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:59.256" status="PASS" starttime="20170823 21:49:58.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:59.258" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:59.258" status="PASS" starttime="20170823 21:49:59.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:59.259" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:49:59.259" status="PASS" starttime="20170823 21:49:59.259"></status>
</kw>
<status endtime="20170823 21:49:59.259" status="PASS" starttime="20170823 21:49:59.258"></status>
</kw>
<status endtime="20170823 21:49:59.259" status="PASS" starttime="20170823 21:49:59.257"></status>
</kw>
<status endtime="20170823 21:49:59.259" status="PASS" starttime="20170823 21:49:59.256"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:49:59.260" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:49:59.260" status="PASS" starttime="20170823 21:49:59.260"></status>
</kw>
<msg timestamp="20170823 21:49:59.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:59.260" status="PASS" starttime="20170823 21:49:58.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:59.261" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:59.261" status="PASS" starttime="20170823 21:49:59.260"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:49:59.261" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:49:59.261" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:49:59.262" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170823 21:49:59.262" status="PASS" starttime="20170823 21:49:59.261"></status>
</kw>
<msg timestamp="20170823 21:49:59.262" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170823 21:49:59.262" status="PASS" starttime="20170823 21:49:58.574"></status>
</kw>
<msg timestamp="20170823 21:49:59.262" level="INFO">${power_state} = On</msg>
<status endtime="20170823 21:49:59.262" status="PASS" starttime="20170823 21:49:58.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170823 21:49:59.263" status="PASS" starttime="20170823 21:49:59.263"></status>
</kw>
<status endtime="20170823 21:49:59.263" status="PASS" starttime="20170823 21:49:58.573"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:49:59.266" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:49:59.267" status="PASS" starttime="20170823 21:49:59.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:49:59.268" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:49:59.268" status="PASS" starttime="20170823 21:49:59.267"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:49:59.268" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:49:59.268" status="PASS" starttime="20170823 21:49:59.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:49:59.269" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:49:59.269" status="PASS" starttime="20170823 21:49:59.268"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:49:59.756" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:49:59.756" status="PASS" starttime="20170823 21:49:59.270"></status>
</kw>
<msg timestamp="20170823 21:49:59.757" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:49:59.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:49:59.757" status="PASS" starttime="20170823 21:49:59.269"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:49:59.757" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:59.758" status="PASS" starttime="20170823 21:49:59.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:49:59.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:49:59.758" status="PASS" starttime="20170823 21:49:59.758"></status>
</kw>
<status endtime="20170823 21:49:59.758" status="PASS" starttime="20170823 21:49:59.266"></status>
</kw>
<status endtime="20170823 21:49:59.758" status="PASS" starttime="20170823 21:49:59.265"></status>
</kw>
<status endtime="20170823 21:49:59.759" status="PASS" starttime="20170823 21:49:59.265"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:49:59.759" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 21:49:59.759" status="PASS" starttime="20170823 21:49:59.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:49:59.761" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:59.761" status="PASS" starttime="20170823 21:49:59.761"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:49:59.762" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:49:59.762" status="PASS" starttime="20170823 21:49:59.762"></status>
</kw>
<status endtime="20170823 21:49:59.762" status="PASS" starttime="20170823 21:49:59.762"></status>
</kw>
<status endtime="20170823 21:49:59.763" status="PASS" starttime="20170823 21:49:59.760"></status>
</kw>
<status endtime="20170823 21:49:59.763" status="PASS" starttime="20170823 21:49:59.759"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:00.733" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 21:50:00.733" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:00.733" status="PASS" starttime="20170823 21:49:59.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:00.735" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:00.735" status="PASS" starttime="20170823 21:50:00.735"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:00.736" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:00.736" status="PASS" starttime="20170823 21:50:00.736"></status>
</kw>
<status endtime="20170823 21:50:00.736" status="PASS" starttime="20170823 21:50:00.735"></status>
</kw>
<status endtime="20170823 21:50:00.736" status="PASS" starttime="20170823 21:50:00.734"></status>
</kw>
<status endtime="20170823 21:50:00.737" status="PASS" starttime="20170823 21:50:00.734"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:00.737" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:00.737" status="PASS" starttime="20170823 21:50:00.737"></status>
</kw>
<msg timestamp="20170823 21:50:00.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:00.737" status="PASS" starttime="20170823 21:49:59.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:00.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:00.738" status="PASS" starttime="20170823 21:50:00.737"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:00.738" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:00.738" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:00.739" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:00.739" status="PASS" starttime="20170823 21:50:00.738"></status>
</kw>
<msg timestamp="20170823 21:50:00.739" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170823 21:50:00.739" status="PASS" starttime="20170823 21:49:59.264"></status>
</kw>
<msg timestamp="20170823 21:50:00.739" level="INFO">${host_state} = Running</msg>
<status endtime="20170823 21:50:00.739" status="PASS" starttime="20170823 21:49:59.263"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170823 21:50:00.740" status="PASS" starttime="20170823 21:50:00.739"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170823 21:50:00.742" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170823 21:50:00.743" status="PASS" starttime="20170823 21:50:00.742"></status>
</kw>
<status endtime="20170823 21:50:00.743" status="PASS" starttime="20170823 21:50:00.742"></status>
</kw>
<status endtime="20170823 21:50:00.743" status="PASS" starttime="20170823 21:50:00.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:00.747" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:00.748" status="PASS" starttime="20170823 21:50:00.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:00.748" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:00.748" status="PASS" starttime="20170823 21:50:00.748"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:00.749" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:00.749" status="PASS" starttime="20170823 21:50:00.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:00.750" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:00.750" status="PASS" starttime="20170823 21:50:00.749"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:01.070" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:01.071" status="PASS" starttime="20170823 21:50:00.750"></status>
</kw>
<msg timestamp="20170823 21:50:01.071" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:01.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:01.071" status="PASS" starttime="20170823 21:50:00.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:01.071" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:01.072" status="PASS" starttime="20170823 21:50:01.071"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:01.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:01.072" status="PASS" starttime="20170823 21:50:01.072"></status>
</kw>
<status endtime="20170823 21:50:01.072" status="PASS" starttime="20170823 21:50:00.746"></status>
</kw>
<status endtime="20170823 21:50:01.072" status="PASS" starttime="20170823 21:50:00.746"></status>
</kw>
<status endtime="20170823 21:50:01.073" status="PASS" starttime="20170823 21:50:00.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:01.073" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:50:01.073" status="PASS" starttime="20170823 21:50:01.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:01.077" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:01.077" status="PASS" starttime="20170823 21:50:01.075"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:01.078" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:01.078" status="PASS" starttime="20170823 21:50:01.078"></status>
</kw>
<status endtime="20170823 21:50:01.078" status="PASS" starttime="20170823 21:50:01.077"></status>
</kw>
<status endtime="20170823 21:50:01.078" status="PASS" starttime="20170823 21:50:01.074"></status>
</kw>
<status endtime="20170823 21:50:01.078" status="PASS" starttime="20170823 21:50:01.074"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:01.652" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:50:01.652" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:01.652" status="PASS" starttime="20170823 21:50:01.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:01.654" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:01.654" status="PASS" starttime="20170823 21:50:01.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:01.655" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:01.655" status="PASS" starttime="20170823 21:50:01.655"></status>
</kw>
<status endtime="20170823 21:50:01.655" status="PASS" starttime="20170823 21:50:01.654"></status>
</kw>
<status endtime="20170823 21:50:01.656" status="PASS" starttime="20170823 21:50:01.653"></status>
</kw>
<status endtime="20170823 21:50:01.656" status="PASS" starttime="20170823 21:50:01.652"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:01.656" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:01.656" status="PASS" starttime="20170823 21:50:01.656"></status>
</kw>
<msg timestamp="20170823 21:50:01.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:01.656" status="PASS" starttime="20170823 21:50:00.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:01.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:01.657" status="PASS" starttime="20170823 21:50:01.657"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:01.658" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:01.658" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:01.658" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:01.658" status="PASS" starttime="20170823 21:50:01.657"></status>
</kw>
<msg timestamp="20170823 21:50:01.658" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:01.658" status="PASS" starttime="20170823 21:50:00.744"></status>
</kw>
<status endtime="20170823 21:50:01.658" status="PASS" starttime="20170823 21:50:00.743"></status>
</kw>
<msg timestamp="20170823 21:50:01.658" level="INFO">${state} = MotherboardInit</msg>
<status endtime="20170823 21:50:01.658" status="PASS" starttime="20170823 21:50:00.743"></status>
</kw>
<msg timestamp="20170823 21:50:01.659" level="INFO">${boot_progress} = MotherboardInit</msg>
<status endtime="20170823 21:50:01.659" status="PASS" starttime="20170823 21:50:00.741"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170823 21:50:01.659" level="FAIL">MotherboardInit != OSStart</msg>
<status endtime="20170823 21:50:01.659" status="FAIL" starttime="20170823 21:50:01.659"></status>
</kw>
<status endtime="20170823 21:50:01.660" status="FAIL" starttime="20170823 21:50:00.741"></status>
</kw>
<msg timestamp="20170823 21:50:01.660" level="INFO">${status} = False</msg>
<status endtime="20170823 21:50:01.660" status="PASS" starttime="20170823 21:50:00.740"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170823 21:50:01.660" status="PASS" starttime="20170823 21:50:01.660"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:01.664" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:01.664" status="PASS" starttime="20170823 21:50:01.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:01.665" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:01.665" status="PASS" starttime="20170823 21:50:01.665"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:01.665" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:01.665" status="PASS" starttime="20170823 21:50:01.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:01.666" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:01.666" status="PASS" starttime="20170823 21:50:01.666"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:02.057" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:02.057" status="PASS" starttime="20170823 21:50:01.667"></status>
</kw>
<msg timestamp="20170823 21:50:02.058" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:02.058" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:02.058" status="PASS" starttime="20170823 21:50:01.666"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:02.058" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:02.059" status="PASS" starttime="20170823 21:50:02.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:02.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:02.059" status="PASS" starttime="20170823 21:50:02.059"></status>
</kw>
<status endtime="20170823 21:50:02.059" status="PASS" starttime="20170823 21:50:01.663"></status>
</kw>
<status endtime="20170823 21:50:02.059" status="PASS" starttime="20170823 21:50:01.663"></status>
</kw>
<status endtime="20170823 21:50:02.060" status="PASS" starttime="20170823 21:50:01.662"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:02.060" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:50:02.060" status="PASS" starttime="20170823 21:50:02.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:02.062" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:02.062" status="PASS" starttime="20170823 21:50:02.062"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:02.063" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:02.063" status="PASS" starttime="20170823 21:50:02.063"></status>
</kw>
<status endtime="20170823 21:50:02.063" status="PASS" starttime="20170823 21:50:02.062"></status>
</kw>
<status endtime="20170823 21:50:02.064" status="PASS" starttime="20170823 21:50:02.061"></status>
</kw>
<status endtime="20170823 21:50:02.064" status="PASS" starttime="20170823 21:50:02.061"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:02.806" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:50:02.806" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:02.806" status="PASS" starttime="20170823 21:50:02.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:02.808" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:02.808" status="PASS" starttime="20170823 21:50:02.807"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:02.808" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:02.809" status="PASS" starttime="20170823 21:50:02.808"></status>
</kw>
<status endtime="20170823 21:50:02.809" status="PASS" starttime="20170823 21:50:02.808"></status>
</kw>
<status endtime="20170823 21:50:02.809" status="PASS" starttime="20170823 21:50:02.807"></status>
</kw>
<status endtime="20170823 21:50:02.809" status="PASS" starttime="20170823 21:50:02.806"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:02.809" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:02.809" status="PASS" starttime="20170823 21:50:02.809"></status>
</kw>
<msg timestamp="20170823 21:50:02.810" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:02.810" status="PASS" starttime="20170823 21:50:01.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:02.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:02.810" status="PASS" starttime="20170823 21:50:02.810"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:02.811" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:02.811" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:02.811" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:02.811" status="PASS" starttime="20170823 21:50:02.811"></status>
</kw>
<msg timestamp="20170823 21:50:02.811" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:02.812" status="PASS" starttime="20170823 21:50:01.661"></status>
</kw>
<msg timestamp="20170823 21:50:02.812" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:02.812" status="PASS" starttime="20170823 21:50:01.660"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170823 21:50:02.812" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 21:50:02.813" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:02.813" status="FAIL" starttime="20170823 21:50:02.812"></status>
</kw>
<status endtime="20170823 21:50:02.813" status="FAIL" starttime="20170823 21:50:00.740"></status>
</kw>
<status endtime="20170823 21:50:02.813" status="FAIL" starttime="20170823 21:49:58.573"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:12.819" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:12.819" status="PASS" starttime="20170823 21:50:12.818"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:12.820" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:12.820" status="PASS" starttime="20170823 21:50:12.819"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:12.820" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:12.820" status="PASS" starttime="20170823 21:50:12.820"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:12.821" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:12.821" status="PASS" starttime="20170823 21:50:12.820"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:13.224" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:13.224" status="PASS" starttime="20170823 21:50:12.822"></status>
</kw>
<msg timestamp="20170823 21:50:13.224" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:13.224" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:13.224" status="PASS" starttime="20170823 21:50:12.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:13.225" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:13.225" status="PASS" starttime="20170823 21:50:13.225"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:13.226" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:13.226" status="PASS" starttime="20170823 21:50:13.225"></status>
</kw>
<status endtime="20170823 21:50:13.226" status="PASS" starttime="20170823 21:50:12.817"></status>
</kw>
<status endtime="20170823 21:50:13.226" status="PASS" starttime="20170823 21:50:12.817"></status>
</kw>
<status endtime="20170823 21:50:13.226" status="PASS" starttime="20170823 21:50:12.816"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:13.227" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:50:13.227" status="PASS" starttime="20170823 21:50:13.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:13.229" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:13.229" status="PASS" starttime="20170823 21:50:13.228"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:13.230" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:13.230" status="PASS" starttime="20170823 21:50:13.229"></status>
</kw>
<status endtime="20170823 21:50:13.230" status="PASS" starttime="20170823 21:50:13.229"></status>
</kw>
<status endtime="20170823 21:50:13.230" status="PASS" starttime="20170823 21:50:13.227"></status>
</kw>
<status endtime="20170823 21:50:13.230" status="PASS" starttime="20170823 21:50:13.227"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:13.902" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:50:13.903" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:13.903" status="PASS" starttime="20170823 21:50:13.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:13.905" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:13.905" status="PASS" starttime="20170823 21:50:13.904"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:13.906" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:13.906" status="PASS" starttime="20170823 21:50:13.905"></status>
</kw>
<status endtime="20170823 21:50:13.906" status="PASS" starttime="20170823 21:50:13.905"></status>
</kw>
<status endtime="20170823 21:50:13.906" status="PASS" starttime="20170823 21:50:13.904"></status>
</kw>
<status endtime="20170823 21:50:13.906" status="PASS" starttime="20170823 21:50:13.903"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:13.907" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:13.907" status="PASS" starttime="20170823 21:50:13.907"></status>
</kw>
<msg timestamp="20170823 21:50:13.907" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:13.907" status="PASS" starttime="20170823 21:50:12.815"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:13.908" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:13.908" status="PASS" starttime="20170823 21:50:13.907"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:13.908" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:13.908" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:13.908" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:13.908" status="PASS" starttime="20170823 21:50:13.908"></status>
</kw>
<msg timestamp="20170823 21:50:13.909" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170823 21:50:13.909" status="PASS" starttime="20170823 21:50:12.815"></status>
</kw>
<msg timestamp="20170823 21:50:13.909" level="INFO">${power_state} = On</msg>
<status endtime="20170823 21:50:13.909" status="PASS" starttime="20170823 21:50:12.814"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170823 21:50:13.910" status="PASS" starttime="20170823 21:50:13.909"></status>
</kw>
<status endtime="20170823 21:50:13.910" status="PASS" starttime="20170823 21:50:12.814"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:13.913" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:13.914" status="PASS" starttime="20170823 21:50:13.913"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:13.914" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:13.914" status="PASS" starttime="20170823 21:50:13.914"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:13.915" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:13.915" status="PASS" starttime="20170823 21:50:13.915"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:13.916" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:13.916" status="PASS" starttime="20170823 21:50:13.915"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:14.265" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:14.265" status="PASS" starttime="20170823 21:50:13.917"></status>
</kw>
<msg timestamp="20170823 21:50:14.266" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:14.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:14.266" status="PASS" starttime="20170823 21:50:13.916"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:14.266" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:14.267" status="PASS" starttime="20170823 21:50:14.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:14.267" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:14.267" status="PASS" starttime="20170823 21:50:14.267"></status>
</kw>
<status endtime="20170823 21:50:14.267" status="PASS" starttime="20170823 21:50:13.913"></status>
</kw>
<status endtime="20170823 21:50:14.267" status="PASS" starttime="20170823 21:50:13.912"></status>
</kw>
<status endtime="20170823 21:50:14.268" status="PASS" starttime="20170823 21:50:13.912"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:14.268" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 21:50:14.268" status="PASS" starttime="20170823 21:50:14.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:14.274" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:14.274" status="PASS" starttime="20170823 21:50:14.270"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:14.275" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:14.275" status="PASS" starttime="20170823 21:50:14.275"></status>
</kw>
<status endtime="20170823 21:50:14.275" status="PASS" starttime="20170823 21:50:14.274"></status>
</kw>
<status endtime="20170823 21:50:14.275" status="PASS" starttime="20170823 21:50:14.269"></status>
</kw>
<status endtime="20170823 21:50:14.275" status="PASS" starttime="20170823 21:50:14.269"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:15.185" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 21:50:15.186" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:15.186" status="PASS" starttime="20170823 21:50:14.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:15.187" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:15.188" status="PASS" starttime="20170823 21:50:15.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:15.188" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:15.189" status="PASS" starttime="20170823 21:50:15.188"></status>
</kw>
<status endtime="20170823 21:50:15.189" status="PASS" starttime="20170823 21:50:15.188"></status>
</kw>
<status endtime="20170823 21:50:15.189" status="PASS" starttime="20170823 21:50:15.186"></status>
</kw>
<status endtime="20170823 21:50:15.189" status="PASS" starttime="20170823 21:50:15.186"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:15.189" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:15.189" status="PASS" starttime="20170823 21:50:15.189"></status>
</kw>
<msg timestamp="20170823 21:50:15.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:15.190" status="PASS" starttime="20170823 21:50:13.911"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:15.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:15.190" status="PASS" starttime="20170823 21:50:15.190"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:15.191" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:15.191" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:15.191" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:15.191" status="PASS" starttime="20170823 21:50:15.191"></status>
</kw>
<msg timestamp="20170823 21:50:15.192" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170823 21:50:15.192" status="PASS" starttime="20170823 21:50:13.910"></status>
</kw>
<msg timestamp="20170823 21:50:15.192" level="INFO">${host_state} = Running</msg>
<status endtime="20170823 21:50:15.192" status="PASS" starttime="20170823 21:50:13.910"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170823 21:50:15.192" status="PASS" starttime="20170823 21:50:15.192"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170823 21:50:15.195" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170823 21:50:15.195" status="PASS" starttime="20170823 21:50:15.195"></status>
</kw>
<status endtime="20170823 21:50:15.195" status="PASS" starttime="20170823 21:50:15.194"></status>
</kw>
<status endtime="20170823 21:50:15.195" status="PASS" starttime="20170823 21:50:15.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:15.200" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:15.200" status="PASS" starttime="20170823 21:50:15.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:15.201" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:15.201" status="PASS" starttime="20170823 21:50:15.201"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:15.201" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:15.202" status="PASS" starttime="20170823 21:50:15.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:15.202" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:15.202" status="PASS" starttime="20170823 21:50:15.202"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:15.558" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:15.558" status="PASS" starttime="20170823 21:50:15.203"></status>
</kw>
<msg timestamp="20170823 21:50:15.558" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:15.558" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:15.558" status="PASS" starttime="20170823 21:50:15.202"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:15.559" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:15.559" status="PASS" starttime="20170823 21:50:15.558"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:15.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:15.559" status="PASS" starttime="20170823 21:50:15.559"></status>
</kw>
<status endtime="20170823 21:50:15.560" status="PASS" starttime="20170823 21:50:15.199"></status>
</kw>
<status endtime="20170823 21:50:15.560" status="PASS" starttime="20170823 21:50:15.198"></status>
</kw>
<status endtime="20170823 21:50:15.560" status="PASS" starttime="20170823 21:50:15.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:15.560" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:50:15.560" status="PASS" starttime="20170823 21:50:15.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:15.562" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:15.563" status="PASS" starttime="20170823 21:50:15.562"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:15.563" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:15.564" status="PASS" starttime="20170823 21:50:15.563"></status>
</kw>
<status endtime="20170823 21:50:15.564" status="PASS" starttime="20170823 21:50:15.563"></status>
</kw>
<status endtime="20170823 21:50:15.564" status="PASS" starttime="20170823 21:50:15.561"></status>
</kw>
<status endtime="20170823 21:50:15.564" status="PASS" starttime="20170823 21:50:15.561"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:16.315" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:50:16.315" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:16.315" status="PASS" starttime="20170823 21:50:15.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:16.317" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:16.317" status="PASS" starttime="20170823 21:50:16.316"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:16.318" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:16.318" status="PASS" starttime="20170823 21:50:16.318"></status>
</kw>
<status endtime="20170823 21:50:16.318" status="PASS" starttime="20170823 21:50:16.317"></status>
</kw>
<status endtime="20170823 21:50:16.319" status="PASS" starttime="20170823 21:50:16.316"></status>
</kw>
<status endtime="20170823 21:50:16.319" status="PASS" starttime="20170823 21:50:16.315"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:16.319" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:16.319" status="PASS" starttime="20170823 21:50:16.319"></status>
</kw>
<msg timestamp="20170823 21:50:16.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:16.319" status="PASS" starttime="20170823 21:50:15.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:16.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:16.320" status="PASS" starttime="20170823 21:50:16.320"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:16.321" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:16.321" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:16.321" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:16.321" status="PASS" starttime="20170823 21:50:16.320"></status>
</kw>
<msg timestamp="20170823 21:50:16.321" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:16.321" status="PASS" starttime="20170823 21:50:15.196"></status>
</kw>
<status endtime="20170823 21:50:16.321" status="PASS" starttime="20170823 21:50:15.196"></status>
</kw>
<msg timestamp="20170823 21:50:16.321" level="INFO">${state} = MotherboardInit</msg>
<status endtime="20170823 21:50:16.321" status="PASS" starttime="20170823 21:50:15.196"></status>
</kw>
<msg timestamp="20170823 21:50:16.322" level="INFO">${boot_progress} = MotherboardInit</msg>
<status endtime="20170823 21:50:16.322" status="PASS" starttime="20170823 21:50:15.194"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170823 21:50:16.322" level="FAIL">MotherboardInit != OSStart</msg>
<status endtime="20170823 21:50:16.322" status="FAIL" starttime="20170823 21:50:16.322"></status>
</kw>
<status endtime="20170823 21:50:16.323" status="FAIL" starttime="20170823 21:50:15.193"></status>
</kw>
<msg timestamp="20170823 21:50:16.323" level="INFO">${status} = False</msg>
<status endtime="20170823 21:50:16.323" status="PASS" starttime="20170823 21:50:15.193"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170823 21:50:16.323" status="PASS" starttime="20170823 21:50:16.323"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:16.327" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:16.327" status="PASS" starttime="20170823 21:50:16.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:16.328" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:16.328" status="PASS" starttime="20170823 21:50:16.328"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:16.328" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:16.329" status="PASS" starttime="20170823 21:50:16.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:16.329" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:16.329" status="PASS" starttime="20170823 21:50:16.329"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:16.718" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:16.718" status="PASS" starttime="20170823 21:50:16.330"></status>
</kw>
<msg timestamp="20170823 21:50:16.718" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:16.718" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:16.718" status="PASS" starttime="20170823 21:50:16.329"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:16.719" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:16.719" status="PASS" starttime="20170823 21:50:16.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:16.720" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:16.720" status="PASS" starttime="20170823 21:50:16.719"></status>
</kw>
<status endtime="20170823 21:50:16.720" status="PASS" starttime="20170823 21:50:16.326"></status>
</kw>
<status endtime="20170823 21:50:16.720" status="PASS" starttime="20170823 21:50:16.326"></status>
</kw>
<status endtime="20170823 21:50:16.720" status="PASS" starttime="20170823 21:50:16.325"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:16.721" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:50:16.721" status="PASS" starttime="20170823 21:50:16.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:16.723" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:16.723" status="PASS" starttime="20170823 21:50:16.722"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:16.724" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:16.724" status="PASS" starttime="20170823 21:50:16.724"></status>
</kw>
<status endtime="20170823 21:50:16.724" status="PASS" starttime="20170823 21:50:16.723"></status>
</kw>
<status endtime="20170823 21:50:16.724" status="PASS" starttime="20170823 21:50:16.721"></status>
</kw>
<status endtime="20170823 21:50:16.724" status="PASS" starttime="20170823 21:50:16.721"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:17.646" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:50:17.646" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:17.646" status="PASS" starttime="20170823 21:50:16.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:17.648" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:17.648" status="PASS" starttime="20170823 21:50:17.648"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:17.649" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:17.649" status="PASS" starttime="20170823 21:50:17.649"></status>
</kw>
<status endtime="20170823 21:50:17.649" status="PASS" starttime="20170823 21:50:17.648"></status>
</kw>
<status endtime="20170823 21:50:17.649" status="PASS" starttime="20170823 21:50:17.647"></status>
</kw>
<status endtime="20170823 21:50:17.649" status="PASS" starttime="20170823 21:50:17.647"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:17.650" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:17.650" status="PASS" starttime="20170823 21:50:17.650"></status>
</kw>
<msg timestamp="20170823 21:50:17.650" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:17.650" status="PASS" starttime="20170823 21:50:16.324"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:17.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:17.651" status="PASS" starttime="20170823 21:50:17.651"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:17.651" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:17.652" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:17.652" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:17.652" status="PASS" starttime="20170823 21:50:17.651"></status>
</kw>
<msg timestamp="20170823 21:50:17.652" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:17.652" status="PASS" starttime="20170823 21:50:16.324"></status>
</kw>
<msg timestamp="20170823 21:50:17.652" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:17.652" status="PASS" starttime="20170823 21:50:16.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170823 21:50:17.653" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 21:50:17.653" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:17.653" status="FAIL" starttime="20170823 21:50:17.652"></status>
</kw>
<status endtime="20170823 21:50:17.653" status="FAIL" starttime="20170823 21:50:15.193"></status>
</kw>
<status endtime="20170823 21:50:17.653" status="FAIL" starttime="20170823 21:50:12.813"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:27.659" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:27.659" status="PASS" starttime="20170823 21:50:27.658"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:27.660" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:27.660" status="PASS" starttime="20170823 21:50:27.659"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:27.660" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:27.660" status="PASS" starttime="20170823 21:50:27.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:27.661" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:27.661" status="PASS" starttime="20170823 21:50:27.661"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:28.613" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:28.613" status="PASS" starttime="20170823 21:50:27.662"></status>
</kw>
<msg timestamp="20170823 21:50:28.613" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:28.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:28.613" status="PASS" starttime="20170823 21:50:27.662"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:28.614" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:28.614" status="PASS" starttime="20170823 21:50:28.614"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:28.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:28.615" status="PASS" starttime="20170823 21:50:28.614"></status>
</kw>
<status endtime="20170823 21:50:28.615" status="PASS" starttime="20170823 21:50:27.658"></status>
</kw>
<status endtime="20170823 21:50:28.615" status="PASS" starttime="20170823 21:50:27.657"></status>
</kw>
<status endtime="20170823 21:50:28.615" status="PASS" starttime="20170823 21:50:27.657"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:28.616" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:50:28.616" status="PASS" starttime="20170823 21:50:28.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:28.618" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:28.618" status="PASS" starttime="20170823 21:50:28.617"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:28.619" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:28.619" status="PASS" starttime="20170823 21:50:28.618"></status>
</kw>
<status endtime="20170823 21:50:28.619" status="PASS" starttime="20170823 21:50:28.618"></status>
</kw>
<status endtime="20170823 21:50:28.619" status="PASS" starttime="20170823 21:50:28.616"></status>
</kw>
<status endtime="20170823 21:50:28.619" status="PASS" starttime="20170823 21:50:28.616"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:29.040" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:50:29.041" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:29.041" status="PASS" starttime="20170823 21:50:28.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:29.042" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:29.042" status="PASS" starttime="20170823 21:50:29.042"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:29.043" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:29.043" status="PASS" starttime="20170823 21:50:29.043"></status>
</kw>
<status endtime="20170823 21:50:29.044" status="PASS" starttime="20170823 21:50:29.043"></status>
</kw>
<status endtime="20170823 21:50:29.044" status="PASS" starttime="20170823 21:50:29.041"></status>
</kw>
<status endtime="20170823 21:50:29.044" status="PASS" starttime="20170823 21:50:29.041"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:29.044" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:29.044" status="PASS" starttime="20170823 21:50:29.044"></status>
</kw>
<msg timestamp="20170823 21:50:29.044" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:29.044" status="PASS" starttime="20170823 21:50:27.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:29.045" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:29.045" status="PASS" starttime="20170823 21:50:29.045"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:29.046" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:29.046" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:29.046" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:29.046" status="PASS" starttime="20170823 21:50:29.045"></status>
</kw>
<msg timestamp="20170823 21:50:29.046" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170823 21:50:29.046" status="PASS" starttime="20170823 21:50:27.655"></status>
</kw>
<msg timestamp="20170823 21:50:29.046" level="INFO">${power_state} = On</msg>
<status endtime="20170823 21:50:29.047" status="PASS" starttime="20170823 21:50:27.655"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170823 21:50:29.047" status="PASS" starttime="20170823 21:50:29.047"></status>
</kw>
<status endtime="20170823 21:50:29.047" status="PASS" starttime="20170823 21:50:27.655"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:29.051" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:29.051" status="PASS" starttime="20170823 21:50:29.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:29.052" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:29.052" status="PASS" starttime="20170823 21:50:29.052"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:29.053" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:29.053" status="PASS" starttime="20170823 21:50:29.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:29.053" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:29.053" status="PASS" starttime="20170823 21:50:29.053"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:29.395" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:29.395" status="PASS" starttime="20170823 21:50:29.054"></status>
</kw>
<msg timestamp="20170823 21:50:29.395" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:29.395" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:29.395" status="PASS" starttime="20170823 21:50:29.054"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:29.396" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:29.396" status="PASS" starttime="20170823 21:50:29.395"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:29.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:29.397" status="PASS" starttime="20170823 21:50:29.396"></status>
</kw>
<status endtime="20170823 21:50:29.397" status="PASS" starttime="20170823 21:50:29.050"></status>
</kw>
<status endtime="20170823 21:50:29.397" status="PASS" starttime="20170823 21:50:29.049"></status>
</kw>
<status endtime="20170823 21:50:29.397" status="PASS" starttime="20170823 21:50:29.049"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:29.397" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 21:50:29.397" status="PASS" starttime="20170823 21:50:29.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:29.400" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:29.400" status="PASS" starttime="20170823 21:50:29.399"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:29.401" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:29.401" status="PASS" starttime="20170823 21:50:29.400"></status>
</kw>
<status endtime="20170823 21:50:29.401" status="PASS" starttime="20170823 21:50:29.400"></status>
</kw>
<status endtime="20170823 21:50:29.401" status="PASS" starttime="20170823 21:50:29.398"></status>
</kw>
<status endtime="20170823 21:50:29.401" status="PASS" starttime="20170823 21:50:29.398"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:29.794" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 21:50:29.794" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:29.794" status="PASS" starttime="20170823 21:50:29.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:29.796" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:29.796" status="PASS" starttime="20170823 21:50:29.795"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:29.797" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:29.797" status="PASS" starttime="20170823 21:50:29.797"></status>
</kw>
<status endtime="20170823 21:50:29.797" status="PASS" starttime="20170823 21:50:29.796"></status>
</kw>
<status endtime="20170823 21:50:29.797" status="PASS" starttime="20170823 21:50:29.795"></status>
</kw>
<status endtime="20170823 21:50:29.797" status="PASS" starttime="20170823 21:50:29.794"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:29.798" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:29.798" status="PASS" starttime="20170823 21:50:29.797"></status>
</kw>
<msg timestamp="20170823 21:50:29.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:29.798" status="PASS" starttime="20170823 21:50:29.048"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:29.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:29.799" status="PASS" starttime="20170823 21:50:29.798"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:29.799" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:29.799" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:29.799" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:29.799" status="PASS" starttime="20170823 21:50:29.799"></status>
</kw>
<msg timestamp="20170823 21:50:29.800" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170823 21:50:29.800" status="PASS" starttime="20170823 21:50:29.048"></status>
</kw>
<msg timestamp="20170823 21:50:29.800" level="INFO">${host_state} = Running</msg>
<status endtime="20170823 21:50:29.800" status="PASS" starttime="20170823 21:50:29.047"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170823 21:50:29.800" status="PASS" starttime="20170823 21:50:29.800"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170823 21:50:29.804" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170823 21:50:29.804" status="PASS" starttime="20170823 21:50:29.803"></status>
</kw>
<status endtime="20170823 21:50:29.804" status="PASS" starttime="20170823 21:50:29.803"></status>
</kw>
<status endtime="20170823 21:50:29.804" status="PASS" starttime="20170823 21:50:29.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:29.808" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:29.808" status="PASS" starttime="20170823 21:50:29.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:29.809" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:29.809" status="PASS" starttime="20170823 21:50:29.809"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:29.810" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:29.810" status="PASS" starttime="20170823 21:50:29.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:29.810" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:29.810" status="PASS" starttime="20170823 21:50:29.810"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:30.580" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:30.580" status="PASS" starttime="20170823 21:50:29.811"></status>
</kw>
<msg timestamp="20170823 21:50:30.580" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:30.580" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:30.580" status="PASS" starttime="20170823 21:50:29.811"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:30.581" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:30.581" status="PASS" starttime="20170823 21:50:30.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:30.582" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:30.582" status="PASS" starttime="20170823 21:50:30.581"></status>
</kw>
<status endtime="20170823 21:50:30.582" status="PASS" starttime="20170823 21:50:29.807"></status>
</kw>
<status endtime="20170823 21:50:30.582" status="PASS" starttime="20170823 21:50:29.807"></status>
</kw>
<status endtime="20170823 21:50:30.582" status="PASS" starttime="20170823 21:50:29.806"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:30.583" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:50:30.583" status="PASS" starttime="20170823 21:50:30.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:30.585" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:30.585" status="PASS" starttime="20170823 21:50:30.584"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:30.586" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:30.586" status="PASS" starttime="20170823 21:50:30.585"></status>
</kw>
<status endtime="20170823 21:50:30.586" status="PASS" starttime="20170823 21:50:30.585"></status>
</kw>
<status endtime="20170823 21:50:30.586" status="PASS" starttime="20170823 21:50:30.583"></status>
</kw>
<status endtime="20170823 21:50:30.586" status="PASS" starttime="20170823 21:50:30.583"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:31.725" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:50:31.725" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:31.725" status="PASS" starttime="20170823 21:50:30.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:31.727" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:31.727" status="PASS" starttime="20170823 21:50:31.727"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:31.728" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:31.728" status="PASS" starttime="20170823 21:50:31.728"></status>
</kw>
<status endtime="20170823 21:50:31.728" status="PASS" starttime="20170823 21:50:31.727"></status>
</kw>
<status endtime="20170823 21:50:31.728" status="PASS" starttime="20170823 21:50:31.726"></status>
</kw>
<status endtime="20170823 21:50:31.728" status="PASS" starttime="20170823 21:50:31.726"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:31.729" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:31.729" status="PASS" starttime="20170823 21:50:31.729"></status>
</kw>
<msg timestamp="20170823 21:50:31.729" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:31.729" status="PASS" starttime="20170823 21:50:29.806"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:31.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:31.730" status="PASS" starttime="20170823 21:50:31.729"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:31.730" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:31.730" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:31.731" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:31.731" status="PASS" starttime="20170823 21:50:31.730"></status>
</kw>
<msg timestamp="20170823 21:50:31.731" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:31.731" status="PASS" starttime="20170823 21:50:29.805"></status>
</kw>
<status endtime="20170823 21:50:31.731" status="PASS" starttime="20170823 21:50:29.805"></status>
</kw>
<msg timestamp="20170823 21:50:31.731" level="INFO">${state} = MotherboardInit</msg>
<status endtime="20170823 21:50:31.731" status="PASS" starttime="20170823 21:50:29.804"></status>
</kw>
<msg timestamp="20170823 21:50:31.731" level="INFO">${boot_progress} = MotherboardInit</msg>
<status endtime="20170823 21:50:31.731" status="PASS" starttime="20170823 21:50:29.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170823 21:50:31.732" level="FAIL">MotherboardInit != OSStart</msg>
<status endtime="20170823 21:50:31.732" status="FAIL" starttime="20170823 21:50:31.732"></status>
</kw>
<status endtime="20170823 21:50:31.732" status="FAIL" starttime="20170823 21:50:29.802"></status>
</kw>
<msg timestamp="20170823 21:50:31.732" level="INFO">${status} = False</msg>
<status endtime="20170823 21:50:31.732" status="PASS" starttime="20170823 21:50:29.801"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170823 21:50:31.733" status="PASS" starttime="20170823 21:50:31.733"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:31.737" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:31.737" status="PASS" starttime="20170823 21:50:31.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:31.738" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:31.738" status="PASS" starttime="20170823 21:50:31.738"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:31.739" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:31.739" status="PASS" starttime="20170823 21:50:31.738"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:31.739" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:31.739" status="PASS" starttime="20170823 21:50:31.739"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:32.217" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:32.217" status="PASS" starttime="20170823 21:50:31.740"></status>
</kw>
<msg timestamp="20170823 21:50:32.218" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:32.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:32.218" status="PASS" starttime="20170823 21:50:31.740"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:32.218" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:32.218" status="PASS" starttime="20170823 21:50:32.218"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:32.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:32.219" status="PASS" starttime="20170823 21:50:32.219"></status>
</kw>
<status endtime="20170823 21:50:32.219" status="PASS" starttime="20170823 21:50:31.736"></status>
</kw>
<status endtime="20170823 21:50:32.219" status="PASS" starttime="20170823 21:50:31.735"></status>
</kw>
<status endtime="20170823 21:50:32.219" status="PASS" starttime="20170823 21:50:31.735"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:32.220" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:50:32.220" status="PASS" starttime="20170823 21:50:32.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:32.222" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:32.222" status="PASS" starttime="20170823 21:50:32.221"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:32.223" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:32.223" status="PASS" starttime="20170823 21:50:32.223"></status>
</kw>
<status endtime="20170823 21:50:32.223" status="PASS" starttime="20170823 21:50:32.222"></status>
</kw>
<status endtime="20170823 21:50:32.223" status="PASS" starttime="20170823 21:50:32.221"></status>
</kw>
<status endtime="20170823 21:50:32.223" status="PASS" starttime="20170823 21:50:32.220"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:32.378" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:50:32.378" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:32.378" status="PASS" starttime="20170823 21:50:32.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:32.380" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:32.380" status="PASS" starttime="20170823 21:50:32.379"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:32.381" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:32.381" status="PASS" starttime="20170823 21:50:32.381"></status>
</kw>
<status endtime="20170823 21:50:32.381" status="PASS" starttime="20170823 21:50:32.380"></status>
</kw>
<status endtime="20170823 21:50:32.381" status="PASS" starttime="20170823 21:50:32.379"></status>
</kw>
<status endtime="20170823 21:50:32.381" status="PASS" starttime="20170823 21:50:32.379"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:32.382" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:32.382" status="PASS" starttime="20170823 21:50:32.382"></status>
</kw>
<msg timestamp="20170823 21:50:32.382" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:32.382" status="PASS" starttime="20170823 21:50:31.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:32.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:32.383" status="PASS" starttime="20170823 21:50:32.382"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:32.383" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:32.383" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:32.383" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:32.384" status="PASS" starttime="20170823 21:50:32.383"></status>
</kw>
<msg timestamp="20170823 21:50:32.384" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:32.384" status="PASS" starttime="20170823 21:50:31.734"></status>
</kw>
<msg timestamp="20170823 21:50:32.384" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:32.384" status="PASS" starttime="20170823 21:50:31.733"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170823 21:50:32.385" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 21:50:32.385" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:32.385" status="FAIL" starttime="20170823 21:50:32.384"></status>
</kw>
<status endtime="20170823 21:50:32.385" status="FAIL" starttime="20170823 21:50:29.801"></status>
</kw>
<status endtime="20170823 21:50:32.385" status="FAIL" starttime="20170823 21:50:27.654"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:42.390" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:42.390" status="PASS" starttime="20170823 21:50:42.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:42.391" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:42.391" status="PASS" starttime="20170823 21:50:42.391"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:42.392" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:42.392" status="PASS" starttime="20170823 21:50:42.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:42.392" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:42.392" status="PASS" starttime="20170823 21:50:42.392"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:42.923" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:42.923" status="PASS" starttime="20170823 21:50:42.393"></status>
</kw>
<msg timestamp="20170823 21:50:42.923" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:42.923" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:42.923" status="PASS" starttime="20170823 21:50:42.393"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:42.924" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:42.924" status="PASS" starttime="20170823 21:50:42.924"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:42.925" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:42.925" status="PASS" starttime="20170823 21:50:42.924"></status>
</kw>
<status endtime="20170823 21:50:42.925" status="PASS" starttime="20170823 21:50:42.389"></status>
</kw>
<status endtime="20170823 21:50:42.925" status="PASS" starttime="20170823 21:50:42.389"></status>
</kw>
<status endtime="20170823 21:50:42.925" status="PASS" starttime="20170823 21:50:42.388"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:42.925" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:50:42.926" status="PASS" starttime="20170823 21:50:42.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:42.928" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:42.928" status="PASS" starttime="20170823 21:50:42.927"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:42.928" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:42.929" status="PASS" starttime="20170823 21:50:42.928"></status>
</kw>
<status endtime="20170823 21:50:42.929" status="PASS" starttime="20170823 21:50:42.928"></status>
</kw>
<status endtime="20170823 21:50:42.929" status="PASS" starttime="20170823 21:50:42.926"></status>
</kw>
<status endtime="20170823 21:50:42.929" status="PASS" starttime="20170823 21:50:42.926"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:43.156" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:50:43.156" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:43.156" status="PASS" starttime="20170823 21:50:42.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:43.158" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:43.158" status="PASS" starttime="20170823 21:50:43.157"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:43.158" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:43.159" status="PASS" starttime="20170823 21:50:43.158"></status>
</kw>
<status endtime="20170823 21:50:43.159" status="PASS" starttime="20170823 21:50:43.158"></status>
</kw>
<status endtime="20170823 21:50:43.159" status="PASS" starttime="20170823 21:50:43.157"></status>
</kw>
<status endtime="20170823 21:50:43.159" status="PASS" starttime="20170823 21:50:43.156"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:43.159" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:43.159" status="PASS" starttime="20170823 21:50:43.159"></status>
</kw>
<msg timestamp="20170823 21:50:43.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:43.159" status="PASS" starttime="20170823 21:50:42.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:43.160" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:43.160" status="PASS" starttime="20170823 21:50:43.160"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:43.161" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:43.161" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:43.161" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:43.161" status="PASS" starttime="20170823 21:50:43.160"></status>
</kw>
<msg timestamp="20170823 21:50:43.161" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170823 21:50:43.161" status="PASS" starttime="20170823 21:50:42.387"></status>
</kw>
<msg timestamp="20170823 21:50:43.162" level="INFO">${power_state} = On</msg>
<status endtime="20170823 21:50:43.162" status="PASS" starttime="20170823 21:50:42.386"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170823 21:50:43.162" status="PASS" starttime="20170823 21:50:43.162"></status>
</kw>
<status endtime="20170823 21:50:43.162" status="PASS" starttime="20170823 21:50:42.386"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:43.166" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:43.166" status="PASS" starttime="20170823 21:50:43.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:43.167" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:43.167" status="PASS" starttime="20170823 21:50:43.166"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:43.167" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:43.167" status="PASS" starttime="20170823 21:50:43.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:43.168" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:43.168" status="PASS" starttime="20170823 21:50:43.168"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:43.614" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:43.614" status="PASS" starttime="20170823 21:50:43.169"></status>
</kw>
<msg timestamp="20170823 21:50:43.614" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:43.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:43.614" status="PASS" starttime="20170823 21:50:43.168"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:43.615" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:43.615" status="PASS" starttime="20170823 21:50:43.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:43.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:43.616" status="PASS" starttime="20170823 21:50:43.615"></status>
</kw>
<status endtime="20170823 21:50:43.616" status="PASS" starttime="20170823 21:50:43.165"></status>
</kw>
<status endtime="20170823 21:50:43.616" status="PASS" starttime="20170823 21:50:43.164"></status>
</kw>
<status endtime="20170823 21:50:43.616" status="PASS" starttime="20170823 21:50:43.164"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:43.617" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 21:50:43.617" status="PASS" starttime="20170823 21:50:43.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:43.619" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:43.619" status="PASS" starttime="20170823 21:50:43.618"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:43.619" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:43.620" status="PASS" starttime="20170823 21:50:43.619"></status>
</kw>
<status endtime="20170823 21:50:43.620" status="PASS" starttime="20170823 21:50:43.619"></status>
</kw>
<status endtime="20170823 21:50:43.620" status="PASS" starttime="20170823 21:50:43.617"></status>
</kw>
<status endtime="20170823 21:50:43.620" status="PASS" starttime="20170823 21:50:43.617"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:43.707" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 21:50:43.707" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:43.707" status="PASS" starttime="20170823 21:50:43.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:43.709" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:43.709" status="PASS" starttime="20170823 21:50:43.708"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:43.710" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:43.710" status="PASS" starttime="20170823 21:50:43.710"></status>
</kw>
<status endtime="20170823 21:50:43.710" status="PASS" starttime="20170823 21:50:43.709"></status>
</kw>
<status endtime="20170823 21:50:43.710" status="PASS" starttime="20170823 21:50:43.708"></status>
</kw>
<status endtime="20170823 21:50:43.710" status="PASS" starttime="20170823 21:50:43.708"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:43.711" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:43.711" status="PASS" starttime="20170823 21:50:43.711"></status>
</kw>
<msg timestamp="20170823 21:50:43.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:43.711" status="PASS" starttime="20170823 21:50:43.163"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:43.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:43.712" status="PASS" starttime="20170823 21:50:43.711"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:43.712" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:43.712" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:43.712" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:43.712" status="PASS" starttime="20170823 21:50:43.712"></status>
</kw>
<msg timestamp="20170823 21:50:43.713" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170823 21:50:43.713" status="PASS" starttime="20170823 21:50:43.163"></status>
</kw>
<msg timestamp="20170823 21:50:43.713" level="INFO">${host_state} = Running</msg>
<status endtime="20170823 21:50:43.713" status="PASS" starttime="20170823 21:50:43.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170823 21:50:43.714" status="PASS" starttime="20170823 21:50:43.713"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170823 21:50:43.716" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170823 21:50:43.716" status="PASS" starttime="20170823 21:50:43.716"></status>
</kw>
<status endtime="20170823 21:50:43.716" status="PASS" starttime="20170823 21:50:43.715"></status>
</kw>
<status endtime="20170823 21:50:43.716" status="PASS" starttime="20170823 21:50:43.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:43.724" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:43.724" status="PASS" starttime="20170823 21:50:43.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:43.725" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:43.725" status="PASS" starttime="20170823 21:50:43.724"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:43.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:43.725" status="PASS" starttime="20170823 21:50:43.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:43.726" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:43.726" status="PASS" starttime="20170823 21:50:43.726"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:44.214" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:44.214" status="PASS" starttime="20170823 21:50:43.727"></status>
</kw>
<msg timestamp="20170823 21:50:44.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:44.214" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:44.214" status="PASS" starttime="20170823 21:50:43.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:44.215" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:44.215" status="PASS" starttime="20170823 21:50:44.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:44.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:44.216" status="PASS" starttime="20170823 21:50:44.215"></status>
</kw>
<status endtime="20170823 21:50:44.216" status="PASS" starttime="20170823 21:50:43.722"></status>
</kw>
<status endtime="20170823 21:50:44.216" status="PASS" starttime="20170823 21:50:43.722"></status>
</kw>
<status endtime="20170823 21:50:44.216" status="PASS" starttime="20170823 21:50:43.721"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:44.217" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:50:44.217" status="PASS" starttime="20170823 21:50:44.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:44.219" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:44.219" status="PASS" starttime="20170823 21:50:44.218"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:44.220" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:44.220" status="PASS" starttime="20170823 21:50:44.220"></status>
</kw>
<status endtime="20170823 21:50:44.220" status="PASS" starttime="20170823 21:50:44.219"></status>
</kw>
<status endtime="20170823 21:50:44.220" status="PASS" starttime="20170823 21:50:44.217"></status>
</kw>
<status endtime="20170823 21:50:44.221" status="PASS" starttime="20170823 21:50:44.217"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:44.638" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:50:44.638" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:44.638" status="PASS" starttime="20170823 21:50:44.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:44.640" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:44.640" status="PASS" starttime="20170823 21:50:44.640"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:44.641" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:44.642" status="PASS" starttime="20170823 21:50:44.641"></status>
</kw>
<status endtime="20170823 21:50:44.642" status="PASS" starttime="20170823 21:50:44.640"></status>
</kw>
<status endtime="20170823 21:50:44.642" status="PASS" starttime="20170823 21:50:44.639"></status>
</kw>
<status endtime="20170823 21:50:44.642" status="PASS" starttime="20170823 21:50:44.639"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:44.642" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:44.642" status="PASS" starttime="20170823 21:50:44.642"></status>
</kw>
<msg timestamp="20170823 21:50:44.642" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:44.643" status="PASS" starttime="20170823 21:50:43.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:44.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:44.643" status="PASS" starttime="20170823 21:50:44.643"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:44.644" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:44.644" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:44.644" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:44.644" status="PASS" starttime="20170823 21:50:44.643"></status>
</kw>
<msg timestamp="20170823 21:50:44.644" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:44.644" status="PASS" starttime="20170823 21:50:43.717"></status>
</kw>
<status endtime="20170823 21:50:44.645" status="PASS" starttime="20170823 21:50:43.717"></status>
</kw>
<msg timestamp="20170823 21:50:44.645" level="INFO">${state} = MotherboardInit</msg>
<status endtime="20170823 21:50:44.645" status="PASS" starttime="20170823 21:50:43.717"></status>
</kw>
<msg timestamp="20170823 21:50:44.645" level="INFO">${boot_progress} = MotherboardInit</msg>
<status endtime="20170823 21:50:44.645" status="PASS" starttime="20170823 21:50:43.715"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170823 21:50:44.646" level="FAIL">MotherboardInit != OSStart</msg>
<status endtime="20170823 21:50:44.646" status="FAIL" starttime="20170823 21:50:44.645"></status>
</kw>
<status endtime="20170823 21:50:44.646" status="FAIL" starttime="20170823 21:50:43.714"></status>
</kw>
<msg timestamp="20170823 21:50:44.646" level="INFO">${status} = False</msg>
<status endtime="20170823 21:50:44.646" status="PASS" starttime="20170823 21:50:43.714"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170823 21:50:44.646" status="PASS" starttime="20170823 21:50:44.646"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:44.650" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:44.650" status="PASS" starttime="20170823 21:50:44.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:44.652" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:44.652" status="PASS" starttime="20170823 21:50:44.651"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:44.652" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:44.652" status="PASS" starttime="20170823 21:50:44.652"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:44.653" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:44.653" status="PASS" starttime="20170823 21:50:44.653"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:45.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:45.343" status="PASS" starttime="20170823 21:50:44.654"></status>
</kw>
<msg timestamp="20170823 21:50:45.343" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:45.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:45.343" status="PASS" starttime="20170823 21:50:44.653"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:45.344" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:45.345" status="PASS" starttime="20170823 21:50:45.343"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:45.345" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:45.346" status="PASS" starttime="20170823 21:50:45.345"></status>
</kw>
<status endtime="20170823 21:50:45.346" status="PASS" starttime="20170823 21:50:44.649"></status>
</kw>
<status endtime="20170823 21:50:45.346" status="PASS" starttime="20170823 21:50:44.649"></status>
</kw>
<status endtime="20170823 21:50:45.346" status="PASS" starttime="20170823 21:50:44.648"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:45.347" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170823 21:50:45.347" status="PASS" starttime="20170823 21:50:45.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:45.350" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:45.350" status="PASS" starttime="20170823 21:50:45.349"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:45.351" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170823 21:50:45.351" status="PASS" starttime="20170823 21:50:45.350"></status>
</kw>
<status endtime="20170823 21:50:45.351" status="PASS" starttime="20170823 21:50:45.350"></status>
</kw>
<status endtime="20170823 21:50:45.351" status="PASS" starttime="20170823 21:50:45.348"></status>
</kw>
<status endtime="20170823 21:50:45.351" status="PASS" starttime="20170823 21:50:45.347"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:50:45.567" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170823 21:50:45.567" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:45.567" status="PASS" starttime="20170823 21:50:45.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:45.569" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:45.569" status="PASS" starttime="20170823 21:50:45.568"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:45.570" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:50:45.570" status="PASS" starttime="20170823 21:50:45.569"></status>
</kw>
<status endtime="20170823 21:50:45.570" status="PASS" starttime="20170823 21:50:45.569"></status>
</kw>
<status endtime="20170823 21:50:45.570" status="PASS" starttime="20170823 21:50:45.568"></status>
</kw>
<status endtime="20170823 21:50:45.570" status="PASS" starttime="20170823 21:50:45.567"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:50:45.570" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:50:45.570" status="PASS" starttime="20170823 21:50:45.570"></status>
</kw>
<msg timestamp="20170823 21:50:45.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:45.571" status="PASS" starttime="20170823 21:50:44.648"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:45.571" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:45.571" status="PASS" starttime="20170823 21:50:45.571"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:50:45.572" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:50:45.572" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:50:45.572" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok'}</msg>
<status endtime="20170823 21:50:45.572" status="PASS" starttime="20170823 21:50:45.572"></status>
</kw>
<msg timestamp="20170823 21:50:45.572" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:45.572" status="PASS" starttime="20170823 21:50:44.647"></status>
</kw>
<msg timestamp="20170823 21:50:45.573" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:45.573" status="PASS" starttime="20170823 21:50:44.647"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170823 21:50:45.573" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 21:50:45.573" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170823 21:50:45.574" status="FAIL" starttime="20170823 21:50:45.573"></status>
</kw>
<status endtime="20170823 21:50:45.574" status="FAIL" starttime="20170823 21:50:43.714"></status>
</kw>
<status endtime="20170823 21:50:45.574" status="FAIL" starttime="20170823 21:50:42.386"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:50:55.579" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:50:55.580" status="PASS" starttime="20170823 21:50:55.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:50:55.580" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:50:55.580" status="PASS" starttime="20170823 21:50:55.580"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:50:55.581" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:50:55.581" status="PASS" starttime="20170823 21:50:55.580"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:50:55.582" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:50:55.582" status="PASS" starttime="20170823 21:50:55.581"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:50:55.907" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:50:55.907" status="PASS" starttime="20170823 21:50:55.582"></status>
</kw>
<msg timestamp="20170823 21:50:55.907" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:50:55.907" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:50:55.907" status="PASS" starttime="20170823 21:50:55.582"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:50:55.908" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:55.908" status="PASS" starttime="20170823 21:50:55.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:50:55.909" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:50:55.909" status="PASS" starttime="20170823 21:50:55.908"></status>
</kw>
<status endtime="20170823 21:50:55.909" status="PASS" starttime="20170823 21:50:55.578"></status>
</kw>
<status endtime="20170823 21:50:55.909" status="PASS" starttime="20170823 21:50:55.577"></status>
</kw>
<status endtime="20170823 21:50:55.909" status="PASS" starttime="20170823 21:50:55.577"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:50:55.910" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:50:55.910" status="PASS" starttime="20170823 21:50:55.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:50:55.912" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:55.912" status="PASS" starttime="20170823 21:50:55.911"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:50:55.913" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:50:55.913" status="PASS" starttime="20170823 21:50:55.912"></status>
</kw>
<status endtime="20170823 21:50:55.913" status="PASS" starttime="20170823 21:50:55.912"></status>
</kw>
<status endtime="20170823 21:50:55.913" status="PASS" starttime="20170823 21:50:55.910"></status>
</kw>
<status endtime="20170823 21:50:55.913" status="PASS" starttime="20170823 21:50:55.910"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:51:02.685" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:51:02.685" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:02.685" status="PASS" starttime="20170823 21:50:55.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:02.687" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:02.687" status="PASS" starttime="20170823 21:51:02.686"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:02.688" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:02.688" status="PASS" starttime="20170823 21:51:02.688"></status>
</kw>
<status endtime="20170823 21:51:02.688" status="PASS" starttime="20170823 21:51:02.687"></status>
</kw>
<status endtime="20170823 21:51:02.688" status="PASS" starttime="20170823 21:51:02.686"></status>
</kw>
<status endtime="20170823 21:51:02.688" status="PASS" starttime="20170823 21:51:02.685"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:51:02.689" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:51:02.689" status="PASS" starttime="20170823 21:51:02.689"></status>
</kw>
<msg timestamp="20170823 21:51:02.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:02.689" status="PASS" starttime="20170823 21:50:55.576"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:02.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:02.690" status="PASS" starttime="20170823 21:51:02.689"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:51:02.690" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:51:02.690" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:51:02.690" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170823 21:51:02.691" status="PASS" starttime="20170823 21:51:02.690"></status>
</kw>
<msg timestamp="20170823 21:51:02.691" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170823 21:51:02.691" status="PASS" starttime="20170823 21:50:55.576"></status>
</kw>
<msg timestamp="20170823 21:51:02.691" level="INFO">${power_state} = On</msg>
<status endtime="20170823 21:51:02.691" status="PASS" starttime="20170823 21:50:55.575"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170823 21:51:02.692" status="PASS" starttime="20170823 21:51:02.692"></status>
</kw>
<status endtime="20170823 21:51:02.692" status="PASS" starttime="20170823 21:50:55.575"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:51:02.696" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:51:02.696" status="PASS" starttime="20170823 21:51:02.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:51:02.697" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:51:02.697" status="PASS" starttime="20170823 21:51:02.697"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:51:02.698" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:51:02.698" status="PASS" starttime="20170823 21:51:02.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:51:02.699" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:51:02.699" status="PASS" starttime="20170823 21:51:02.698"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:51:02.876" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:51:02.876" status="PASS" starttime="20170823 21:51:02.700"></status>
</kw>
<msg timestamp="20170823 21:51:02.876" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:51:02.876" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:02.876" status="PASS" starttime="20170823 21:51:02.699"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:51:02.877" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:02.877" status="PASS" starttime="20170823 21:51:02.876"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:02.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:02.878" status="PASS" starttime="20170823 21:51:02.877"></status>
</kw>
<status endtime="20170823 21:51:02.878" status="PASS" starttime="20170823 21:51:02.695"></status>
</kw>
<status endtime="20170823 21:51:02.878" status="PASS" starttime="20170823 21:51:02.695"></status>
</kw>
<status endtime="20170823 21:51:02.878" status="PASS" starttime="20170823 21:51:02.694"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:51:02.879" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 21:51:02.879" status="PASS" starttime="20170823 21:51:02.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:02.881" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:51:02.881" status="PASS" starttime="20170823 21:51:02.880"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:02.882" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:51:02.882" status="PASS" starttime="20170823 21:51:02.881"></status>
</kw>
<status endtime="20170823 21:51:02.882" status="PASS" starttime="20170823 21:51:02.881"></status>
</kw>
<status endtime="20170823 21:51:02.882" status="PASS" starttime="20170823 21:51:02.879"></status>
</kw>
<status endtime="20170823 21:51:02.882" status="PASS" starttime="20170823 21:51:02.879"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:51:04.915" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 21:51:04.916" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:04.916" status="PASS" starttime="20170823 21:51:02.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:04.918" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:04.918" status="PASS" starttime="20170823 21:51:04.917"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:04.918" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:04.919" status="PASS" starttime="20170823 21:51:04.918"></status>
</kw>
<status endtime="20170823 21:51:04.919" status="PASS" starttime="20170823 21:51:04.918"></status>
</kw>
<status endtime="20170823 21:51:04.919" status="PASS" starttime="20170823 21:51:04.917"></status>
</kw>
<status endtime="20170823 21:51:04.919" status="PASS" starttime="20170823 21:51:04.916"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:51:04.919" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:51:04.919" status="PASS" starttime="20170823 21:51:04.919"></status>
</kw>
<msg timestamp="20170823 21:51:04.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:04.920" status="PASS" starttime="20170823 21:51:02.693"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:04.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:04.920" status="PASS" starttime="20170823 21:51:04.920"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:51:04.921" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:51:04.921" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:51:04.921" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:51:04.921" status="PASS" starttime="20170823 21:51:04.921"></status>
</kw>
<msg timestamp="20170823 21:51:04.921" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170823 21:51:04.921" status="PASS" starttime="20170823 21:51:02.693"></status>
</kw>
<msg timestamp="20170823 21:51:04.922" level="INFO">${host_state} = Off</msg>
<status endtime="20170823 21:51:04.922" status="PASS" starttime="20170823 21:51:02.692"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170823 21:51:04.922" level="FAIL">Running != Off</msg>
<status endtime="20170823 21:51:04.922" status="FAIL" starttime="20170823 21:51:04.922"></status>
</kw>
<status endtime="20170823 21:51:04.923" status="FAIL" starttime="20170823 21:50:55.574"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:51:14.928" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:51:14.929" status="PASS" starttime="20170823 21:51:14.927"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:51:14.929" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:51:14.929" status="PASS" starttime="20170823 21:51:14.929"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:51:14.930" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:51:14.930" status="PASS" starttime="20170823 21:51:14.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:51:14.931" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:51:14.931" status="PASS" starttime="20170823 21:51:14.931"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:51:15.115" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:51:15.116" status="PASS" starttime="20170823 21:51:14.933"></status>
</kw>
<msg timestamp="20170823 21:51:15.116" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:51:15.116" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:15.116" status="PASS" starttime="20170823 21:51:14.932"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:51:15.116" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:15.117" status="PASS" starttime="20170823 21:51:15.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:15.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:15.117" status="PASS" starttime="20170823 21:51:15.117"></status>
</kw>
<status endtime="20170823 21:51:15.117" status="PASS" starttime="20170823 21:51:14.927"></status>
</kw>
<status endtime="20170823 21:51:15.117" status="PASS" starttime="20170823 21:51:14.927"></status>
</kw>
<status endtime="20170823 21:51:15.118" status="PASS" starttime="20170823 21:51:14.926"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:51:15.118" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:51:15.118" status="PASS" starttime="20170823 21:51:15.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:15.120" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:51:15.120" status="PASS" starttime="20170823 21:51:15.119"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:15.121" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:51:15.121" status="PASS" starttime="20170823 21:51:15.121"></status>
</kw>
<status endtime="20170823 21:51:15.121" status="PASS" starttime="20170823 21:51:15.120"></status>
</kw>
<status endtime="20170823 21:51:15.121" status="PASS" starttime="20170823 21:51:15.119"></status>
</kw>
<status endtime="20170823 21:51:15.122" status="PASS" starttime="20170823 21:51:15.118"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:51:15.197" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:51:15.197" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:15.197" status="PASS" starttime="20170823 21:51:15.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:15.199" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:15.199" status="PASS" starttime="20170823 21:51:15.198"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:15.200" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:15.200" status="PASS" starttime="20170823 21:51:15.200"></status>
</kw>
<status endtime="20170823 21:51:15.200" status="PASS" starttime="20170823 21:51:15.199"></status>
</kw>
<status endtime="20170823 21:51:15.200" status="PASS" starttime="20170823 21:51:15.198"></status>
</kw>
<status endtime="20170823 21:51:15.200" status="PASS" starttime="20170823 21:51:15.198"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:51:15.201" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:51:15.201" status="PASS" starttime="20170823 21:51:15.201"></status>
</kw>
<msg timestamp="20170823 21:51:15.201" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:15.201" status="PASS" starttime="20170823 21:51:14.925"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:15.202" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:15.202" status="PASS" starttime="20170823 21:51:15.201"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:51:15.202" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:51:15.202" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:51:15.202" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:51:15.202" status="PASS" starttime="20170823 21:51:15.202"></status>
</kw>
<msg timestamp="20170823 21:51:15.203" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:51:15.203" status="PASS" starttime="20170823 21:51:14.925"></status>
</kw>
<msg timestamp="20170823 21:51:15.203" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:51:15.203" status="PASS" starttime="20170823 21:51:14.924"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:51:15.204" level="FAIL">On != Off</msg>
<status endtime="20170823 21:51:15.204" status="FAIL" starttime="20170823 21:51:15.203"></status>
</kw>
<status endtime="20170823 21:51:15.204" status="FAIL" starttime="20170823 21:51:14.924"></status>
</kw>
<status endtime="20170823 21:51:15.204" status="FAIL" starttime="20170823 21:51:14.923"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:51:25.210" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:51:25.210" status="PASS" starttime="20170823 21:51:25.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:51:25.211" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:51:25.211" status="PASS" starttime="20170823 21:51:25.210"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:51:25.211" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:51:25.211" status="PASS" starttime="20170823 21:51:25.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:51:25.212" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:51:25.212" status="PASS" starttime="20170823 21:51:25.212"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:51:25.390" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:51:25.390" status="PASS" starttime="20170823 21:51:25.213"></status>
</kw>
<msg timestamp="20170823 21:51:25.390" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:51:25.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:25.390" status="PASS" starttime="20170823 21:51:25.212"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:51:25.391" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:25.391" status="PASS" starttime="20170823 21:51:25.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:25.392" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:25.392" status="PASS" starttime="20170823 21:51:25.391"></status>
</kw>
<status endtime="20170823 21:51:25.392" status="PASS" starttime="20170823 21:51:25.209"></status>
</kw>
<status endtime="20170823 21:51:25.392" status="PASS" starttime="20170823 21:51:25.208"></status>
</kw>
<status endtime="20170823 21:51:25.392" status="PASS" starttime="20170823 21:51:25.207"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:51:25.393" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:51:25.393" status="PASS" starttime="20170823 21:51:25.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:25.395" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:51:25.395" status="PASS" starttime="20170823 21:51:25.394"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:25.396" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:51:25.396" status="PASS" starttime="20170823 21:51:25.396"></status>
</kw>
<status endtime="20170823 21:51:25.396" status="PASS" starttime="20170823 21:51:25.395"></status>
</kw>
<status endtime="20170823 21:51:25.397" status="PASS" starttime="20170823 21:51:25.393"></status>
</kw>
<status endtime="20170823 21:51:25.397" status="PASS" starttime="20170823 21:51:25.393"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:51:25.480" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:51:25.481" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:25.481" status="PASS" starttime="20170823 21:51:25.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:25.483" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:25.483" status="PASS" starttime="20170823 21:51:25.482"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:25.484" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:25.484" status="PASS" starttime="20170823 21:51:25.484"></status>
</kw>
<status endtime="20170823 21:51:25.484" status="PASS" starttime="20170823 21:51:25.483"></status>
</kw>
<status endtime="20170823 21:51:25.484" status="PASS" starttime="20170823 21:51:25.481"></status>
</kw>
<status endtime="20170823 21:51:25.484" status="PASS" starttime="20170823 21:51:25.481"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:51:25.485" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:51:25.485" status="PASS" starttime="20170823 21:51:25.484"></status>
</kw>
<msg timestamp="20170823 21:51:25.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:25.485" status="PASS" starttime="20170823 21:51:25.207"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:25.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:25.486" status="PASS" starttime="20170823 21:51:25.485"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:51:25.486" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:51:25.486" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:51:25.486" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:51:25.486" status="PASS" starttime="20170823 21:51:25.486"></status>
</kw>
<msg timestamp="20170823 21:51:25.487" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:51:25.487" status="PASS" starttime="20170823 21:51:25.206"></status>
</kw>
<msg timestamp="20170823 21:51:25.487" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:51:25.487" status="PASS" starttime="20170823 21:51:25.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:51:25.488" level="FAIL">On != Off</msg>
<status endtime="20170823 21:51:25.488" status="FAIL" starttime="20170823 21:51:25.487"></status>
</kw>
<status endtime="20170823 21:51:25.488" status="FAIL" starttime="20170823 21:51:25.205"></status>
</kw>
<status endtime="20170823 21:51:25.488" status="FAIL" starttime="20170823 21:51:25.205"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:51:35.493" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:51:35.493" status="PASS" starttime="20170823 21:51:35.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:51:35.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:51:35.494" status="PASS" starttime="20170823 21:51:35.493"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:51:35.494" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:51:35.495" status="PASS" starttime="20170823 21:51:35.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:51:35.495" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:51:35.495" status="PASS" starttime="20170823 21:51:35.495"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:51:35.702" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:51:35.702" status="PASS" starttime="20170823 21:51:35.496"></status>
</kw>
<msg timestamp="20170823 21:51:35.702" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:51:35.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:35.703" status="PASS" starttime="20170823 21:51:35.495"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:51:35.703" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:35.703" status="PASS" starttime="20170823 21:51:35.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:35.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:35.704" status="PASS" starttime="20170823 21:51:35.703"></status>
</kw>
<status endtime="20170823 21:51:35.704" status="PASS" starttime="20170823 21:51:35.492"></status>
</kw>
<status endtime="20170823 21:51:35.704" status="PASS" starttime="20170823 21:51:35.491"></status>
</kw>
<status endtime="20170823 21:51:35.704" status="PASS" starttime="20170823 21:51:35.491"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:51:35.705" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:51:35.705" status="PASS" starttime="20170823 21:51:35.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:35.707" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:51:35.707" status="PASS" starttime="20170823 21:51:35.706"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:35.708" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:51:35.708" status="PASS" starttime="20170823 21:51:35.708"></status>
</kw>
<status endtime="20170823 21:51:35.708" status="PASS" starttime="20170823 21:51:35.707"></status>
</kw>
<status endtime="20170823 21:51:35.708" status="PASS" starttime="20170823 21:51:35.706"></status>
</kw>
<status endtime="20170823 21:51:35.708" status="PASS" starttime="20170823 21:51:35.705"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:51:35.771" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:51:35.771" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:35.771" status="PASS" starttime="20170823 21:51:35.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:35.773" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:35.773" status="PASS" starttime="20170823 21:51:35.773"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:35.774" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:35.774" status="PASS" starttime="20170823 21:51:35.774"></status>
</kw>
<status endtime="20170823 21:51:35.774" status="PASS" starttime="20170823 21:51:35.773"></status>
</kw>
<status endtime="20170823 21:51:35.774" status="PASS" starttime="20170823 21:51:35.772"></status>
</kw>
<status endtime="20170823 21:51:35.775" status="PASS" starttime="20170823 21:51:35.772"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:51:35.775" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:51:35.775" status="PASS" starttime="20170823 21:51:35.775"></status>
</kw>
<msg timestamp="20170823 21:51:35.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:35.775" status="PASS" starttime="20170823 21:51:35.490"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:35.776" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:35.776" status="PASS" starttime="20170823 21:51:35.776"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:51:35.776" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:51:35.776" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:51:35.777" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:51:35.777" status="PASS" starttime="20170823 21:51:35.776"></status>
</kw>
<msg timestamp="20170823 21:51:35.777" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:51:35.777" status="PASS" starttime="20170823 21:51:35.490"></status>
</kw>
<msg timestamp="20170823 21:51:35.777" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:51:35.777" status="PASS" starttime="20170823 21:51:35.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:51:35.778" level="FAIL">On != Off</msg>
<status endtime="20170823 21:51:35.778" status="FAIL" starttime="20170823 21:51:35.777"></status>
</kw>
<status endtime="20170823 21:51:35.778" status="FAIL" starttime="20170823 21:51:35.489"></status>
</kw>
<status endtime="20170823 21:51:35.778" status="FAIL" starttime="20170823 21:51:35.488"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:51:45.785" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:51:45.785" status="PASS" starttime="20170823 21:51:45.784"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:51:45.786" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:51:45.786" status="PASS" starttime="20170823 21:51:45.786"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:51:45.787" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:51:45.787" status="PASS" starttime="20170823 21:51:45.787"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:51:45.788" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:51:45.788" status="PASS" starttime="20170823 21:51:45.787"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:51:46.033" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:51:46.033" status="PASS" starttime="20170823 21:51:45.788"></status>
</kw>
<msg timestamp="20170823 21:51:46.033" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:51:46.033" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:46.033" status="PASS" starttime="20170823 21:51:45.788"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:51:46.034" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:46.034" status="PASS" starttime="20170823 21:51:46.033"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:46.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:46.035" status="PASS" starttime="20170823 21:51:46.034"></status>
</kw>
<status endtime="20170823 21:51:46.035" status="PASS" starttime="20170823 21:51:45.783"></status>
</kw>
<status endtime="20170823 21:51:46.035" status="PASS" starttime="20170823 21:51:45.782"></status>
</kw>
<status endtime="20170823 21:51:46.035" status="PASS" starttime="20170823 21:51:45.781"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:51:46.035" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:51:46.035" status="PASS" starttime="20170823 21:51:46.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:46.037" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:51:46.038" status="PASS" starttime="20170823 21:51:46.037"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:46.038" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:51:46.039" status="PASS" starttime="20170823 21:51:46.038"></status>
</kw>
<status endtime="20170823 21:51:46.039" status="PASS" starttime="20170823 21:51:46.038"></status>
</kw>
<status endtime="20170823 21:51:46.039" status="PASS" starttime="20170823 21:51:46.036"></status>
</kw>
<status endtime="20170823 21:51:46.039" status="PASS" starttime="20170823 21:51:46.036"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:51:46.124" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:51:46.124" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:46.124" status="PASS" starttime="20170823 21:51:46.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:46.126" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:46.126" status="PASS" starttime="20170823 21:51:46.126"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:46.127" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:46.127" status="PASS" starttime="20170823 21:51:46.127"></status>
</kw>
<status endtime="20170823 21:51:46.128" status="PASS" starttime="20170823 21:51:46.126"></status>
</kw>
<status endtime="20170823 21:51:46.128" status="PASS" starttime="20170823 21:51:46.125"></status>
</kw>
<status endtime="20170823 21:51:46.128" status="PASS" starttime="20170823 21:51:46.125"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:51:46.128" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:51:46.128" status="PASS" starttime="20170823 21:51:46.128"></status>
</kw>
<msg timestamp="20170823 21:51:46.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:46.129" status="PASS" starttime="20170823 21:51:45.781"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:46.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:46.129" status="PASS" starttime="20170823 21:51:46.129"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:51:46.130" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:51:46.130" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:51:46.130" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:51:46.130" status="PASS" starttime="20170823 21:51:46.130"></status>
</kw>
<msg timestamp="20170823 21:51:46.131" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:51:46.131" status="PASS" starttime="20170823 21:51:45.780"></status>
</kw>
<msg timestamp="20170823 21:51:46.131" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:51:46.131" status="PASS" starttime="20170823 21:51:45.780"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:51:46.132" level="FAIL">On != Off</msg>
<status endtime="20170823 21:51:46.133" status="FAIL" starttime="20170823 21:51:46.132"></status>
</kw>
<status endtime="20170823 21:51:46.133" status="FAIL" starttime="20170823 21:51:45.779"></status>
</kw>
<status endtime="20170823 21:51:46.133" status="FAIL" starttime="20170823 21:51:45.779"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:51:56.138" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:51:56.138" status="PASS" starttime="20170823 21:51:56.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:51:56.139" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:51:56.139" status="PASS" starttime="20170823 21:51:56.139"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:51:56.139" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:51:56.140" status="PASS" starttime="20170823 21:51:56.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:51:56.140" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:51:56.140" status="PASS" starttime="20170823 21:51:56.140"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:51:56.341" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:51:56.341" status="PASS" starttime="20170823 21:51:56.141"></status>
</kw>
<msg timestamp="20170823 21:51:56.341" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:51:56.341" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:56.341" status="PASS" starttime="20170823 21:51:56.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:51:56.342" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:56.342" status="PASS" starttime="20170823 21:51:56.342"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:56.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:56.343" status="PASS" starttime="20170823 21:51:56.342"></status>
</kw>
<status endtime="20170823 21:51:56.343" status="PASS" starttime="20170823 21:51:56.137"></status>
</kw>
<status endtime="20170823 21:51:56.343" status="PASS" starttime="20170823 21:51:56.137"></status>
</kw>
<status endtime="20170823 21:51:56.343" status="PASS" starttime="20170823 21:51:56.136"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:51:56.344" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:51:56.344" status="PASS" starttime="20170823 21:51:56.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:56.346" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:51:56.346" status="PASS" starttime="20170823 21:51:56.345"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:56.347" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:51:56.347" status="PASS" starttime="20170823 21:51:56.347"></status>
</kw>
<status endtime="20170823 21:51:56.347" status="PASS" starttime="20170823 21:51:56.346"></status>
</kw>
<status endtime="20170823 21:51:56.348" status="PASS" starttime="20170823 21:51:56.345"></status>
</kw>
<status endtime="20170823 21:51:56.348" status="PASS" starttime="20170823 21:51:56.344"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:51:56.443" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:51:56.443" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:56.443" status="PASS" starttime="20170823 21:51:56.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:51:56.445" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:56.446" status="PASS" starttime="20170823 21:51:56.445"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:51:56.446" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:51:56.446" status="PASS" starttime="20170823 21:51:56.446"></status>
</kw>
<status endtime="20170823 21:51:56.447" status="PASS" starttime="20170823 21:51:56.446"></status>
</kw>
<status endtime="20170823 21:51:56.447" status="PASS" starttime="20170823 21:51:56.444"></status>
</kw>
<status endtime="20170823 21:51:56.447" status="PASS" starttime="20170823 21:51:56.444"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:51:56.447" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:51:56.447" status="PASS" starttime="20170823 21:51:56.447"></status>
</kw>
<msg timestamp="20170823 21:51:56.447" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:51:56.448" status="PASS" starttime="20170823 21:51:56.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:51:56.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:51:56.449" status="PASS" starttime="20170823 21:51:56.448"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:51:56.449" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:51:56.449" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:51:56.450" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:51:56.450" status="PASS" starttime="20170823 21:51:56.449"></status>
</kw>
<msg timestamp="20170823 21:51:56.450" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:51:56.450" status="PASS" starttime="20170823 21:51:56.135"></status>
</kw>
<msg timestamp="20170823 21:51:56.450" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:51:56.450" status="PASS" starttime="20170823 21:51:56.134"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:51:56.451" level="FAIL">On != Off</msg>
<status endtime="20170823 21:51:56.452" status="FAIL" starttime="20170823 21:51:56.451"></status>
</kw>
<status endtime="20170823 21:51:56.452" status="FAIL" starttime="20170823 21:51:56.134"></status>
</kw>
<status endtime="20170823 21:51:56.452" status="FAIL" starttime="20170823 21:51:56.133"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:52:06.458" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:52:06.458" status="PASS" starttime="20170823 21:52:06.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:52:06.459" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:52:06.459" status="PASS" starttime="20170823 21:52:06.458"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:52:06.459" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:52:06.459" status="PASS" starttime="20170823 21:52:06.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:52:06.460" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:52:06.460" status="PASS" starttime="20170823 21:52:06.460"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:52:06.643" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:52:06.643" status="PASS" starttime="20170823 21:52:06.461"></status>
</kw>
<msg timestamp="20170823 21:52:06.643" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:52:06.643" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:06.643" status="PASS" starttime="20170823 21:52:06.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:52:06.644" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:06.644" status="PASS" starttime="20170823 21:52:06.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:52:06.645" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:06.645" status="PASS" starttime="20170823 21:52:06.644"></status>
</kw>
<status endtime="20170823 21:52:06.645" status="PASS" starttime="20170823 21:52:06.456"></status>
</kw>
<status endtime="20170823 21:52:06.645" status="PASS" starttime="20170823 21:52:06.456"></status>
</kw>
<status endtime="20170823 21:52:06.645" status="PASS" starttime="20170823 21:52:06.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:52:06.646" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:52:06.646" status="PASS" starttime="20170823 21:52:06.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:52:06.648" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:52:06.648" status="PASS" starttime="20170823 21:52:06.647"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:52:06.649" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:52:06.649" status="PASS" starttime="20170823 21:52:06.648"></status>
</kw>
<status endtime="20170823 21:52:06.649" status="PASS" starttime="20170823 21:52:06.648"></status>
</kw>
<status endtime="20170823 21:52:06.649" status="PASS" starttime="20170823 21:52:06.646"></status>
</kw>
<status endtime="20170823 21:52:06.649" status="PASS" starttime="20170823 21:52:06.646"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:52:06.711" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:52:06.712" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:06.712" status="PASS" starttime="20170823 21:52:06.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:52:06.714" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:52:06.714" status="PASS" starttime="20170823 21:52:06.713"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:52:06.715" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:52:06.715" status="PASS" starttime="20170823 21:52:06.714"></status>
</kw>
<status endtime="20170823 21:52:06.715" status="PASS" starttime="20170823 21:52:06.714"></status>
</kw>
<status endtime="20170823 21:52:06.715" status="PASS" starttime="20170823 21:52:06.712"></status>
</kw>
<status endtime="20170823 21:52:06.715" status="PASS" starttime="20170823 21:52:06.712"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:52:06.716" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:52:06.716" status="PASS" starttime="20170823 21:52:06.715"></status>
</kw>
<msg timestamp="20170823 21:52:06.716" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:06.716" status="PASS" starttime="20170823 21:52:06.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:52:06.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:06.717" status="PASS" starttime="20170823 21:52:06.716"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:52:06.717" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:52:06.717" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:52:06.717" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:52:06.717" status="PASS" starttime="20170823 21:52:06.717"></status>
</kw>
<msg timestamp="20170823 21:52:06.718" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:52:06.718" status="PASS" starttime="20170823 21:52:06.454"></status>
</kw>
<msg timestamp="20170823 21:52:06.718" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:52:06.718" status="PASS" starttime="20170823 21:52:06.454"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:52:06.719" level="FAIL">On != Off</msg>
<status endtime="20170823 21:52:06.719" status="FAIL" starttime="20170823 21:52:06.718"></status>
</kw>
<status endtime="20170823 21:52:06.719" status="FAIL" starttime="20170823 21:52:06.453"></status>
</kw>
<status endtime="20170823 21:52:06.719" status="FAIL" starttime="20170823 21:52:06.453"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:52:16.724" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:52:16.725" status="PASS" starttime="20170823 21:52:16.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:52:16.725" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:52:16.725" status="PASS" starttime="20170823 21:52:16.725"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:52:16.726" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:52:16.726" status="PASS" starttime="20170823 21:52:16.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:52:16.727" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:52:16.727" status="PASS" starttime="20170823 21:52:16.726"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:52:16.908" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:52:16.908" status="PASS" starttime="20170823 21:52:16.728"></status>
</kw>
<msg timestamp="20170823 21:52:16.908" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:52:16.908" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:16.908" status="PASS" starttime="20170823 21:52:16.727"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:52:16.909" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:16.909" status="PASS" starttime="20170823 21:52:16.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:52:16.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:16.910" status="PASS" starttime="20170823 21:52:16.909"></status>
</kw>
<status endtime="20170823 21:52:16.910" status="PASS" starttime="20170823 21:52:16.723"></status>
</kw>
<status endtime="20170823 21:52:16.910" status="PASS" starttime="20170823 21:52:16.723"></status>
</kw>
<status endtime="20170823 21:52:16.910" status="PASS" starttime="20170823 21:52:16.722"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:52:16.911" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:52:16.911" status="PASS" starttime="20170823 21:52:16.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:52:16.913" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:52:16.913" status="PASS" starttime="20170823 21:52:16.912"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:52:16.914" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:52:16.914" status="PASS" starttime="20170823 21:52:16.914"></status>
</kw>
<status endtime="20170823 21:52:16.914" status="PASS" starttime="20170823 21:52:16.913"></status>
</kw>
<status endtime="20170823 21:52:16.914" status="PASS" starttime="20170823 21:52:16.911"></status>
</kw>
<status endtime="20170823 21:52:16.914" status="PASS" starttime="20170823 21:52:16.911"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:52:16.986" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:52:16.986" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:16.986" status="PASS" starttime="20170823 21:52:16.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:52:16.988" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:52:16.988" status="PASS" starttime="20170823 21:52:16.987"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:52:16.989" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:52:16.989" status="PASS" starttime="20170823 21:52:16.989"></status>
</kw>
<status endtime="20170823 21:52:16.989" status="PASS" starttime="20170823 21:52:16.988"></status>
</kw>
<status endtime="20170823 21:52:16.989" status="PASS" starttime="20170823 21:52:16.987"></status>
</kw>
<status endtime="20170823 21:52:16.989" status="PASS" starttime="20170823 21:52:16.986"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:52:16.990" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:52:16.990" status="PASS" starttime="20170823 21:52:16.989"></status>
</kw>
<msg timestamp="20170823 21:52:16.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:16.990" status="PASS" starttime="20170823 21:52:16.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:52:16.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:16.991" status="PASS" starttime="20170823 21:52:16.990"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:52:16.991" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:52:16.991" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:52:16.991" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:52:16.991" status="PASS" starttime="20170823 21:52:16.991"></status>
</kw>
<msg timestamp="20170823 21:52:16.992" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:52:16.992" status="PASS" starttime="20170823 21:52:16.721"></status>
</kw>
<msg timestamp="20170823 21:52:16.992" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:52:16.992" status="PASS" starttime="20170823 21:52:16.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:52:16.993" level="FAIL">On != Off</msg>
<status endtime="20170823 21:52:16.993" status="FAIL" starttime="20170823 21:52:16.992"></status>
</kw>
<status endtime="20170823 21:52:16.993" status="FAIL" starttime="20170823 21:52:16.720"></status>
</kw>
<status endtime="20170823 21:52:16.993" status="FAIL" starttime="20170823 21:52:16.719"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:52:27.000" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:52:27.000" status="PASS" starttime="20170823 21:52:26.999"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:52:27.001" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:52:27.001" status="PASS" starttime="20170823 21:52:27.001"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:52:27.002" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:52:27.002" status="PASS" starttime="20170823 21:52:27.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:52:27.003" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:52:27.003" status="PASS" starttime="20170823 21:52:27.003"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:52:27.182" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:52:27.182" status="PASS" starttime="20170823 21:52:27.004"></status>
</kw>
<msg timestamp="20170823 21:52:27.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:52:27.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:27.183" status="PASS" starttime="20170823 21:52:27.004"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:52:27.183" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:27.183" status="PASS" starttime="20170823 21:52:27.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:52:27.184" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:27.184" status="PASS" starttime="20170823 21:52:27.184"></status>
</kw>
<status endtime="20170823 21:52:27.184" status="PASS" starttime="20170823 21:52:26.998"></status>
</kw>
<status endtime="20170823 21:52:27.184" status="PASS" starttime="20170823 21:52:26.997"></status>
</kw>
<status endtime="20170823 21:52:27.184" status="PASS" starttime="20170823 21:52:26.996"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:52:27.185" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:52:27.185" status="PASS" starttime="20170823 21:52:27.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:52:27.187" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:52:27.187" status="PASS" starttime="20170823 21:52:27.186"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:52:27.188" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:52:27.188" status="PASS" starttime="20170823 21:52:27.188"></status>
</kw>
<status endtime="20170823 21:52:27.188" status="PASS" starttime="20170823 21:52:27.187"></status>
</kw>
<status endtime="20170823 21:52:27.188" status="PASS" starttime="20170823 21:52:27.186"></status>
</kw>
<status endtime="20170823 21:52:27.189" status="PASS" starttime="20170823 21:52:27.185"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:52:27.252" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:52:27.252" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:27.252" status="PASS" starttime="20170823 21:52:27.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:52:27.254" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:52:27.254" status="PASS" starttime="20170823 21:52:27.253"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:52:27.255" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:52:27.255" status="PASS" starttime="20170823 21:52:27.254"></status>
</kw>
<status endtime="20170823 21:52:27.255" status="PASS" starttime="20170823 21:52:27.254"></status>
</kw>
<status endtime="20170823 21:52:27.255" status="PASS" starttime="20170823 21:52:27.253"></status>
</kw>
<status endtime="20170823 21:52:27.255" status="PASS" starttime="20170823 21:52:27.252"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:52:27.256" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:52:27.256" status="PASS" starttime="20170823 21:52:27.256"></status>
</kw>
<msg timestamp="20170823 21:52:27.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:27.256" status="PASS" starttime="20170823 21:52:26.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:52:27.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:27.257" status="PASS" starttime="20170823 21:52:27.256"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:52:27.257" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:52:27.257" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:52:27.257" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:52:27.258" status="PASS" starttime="20170823 21:52:27.257"></status>
</kw>
<msg timestamp="20170823 21:52:27.258" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:52:27.258" status="PASS" starttime="20170823 21:52:26.995"></status>
</kw>
<msg timestamp="20170823 21:52:27.258" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:52:27.258" status="PASS" starttime="20170823 21:52:26.994"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:52:27.259" level="FAIL">On != Off</msg>
<status endtime="20170823 21:52:27.259" status="FAIL" starttime="20170823 21:52:27.258"></status>
</kw>
<status endtime="20170823 21:52:27.259" status="FAIL" starttime="20170823 21:52:26.994"></status>
</kw>
<status endtime="20170823 21:52:27.259" status="FAIL" starttime="20170823 21:52:26.994"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:52:37.264" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:52:37.264" status="PASS" starttime="20170823 21:52:37.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:52:37.265" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:52:37.265" status="PASS" starttime="20170823 21:52:37.265"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:52:37.266" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:52:37.266" status="PASS" starttime="20170823 21:52:37.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:52:37.266" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:52:37.266" status="PASS" starttime="20170823 21:52:37.266"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:52:37.442" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:52:37.442" status="PASS" starttime="20170823 21:52:37.267"></status>
</kw>
<msg timestamp="20170823 21:52:37.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:52:37.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:37.443" status="PASS" starttime="20170823 21:52:37.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:52:37.443" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:37.443" status="PASS" starttime="20170823 21:52:37.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:52:37.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:37.444" status="PASS" starttime="20170823 21:52:37.443"></status>
</kw>
<status endtime="20170823 21:52:37.444" status="PASS" starttime="20170823 21:52:37.263"></status>
</kw>
<status endtime="20170823 21:52:37.444" status="PASS" starttime="20170823 21:52:37.263"></status>
</kw>
<status endtime="20170823 21:52:37.444" status="PASS" starttime="20170823 21:52:37.262"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:52:37.445" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:52:37.445" status="PASS" starttime="20170823 21:52:37.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:52:37.447" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:52:37.447" status="PASS" starttime="20170823 21:52:37.446"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:52:37.448" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:52:37.448" status="PASS" starttime="20170823 21:52:37.447"></status>
</kw>
<status endtime="20170823 21:52:37.448" status="PASS" starttime="20170823 21:52:37.447"></status>
</kw>
<status endtime="20170823 21:52:37.448" status="PASS" starttime="20170823 21:52:37.446"></status>
</kw>
<status endtime="20170823 21:52:37.448" status="PASS" starttime="20170823 21:52:37.445"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:52:37.511" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:52:37.511" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:37.511" status="PASS" starttime="20170823 21:52:37.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:52:37.513" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:52:37.513" status="PASS" starttime="20170823 21:52:37.512"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:52:37.514" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:52:37.514" status="PASS" starttime="20170823 21:52:37.513"></status>
</kw>
<status endtime="20170823 21:52:37.514" status="PASS" starttime="20170823 21:52:37.513"></status>
</kw>
<status endtime="20170823 21:52:37.514" status="PASS" starttime="20170823 21:52:37.512"></status>
</kw>
<status endtime="20170823 21:52:37.514" status="PASS" starttime="20170823 21:52:37.511"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:52:37.514" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:52:37.515" status="PASS" starttime="20170823 21:52:37.514"></status>
</kw>
<msg timestamp="20170823 21:52:37.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:37.515" status="PASS" starttime="20170823 21:52:37.261"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:52:37.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:37.515" status="PASS" starttime="20170823 21:52:37.515"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:52:37.516" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:52:37.516" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:52:37.516" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:52:37.516" status="PASS" starttime="20170823 21:52:37.516"></status>
</kw>
<msg timestamp="20170823 21:52:37.516" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:52:37.516" status="PASS" starttime="20170823 21:52:37.261"></status>
</kw>
<msg timestamp="20170823 21:52:37.517" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:52:37.517" status="PASS" starttime="20170823 21:52:37.260"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:52:37.517" level="FAIL">On != Off</msg>
<status endtime="20170823 21:52:37.517" status="FAIL" starttime="20170823 21:52:37.517"></status>
</kw>
<status endtime="20170823 21:52:37.518" status="FAIL" starttime="20170823 21:52:37.260"></status>
</kw>
<status endtime="20170823 21:52:37.518" status="FAIL" starttime="20170823 21:52:37.259"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:52:47.523" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:52:47.523" status="PASS" starttime="20170823 21:52:47.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:52:47.524" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:52:47.524" status="PASS" starttime="20170823 21:52:47.524"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:52:47.524" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:52:47.525" status="PASS" starttime="20170823 21:52:47.524"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:52:47.525" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:52:47.525" status="PASS" starttime="20170823 21:52:47.525"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:52:47.715" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:52:47.715" status="PASS" starttime="20170823 21:52:47.526"></status>
</kw>
<msg timestamp="20170823 21:52:47.715" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:52:47.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:47.715" status="PASS" starttime="20170823 21:52:47.525"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:52:47.715" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:47.716" status="PASS" starttime="20170823 21:52:47.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:52:47.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:47.716" status="PASS" starttime="20170823 21:52:47.716"></status>
</kw>
<status endtime="20170823 21:52:47.716" status="PASS" starttime="20170823 21:52:47.522"></status>
</kw>
<status endtime="20170823 21:52:47.716" status="PASS" starttime="20170823 21:52:47.521"></status>
</kw>
<status endtime="20170823 21:52:47.717" status="PASS" starttime="20170823 21:52:47.521"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:52:47.717" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:52:47.717" status="PASS" starttime="20170823 21:52:47.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:52:47.719" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:52:47.719" status="PASS" starttime="20170823 21:52:47.719"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:52:47.720" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:52:47.720" status="PASS" starttime="20170823 21:52:47.720"></status>
</kw>
<status endtime="20170823 21:52:47.720" status="PASS" starttime="20170823 21:52:47.719"></status>
</kw>
<status endtime="20170823 21:52:47.721" status="PASS" starttime="20170823 21:52:47.718"></status>
</kw>
<status endtime="20170823 21:52:47.721" status="PASS" starttime="20170823 21:52:47.717"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:52:47.787" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:52:47.787" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:47.787" status="PASS" starttime="20170823 21:52:47.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:52:47.789" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:52:47.789" status="PASS" starttime="20170823 21:52:47.789"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:52:47.790" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:52:47.790" status="PASS" starttime="20170823 21:52:47.790"></status>
</kw>
<status endtime="20170823 21:52:47.790" status="PASS" starttime="20170823 21:52:47.789"></status>
</kw>
<status endtime="20170823 21:52:47.791" status="PASS" starttime="20170823 21:52:47.788"></status>
</kw>
<status endtime="20170823 21:52:47.791" status="PASS" starttime="20170823 21:52:47.788"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:52:47.791" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:52:47.791" status="PASS" starttime="20170823 21:52:47.791"></status>
</kw>
<msg timestamp="20170823 21:52:47.791" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:47.791" status="PASS" starttime="20170823 21:52:47.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:52:47.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:47.792" status="PASS" starttime="20170823 21:52:47.792"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:52:47.793" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:52:47.793" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:52:47.793" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:52:47.793" status="PASS" starttime="20170823 21:52:47.792"></status>
</kw>
<msg timestamp="20170823 21:52:47.793" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:52:47.793" status="PASS" starttime="20170823 21:52:47.519"></status>
</kw>
<msg timestamp="20170823 21:52:47.793" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:52:47.793" status="PASS" starttime="20170823 21:52:47.519"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:52:47.794" level="FAIL">On != Off</msg>
<status endtime="20170823 21:52:47.794" status="FAIL" starttime="20170823 21:52:47.794"></status>
</kw>
<status endtime="20170823 21:52:47.794" status="FAIL" starttime="20170823 21:52:47.519"></status>
</kw>
<status endtime="20170823 21:52:47.794" status="FAIL" starttime="20170823 21:52:47.518"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:52:57.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:52:57.800" status="PASS" starttime="20170823 21:52:57.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:52:57.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:52:57.800" status="PASS" starttime="20170823 21:52:57.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:52:57.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:52:57.801" status="PASS" starttime="20170823 21:52:57.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:52:57.801" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:52:57.801" status="PASS" starttime="20170823 21:52:57.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:52:58.033" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:52:58.033" status="PASS" starttime="20170823 21:52:57.802"></status>
</kw>
<msg timestamp="20170823 21:52:58.033" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:52:58.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:58.034" status="PASS" starttime="20170823 21:52:57.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:52:58.034" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:58.034" status="PASS" starttime="20170823 21:52:58.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:52:58.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:58.035" status="PASS" starttime="20170823 21:52:58.035"></status>
</kw>
<status endtime="20170823 21:52:58.035" status="PASS" starttime="20170823 21:52:57.798"></status>
</kw>
<status endtime="20170823 21:52:58.035" status="PASS" starttime="20170823 21:52:57.798"></status>
</kw>
<status endtime="20170823 21:52:58.035" status="PASS" starttime="20170823 21:52:57.797"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:52:58.036" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:52:58.036" status="PASS" starttime="20170823 21:52:58.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:52:58.038" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:52:58.038" status="PASS" starttime="20170823 21:52:58.037"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:52:58.039" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:52:58.039" status="PASS" starttime="20170823 21:52:58.039"></status>
</kw>
<status endtime="20170823 21:52:58.039" status="PASS" starttime="20170823 21:52:58.038"></status>
</kw>
<status endtime="20170823 21:52:58.039" status="PASS" starttime="20170823 21:52:58.037"></status>
</kw>
<status endtime="20170823 21:52:58.039" status="PASS" starttime="20170823 21:52:58.036"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:52:58.118" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:52:58.118" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:58.118" status="PASS" starttime="20170823 21:52:58.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:52:58.120" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:52:58.120" status="PASS" starttime="20170823 21:52:58.119"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:52:58.121" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:52:58.121" status="PASS" starttime="20170823 21:52:58.120"></status>
</kw>
<status endtime="20170823 21:52:58.121" status="PASS" starttime="20170823 21:52:58.120"></status>
</kw>
<status endtime="20170823 21:52:58.121" status="PASS" starttime="20170823 21:52:58.119"></status>
</kw>
<status endtime="20170823 21:52:58.121" status="PASS" starttime="20170823 21:52:58.118"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:52:58.121" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:52:58.122" status="PASS" starttime="20170823 21:52:58.121"></status>
</kw>
<msg timestamp="20170823 21:52:58.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:52:58.122" status="PASS" starttime="20170823 21:52:57.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:52:58.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:52:58.122" status="PASS" starttime="20170823 21:52:58.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:52:58.123" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:52:58.123" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:52:58.123" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:52:58.123" status="PASS" starttime="20170823 21:52:58.123"></status>
</kw>
<msg timestamp="20170823 21:52:58.123" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:52:58.124" status="PASS" starttime="20170823 21:52:57.796"></status>
</kw>
<msg timestamp="20170823 21:52:58.124" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:52:58.124" status="PASS" starttime="20170823 21:52:57.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:52:58.124" level="FAIL">On != Off</msg>
<status endtime="20170823 21:52:58.125" status="FAIL" starttime="20170823 21:52:58.124"></status>
</kw>
<status endtime="20170823 21:52:58.125" status="FAIL" starttime="20170823 21:52:57.795"></status>
</kw>
<status endtime="20170823 21:52:58.125" status="FAIL" starttime="20170823 21:52:57.795"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:53:08.130" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:53:08.130" status="PASS" starttime="20170823 21:53:08.130"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:53:08.131" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:53:08.131" status="PASS" starttime="20170823 21:53:08.131"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:53:08.131" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:53:08.132" status="PASS" starttime="20170823 21:53:08.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:53:08.132" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:53:08.132" status="PASS" starttime="20170823 21:53:08.132"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:53:08.319" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:53:08.320" status="PASS" starttime="20170823 21:53:08.133"></status>
</kw>
<msg timestamp="20170823 21:53:08.320" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:53:08.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:08.320" status="PASS" starttime="20170823 21:53:08.132"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:53:08.320" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:08.320" status="PASS" starttime="20170823 21:53:08.320"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:53:08.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:08.321" status="PASS" starttime="20170823 21:53:08.321"></status>
</kw>
<status endtime="20170823 21:53:08.321" status="PASS" starttime="20170823 21:53:08.129"></status>
</kw>
<status endtime="20170823 21:53:08.321" status="PASS" starttime="20170823 21:53:08.128"></status>
</kw>
<status endtime="20170823 21:53:08.322" status="PASS" starttime="20170823 21:53:08.128"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:53:08.322" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:53:08.322" status="PASS" starttime="20170823 21:53:08.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:53:08.324" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:53:08.324" status="PASS" starttime="20170823 21:53:08.324"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:53:08.325" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:53:08.325" status="PASS" starttime="20170823 21:53:08.325"></status>
</kw>
<status endtime="20170823 21:53:08.325" status="PASS" starttime="20170823 21:53:08.324"></status>
</kw>
<status endtime="20170823 21:53:08.326" status="PASS" starttime="20170823 21:53:08.323"></status>
</kw>
<status endtime="20170823 21:53:08.326" status="PASS" starttime="20170823 21:53:08.322"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:53:08.411" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:53:08.411" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:08.411" status="PASS" starttime="20170823 21:53:08.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:53:08.413" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:53:08.413" status="PASS" starttime="20170823 21:53:08.412"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:53:08.414" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:53:08.414" status="PASS" starttime="20170823 21:53:08.414"></status>
</kw>
<status endtime="20170823 21:53:08.414" status="PASS" starttime="20170823 21:53:08.413"></status>
</kw>
<status endtime="20170823 21:53:08.415" status="PASS" starttime="20170823 21:53:08.412"></status>
</kw>
<status endtime="20170823 21:53:08.415" status="PASS" starttime="20170823 21:53:08.411"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:53:08.415" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:53:08.415" status="PASS" starttime="20170823 21:53:08.415"></status>
</kw>
<msg timestamp="20170823 21:53:08.415" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:08.415" status="PASS" starttime="20170823 21:53:08.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:53:08.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:08.416" status="PASS" starttime="20170823 21:53:08.416"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:53:08.416" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:53:08.417" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:53:08.417" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:53:08.417" status="PASS" starttime="20170823 21:53:08.416"></status>
</kw>
<msg timestamp="20170823 21:53:08.417" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:53:08.417" status="PASS" starttime="20170823 21:53:08.126"></status>
</kw>
<msg timestamp="20170823 21:53:08.417" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:53:08.417" status="PASS" starttime="20170823 21:53:08.126"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:53:08.418" level="FAIL">On != Off</msg>
<status endtime="20170823 21:53:08.418" status="FAIL" starttime="20170823 21:53:08.418"></status>
</kw>
<status endtime="20170823 21:53:08.418" status="FAIL" starttime="20170823 21:53:08.126"></status>
</kw>
<status endtime="20170823 21:53:08.418" status="FAIL" starttime="20170823 21:53:08.125"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:53:18.424" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:53:18.425" status="PASS" starttime="20170823 21:53:18.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:53:18.425" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:53:18.425" status="PASS" starttime="20170823 21:53:18.425"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:53:18.426" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:53:18.426" status="PASS" starttime="20170823 21:53:18.425"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:53:18.426" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:53:18.426" status="PASS" starttime="20170823 21:53:18.426"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:53:18.707" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:53:18.707" status="PASS" starttime="20170823 21:53:18.427"></status>
</kw>
<msg timestamp="20170823 21:53:18.707" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:53:18.707" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:18.708" status="PASS" starttime="20170823 21:53:18.427"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:53:18.708" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:18.708" status="PASS" starttime="20170823 21:53:18.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:53:18.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:18.709" status="PASS" starttime="20170823 21:53:18.709"></status>
</kw>
<status endtime="20170823 21:53:18.709" status="PASS" starttime="20170823 21:53:18.423"></status>
</kw>
<status endtime="20170823 21:53:18.709" status="PASS" starttime="20170823 21:53:18.423"></status>
</kw>
<status endtime="20170823 21:53:18.709" status="PASS" starttime="20170823 21:53:18.421"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:53:18.710" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:53:18.710" status="PASS" starttime="20170823 21:53:18.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:53:18.712" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:53:18.712" status="PASS" starttime="20170823 21:53:18.711"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:53:18.713" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:53:18.713" status="PASS" starttime="20170823 21:53:18.713"></status>
</kw>
<status endtime="20170823 21:53:18.714" status="PASS" starttime="20170823 21:53:18.712"></status>
</kw>
<status endtime="20170823 21:53:18.714" status="PASS" starttime="20170823 21:53:18.711"></status>
</kw>
<status endtime="20170823 21:53:18.714" status="PASS" starttime="20170823 21:53:18.710"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:53:18.847" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:53:18.847" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:18.847" status="PASS" starttime="20170823 21:53:18.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:53:18.849" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:53:18.849" status="PASS" starttime="20170823 21:53:18.849"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:53:18.850" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:53:18.850" status="PASS" starttime="20170823 21:53:18.850"></status>
</kw>
<status endtime="20170823 21:53:18.850" status="PASS" starttime="20170823 21:53:18.849"></status>
</kw>
<status endtime="20170823 21:53:18.850" status="PASS" starttime="20170823 21:53:18.848"></status>
</kw>
<status endtime="20170823 21:53:18.851" status="PASS" starttime="20170823 21:53:18.848"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:53:18.851" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:53:18.851" status="PASS" starttime="20170823 21:53:18.851"></status>
</kw>
<msg timestamp="20170823 21:53:18.851" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:18.851" status="PASS" starttime="20170823 21:53:18.421"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:53:18.852" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:18.852" status="PASS" starttime="20170823 21:53:18.851"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:53:18.852" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:53:18.852" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:53:18.853" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:53:18.853" status="PASS" starttime="20170823 21:53:18.852"></status>
</kw>
<msg timestamp="20170823 21:53:18.853" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:53:18.853" status="PASS" starttime="20170823 21:53:18.420"></status>
</kw>
<msg timestamp="20170823 21:53:18.853" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:53:18.853" status="PASS" starttime="20170823 21:53:18.420"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:53:18.854" level="FAIL">On != Off</msg>
<status endtime="20170823 21:53:18.854" status="FAIL" starttime="20170823 21:53:18.854"></status>
</kw>
<status endtime="20170823 21:53:18.854" status="FAIL" starttime="20170823 21:53:18.419"></status>
</kw>
<status endtime="20170823 21:53:18.854" status="FAIL" starttime="20170823 21:53:18.419"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:53:28.860" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:53:28.860" status="PASS" starttime="20170823 21:53:28.859"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:53:28.861" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:53:28.861" status="PASS" starttime="20170823 21:53:28.860"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:53:28.861" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:53:28.861" status="PASS" starttime="20170823 21:53:28.861"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:53:28.862" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:53:28.862" status="PASS" starttime="20170823 21:53:28.862"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:53:29.049" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:53:29.050" status="PASS" starttime="20170823 21:53:28.863"></status>
</kw>
<msg timestamp="20170823 21:53:29.050" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:53:29.050" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:29.050" status="PASS" starttime="20170823 21:53:28.862"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:53:29.051" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:29.051" status="PASS" starttime="20170823 21:53:29.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:53:29.051" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:29.051" status="PASS" starttime="20170823 21:53:29.051"></status>
</kw>
<status endtime="20170823 21:53:29.051" status="PASS" starttime="20170823 21:53:28.858"></status>
</kw>
<status endtime="20170823 21:53:29.051" status="PASS" starttime="20170823 21:53:28.858"></status>
</kw>
<status endtime="20170823 21:53:29.052" status="PASS" starttime="20170823 21:53:28.857"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:53:29.052" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:53:29.052" status="PASS" starttime="20170823 21:53:29.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:53:29.054" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:53:29.054" status="PASS" starttime="20170823 21:53:29.054"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:53:29.056" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:53:29.056" status="PASS" starttime="20170823 21:53:29.055"></status>
</kw>
<status endtime="20170823 21:53:29.056" status="PASS" starttime="20170823 21:53:29.055"></status>
</kw>
<status endtime="20170823 21:53:29.056" status="PASS" starttime="20170823 21:53:29.053"></status>
</kw>
<status endtime="20170823 21:53:29.056" status="PASS" starttime="20170823 21:53:29.053"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:53:29.158" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:53:29.158" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:29.158" status="PASS" starttime="20170823 21:53:29.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:53:29.160" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:53:29.160" status="PASS" starttime="20170823 21:53:29.159"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:53:29.161" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:53:29.161" status="PASS" starttime="20170823 21:53:29.161"></status>
</kw>
<status endtime="20170823 21:53:29.161" status="PASS" starttime="20170823 21:53:29.160"></status>
</kw>
<status endtime="20170823 21:53:29.161" status="PASS" starttime="20170823 21:53:29.159"></status>
</kw>
<status endtime="20170823 21:53:29.162" status="PASS" starttime="20170823 21:53:29.158"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:53:29.162" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:53:29.162" status="PASS" starttime="20170823 21:53:29.162"></status>
</kw>
<msg timestamp="20170823 21:53:29.162" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:29.162" status="PASS" starttime="20170823 21:53:28.857"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:53:29.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:29.163" status="PASS" starttime="20170823 21:53:29.163"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:53:29.164" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:53:29.164" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:53:29.164" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:53:29.164" status="PASS" starttime="20170823 21:53:29.163"></status>
</kw>
<msg timestamp="20170823 21:53:29.164" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:53:29.164" status="PASS" starttime="20170823 21:53:28.856"></status>
</kw>
<msg timestamp="20170823 21:53:29.164" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:53:29.164" status="PASS" starttime="20170823 21:53:28.856"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:53:29.165" level="FAIL">On != Off</msg>
<status endtime="20170823 21:53:29.165" status="FAIL" starttime="20170823 21:53:29.165"></status>
</kw>
<status endtime="20170823 21:53:29.165" status="FAIL" starttime="20170823 21:53:28.855"></status>
</kw>
<status endtime="20170823 21:53:29.165" status="FAIL" starttime="20170823 21:53:28.855"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:53:39.170" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:53:39.171" status="PASS" starttime="20170823 21:53:39.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:53:39.171" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:53:39.171" status="PASS" starttime="20170823 21:53:39.171"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:53:39.172" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:53:39.172" status="PASS" starttime="20170823 21:53:39.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:53:39.173" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:53:39.173" status="PASS" starttime="20170823 21:53:39.172"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:53:39.349" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:53:39.349" status="PASS" starttime="20170823 21:53:39.173"></status>
</kw>
<msg timestamp="20170823 21:53:39.349" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:53:39.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:39.349" status="PASS" starttime="20170823 21:53:39.173"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:53:39.350" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:39.350" status="PASS" starttime="20170823 21:53:39.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:53:39.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:39.350" status="PASS" starttime="20170823 21:53:39.350"></status>
</kw>
<status endtime="20170823 21:53:39.351" status="PASS" starttime="20170823 21:53:39.170"></status>
</kw>
<status endtime="20170823 21:53:39.351" status="PASS" starttime="20170823 21:53:39.169"></status>
</kw>
<status endtime="20170823 21:53:39.351" status="PASS" starttime="20170823 21:53:39.168"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:53:39.351" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:53:39.351" status="PASS" starttime="20170823 21:53:39.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:53:39.354" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:53:39.354" status="PASS" starttime="20170823 21:53:39.353"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:53:39.354" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:53:39.355" status="PASS" starttime="20170823 21:53:39.354"></status>
</kw>
<status endtime="20170823 21:53:39.355" status="PASS" starttime="20170823 21:53:39.354"></status>
</kw>
<status endtime="20170823 21:53:39.355" status="PASS" starttime="20170823 21:53:39.352"></status>
</kw>
<status endtime="20170823 21:53:39.355" status="PASS" starttime="20170823 21:53:39.352"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:53:39.442" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:53:39.442" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:39.442" status="PASS" starttime="20170823 21:53:39.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:53:39.444" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:53:39.444" status="PASS" starttime="20170823 21:53:39.444"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:53:39.445" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:53:39.445" status="PASS" starttime="20170823 21:53:39.445"></status>
</kw>
<status endtime="20170823 21:53:39.445" status="PASS" starttime="20170823 21:53:39.444"></status>
</kw>
<status endtime="20170823 21:53:39.445" status="PASS" starttime="20170823 21:53:39.443"></status>
</kw>
<status endtime="20170823 21:53:39.445" status="PASS" starttime="20170823 21:53:39.443"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:53:39.446" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:53:39.446" status="PASS" starttime="20170823 21:53:39.446"></status>
</kw>
<msg timestamp="20170823 21:53:39.446" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:39.446" status="PASS" starttime="20170823 21:53:39.168"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:53:39.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:39.447" status="PASS" starttime="20170823 21:53:39.446"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:53:39.447" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:53:39.447" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:53:39.448" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:53:39.448" status="PASS" starttime="20170823 21:53:39.447"></status>
</kw>
<msg timestamp="20170823 21:53:39.448" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:53:39.448" status="PASS" starttime="20170823 21:53:39.167"></status>
</kw>
<msg timestamp="20170823 21:53:39.448" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:53:39.448" status="PASS" starttime="20170823 21:53:39.167"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:53:39.449" level="FAIL">On != Off</msg>
<status endtime="20170823 21:53:39.449" status="FAIL" starttime="20170823 21:53:39.449"></status>
</kw>
<status endtime="20170823 21:53:39.449" status="FAIL" starttime="20170823 21:53:39.167"></status>
</kw>
<status endtime="20170823 21:53:39.449" status="FAIL" starttime="20170823 21:53:39.166"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:53:49.455" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:53:49.455" status="PASS" starttime="20170823 21:53:49.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:53:49.456" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:53:49.456" status="PASS" starttime="20170823 21:53:49.455"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:53:49.456" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:53:49.456" status="PASS" starttime="20170823 21:53:49.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:53:49.457" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:53:49.457" status="PASS" starttime="20170823 21:53:49.457"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:53:49.637" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:53:49.637" status="PASS" starttime="20170823 21:53:49.458"></status>
</kw>
<msg timestamp="20170823 21:53:49.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:53:49.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:49.637" status="PASS" starttime="20170823 21:53:49.457"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:53:49.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:49.638" status="PASS" starttime="20170823 21:53:49.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:53:49.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:49.639" status="PASS" starttime="20170823 21:53:49.638"></status>
</kw>
<status endtime="20170823 21:53:49.639" status="PASS" starttime="20170823 21:53:49.453"></status>
</kw>
<status endtime="20170823 21:53:49.639" status="PASS" starttime="20170823 21:53:49.453"></status>
</kw>
<status endtime="20170823 21:53:49.639" status="PASS" starttime="20170823 21:53:49.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:53:49.640" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:53:49.640" status="PASS" starttime="20170823 21:53:49.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:53:49.642" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:53:49.642" status="PASS" starttime="20170823 21:53:49.641"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:53:49.642" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:53:49.643" status="PASS" starttime="20170823 21:53:49.642"></status>
</kw>
<status endtime="20170823 21:53:49.643" status="PASS" starttime="20170823 21:53:49.642"></status>
</kw>
<status endtime="20170823 21:53:49.643" status="PASS" starttime="20170823 21:53:49.640"></status>
</kw>
<status endtime="20170823 21:53:49.643" status="PASS" starttime="20170823 21:53:49.640"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:53:49.707" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:53:49.707" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:49.707" status="PASS" starttime="20170823 21:53:49.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:53:49.709" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:53:49.709" status="PASS" starttime="20170823 21:53:49.708"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:53:49.710" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:53:49.710" status="PASS" starttime="20170823 21:53:49.709"></status>
</kw>
<status endtime="20170823 21:53:49.710" status="PASS" starttime="20170823 21:53:49.709"></status>
</kw>
<status endtime="20170823 21:53:49.710" status="PASS" starttime="20170823 21:53:49.708"></status>
</kw>
<status endtime="20170823 21:53:49.710" status="PASS" starttime="20170823 21:53:49.707"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:53:49.711" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:53:49.711" status="PASS" starttime="20170823 21:53:49.710"></status>
</kw>
<msg timestamp="20170823 21:53:49.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:49.711" status="PASS" starttime="20170823 21:53:49.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:53:49.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:49.712" status="PASS" starttime="20170823 21:53:49.711"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:53:49.712" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:53:49.712" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:53:49.712" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:53:49.712" status="PASS" starttime="20170823 21:53:49.712"></status>
</kw>
<msg timestamp="20170823 21:53:49.713" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:53:49.713" status="PASS" starttime="20170823 21:53:49.451"></status>
</kw>
<msg timestamp="20170823 21:53:49.713" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:53:49.713" status="PASS" starttime="20170823 21:53:49.451"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:53:49.714" level="FAIL">On != Off</msg>
<status endtime="20170823 21:53:49.714" status="FAIL" starttime="20170823 21:53:49.713"></status>
</kw>
<status endtime="20170823 21:53:49.714" status="FAIL" starttime="20170823 21:53:49.450"></status>
</kw>
<status endtime="20170823 21:53:49.714" status="FAIL" starttime="20170823 21:53:49.450"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:53:59.719" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:53:59.719" status="PASS" starttime="20170823 21:53:59.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:53:59.720" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:53:59.720" status="PASS" starttime="20170823 21:53:59.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:53:59.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:53:59.720" status="PASS" starttime="20170823 21:53:59.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:53:59.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:53:59.721" status="PASS" starttime="20170823 21:53:59.721"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:53:59.898" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:53:59.898" status="PASS" starttime="20170823 21:53:59.722"></status>
</kw>
<msg timestamp="20170823 21:53:59.898" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:53:59.898" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:53:59.898" status="PASS" starttime="20170823 21:53:59.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:53:59.899" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:59.899" status="PASS" starttime="20170823 21:53:59.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:53:59.899" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:53:59.899" status="PASS" starttime="20170823 21:53:59.899"></status>
</kw>
<status endtime="20170823 21:53:59.900" status="PASS" starttime="20170823 21:53:59.718"></status>
</kw>
<status endtime="20170823 21:53:59.900" status="PASS" starttime="20170823 21:53:59.717"></status>
</kw>
<status endtime="20170823 21:53:59.900" status="PASS" starttime="20170823 21:53:59.717"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:53:59.900" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:53:59.900" status="PASS" starttime="20170823 21:53:59.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:53:59.902" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:53:59.902" status="PASS" starttime="20170823 21:53:59.902"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:53:59.903" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:53:59.903" status="PASS" starttime="20170823 21:53:59.903"></status>
</kw>
<status endtime="20170823 21:53:59.904" status="PASS" starttime="20170823 21:53:59.903"></status>
</kw>
<status endtime="20170823 21:53:59.904" status="PASS" starttime="20170823 21:53:59.901"></status>
</kw>
<status endtime="20170823 21:53:59.904" status="PASS" starttime="20170823 21:53:59.901"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:54:00.088" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:54:00.088" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:00.088" status="PASS" starttime="20170823 21:53:59.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:54:00.090" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:54:00.090" status="PASS" starttime="20170823 21:54:00.089"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:54:00.091" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:54:00.091" status="PASS" starttime="20170823 21:54:00.091"></status>
</kw>
<status endtime="20170823 21:54:00.091" status="PASS" starttime="20170823 21:54:00.090"></status>
</kw>
<status endtime="20170823 21:54:00.091" status="PASS" starttime="20170823 21:54:00.089"></status>
</kw>
<status endtime="20170823 21:54:00.091" status="PASS" starttime="20170823 21:54:00.089"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:54:00.092" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:54:00.092" status="PASS" starttime="20170823 21:54:00.092"></status>
</kw>
<msg timestamp="20170823 21:54:00.092" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:00.092" status="PASS" starttime="20170823 21:53:59.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:54:00.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:00.093" status="PASS" starttime="20170823 21:54:00.092"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:54:00.093" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:54:00.093" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:54:00.093" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:54:00.093" status="PASS" starttime="20170823 21:54:00.093"></status>
</kw>
<msg timestamp="20170823 21:54:00.094" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:54:00.094" status="PASS" starttime="20170823 21:53:59.716"></status>
</kw>
<msg timestamp="20170823 21:54:00.094" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:54:00.094" status="PASS" starttime="20170823 21:53:59.715"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:54:00.095" level="FAIL">On != Off</msg>
<status endtime="20170823 21:54:00.095" status="FAIL" starttime="20170823 21:54:00.094"></status>
</kw>
<status endtime="20170823 21:54:00.095" status="FAIL" starttime="20170823 21:53:59.715"></status>
</kw>
<status endtime="20170823 21:54:00.095" status="FAIL" starttime="20170823 21:53:59.714"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:54:10.101" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:54:10.102" status="PASS" starttime="20170823 21:54:10.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:54:10.102" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:54:10.102" status="PASS" starttime="20170823 21:54:10.102"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:54:10.103" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:54:10.103" status="PASS" starttime="20170823 21:54:10.102"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:54:10.103" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:54:10.103" status="PASS" starttime="20170823 21:54:10.103"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:54:10.290" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:54:10.290" status="PASS" starttime="20170823 21:54:10.104"></status>
</kw>
<msg timestamp="20170823 21:54:10.290" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:54:10.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:10.290" status="PASS" starttime="20170823 21:54:10.104"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:54:10.291" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:10.291" status="PASS" starttime="20170823 21:54:10.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:54:10.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:10.291" status="PASS" starttime="20170823 21:54:10.291"></status>
</kw>
<status endtime="20170823 21:54:10.291" status="PASS" starttime="20170823 21:54:10.099"></status>
</kw>
<status endtime="20170823 21:54:10.292" status="PASS" starttime="20170823 21:54:10.099"></status>
</kw>
<status endtime="20170823 21:54:10.292" status="PASS" starttime="20170823 21:54:10.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:54:10.292" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:54:10.292" status="PASS" starttime="20170823 21:54:10.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:54:10.294" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:54:10.294" status="PASS" starttime="20170823 21:54:10.294"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:54:10.295" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:54:10.295" status="PASS" starttime="20170823 21:54:10.295"></status>
</kw>
<status endtime="20170823 21:54:10.295" status="PASS" starttime="20170823 21:54:10.295"></status>
</kw>
<status endtime="20170823 21:54:10.296" status="PASS" starttime="20170823 21:54:10.293"></status>
</kw>
<status endtime="20170823 21:54:10.296" status="PASS" starttime="20170823 21:54:10.293"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:54:10.381" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:54:10.381" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:10.381" status="PASS" starttime="20170823 21:54:10.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:54:10.383" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:54:10.383" status="PASS" starttime="20170823 21:54:10.382"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:54:10.384" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:54:10.384" status="PASS" starttime="20170823 21:54:10.383"></status>
</kw>
<status endtime="20170823 21:54:10.384" status="PASS" starttime="20170823 21:54:10.383"></status>
</kw>
<status endtime="20170823 21:54:10.384" status="PASS" starttime="20170823 21:54:10.382"></status>
</kw>
<status endtime="20170823 21:54:10.384" status="PASS" starttime="20170823 21:54:10.381"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:54:10.385" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:54:10.385" status="PASS" starttime="20170823 21:54:10.384"></status>
</kw>
<msg timestamp="20170823 21:54:10.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:10.385" status="PASS" starttime="20170823 21:54:10.097"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:54:10.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:10.386" status="PASS" starttime="20170823 21:54:10.385"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:54:10.386" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:54:10.386" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:54:10.386" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:54:10.386" status="PASS" starttime="20170823 21:54:10.386"></status>
</kw>
<msg timestamp="20170823 21:54:10.387" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:54:10.387" status="PASS" starttime="20170823 21:54:10.097"></status>
</kw>
<msg timestamp="20170823 21:54:10.387" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:54:10.387" status="PASS" starttime="20170823 21:54:10.096"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:54:10.388" level="FAIL">On != Off</msg>
<status endtime="20170823 21:54:10.388" status="FAIL" starttime="20170823 21:54:10.387"></status>
</kw>
<status endtime="20170823 21:54:10.388" status="FAIL" starttime="20170823 21:54:10.096"></status>
</kw>
<status endtime="20170823 21:54:10.388" status="FAIL" starttime="20170823 21:54:10.095"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:54:20.393" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:54:20.393" status="PASS" starttime="20170823 21:54:20.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:54:20.394" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:54:20.394" status="PASS" starttime="20170823 21:54:20.393"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:54:20.394" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:54:20.394" status="PASS" starttime="20170823 21:54:20.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:54:20.395" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:54:20.395" status="PASS" starttime="20170823 21:54:20.395"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:54:20.583" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:54:20.583" status="PASS" starttime="20170823 21:54:20.396"></status>
</kw>
<msg timestamp="20170823 21:54:20.583" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:54:20.583" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:20.583" status="PASS" starttime="20170823 21:54:20.395"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:54:20.584" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:20.584" status="PASS" starttime="20170823 21:54:20.583"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:54:20.585" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:20.585" status="PASS" starttime="20170823 21:54:20.584"></status>
</kw>
<status endtime="20170823 21:54:20.585" status="PASS" starttime="20170823 21:54:20.392"></status>
</kw>
<status endtime="20170823 21:54:20.585" status="PASS" starttime="20170823 21:54:20.391"></status>
</kw>
<status endtime="20170823 21:54:20.585" status="PASS" starttime="20170823 21:54:20.391"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:54:20.586" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:54:20.586" status="PASS" starttime="20170823 21:54:20.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:54:20.588" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:54:20.588" status="PASS" starttime="20170823 21:54:20.587"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:54:20.589" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:54:20.589" status="PASS" starttime="20170823 21:54:20.589"></status>
</kw>
<status endtime="20170823 21:54:20.589" status="PASS" starttime="20170823 21:54:20.588"></status>
</kw>
<status endtime="20170823 21:54:20.589" status="PASS" starttime="20170823 21:54:20.586"></status>
</kw>
<status endtime="20170823 21:54:20.589" status="PASS" starttime="20170823 21:54:20.586"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:54:20.685" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:54:20.685" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:20.685" status="PASS" starttime="20170823 21:54:20.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:54:20.687" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:54:20.687" status="PASS" starttime="20170823 21:54:20.687"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:54:20.688" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:54:20.688" status="PASS" starttime="20170823 21:54:20.688"></status>
</kw>
<status endtime="20170823 21:54:20.688" status="PASS" starttime="20170823 21:54:20.687"></status>
</kw>
<status endtime="20170823 21:54:20.688" status="PASS" starttime="20170823 21:54:20.686"></status>
</kw>
<status endtime="20170823 21:54:20.688" status="PASS" starttime="20170823 21:54:20.686"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:54:20.689" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:54:20.689" status="PASS" starttime="20170823 21:54:20.689"></status>
</kw>
<msg timestamp="20170823 21:54:20.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:20.689" status="PASS" starttime="20170823 21:54:20.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:54:20.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:20.690" status="PASS" starttime="20170823 21:54:20.689"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:54:20.691" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:54:20.691" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:54:20.691" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:54:20.691" status="PASS" starttime="20170823 21:54:20.690"></status>
</kw>
<msg timestamp="20170823 21:54:20.691" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:54:20.691" status="PASS" starttime="20170823 21:54:20.390"></status>
</kw>
<msg timestamp="20170823 21:54:20.692" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:54:20.692" status="PASS" starttime="20170823 21:54:20.389"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:54:20.692" level="FAIL">On != Off</msg>
<status endtime="20170823 21:54:20.692" status="FAIL" starttime="20170823 21:54:20.692"></status>
</kw>
<status endtime="20170823 21:54:20.693" status="FAIL" starttime="20170823 21:54:20.389"></status>
</kw>
<status endtime="20170823 21:54:20.693" status="FAIL" starttime="20170823 21:54:20.388"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:54:30.698" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:54:30.699" status="PASS" starttime="20170823 21:54:30.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:54:30.699" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:54:30.699" status="PASS" starttime="20170823 21:54:30.699"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:54:30.700" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:54:30.700" status="PASS" starttime="20170823 21:54:30.699"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:54:30.700" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:54:30.700" status="PASS" starttime="20170823 21:54:30.700"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:54:30.896" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:54:30.896" status="PASS" starttime="20170823 21:54:30.701"></status>
</kw>
<msg timestamp="20170823 21:54:30.896" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:54:30.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:30.896" status="PASS" starttime="20170823 21:54:30.701"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:54:30.897" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:30.897" status="PASS" starttime="20170823 21:54:30.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:54:30.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:30.897" status="PASS" starttime="20170823 21:54:30.897"></status>
</kw>
<status endtime="20170823 21:54:30.898" status="PASS" starttime="20170823 21:54:30.697"></status>
</kw>
<status endtime="20170823 21:54:30.898" status="PASS" starttime="20170823 21:54:30.696"></status>
</kw>
<status endtime="20170823 21:54:30.898" status="PASS" starttime="20170823 21:54:30.696"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:54:30.898" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:54:30.898" status="PASS" starttime="20170823 21:54:30.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:54:30.900" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:54:30.900" status="PASS" starttime="20170823 21:54:30.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:54:30.901" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:54:30.902" status="PASS" starttime="20170823 21:54:30.901"></status>
</kw>
<status endtime="20170823 21:54:30.902" status="PASS" starttime="20170823 21:54:30.901"></status>
</kw>
<status endtime="20170823 21:54:30.902" status="PASS" starttime="20170823 21:54:30.899"></status>
</kw>
<status endtime="20170823 21:54:30.902" status="PASS" starttime="20170823 21:54:30.899"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:54:31.015" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:54:31.015" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:31.015" status="PASS" starttime="20170823 21:54:30.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:54:31.017" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:54:31.017" status="PASS" starttime="20170823 21:54:31.017"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:54:31.018" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:54:31.019" status="PASS" starttime="20170823 21:54:31.018"></status>
</kw>
<status endtime="20170823 21:54:31.019" status="PASS" starttime="20170823 21:54:31.017"></status>
</kw>
<status endtime="20170823 21:54:31.019" status="PASS" starttime="20170823 21:54:31.016"></status>
</kw>
<status endtime="20170823 21:54:31.019" status="PASS" starttime="20170823 21:54:31.016"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:54:31.019" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:54:31.019" status="PASS" starttime="20170823 21:54:31.019"></status>
</kw>
<msg timestamp="20170823 21:54:31.019" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:31.020" status="PASS" starttime="20170823 21:54:30.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:54:31.020" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:31.020" status="PASS" starttime="20170823 21:54:31.020"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:54:31.021" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:54:31.021" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:54:31.021" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:54:31.021" status="PASS" starttime="20170823 21:54:31.020"></status>
</kw>
<msg timestamp="20170823 21:54:31.021" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:54:31.021" status="PASS" starttime="20170823 21:54:30.695"></status>
</kw>
<msg timestamp="20170823 21:54:31.022" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:54:31.022" status="PASS" starttime="20170823 21:54:30.694"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:54:31.022" level="FAIL">On != Off</msg>
<status endtime="20170823 21:54:31.022" status="FAIL" starttime="20170823 21:54:31.022"></status>
</kw>
<status endtime="20170823 21:54:31.022" status="FAIL" starttime="20170823 21:54:30.694"></status>
</kw>
<status endtime="20170823 21:54:31.023" status="FAIL" starttime="20170823 21:54:30.693"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:54:41.028" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:54:41.028" status="PASS" starttime="20170823 21:54:41.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:54:41.029" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:54:41.029" status="PASS" starttime="20170823 21:54:41.028"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:54:41.029" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:54:41.029" status="PASS" starttime="20170823 21:54:41.029"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:54:41.030" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:54:41.030" status="PASS" starttime="20170823 21:54:41.030"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:54:41.266" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:54:41.266" status="PASS" starttime="20170823 21:54:41.031"></status>
</kw>
<msg timestamp="20170823 21:54:41.266" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:54:41.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:41.266" status="PASS" starttime="20170823 21:54:41.030"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:54:41.267" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:41.267" status="PASS" starttime="20170823 21:54:41.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:54:41.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:41.268" status="PASS" starttime="20170823 21:54:41.267"></status>
</kw>
<status endtime="20170823 21:54:41.268" status="PASS" starttime="20170823 21:54:41.027"></status>
</kw>
<status endtime="20170823 21:54:41.268" status="PASS" starttime="20170823 21:54:41.026"></status>
</kw>
<status endtime="20170823 21:54:41.268" status="PASS" starttime="20170823 21:54:41.026"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:54:41.269" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:54:41.269" status="PASS" starttime="20170823 21:54:41.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:54:41.271" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:54:41.271" status="PASS" starttime="20170823 21:54:41.270"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:54:41.272" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:54:41.272" status="PASS" starttime="20170823 21:54:41.271"></status>
</kw>
<status endtime="20170823 21:54:41.272" status="PASS" starttime="20170823 21:54:41.271"></status>
</kw>
<status endtime="20170823 21:54:41.272" status="PASS" starttime="20170823 21:54:41.269"></status>
</kw>
<status endtime="20170823 21:54:41.272" status="PASS" starttime="20170823 21:54:41.269"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:54:41.364" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:54:41.364" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:41.364" status="PASS" starttime="20170823 21:54:41.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:54:41.366" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:54:41.366" status="PASS" starttime="20170823 21:54:41.365"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:54:41.367" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:54:41.367" status="PASS" starttime="20170823 21:54:41.367"></status>
</kw>
<status endtime="20170823 21:54:41.367" status="PASS" starttime="20170823 21:54:41.366"></status>
</kw>
<status endtime="20170823 21:54:41.367" status="PASS" starttime="20170823 21:54:41.365"></status>
</kw>
<status endtime="20170823 21:54:41.367" status="PASS" starttime="20170823 21:54:41.365"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:54:41.368" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:54:41.368" status="PASS" starttime="20170823 21:54:41.368"></status>
</kw>
<msg timestamp="20170823 21:54:41.368" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:41.368" status="PASS" starttime="20170823 21:54:41.025"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:54:41.369" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:41.369" status="PASS" starttime="20170823 21:54:41.368"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:54:41.369" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:54:41.369" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:54:41.369" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:54:41.370" status="PASS" starttime="20170823 21:54:41.369"></status>
</kw>
<msg timestamp="20170823 21:54:41.370" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:54:41.370" status="PASS" starttime="20170823 21:54:41.024"></status>
</kw>
<msg timestamp="20170823 21:54:41.370" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:54:41.370" status="PASS" starttime="20170823 21:54:41.024"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:54:41.371" level="FAIL">On != Off</msg>
<status endtime="20170823 21:54:41.371" status="FAIL" starttime="20170823 21:54:41.370"></status>
</kw>
<status endtime="20170823 21:54:41.371" status="FAIL" starttime="20170823 21:54:41.024"></status>
</kw>
<status endtime="20170823 21:54:41.371" status="FAIL" starttime="20170823 21:54:41.023"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:54:51.377" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:54:51.377" status="PASS" starttime="20170823 21:54:51.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:54:51.378" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:54:51.378" status="PASS" starttime="20170823 21:54:51.377"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:54:51.378" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:54:51.378" status="PASS" starttime="20170823 21:54:51.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:54:51.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:54:51.379" status="PASS" starttime="20170823 21:54:51.379"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:54:51.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:54:51.653" status="PASS" starttime="20170823 21:54:51.380"></status>
</kw>
<msg timestamp="20170823 21:54:51.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:54:51.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:51.654" status="PASS" starttime="20170823 21:54:51.379"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:54:51.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:51.654" status="PASS" starttime="20170823 21:54:51.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:54:51.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:51.655" status="PASS" starttime="20170823 21:54:51.655"></status>
</kw>
<status endtime="20170823 21:54:51.655" status="PASS" starttime="20170823 21:54:51.375"></status>
</kw>
<status endtime="20170823 21:54:51.655" status="PASS" starttime="20170823 21:54:51.375"></status>
</kw>
<status endtime="20170823 21:54:51.655" status="PASS" starttime="20170823 21:54:51.374"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:54:51.656" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:54:51.656" status="PASS" starttime="20170823 21:54:51.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:54:51.658" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:54:51.658" status="PASS" starttime="20170823 21:54:51.657"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:54:51.659" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:54:51.659" status="PASS" starttime="20170823 21:54:51.659"></status>
</kw>
<status endtime="20170823 21:54:51.659" status="PASS" starttime="20170823 21:54:51.658"></status>
</kw>
<status endtime="20170823 21:54:51.659" status="PASS" starttime="20170823 21:54:51.657"></status>
</kw>
<status endtime="20170823 21:54:51.659" status="PASS" starttime="20170823 21:54:51.656"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:54:51.722" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:54:51.722" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:51.723" status="PASS" starttime="20170823 21:54:51.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:54:51.724" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:54:51.724" status="PASS" starttime="20170823 21:54:51.724"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:54:51.726" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:54:51.726" status="PASS" starttime="20170823 21:54:51.725"></status>
</kw>
<status endtime="20170823 21:54:51.726" status="PASS" starttime="20170823 21:54:51.724"></status>
</kw>
<status endtime="20170823 21:54:51.726" status="PASS" starttime="20170823 21:54:51.723"></status>
</kw>
<status endtime="20170823 21:54:51.726" status="PASS" starttime="20170823 21:54:51.723"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:54:51.726" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:54:51.726" status="PASS" starttime="20170823 21:54:51.726"></status>
</kw>
<msg timestamp="20170823 21:54:51.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:54:51.727" status="PASS" starttime="20170823 21:54:51.374"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:54:51.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:54:51.727" status="PASS" starttime="20170823 21:54:51.727"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:54:51.728" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:54:51.728" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:54:51.728" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:54:51.728" status="PASS" starttime="20170823 21:54:51.728"></status>
</kw>
<msg timestamp="20170823 21:54:51.728" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:54:51.728" status="PASS" starttime="20170823 21:54:51.373"></status>
</kw>
<msg timestamp="20170823 21:54:51.729" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:54:51.729" status="PASS" starttime="20170823 21:54:51.373"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:54:51.729" level="FAIL">On != Off</msg>
<status endtime="20170823 21:54:51.729" status="FAIL" starttime="20170823 21:54:51.729"></status>
</kw>
<status endtime="20170823 21:54:51.730" status="FAIL" starttime="20170823 21:54:51.372"></status>
</kw>
<status endtime="20170823 21:54:51.730" status="FAIL" starttime="20170823 21:54:51.372"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:55:01.735" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:55:01.735" status="PASS" starttime="20170823 21:55:01.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:55:01.736" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:55:01.736" status="PASS" starttime="20170823 21:55:01.736"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:55:01.737" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:55:01.737" status="PASS" starttime="20170823 21:55:01.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:55:01.737" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:55:01.737" status="PASS" starttime="20170823 21:55:01.737"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:55:01.927" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:55:01.927" status="PASS" starttime="20170823 21:55:01.738"></status>
</kw>
<msg timestamp="20170823 21:55:01.927" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:55:01.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:01.927" status="PASS" starttime="20170823 21:55:01.737"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:55:01.928" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:01.928" status="PASS" starttime="20170823 21:55:01.928"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:55:01.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:01.929" status="PASS" starttime="20170823 21:55:01.928"></status>
</kw>
<status endtime="20170823 21:55:01.929" status="PASS" starttime="20170823 21:55:01.734"></status>
</kw>
<status endtime="20170823 21:55:01.929" status="PASS" starttime="20170823 21:55:01.734"></status>
</kw>
<status endtime="20170823 21:55:01.929" status="PASS" starttime="20170823 21:55:01.733"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:55:01.930" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:55:01.930" status="PASS" starttime="20170823 21:55:01.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:55:01.932" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:55:01.932" status="PASS" starttime="20170823 21:55:01.931"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:55:01.932" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:55:01.933" status="PASS" starttime="20170823 21:55:01.932"></status>
</kw>
<status endtime="20170823 21:55:01.933" status="PASS" starttime="20170823 21:55:01.932"></status>
</kw>
<status endtime="20170823 21:55:01.933" status="PASS" starttime="20170823 21:55:01.930"></status>
</kw>
<status endtime="20170823 21:55:01.933" status="PASS" starttime="20170823 21:55:01.930"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:55:01.997" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:55:01.997" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:01.997" status="PASS" starttime="20170823 21:55:01.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:55:01.999" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:55:01.999" status="PASS" starttime="20170823 21:55:01.998"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:55:02.000" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:55:02.000" status="PASS" starttime="20170823 21:55:01.999"></status>
</kw>
<status endtime="20170823 21:55:02.000" status="PASS" starttime="20170823 21:55:01.999"></status>
</kw>
<status endtime="20170823 21:55:02.000" status="PASS" starttime="20170823 21:55:01.998"></status>
</kw>
<status endtime="20170823 21:55:02.000" status="PASS" starttime="20170823 21:55:01.997"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:55:02.001" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:55:02.001" status="PASS" starttime="20170823 21:55:02.000"></status>
</kw>
<msg timestamp="20170823 21:55:02.001" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:02.001" status="PASS" starttime="20170823 21:55:01.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:55:02.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:02.002" status="PASS" starttime="20170823 21:55:02.001"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:55:02.002" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:55:02.002" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:55:02.002" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:55:02.002" status="PASS" starttime="20170823 21:55:02.002"></status>
</kw>
<msg timestamp="20170823 21:55:02.003" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:55:02.003" status="PASS" starttime="20170823 21:55:01.732"></status>
</kw>
<msg timestamp="20170823 21:55:02.003" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:55:02.003" status="PASS" starttime="20170823 21:55:01.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:55:02.003" level="FAIL">On != Off</msg>
<status endtime="20170823 21:55:02.004" status="FAIL" starttime="20170823 21:55:02.003"></status>
</kw>
<status endtime="20170823 21:55:02.004" status="FAIL" starttime="20170823 21:55:01.731"></status>
</kw>
<status endtime="20170823 21:55:02.004" status="FAIL" starttime="20170823 21:55:01.730"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:55:12.010" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:55:12.010" status="PASS" starttime="20170823 21:55:12.009"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:55:12.011" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:55:12.011" status="PASS" starttime="20170823 21:55:12.010"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:55:12.011" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:55:12.011" status="PASS" starttime="20170823 21:55:12.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:55:12.012" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:55:12.012" status="PASS" starttime="20170823 21:55:12.012"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:55:12.202" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:55:12.202" status="PASS" starttime="20170823 21:55:12.013"></status>
</kw>
<msg timestamp="20170823 21:55:12.203" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:55:12.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:12.203" status="PASS" starttime="20170823 21:55:12.012"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:55:12.203" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:12.203" status="PASS" starttime="20170823 21:55:12.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:55:12.204" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:12.204" status="PASS" starttime="20170823 21:55:12.204"></status>
</kw>
<status endtime="20170823 21:55:12.204" status="PASS" starttime="20170823 21:55:12.008"></status>
</kw>
<status endtime="20170823 21:55:12.204" status="PASS" starttime="20170823 21:55:12.008"></status>
</kw>
<status endtime="20170823 21:55:12.205" status="PASS" starttime="20170823 21:55:12.007"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:55:12.205" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:55:12.205" status="PASS" starttime="20170823 21:55:12.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:55:12.207" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:55:12.207" status="PASS" starttime="20170823 21:55:12.207"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:55:12.208" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:55:12.208" status="PASS" starttime="20170823 21:55:12.208"></status>
</kw>
<status endtime="20170823 21:55:12.208" status="PASS" starttime="20170823 21:55:12.207"></status>
</kw>
<status endtime="20170823 21:55:12.209" status="PASS" starttime="20170823 21:55:12.206"></status>
</kw>
<status endtime="20170823 21:55:12.209" status="PASS" starttime="20170823 21:55:12.205"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:55:12.272" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:55:12.273" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:12.273" status="PASS" starttime="20170823 21:55:12.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:55:12.274" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:55:12.274" status="PASS" starttime="20170823 21:55:12.274"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:55:12.276" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:55:12.276" status="PASS" starttime="20170823 21:55:12.275"></status>
</kw>
<status endtime="20170823 21:55:12.276" status="PASS" starttime="20170823 21:55:12.275"></status>
</kw>
<status endtime="20170823 21:55:12.276" status="PASS" starttime="20170823 21:55:12.273"></status>
</kw>
<status endtime="20170823 21:55:12.276" status="PASS" starttime="20170823 21:55:12.273"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:55:12.277" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:55:12.277" status="PASS" starttime="20170823 21:55:12.276"></status>
</kw>
<msg timestamp="20170823 21:55:12.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:12.277" status="PASS" starttime="20170823 21:55:12.006"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:55:12.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:12.277" status="PASS" starttime="20170823 21:55:12.277"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:55:12.278" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:55:12.278" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:55:12.278" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:55:12.278" status="PASS" starttime="20170823 21:55:12.278"></status>
</kw>
<msg timestamp="20170823 21:55:12.278" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:55:12.279" status="PASS" starttime="20170823 21:55:12.006"></status>
</kw>
<msg timestamp="20170823 21:55:12.279" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:55:12.279" status="PASS" starttime="20170823 21:55:12.005"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:55:12.280" level="FAIL">On != Off</msg>
<status endtime="20170823 21:55:12.280" status="FAIL" starttime="20170823 21:55:12.279"></status>
</kw>
<status endtime="20170823 21:55:12.280" status="FAIL" starttime="20170823 21:55:12.005"></status>
</kw>
<status endtime="20170823 21:55:12.280" status="FAIL" starttime="20170823 21:55:12.004"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:55:22.285" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:55:22.285" status="PASS" starttime="20170823 21:55:22.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:55:22.286" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:55:22.286" status="PASS" starttime="20170823 21:55:22.286"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:55:22.287" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:55:22.287" status="PASS" starttime="20170823 21:55:22.286"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:55:22.287" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:55:22.287" status="PASS" starttime="20170823 21:55:22.287"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:55:22.494" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:55:22.494" status="PASS" starttime="20170823 21:55:22.288"></status>
</kw>
<msg timestamp="20170823 21:55:22.494" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:55:22.494" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:22.494" status="PASS" starttime="20170823 21:55:22.288"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:55:22.495" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:22.495" status="PASS" starttime="20170823 21:55:22.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:55:22.496" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:22.496" status="PASS" starttime="20170823 21:55:22.495"></status>
</kw>
<status endtime="20170823 21:55:22.496" status="PASS" starttime="20170823 21:55:22.284"></status>
</kw>
<status endtime="20170823 21:55:22.496" status="PASS" starttime="20170823 21:55:22.284"></status>
</kw>
<status endtime="20170823 21:55:22.496" status="PASS" starttime="20170823 21:55:22.283"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:55:22.497" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:55:22.497" status="PASS" starttime="20170823 21:55:22.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:55:22.499" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:55:22.499" status="PASS" starttime="20170823 21:55:22.498"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:55:22.500" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:55:22.500" status="PASS" starttime="20170823 21:55:22.499"></status>
</kw>
<status endtime="20170823 21:55:22.500" status="PASS" starttime="20170823 21:55:22.499"></status>
</kw>
<status endtime="20170823 21:55:22.500" status="PASS" starttime="20170823 21:55:22.497"></status>
</kw>
<status endtime="20170823 21:55:22.500" status="PASS" starttime="20170823 21:55:22.497"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:55:22.563" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:55:22.563" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:22.563" status="PASS" starttime="20170823 21:55:22.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:55:22.565" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:55:22.565" status="PASS" starttime="20170823 21:55:22.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:55:22.566" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:55:22.566" status="PASS" starttime="20170823 21:55:22.566"></status>
</kw>
<status endtime="20170823 21:55:22.566" status="PASS" starttime="20170823 21:55:22.565"></status>
</kw>
<status endtime="20170823 21:55:22.566" status="PASS" starttime="20170823 21:55:22.564"></status>
</kw>
<status endtime="20170823 21:55:22.566" status="PASS" starttime="20170823 21:55:22.564"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:55:22.567" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:55:22.567" status="PASS" starttime="20170823 21:55:22.567"></status>
</kw>
<msg timestamp="20170823 21:55:22.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:22.567" status="PASS" starttime="20170823 21:55:22.282"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:55:22.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:22.568" status="PASS" starttime="20170823 21:55:22.567"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:55:22.568" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:55:22.568" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:55:22.569" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:55:22.569" status="PASS" starttime="20170823 21:55:22.568"></status>
</kw>
<msg timestamp="20170823 21:55:22.569" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:55:22.569" status="PASS" starttime="20170823 21:55:22.282"></status>
</kw>
<msg timestamp="20170823 21:55:22.569" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:55:22.569" status="PASS" starttime="20170823 21:55:22.281"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:55:22.570" level="FAIL">On != Off</msg>
<status endtime="20170823 21:55:22.570" status="FAIL" starttime="20170823 21:55:22.569"></status>
</kw>
<status endtime="20170823 21:55:22.570" status="FAIL" starttime="20170823 21:55:22.281"></status>
</kw>
<status endtime="20170823 21:55:22.570" status="FAIL" starttime="20170823 21:55:22.280"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:55:32.576" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:55:32.576" status="PASS" starttime="20170823 21:55:32.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:55:32.577" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:55:32.577" status="PASS" starttime="20170823 21:55:32.576"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:55:32.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:55:32.577" status="PASS" starttime="20170823 21:55:32.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:55:32.578" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:55:32.578" status="PASS" starttime="20170823 21:55:32.578"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:55:32.774" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:55:32.774" status="PASS" starttime="20170823 21:55:32.579"></status>
</kw>
<msg timestamp="20170823 21:55:32.774" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:55:32.774" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:32.774" status="PASS" starttime="20170823 21:55:32.578"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:55:32.775" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:32.775" status="PASS" starttime="20170823 21:55:32.774"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:55:32.775" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:32.775" status="PASS" starttime="20170823 21:55:32.775"></status>
</kw>
<status endtime="20170823 21:55:32.776" status="PASS" starttime="20170823 21:55:32.574"></status>
</kw>
<status endtime="20170823 21:55:32.776" status="PASS" starttime="20170823 21:55:32.574"></status>
</kw>
<status endtime="20170823 21:55:32.776" status="PASS" starttime="20170823 21:55:32.573"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:55:32.776" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:55:32.777" status="PASS" starttime="20170823 21:55:32.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:55:32.779" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:55:32.779" status="PASS" starttime="20170823 21:55:32.778"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:55:32.779" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:55:32.780" status="PASS" starttime="20170823 21:55:32.779"></status>
</kw>
<status endtime="20170823 21:55:32.780" status="PASS" starttime="20170823 21:55:32.779"></status>
</kw>
<status endtime="20170823 21:55:32.780" status="PASS" starttime="20170823 21:55:32.777"></status>
</kw>
<status endtime="20170823 21:55:32.780" status="PASS" starttime="20170823 21:55:32.777"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:55:32.842" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:55:32.843" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:32.843" status="PASS" starttime="20170823 21:55:32.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:55:32.844" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:55:32.845" status="PASS" starttime="20170823 21:55:32.844"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:55:32.846" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:55:32.846" status="PASS" starttime="20170823 21:55:32.845"></status>
</kw>
<status endtime="20170823 21:55:32.846" status="PASS" starttime="20170823 21:55:32.845"></status>
</kw>
<status endtime="20170823 21:55:32.846" status="PASS" starttime="20170823 21:55:32.843"></status>
</kw>
<status endtime="20170823 21:55:32.846" status="PASS" starttime="20170823 21:55:32.843"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:55:32.847" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:55:32.847" status="PASS" starttime="20170823 21:55:32.846"></status>
</kw>
<msg timestamp="20170823 21:55:32.847" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:32.847" status="PASS" starttime="20170823 21:55:32.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:55:32.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:32.848" status="PASS" starttime="20170823 21:55:32.847"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:55:32.848" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:55:32.848" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:55:32.848" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:55:32.848" status="PASS" starttime="20170823 21:55:32.848"></status>
</kw>
<msg timestamp="20170823 21:55:32.849" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:55:32.849" status="PASS" starttime="20170823 21:55:32.572"></status>
</kw>
<msg timestamp="20170823 21:55:32.849" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:55:32.849" status="PASS" starttime="20170823 21:55:32.572"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:55:32.850" level="FAIL">On != Off</msg>
<status endtime="20170823 21:55:32.850" status="FAIL" starttime="20170823 21:55:32.849"></status>
</kw>
<status endtime="20170823 21:55:32.850" status="FAIL" starttime="20170823 21:55:32.571"></status>
</kw>
<status endtime="20170823 21:55:32.850" status="FAIL" starttime="20170823 21:55:32.571"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:55:42.855" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:55:42.855" status="PASS" starttime="20170823 21:55:42.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:55:42.856" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:55:42.856" status="PASS" starttime="20170823 21:55:42.856"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:55:42.857" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:55:42.857" status="PASS" starttime="20170823 21:55:42.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:55:42.857" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:55:42.857" status="PASS" starttime="20170823 21:55:42.857"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:55:43.058" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:55:43.058" status="PASS" starttime="20170823 21:55:42.858"></status>
</kw>
<msg timestamp="20170823 21:55:43.058" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:55:43.058" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:43.059" status="PASS" starttime="20170823 21:55:42.858"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:55:43.059" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:43.059" status="PASS" starttime="20170823 21:55:43.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:55:43.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:43.060" status="PASS" starttime="20170823 21:55:43.059"></status>
</kw>
<status endtime="20170823 21:55:43.060" status="PASS" starttime="20170823 21:55:42.854"></status>
</kw>
<status endtime="20170823 21:55:43.060" status="PASS" starttime="20170823 21:55:42.854"></status>
</kw>
<status endtime="20170823 21:55:43.060" status="PASS" starttime="20170823 21:55:42.853"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:55:43.061" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:55:43.061" status="PASS" starttime="20170823 21:55:43.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:55:43.063" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:55:43.063" status="PASS" starttime="20170823 21:55:43.062"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:55:43.064" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:55:43.064" status="PASS" starttime="20170823 21:55:43.064"></status>
</kw>
<status endtime="20170823 21:55:43.064" status="PASS" starttime="20170823 21:55:43.063"></status>
</kw>
<status endtime="20170823 21:55:43.064" status="PASS" starttime="20170823 21:55:43.062"></status>
</kw>
<status endtime="20170823 21:55:43.064" status="PASS" starttime="20170823 21:55:43.061"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:55:43.153" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:55:43.153" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:43.153" status="PASS" starttime="20170823 21:55:43.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:55:43.155" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:55:43.155" status="PASS" starttime="20170823 21:55:43.154"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:55:43.156" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:55:43.156" status="PASS" starttime="20170823 21:55:43.155"></status>
</kw>
<status endtime="20170823 21:55:43.156" status="PASS" starttime="20170823 21:55:43.155"></status>
</kw>
<status endtime="20170823 21:55:43.156" status="PASS" starttime="20170823 21:55:43.154"></status>
</kw>
<status endtime="20170823 21:55:43.156" status="PASS" starttime="20170823 21:55:43.153"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:55:43.157" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:55:43.157" status="PASS" starttime="20170823 21:55:43.156"></status>
</kw>
<msg timestamp="20170823 21:55:43.157" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:43.157" status="PASS" starttime="20170823 21:55:42.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:55:43.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:43.157" status="PASS" starttime="20170823 21:55:43.157"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:55:43.158" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:55:43.158" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:55:43.158" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:55:43.158" status="PASS" starttime="20170823 21:55:43.158"></status>
</kw>
<msg timestamp="20170823 21:55:43.158" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:55:43.159" status="PASS" starttime="20170823 21:55:42.852"></status>
</kw>
<msg timestamp="20170823 21:55:43.159" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:55:43.159" status="PASS" starttime="20170823 21:55:42.851"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:55:43.159" level="FAIL">On != Off</msg>
<status endtime="20170823 21:55:43.160" status="FAIL" starttime="20170823 21:55:43.159"></status>
</kw>
<status endtime="20170823 21:55:43.160" status="FAIL" starttime="20170823 21:55:42.851"></status>
</kw>
<status endtime="20170823 21:55:43.160" status="FAIL" starttime="20170823 21:55:42.850"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:55:53.165" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:55:53.165" status="PASS" starttime="20170823 21:55:53.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:55:53.166" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:55:53.166" status="PASS" starttime="20170823 21:55:53.166"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:55:53.167" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:55:53.167" status="PASS" starttime="20170823 21:55:53.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:55:53.167" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:55:53.167" status="PASS" starttime="20170823 21:55:53.167"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:55:53.350" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:55:53.350" status="PASS" starttime="20170823 21:55:53.168"></status>
</kw>
<msg timestamp="20170823 21:55:53.350" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:55:53.350" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:53.350" status="PASS" starttime="20170823 21:55:53.168"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:55:53.351" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:53.351" status="PASS" starttime="20170823 21:55:53.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:55:53.351" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:53.352" status="PASS" starttime="20170823 21:55:53.351"></status>
</kw>
<status endtime="20170823 21:55:53.352" status="PASS" starttime="20170823 21:55:53.164"></status>
</kw>
<status endtime="20170823 21:55:53.352" status="PASS" starttime="20170823 21:55:53.163"></status>
</kw>
<status endtime="20170823 21:55:53.352" status="PASS" starttime="20170823 21:55:53.163"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:55:53.353" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:55:53.353" status="PASS" starttime="20170823 21:55:53.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:55:53.355" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:55:53.355" status="PASS" starttime="20170823 21:55:53.354"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:55:53.356" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:55:53.356" status="PASS" starttime="20170823 21:55:53.355"></status>
</kw>
<status endtime="20170823 21:55:53.356" status="PASS" starttime="20170823 21:55:53.355"></status>
</kw>
<status endtime="20170823 21:55:53.356" status="PASS" starttime="20170823 21:55:53.353"></status>
</kw>
<status endtime="20170823 21:55:53.356" status="PASS" starttime="20170823 21:55:53.353"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:55:53.445" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:55:53.445" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:53.445" status="PASS" starttime="20170823 21:55:53.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:55:53.447" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:55:53.447" status="PASS" starttime="20170823 21:55:53.446"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:55:53.448" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:55:53.448" status="PASS" starttime="20170823 21:55:53.448"></status>
</kw>
<status endtime="20170823 21:55:53.448" status="PASS" starttime="20170823 21:55:53.447"></status>
</kw>
<status endtime="20170823 21:55:53.449" status="PASS" starttime="20170823 21:55:53.446"></status>
</kw>
<status endtime="20170823 21:55:53.449" status="PASS" starttime="20170823 21:55:53.445"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:55:53.449" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:55:53.449" status="PASS" starttime="20170823 21:55:53.449"></status>
</kw>
<msg timestamp="20170823 21:55:53.449" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:55:53.449" status="PASS" starttime="20170823 21:55:53.162"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:55:53.450" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:55:53.450" status="PASS" starttime="20170823 21:55:53.450"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:55:53.450" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:55:53.451" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:55:53.451" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:55:53.451" status="PASS" starttime="20170823 21:55:53.450"></status>
</kw>
<msg timestamp="20170823 21:55:53.451" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:55:53.451" status="PASS" starttime="20170823 21:55:53.161"></status>
</kw>
<msg timestamp="20170823 21:55:53.451" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:55:53.451" status="PASS" starttime="20170823 21:55:53.161"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:55:53.452" level="FAIL">On != Off</msg>
<status endtime="20170823 21:55:53.452" status="FAIL" starttime="20170823 21:55:53.452"></status>
</kw>
<status endtime="20170823 21:55:53.452" status="FAIL" starttime="20170823 21:55:53.161"></status>
</kw>
<status endtime="20170823 21:55:53.452" status="FAIL" starttime="20170823 21:55:53.160"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:56:03.457" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:56:03.457" status="PASS" starttime="20170823 21:56:03.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:56:03.458" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:56:03.458" status="PASS" starttime="20170823 21:56:03.458"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:56:03.459" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:56:03.459" status="PASS" starttime="20170823 21:56:03.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:56:03.459" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:56:03.459" status="PASS" starttime="20170823 21:56:03.459"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:56:03.638" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:56:03.638" status="PASS" starttime="20170823 21:56:03.460"></status>
</kw>
<msg timestamp="20170823 21:56:03.639" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:56:03.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:03.639" status="PASS" starttime="20170823 21:56:03.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:56:03.639" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:03.639" status="PASS" starttime="20170823 21:56:03.639"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:56:03.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:03.640" status="PASS" starttime="20170823 21:56:03.640"></status>
</kw>
<status endtime="20170823 21:56:03.640" status="PASS" starttime="20170823 21:56:03.456"></status>
</kw>
<status endtime="20170823 21:56:03.640" status="PASS" starttime="20170823 21:56:03.456"></status>
</kw>
<status endtime="20170823 21:56:03.641" status="PASS" starttime="20170823 21:56:03.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:56:03.641" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:56:03.641" status="PASS" starttime="20170823 21:56:03.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:56:03.643" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:56:03.643" status="PASS" starttime="20170823 21:56:03.642"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:56:03.644" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:56:03.645" status="PASS" starttime="20170823 21:56:03.644"></status>
</kw>
<status endtime="20170823 21:56:03.645" status="PASS" starttime="20170823 21:56:03.644"></status>
</kw>
<status endtime="20170823 21:56:03.645" status="PASS" starttime="20170823 21:56:03.642"></status>
</kw>
<status endtime="20170823 21:56:03.645" status="PASS" starttime="20170823 21:56:03.641"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:56:03.758" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:56:03.758" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:03.758" status="PASS" starttime="20170823 21:56:03.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:56:03.759" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:56:03.760" status="PASS" starttime="20170823 21:56:03.759"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:56:03.760" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:56:03.761" status="PASS" starttime="20170823 21:56:03.760"></status>
</kw>
<status endtime="20170823 21:56:03.761" status="PASS" starttime="20170823 21:56:03.760"></status>
</kw>
<status endtime="20170823 21:56:03.761" status="PASS" starttime="20170823 21:56:03.759"></status>
</kw>
<status endtime="20170823 21:56:03.761" status="PASS" starttime="20170823 21:56:03.758"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:56:03.761" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:56:03.761" status="PASS" starttime="20170823 21:56:03.761"></status>
</kw>
<msg timestamp="20170823 21:56:03.762" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:03.762" status="PASS" starttime="20170823 21:56:03.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:56:03.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:03.762" status="PASS" starttime="20170823 21:56:03.762"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:56:03.763" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:56:03.763" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:56:03.763" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:56:03.763" status="PASS" starttime="20170823 21:56:03.762"></status>
</kw>
<msg timestamp="20170823 21:56:03.763" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:56:03.763" status="PASS" starttime="20170823 21:56:03.454"></status>
</kw>
<msg timestamp="20170823 21:56:03.764" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:56:03.764" status="PASS" starttime="20170823 21:56:03.454"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:56:03.764" level="FAIL">On != Off</msg>
<status endtime="20170823 21:56:03.764" status="FAIL" starttime="20170823 21:56:03.764"></status>
</kw>
<status endtime="20170823 21:56:03.764" status="FAIL" starttime="20170823 21:56:03.453"></status>
</kw>
<status endtime="20170823 21:56:03.765" status="FAIL" starttime="20170823 21:56:03.453"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:56:13.771" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:56:13.771" status="PASS" starttime="20170823 21:56:13.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:56:13.772" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:56:13.772" status="PASS" starttime="20170823 21:56:13.771"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:56:13.772" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:56:13.772" status="PASS" starttime="20170823 21:56:13.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:56:13.773" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:56:13.773" status="PASS" starttime="20170823 21:56:13.773"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:56:13.953" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:56:13.953" status="PASS" starttime="20170823 21:56:13.774"></status>
</kw>
<msg timestamp="20170823 21:56:13.953" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:56:13.953" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:13.953" status="PASS" starttime="20170823 21:56:13.773"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:56:13.954" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:13.954" status="PASS" starttime="20170823 21:56:13.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:56:13.955" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:13.955" status="PASS" starttime="20170823 21:56:13.954"></status>
</kw>
<status endtime="20170823 21:56:13.955" status="PASS" starttime="20170823 21:56:13.769"></status>
</kw>
<status endtime="20170823 21:56:13.955" status="PASS" starttime="20170823 21:56:13.769"></status>
</kw>
<status endtime="20170823 21:56:13.955" status="PASS" starttime="20170823 21:56:13.768"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:56:13.956" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:56:13.956" status="PASS" starttime="20170823 21:56:13.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:56:13.958" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:56:13.958" status="PASS" starttime="20170823 21:56:13.957"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:56:13.959" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:56:13.959" status="PASS" starttime="20170823 21:56:13.959"></status>
</kw>
<status endtime="20170823 21:56:13.959" status="PASS" starttime="20170823 21:56:13.958"></status>
</kw>
<status endtime="20170823 21:56:13.959" status="PASS" starttime="20170823 21:56:13.957"></status>
</kw>
<status endtime="20170823 21:56:13.959" status="PASS" starttime="20170823 21:56:13.956"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:56:14.038" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:56:14.038" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:14.038" status="PASS" starttime="20170823 21:56:13.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:56:14.040" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:56:14.040" status="PASS" starttime="20170823 21:56:14.039"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:56:14.041" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:56:14.041" status="PASS" starttime="20170823 21:56:14.041"></status>
</kw>
<status endtime="20170823 21:56:14.041" status="PASS" starttime="20170823 21:56:14.040"></status>
</kw>
<status endtime="20170823 21:56:14.041" status="PASS" starttime="20170823 21:56:14.039"></status>
</kw>
<status endtime="20170823 21:56:14.042" status="PASS" starttime="20170823 21:56:14.038"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:56:14.042" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:56:14.042" status="PASS" starttime="20170823 21:56:14.042"></status>
</kw>
<msg timestamp="20170823 21:56:14.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:14.042" status="PASS" starttime="20170823 21:56:13.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:56:14.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:14.043" status="PASS" starttime="20170823 21:56:14.042"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:56:14.043" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:56:14.043" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:56:14.044" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:56:14.044" status="PASS" starttime="20170823 21:56:14.043"></status>
</kw>
<msg timestamp="20170823 21:56:14.044" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:56:14.044" status="PASS" starttime="20170823 21:56:13.767"></status>
</kw>
<msg timestamp="20170823 21:56:14.044" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:56:14.044" status="PASS" starttime="20170823 21:56:13.766"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:56:14.045" level="FAIL">On != Off</msg>
<status endtime="20170823 21:56:14.045" status="FAIL" starttime="20170823 21:56:14.044"></status>
</kw>
<status endtime="20170823 21:56:14.045" status="FAIL" starttime="20170823 21:56:13.766"></status>
</kw>
<status endtime="20170823 21:56:14.045" status="FAIL" starttime="20170823 21:56:13.765"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:56:24.052" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:56:24.052" status="PASS" starttime="20170823 21:56:24.051"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:56:24.053" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:56:24.053" status="PASS" starttime="20170823 21:56:24.053"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:56:24.054" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:56:24.054" status="PASS" starttime="20170823 21:56:24.053"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:56:24.055" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:56:24.055" status="PASS" starttime="20170823 21:56:24.054"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:56:24.232" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:56:24.232" status="PASS" starttime="20170823 21:56:24.056"></status>
</kw>
<msg timestamp="20170823 21:56:24.232" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:56:24.232" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:24.233" status="PASS" starttime="20170823 21:56:24.055"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:56:24.233" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:24.233" status="PASS" starttime="20170823 21:56:24.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:56:24.234" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:24.234" status="PASS" starttime="20170823 21:56:24.233"></status>
</kw>
<status endtime="20170823 21:56:24.234" status="PASS" starttime="20170823 21:56:24.050"></status>
</kw>
<status endtime="20170823 21:56:24.234" status="PASS" starttime="20170823 21:56:24.050"></status>
</kw>
<status endtime="20170823 21:56:24.234" status="PASS" starttime="20170823 21:56:24.049"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:56:24.235" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:56:24.235" status="PASS" starttime="20170823 21:56:24.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:56:24.237" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:56:24.237" status="PASS" starttime="20170823 21:56:24.236"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:56:24.238" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:56:24.238" status="PASS" starttime="20170823 21:56:24.238"></status>
</kw>
<status endtime="20170823 21:56:24.238" status="PASS" starttime="20170823 21:56:24.237"></status>
</kw>
<status endtime="20170823 21:56:24.238" status="PASS" starttime="20170823 21:56:24.236"></status>
</kw>
<status endtime="20170823 21:56:24.238" status="PASS" starttime="20170823 21:56:24.235"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:56:24.302" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:56:24.302" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:24.302" status="PASS" starttime="20170823 21:56:24.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:56:24.304" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:56:24.304" status="PASS" starttime="20170823 21:56:24.303"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:56:24.305" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:56:24.305" status="PASS" starttime="20170823 21:56:24.304"></status>
</kw>
<status endtime="20170823 21:56:24.305" status="PASS" starttime="20170823 21:56:24.304"></status>
</kw>
<status endtime="20170823 21:56:24.305" status="PASS" starttime="20170823 21:56:24.303"></status>
</kw>
<status endtime="20170823 21:56:24.305" status="PASS" starttime="20170823 21:56:24.302"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:56:24.305" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:56:24.306" status="PASS" starttime="20170823 21:56:24.305"></status>
</kw>
<msg timestamp="20170823 21:56:24.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:24.306" status="PASS" starttime="20170823 21:56:24.048"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:56:24.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:24.307" status="PASS" starttime="20170823 21:56:24.306"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:56:24.307" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:56:24.307" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:56:24.307" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:56:24.307" status="PASS" starttime="20170823 21:56:24.307"></status>
</kw>
<msg timestamp="20170823 21:56:24.308" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:56:24.308" status="PASS" starttime="20170823 21:56:24.047"></status>
</kw>
<msg timestamp="20170823 21:56:24.308" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:56:24.308" status="PASS" starttime="20170823 21:56:24.047"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:56:24.309" level="FAIL">On != Off</msg>
<status endtime="20170823 21:56:24.309" status="FAIL" starttime="20170823 21:56:24.308"></status>
</kw>
<status endtime="20170823 21:56:24.309" status="FAIL" starttime="20170823 21:56:24.046"></status>
</kw>
<status endtime="20170823 21:56:24.309" status="FAIL" starttime="20170823 21:56:24.046"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:56:34.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:56:34.315" status="PASS" starttime="20170823 21:56:34.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:56:34.316" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:56:34.316" status="PASS" starttime="20170823 21:56:34.316"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:56:34.316" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:56:34.317" status="PASS" starttime="20170823 21:56:34.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:56:34.317" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:56:34.317" status="PASS" starttime="20170823 21:56:34.317"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:56:34.530" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:56:34.530" status="PASS" starttime="20170823 21:56:34.318"></status>
</kw>
<msg timestamp="20170823 21:56:34.530" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:56:34.530" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:34.530" status="PASS" starttime="20170823 21:56:34.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:56:34.531" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:34.531" status="PASS" starttime="20170823 21:56:34.531"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:56:34.532" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:34.532" status="PASS" starttime="20170823 21:56:34.531"></status>
</kw>
<status endtime="20170823 21:56:34.532" status="PASS" starttime="20170823 21:56:34.314"></status>
</kw>
<status endtime="20170823 21:56:34.532" status="PASS" starttime="20170823 21:56:34.313"></status>
</kw>
<status endtime="20170823 21:56:34.532" status="PASS" starttime="20170823 21:56:34.312"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:56:34.533" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:56:34.533" status="PASS" starttime="20170823 21:56:34.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:56:34.535" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:56:34.535" status="PASS" starttime="20170823 21:56:34.534"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:56:34.536" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:56:34.536" status="PASS" starttime="20170823 21:56:34.535"></status>
</kw>
<status endtime="20170823 21:56:34.536" status="PASS" starttime="20170823 21:56:34.535"></status>
</kw>
<status endtime="20170823 21:56:34.536" status="PASS" starttime="20170823 21:56:34.533"></status>
</kw>
<status endtime="20170823 21:56:34.536" status="PASS" starttime="20170823 21:56:34.533"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:56:34.627" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:56:34.627" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:34.628" status="PASS" starttime="20170823 21:56:34.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:56:34.629" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:56:34.629" status="PASS" starttime="20170823 21:56:34.629"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:56:34.630" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:56:34.631" status="PASS" starttime="20170823 21:56:34.630"></status>
</kw>
<status endtime="20170823 21:56:34.631" status="PASS" starttime="20170823 21:56:34.629"></status>
</kw>
<status endtime="20170823 21:56:34.631" status="PASS" starttime="20170823 21:56:34.628"></status>
</kw>
<status endtime="20170823 21:56:34.631" status="PASS" starttime="20170823 21:56:34.628"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:56:34.631" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:56:34.631" status="PASS" starttime="20170823 21:56:34.631"></status>
</kw>
<msg timestamp="20170823 21:56:34.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:34.632" status="PASS" starttime="20170823 21:56:34.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:56:34.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:34.632" status="PASS" starttime="20170823 21:56:34.632"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:56:34.633" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:56:34.633" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:56:34.633" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:56:34.633" status="PASS" starttime="20170823 21:56:34.633"></status>
</kw>
<msg timestamp="20170823 21:56:34.633" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:56:34.633" status="PASS" starttime="20170823 21:56:34.311"></status>
</kw>
<msg timestamp="20170823 21:56:34.634" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:56:34.634" status="PASS" starttime="20170823 21:56:34.311"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:56:34.634" level="FAIL">On != Off</msg>
<status endtime="20170823 21:56:34.634" status="FAIL" starttime="20170823 21:56:34.634"></status>
</kw>
<status endtime="20170823 21:56:34.634" status="FAIL" starttime="20170823 21:56:34.310"></status>
</kw>
<status endtime="20170823 21:56:34.635" status="FAIL" starttime="20170823 21:56:34.310"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:56:44.640" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:56:44.640" status="PASS" starttime="20170823 21:56:44.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:56:44.641" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:56:44.641" status="PASS" starttime="20170823 21:56:44.640"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:56:44.641" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:56:44.641" status="PASS" starttime="20170823 21:56:44.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:56:44.642" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:56:44.642" status="PASS" starttime="20170823 21:56:44.642"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:56:44.827" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:56:44.827" status="PASS" starttime="20170823 21:56:44.643"></status>
</kw>
<msg timestamp="20170823 21:56:44.827" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:56:44.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:44.827" status="PASS" starttime="20170823 21:56:44.642"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:56:44.828" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:44.828" status="PASS" starttime="20170823 21:56:44.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:56:44.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:44.828" status="PASS" starttime="20170823 21:56:44.828"></status>
</kw>
<status endtime="20170823 21:56:44.829" status="PASS" starttime="20170823 21:56:44.639"></status>
</kw>
<status endtime="20170823 21:56:44.829" status="PASS" starttime="20170823 21:56:44.638"></status>
</kw>
<status endtime="20170823 21:56:44.829" status="PASS" starttime="20170823 21:56:44.638"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:56:44.829" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:56:44.829" status="PASS" starttime="20170823 21:56:44.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:56:44.831" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:56:44.831" status="PASS" starttime="20170823 21:56:44.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:56:44.832" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:56:44.832" status="PASS" starttime="20170823 21:56:44.832"></status>
</kw>
<status endtime="20170823 21:56:44.833" status="PASS" starttime="20170823 21:56:44.832"></status>
</kw>
<status endtime="20170823 21:56:44.833" status="PASS" starttime="20170823 21:56:44.830"></status>
</kw>
<status endtime="20170823 21:56:44.833" status="PASS" starttime="20170823 21:56:44.830"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:56:44.907" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:56:44.907" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:44.907" status="PASS" starttime="20170823 21:56:44.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:56:44.908" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:56:44.909" status="PASS" starttime="20170823 21:56:44.908"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:56:44.909" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:56:44.910" status="PASS" starttime="20170823 21:56:44.909"></status>
</kw>
<status endtime="20170823 21:56:44.910" status="PASS" starttime="20170823 21:56:44.909"></status>
</kw>
<status endtime="20170823 21:56:44.910" status="PASS" starttime="20170823 21:56:44.908"></status>
</kw>
<status endtime="20170823 21:56:44.910" status="PASS" starttime="20170823 21:56:44.907"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:56:44.910" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:56:44.910" status="PASS" starttime="20170823 21:56:44.910"></status>
</kw>
<msg timestamp="20170823 21:56:44.911" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:44.911" status="PASS" starttime="20170823 21:56:44.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:56:44.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:44.911" status="PASS" starttime="20170823 21:56:44.911"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:56:44.912" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:56:44.912" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:56:44.912" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:56:44.912" status="PASS" starttime="20170823 21:56:44.912"></status>
</kw>
<msg timestamp="20170823 21:56:44.912" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:56:44.912" status="PASS" starttime="20170823 21:56:44.636"></status>
</kw>
<msg timestamp="20170823 21:56:44.913" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:56:44.913" status="PASS" starttime="20170823 21:56:44.636"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:56:44.913" level="FAIL">On != Off</msg>
<status endtime="20170823 21:56:44.913" status="FAIL" starttime="20170823 21:56:44.913"></status>
</kw>
<status endtime="20170823 21:56:44.914" status="FAIL" starttime="20170823 21:56:44.636"></status>
</kw>
<status endtime="20170823 21:56:44.914" status="FAIL" starttime="20170823 21:56:44.635"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:56:54.919" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:56:54.920" status="PASS" starttime="20170823 21:56:54.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:56:54.920" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:56:54.920" status="PASS" starttime="20170823 21:56:54.920"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:56:54.921" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:56:54.921" status="PASS" starttime="20170823 21:56:54.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:56:54.922" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:56:54.922" status="PASS" starttime="20170823 21:56:54.921"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:56:55.127" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:56:55.127" status="PASS" starttime="20170823 21:56:54.922"></status>
</kw>
<msg timestamp="20170823 21:56:55.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:56:55.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:55.127" status="PASS" starttime="20170823 21:56:54.922"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:56:55.128" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:55.128" status="PASS" starttime="20170823 21:56:55.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:56:55.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:55.129" status="PASS" starttime="20170823 21:56:55.128"></status>
</kw>
<status endtime="20170823 21:56:55.129" status="PASS" starttime="20170823 21:56:54.918"></status>
</kw>
<status endtime="20170823 21:56:55.129" status="PASS" starttime="20170823 21:56:54.918"></status>
</kw>
<status endtime="20170823 21:56:55.129" status="PASS" starttime="20170823 21:56:54.917"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:56:55.130" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:56:55.130" status="PASS" starttime="20170823 21:56:55.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:56:55.132" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:56:55.132" status="PASS" starttime="20170823 21:56:55.131"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:56:55.133" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:56:55.133" status="PASS" starttime="20170823 21:56:55.133"></status>
</kw>
<status endtime="20170823 21:56:55.133" status="PASS" starttime="20170823 21:56:55.132"></status>
</kw>
<status endtime="20170823 21:56:55.133" status="PASS" starttime="20170823 21:56:55.131"></status>
</kw>
<status endtime="20170823 21:56:55.133" status="PASS" starttime="20170823 21:56:55.130"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:56:55.196" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:56:55.196" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:55.196" status="PASS" starttime="20170823 21:56:55.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:56:55.198" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:56:55.198" status="PASS" starttime="20170823 21:56:55.198"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:56:55.199" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:56:55.199" status="PASS" starttime="20170823 21:56:55.199"></status>
</kw>
<status endtime="20170823 21:56:55.200" status="PASS" starttime="20170823 21:56:55.198"></status>
</kw>
<status endtime="20170823 21:56:55.200" status="PASS" starttime="20170823 21:56:55.197"></status>
</kw>
<status endtime="20170823 21:56:55.200" status="PASS" starttime="20170823 21:56:55.197"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:56:55.200" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:56:55.200" status="PASS" starttime="20170823 21:56:55.200"></status>
</kw>
<msg timestamp="20170823 21:56:55.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:56:55.200" status="PASS" starttime="20170823 21:56:54.916"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:56:55.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:56:55.201" status="PASS" starttime="20170823 21:56:55.201"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:56:55.202" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:56:55.202" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:56:55.202" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:56:55.202" status="PASS" starttime="20170823 21:56:55.201"></status>
</kw>
<msg timestamp="20170823 21:56:55.202" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:56:55.202" status="PASS" starttime="20170823 21:56:54.916"></status>
</kw>
<msg timestamp="20170823 21:56:55.202" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:56:55.202" status="PASS" starttime="20170823 21:56:54.915"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:56:55.203" level="FAIL">On != Off</msg>
<status endtime="20170823 21:56:55.203" status="FAIL" starttime="20170823 21:56:55.203"></status>
</kw>
<status endtime="20170823 21:56:55.203" status="FAIL" starttime="20170823 21:56:54.915"></status>
</kw>
<status endtime="20170823 21:56:55.203" status="FAIL" starttime="20170823 21:56:54.914"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:57:05.209" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:57:05.210" status="PASS" starttime="20170823 21:57:05.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:57:05.211" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:57:05.211" status="PASS" starttime="20170823 21:57:05.210"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:57:05.212" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:57:05.212" status="PASS" starttime="20170823 21:57:05.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:57:05.212" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:57:05.213" status="PASS" starttime="20170823 21:57:05.212"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:57:05.412" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:57:05.412" status="PASS" starttime="20170823 21:57:05.214"></status>
</kw>
<msg timestamp="20170823 21:57:05.412" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:57:05.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:05.412" status="PASS" starttime="20170823 21:57:05.213"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:57:05.413" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:05.413" status="PASS" starttime="20170823 21:57:05.413"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:57:05.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:05.414" status="PASS" starttime="20170823 21:57:05.413"></status>
</kw>
<status endtime="20170823 21:57:05.414" status="PASS" starttime="20170823 21:57:05.208"></status>
</kw>
<status endtime="20170823 21:57:05.414" status="PASS" starttime="20170823 21:57:05.207"></status>
</kw>
<status endtime="20170823 21:57:05.414" status="PASS" starttime="20170823 21:57:05.206"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:57:05.414" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:57:05.415" status="PASS" starttime="20170823 21:57:05.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:57:05.418" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:57:05.418" status="PASS" starttime="20170823 21:57:05.417"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:57:05.419" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:57:05.419" status="PASS" starttime="20170823 21:57:05.419"></status>
</kw>
<status endtime="20170823 21:57:05.419" status="PASS" starttime="20170823 21:57:05.418"></status>
</kw>
<status endtime="20170823 21:57:05.419" status="PASS" starttime="20170823 21:57:05.416"></status>
</kw>
<status endtime="20170823 21:57:05.419" status="PASS" starttime="20170823 21:57:05.415"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:57:05.491" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:57:05.491" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:05.491" status="PASS" starttime="20170823 21:57:05.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:57:05.493" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:57:05.493" status="PASS" starttime="20170823 21:57:05.492"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:57:05.494" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:57:05.494" status="PASS" starttime="20170823 21:57:05.494"></status>
</kw>
<status endtime="20170823 21:57:05.494" status="PASS" starttime="20170823 21:57:05.493"></status>
</kw>
<status endtime="20170823 21:57:05.494" status="PASS" starttime="20170823 21:57:05.492"></status>
</kw>
<status endtime="20170823 21:57:05.494" status="PASS" starttime="20170823 21:57:05.491"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:57:05.495" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:57:05.495" status="PASS" starttime="20170823 21:57:05.494"></status>
</kw>
<msg timestamp="20170823 21:57:05.495" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:05.495" status="PASS" starttime="20170823 21:57:05.206"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:57:05.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:05.496" status="PASS" starttime="20170823 21:57:05.495"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:57:05.496" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:57:05.496" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:57:05.496" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:57:05.496" status="PASS" starttime="20170823 21:57:05.496"></status>
</kw>
<msg timestamp="20170823 21:57:05.497" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:57:05.497" status="PASS" starttime="20170823 21:57:05.205"></status>
</kw>
<msg timestamp="20170823 21:57:05.497" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:57:05.497" status="PASS" starttime="20170823 21:57:05.205"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:57:05.498" level="FAIL">On != Off</msg>
<status endtime="20170823 21:57:05.498" status="FAIL" starttime="20170823 21:57:05.497"></status>
</kw>
<status endtime="20170823 21:57:05.498" status="FAIL" starttime="20170823 21:57:05.204"></status>
</kw>
<status endtime="20170823 21:57:05.498" status="FAIL" starttime="20170823 21:57:05.204"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:57:15.504" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:57:15.504" status="PASS" starttime="20170823 21:57:15.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:57:15.505" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:57:15.505" status="PASS" starttime="20170823 21:57:15.504"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:57:15.505" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:57:15.505" status="PASS" starttime="20170823 21:57:15.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:57:15.506" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:57:15.506" status="PASS" starttime="20170823 21:57:15.506"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:57:15.703" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:57:15.703" status="PASS" starttime="20170823 21:57:15.507"></status>
</kw>
<msg timestamp="20170823 21:57:15.703" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:57:15.703" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:15.703" status="PASS" starttime="20170823 21:57:15.506"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:57:15.704" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:15.704" status="PASS" starttime="20170823 21:57:15.704"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:57:15.705" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:15.705" status="PASS" starttime="20170823 21:57:15.704"></status>
</kw>
<status endtime="20170823 21:57:15.705" status="PASS" starttime="20170823 21:57:15.502"></status>
</kw>
<status endtime="20170823 21:57:15.705" status="PASS" starttime="20170823 21:57:15.502"></status>
</kw>
<status endtime="20170823 21:57:15.705" status="PASS" starttime="20170823 21:57:15.501"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:57:15.706" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:57:15.706" status="PASS" starttime="20170823 21:57:15.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:57:15.708" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:57:15.708" status="PASS" starttime="20170823 21:57:15.707"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:57:15.709" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:57:15.709" status="PASS" starttime="20170823 21:57:15.708"></status>
</kw>
<status endtime="20170823 21:57:15.709" status="PASS" starttime="20170823 21:57:15.708"></status>
</kw>
<status endtime="20170823 21:57:15.709" status="PASS" starttime="20170823 21:57:15.706"></status>
</kw>
<status endtime="20170823 21:57:15.709" status="PASS" starttime="20170823 21:57:15.706"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:57:15.784" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:57:15.784" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:15.784" status="PASS" starttime="20170823 21:57:15.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:57:15.786" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:57:15.786" status="PASS" starttime="20170823 21:57:15.786"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:57:15.787" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:57:15.788" status="PASS" starttime="20170823 21:57:15.787"></status>
</kw>
<status endtime="20170823 21:57:15.788" status="PASS" starttime="20170823 21:57:15.786"></status>
</kw>
<status endtime="20170823 21:57:15.788" status="PASS" starttime="20170823 21:57:15.785"></status>
</kw>
<status endtime="20170823 21:57:15.788" status="PASS" starttime="20170823 21:57:15.785"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:57:15.788" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:57:15.788" status="PASS" starttime="20170823 21:57:15.788"></status>
</kw>
<msg timestamp="20170823 21:57:15.788" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:15.789" status="PASS" starttime="20170823 21:57:15.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:57:15.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:15.789" status="PASS" starttime="20170823 21:57:15.789"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:57:15.790" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:57:15.790" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:57:15.790" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:57:15.790" status="PASS" starttime="20170823 21:57:15.789"></status>
</kw>
<msg timestamp="20170823 21:57:15.790" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:57:15.790" status="PASS" starttime="20170823 21:57:15.500"></status>
</kw>
<msg timestamp="20170823 21:57:15.791" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:57:15.791" status="PASS" starttime="20170823 21:57:15.500"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:57:15.792" level="FAIL">On != Off</msg>
<status endtime="20170823 21:57:15.792" status="FAIL" starttime="20170823 21:57:15.791"></status>
</kw>
<status endtime="20170823 21:57:15.792" status="FAIL" starttime="20170823 21:57:15.499"></status>
</kw>
<status endtime="20170823 21:57:15.792" status="FAIL" starttime="20170823 21:57:15.499"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:57:25.797" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:57:25.798" status="PASS" starttime="20170823 21:57:25.797"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:57:25.798" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:57:25.798" status="PASS" starttime="20170823 21:57:25.798"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:57:25.799" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:57:25.799" status="PASS" starttime="20170823 21:57:25.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:57:25.800" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:57:25.800" status="PASS" starttime="20170823 21:57:25.799"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:57:26.036" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:57:26.036" status="PASS" starttime="20170823 21:57:25.800"></status>
</kw>
<msg timestamp="20170823 21:57:26.036" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:57:26.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:26.036" status="PASS" starttime="20170823 21:57:25.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:57:26.037" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:26.037" status="PASS" starttime="20170823 21:57:26.036"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:57:26.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:26.037" status="PASS" starttime="20170823 21:57:26.037"></status>
</kw>
<status endtime="20170823 21:57:26.038" status="PASS" starttime="20170823 21:57:25.797"></status>
</kw>
<status endtime="20170823 21:57:26.038" status="PASS" starttime="20170823 21:57:25.796"></status>
</kw>
<status endtime="20170823 21:57:26.038" status="PASS" starttime="20170823 21:57:25.795"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:57:26.038" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:57:26.038" status="PASS" starttime="20170823 21:57:26.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:57:26.040" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:57:26.040" status="PASS" starttime="20170823 21:57:26.040"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:57:26.041" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:57:26.042" status="PASS" starttime="20170823 21:57:26.041"></status>
</kw>
<status endtime="20170823 21:57:26.042" status="PASS" starttime="20170823 21:57:26.041"></status>
</kw>
<status endtime="20170823 21:57:26.042" status="PASS" starttime="20170823 21:57:26.039"></status>
</kw>
<status endtime="20170823 21:57:26.042" status="PASS" starttime="20170823 21:57:26.039"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:57:26.137" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:57:26.137" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:26.137" status="PASS" starttime="20170823 21:57:26.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:57:26.139" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:57:26.139" status="PASS" starttime="20170823 21:57:26.139"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:57:26.140" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:57:26.140" status="PASS" starttime="20170823 21:57:26.140"></status>
</kw>
<status endtime="20170823 21:57:26.140" status="PASS" starttime="20170823 21:57:26.139"></status>
</kw>
<status endtime="20170823 21:57:26.140" status="PASS" starttime="20170823 21:57:26.138"></status>
</kw>
<status endtime="20170823 21:57:26.140" status="PASS" starttime="20170823 21:57:26.138"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:57:26.141" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:57:26.141" status="PASS" starttime="20170823 21:57:26.141"></status>
</kw>
<msg timestamp="20170823 21:57:26.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:26.141" status="PASS" starttime="20170823 21:57:25.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:57:26.142" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:26.142" status="PASS" starttime="20170823 21:57:26.141"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:57:26.142" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:57:26.142" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:57:26.142" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:57:26.142" status="PASS" starttime="20170823 21:57:26.142"></status>
</kw>
<msg timestamp="20170823 21:57:26.143" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:57:26.143" status="PASS" starttime="20170823 21:57:25.794"></status>
</kw>
<msg timestamp="20170823 21:57:26.143" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:57:26.143" status="PASS" starttime="20170823 21:57:25.794"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:57:26.144" level="FAIL">On != Off</msg>
<status endtime="20170823 21:57:26.144" status="FAIL" starttime="20170823 21:57:26.144"></status>
</kw>
<status endtime="20170823 21:57:26.144" status="FAIL" starttime="20170823 21:57:25.793"></status>
</kw>
<status endtime="20170823 21:57:26.144" status="FAIL" starttime="20170823 21:57:25.793"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:57:36.150" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:57:36.150" status="PASS" starttime="20170823 21:57:36.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:57:36.151" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:57:36.151" status="PASS" starttime="20170823 21:57:36.150"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:57:36.152" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:57:36.152" status="PASS" starttime="20170823 21:57:36.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:57:36.152" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:57:36.152" status="PASS" starttime="20170823 21:57:36.152"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:57:36.332" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:57:36.333" status="PASS" starttime="20170823 21:57:36.153"></status>
</kw>
<msg timestamp="20170823 21:57:36.333" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:57:36.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:36.333" status="PASS" starttime="20170823 21:57:36.152"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:57:36.333" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:36.334" status="PASS" starttime="20170823 21:57:36.333"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:57:36.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:36.334" status="PASS" starttime="20170823 21:57:36.334"></status>
</kw>
<status endtime="20170823 21:57:36.334" status="PASS" starttime="20170823 21:57:36.148"></status>
</kw>
<status endtime="20170823 21:57:36.334" status="PASS" starttime="20170823 21:57:36.148"></status>
</kw>
<status endtime="20170823 21:57:36.335" status="PASS" starttime="20170823 21:57:36.147"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:57:36.335" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:57:36.335" status="PASS" starttime="20170823 21:57:36.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:57:36.337" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:57:36.337" status="PASS" starttime="20170823 21:57:36.337"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:57:36.339" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:57:36.339" status="PASS" starttime="20170823 21:57:36.339"></status>
</kw>
<status endtime="20170823 21:57:36.339" status="PASS" starttime="20170823 21:57:36.337"></status>
</kw>
<status endtime="20170823 21:57:36.340" status="PASS" starttime="20170823 21:57:36.336"></status>
</kw>
<status endtime="20170823 21:57:36.340" status="PASS" starttime="20170823 21:57:36.335"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:57:36.437" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:57:36.437" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:36.437" status="PASS" starttime="20170823 21:57:36.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:57:36.439" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:57:36.439" status="PASS" starttime="20170823 21:57:36.438"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:57:36.440" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:57:36.440" status="PASS" starttime="20170823 21:57:36.439"></status>
</kw>
<status endtime="20170823 21:57:36.440" status="PASS" starttime="20170823 21:57:36.439"></status>
</kw>
<status endtime="20170823 21:57:36.440" status="PASS" starttime="20170823 21:57:36.438"></status>
</kw>
<status endtime="20170823 21:57:36.441" status="PASS" starttime="20170823 21:57:36.437"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:57:36.441" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:57:36.441" status="PASS" starttime="20170823 21:57:36.441"></status>
</kw>
<msg timestamp="20170823 21:57:36.441" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:36.441" status="PASS" starttime="20170823 21:57:36.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:57:36.442" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:36.442" status="PASS" starttime="20170823 21:57:36.442"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:57:36.443" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:57:36.443" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:57:36.443" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:57:36.443" status="PASS" starttime="20170823 21:57:36.442"></status>
</kw>
<msg timestamp="20170823 21:57:36.443" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:57:36.443" status="PASS" starttime="20170823 21:57:36.146"></status>
</kw>
<msg timestamp="20170823 21:57:36.443" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:57:36.443" status="PASS" starttime="20170823 21:57:36.146"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:57:36.444" level="FAIL">On != Off</msg>
<status endtime="20170823 21:57:36.444" status="FAIL" starttime="20170823 21:57:36.444"></status>
</kw>
<status endtime="20170823 21:57:36.444" status="FAIL" starttime="20170823 21:57:36.145"></status>
</kw>
<status endtime="20170823 21:57:36.445" status="FAIL" starttime="20170823 21:57:36.145"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:57:46.450" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:57:46.450" status="PASS" starttime="20170823 21:57:46.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:57:46.451" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:57:46.451" status="PASS" starttime="20170823 21:57:46.451"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:57:46.452" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:57:46.452" status="PASS" starttime="20170823 21:57:46.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:57:46.452" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:57:46.452" status="PASS" starttime="20170823 21:57:46.452"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:57:46.656" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:57:46.656" status="PASS" starttime="20170823 21:57:46.453"></status>
</kw>
<msg timestamp="20170823 21:57:46.656" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:57:46.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:46.656" status="PASS" starttime="20170823 21:57:46.453"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:57:46.657" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:46.657" status="PASS" starttime="20170823 21:57:46.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:57:46.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:46.657" status="PASS" starttime="20170823 21:57:46.657"></status>
</kw>
<status endtime="20170823 21:57:46.657" status="PASS" starttime="20170823 21:57:46.449"></status>
</kw>
<status endtime="20170823 21:57:46.658" status="PASS" starttime="20170823 21:57:46.449"></status>
</kw>
<status endtime="20170823 21:57:46.658" status="PASS" starttime="20170823 21:57:46.448"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:57:46.658" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:57:46.658" status="PASS" starttime="20170823 21:57:46.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:57:46.661" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:57:46.661" status="PASS" starttime="20170823 21:57:46.660"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:57:46.661" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:57:46.662" status="PASS" starttime="20170823 21:57:46.661"></status>
</kw>
<status endtime="20170823 21:57:46.662" status="PASS" starttime="20170823 21:57:46.661"></status>
</kw>
<status endtime="20170823 21:57:46.662" status="PASS" starttime="20170823 21:57:46.659"></status>
</kw>
<status endtime="20170823 21:57:46.662" status="PASS" starttime="20170823 21:57:46.659"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:57:46.743" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:57:46.743" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:46.743" status="PASS" starttime="20170823 21:57:46.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:57:46.745" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:57:46.745" status="PASS" starttime="20170823 21:57:46.744"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:57:46.746" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:57:46.746" status="PASS" starttime="20170823 21:57:46.745"></status>
</kw>
<status endtime="20170823 21:57:46.746" status="PASS" starttime="20170823 21:57:46.745"></status>
</kw>
<status endtime="20170823 21:57:46.746" status="PASS" starttime="20170823 21:57:46.744"></status>
</kw>
<status endtime="20170823 21:57:46.746" status="PASS" starttime="20170823 21:57:46.743"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:57:46.746" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:57:46.746" status="PASS" starttime="20170823 21:57:46.746"></status>
</kw>
<msg timestamp="20170823 21:57:46.747" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:46.747" status="PASS" starttime="20170823 21:57:46.447"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:57:46.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:46.747" status="PASS" starttime="20170823 21:57:46.747"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:57:46.748" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:57:46.748" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:57:46.748" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:57:46.748" status="PASS" starttime="20170823 21:57:46.748"></status>
</kw>
<msg timestamp="20170823 21:57:46.748" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:57:46.748" status="PASS" starttime="20170823 21:57:46.447"></status>
</kw>
<msg timestamp="20170823 21:57:46.749" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:57:46.749" status="PASS" starttime="20170823 21:57:46.446"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:57:46.749" level="FAIL">On != Off</msg>
<status endtime="20170823 21:57:46.749" status="FAIL" starttime="20170823 21:57:46.749"></status>
</kw>
<status endtime="20170823 21:57:46.750" status="FAIL" starttime="20170823 21:57:46.446"></status>
</kw>
<status endtime="20170823 21:57:46.750" status="FAIL" starttime="20170823 21:57:46.445"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:57:56.755" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:57:56.756" status="PASS" starttime="20170823 21:57:56.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:57:56.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:57:56.756" status="PASS" starttime="20170823 21:57:56.756"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:57:56.757" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:57:56.757" status="PASS" starttime="20170823 21:57:56.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:57:56.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:57:56.758" status="PASS" starttime="20170823 21:57:56.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:57:56.955" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:57:56.955" status="PASS" starttime="20170823 21:57:56.758"></status>
</kw>
<msg timestamp="20170823 21:57:56.955" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:57:56.955" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:56.955" status="PASS" starttime="20170823 21:57:56.758"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:57:56.956" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:56.956" status="PASS" starttime="20170823 21:57:56.955"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:57:56.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:56.956" status="PASS" starttime="20170823 21:57:56.956"></status>
</kw>
<status endtime="20170823 21:57:56.957" status="PASS" starttime="20170823 21:57:56.754"></status>
</kw>
<status endtime="20170823 21:57:56.957" status="PASS" starttime="20170823 21:57:56.754"></status>
</kw>
<status endtime="20170823 21:57:56.957" status="PASS" starttime="20170823 21:57:56.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:57:56.957" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:57:56.957" status="PASS" starttime="20170823 21:57:56.957"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:57:56.959" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:57:56.959" status="PASS" starttime="20170823 21:57:56.959"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:57:56.960" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:57:56.960" status="PASS" starttime="20170823 21:57:56.960"></status>
</kw>
<status endtime="20170823 21:57:56.961" status="PASS" starttime="20170823 21:57:56.960"></status>
</kw>
<status endtime="20170823 21:57:56.961" status="PASS" starttime="20170823 21:57:56.958"></status>
</kw>
<status endtime="20170823 21:57:56.961" status="PASS" starttime="20170823 21:57:56.958"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:57:57.035" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:57:57.035" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:57.035" status="PASS" starttime="20170823 21:57:56.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:57:57.037" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:57:57.037" status="PASS" starttime="20170823 21:57:57.037"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:57:57.039" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:57:57.039" status="PASS" starttime="20170823 21:57:57.038"></status>
</kw>
<status endtime="20170823 21:57:57.039" status="PASS" starttime="20170823 21:57:57.038"></status>
</kw>
<status endtime="20170823 21:57:57.039" status="PASS" starttime="20170823 21:57:57.036"></status>
</kw>
<status endtime="20170823 21:57:57.039" status="PASS" starttime="20170823 21:57:57.036"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:57:57.039" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:57:57.040" status="PASS" starttime="20170823 21:57:57.039"></status>
</kw>
<msg timestamp="20170823 21:57:57.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:57:57.040" status="PASS" starttime="20170823 21:57:56.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:57:57.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:57:57.041" status="PASS" starttime="20170823 21:57:57.040"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:57:57.041" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:57:57.041" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:57:57.041" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:57:57.041" status="PASS" starttime="20170823 21:57:57.041"></status>
</kw>
<msg timestamp="20170823 21:57:57.042" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:57:57.042" status="PASS" starttime="20170823 21:57:56.752"></status>
</kw>
<msg timestamp="20170823 21:57:57.042" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:57:57.042" status="PASS" starttime="20170823 21:57:56.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:57:57.043" level="FAIL">On != Off</msg>
<status endtime="20170823 21:57:57.043" status="FAIL" starttime="20170823 21:57:57.042"></status>
</kw>
<status endtime="20170823 21:57:57.043" status="FAIL" starttime="20170823 21:57:56.751"></status>
</kw>
<status endtime="20170823 21:57:57.043" status="FAIL" starttime="20170823 21:57:56.750"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:07.048" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:07.049" status="PASS" starttime="20170823 21:58:07.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:07.049" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:07.049" status="PASS" starttime="20170823 21:58:07.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:07.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:07.050" status="PASS" starttime="20170823 21:58:07.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:07.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:07.051" status="PASS" starttime="20170823 21:58:07.050"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:07.270" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:07.270" status="PASS" starttime="20170823 21:58:07.051"></status>
</kw>
<msg timestamp="20170823 21:58:07.270" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:07.270" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:07.271" status="PASS" starttime="20170823 21:58:07.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:07.271" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:07.271" status="PASS" starttime="20170823 21:58:07.271"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:07.272" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:07.272" status="PASS" starttime="20170823 21:58:07.271"></status>
</kw>
<status endtime="20170823 21:58:07.272" status="PASS" starttime="20170823 21:58:07.047"></status>
</kw>
<status endtime="20170823 21:58:07.272" status="PASS" starttime="20170823 21:58:07.047"></status>
</kw>
<status endtime="20170823 21:58:07.272" status="PASS" starttime="20170823 21:58:07.046"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:07.273" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:58:07.273" status="PASS" starttime="20170823 21:58:07.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:58:07.275" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:58:07.275" status="PASS" starttime="20170823 21:58:07.274"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:58:07.276" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:58:07.276" status="PASS" starttime="20170823 21:58:07.276"></status>
</kw>
<status endtime="20170823 21:58:07.276" status="PASS" starttime="20170823 21:58:07.275"></status>
</kw>
<status endtime="20170823 21:58:07.276" status="PASS" starttime="20170823 21:58:07.274"></status>
</kw>
<status endtime="20170823 21:58:07.276" status="PASS" starttime="20170823 21:58:07.273"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:07.349" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:58:07.349" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:07.349" status="PASS" starttime="20170823 21:58:07.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:58:07.351" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:58:07.351" status="PASS" starttime="20170823 21:58:07.350"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:58:07.351" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:58:07.352" status="PASS" starttime="20170823 21:58:07.351"></status>
</kw>
<status endtime="20170823 21:58:07.352" status="PASS" starttime="20170823 21:58:07.351"></status>
</kw>
<status endtime="20170823 21:58:07.352" status="PASS" starttime="20170823 21:58:07.350"></status>
</kw>
<status endtime="20170823 21:58:07.352" status="PASS" starttime="20170823 21:58:07.349"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:07.352" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:07.352" status="PASS" starttime="20170823 21:58:07.352"></status>
</kw>
<msg timestamp="20170823 21:58:07.353" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:07.353" status="PASS" starttime="20170823 21:58:07.046"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:07.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:07.353" status="PASS" starttime="20170823 21:58:07.353"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:58:07.354" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:58:07.354" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:58:07.354" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:58:07.354" status="PASS" starttime="20170823 21:58:07.353"></status>
</kw>
<msg timestamp="20170823 21:58:07.354" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:58:07.354" status="PASS" starttime="20170823 21:58:07.045"></status>
</kw>
<msg timestamp="20170823 21:58:07.355" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:58:07.355" status="PASS" starttime="20170823 21:58:07.045"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:58:07.355" level="FAIL">On != Off</msg>
<status endtime="20170823 21:58:07.355" status="FAIL" starttime="20170823 21:58:07.355"></status>
</kw>
<status endtime="20170823 21:58:07.356" status="FAIL" starttime="20170823 21:58:07.044"></status>
</kw>
<status endtime="20170823 21:58:07.356" status="FAIL" starttime="20170823 21:58:07.044"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:17.362" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:17.362" status="PASS" starttime="20170823 21:58:17.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:17.363" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:17.363" status="PASS" starttime="20170823 21:58:17.362"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:17.363" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:17.363" status="PASS" starttime="20170823 21:58:17.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:17.364" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:17.364" status="PASS" starttime="20170823 21:58:17.364"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:17.554" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:17.554" status="PASS" starttime="20170823 21:58:17.365"></status>
</kw>
<msg timestamp="20170823 21:58:17.554" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:17.554" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:17.554" status="PASS" starttime="20170823 21:58:17.364"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:17.555" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:17.555" status="PASS" starttime="20170823 21:58:17.555"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:17.556" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:17.556" status="PASS" starttime="20170823 21:58:17.555"></status>
</kw>
<status endtime="20170823 21:58:17.556" status="PASS" starttime="20170823 21:58:17.360"></status>
</kw>
<status endtime="20170823 21:58:17.556" status="PASS" starttime="20170823 21:58:17.360"></status>
</kw>
<status endtime="20170823 21:58:17.556" status="PASS" starttime="20170823 21:58:17.359"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:17.557" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:58:17.557" status="PASS" starttime="20170823 21:58:17.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:58:17.559" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:58:17.559" status="PASS" starttime="20170823 21:58:17.558"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:58:17.560" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:58:17.560" status="PASS" starttime="20170823 21:58:17.560"></status>
</kw>
<status endtime="20170823 21:58:17.560" status="PASS" starttime="20170823 21:58:17.559"></status>
</kw>
<status endtime="20170823 21:58:17.560" status="PASS" starttime="20170823 21:58:17.557"></status>
</kw>
<status endtime="20170823 21:58:17.560" status="PASS" starttime="20170823 21:58:17.557"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:17.633" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:58:17.633" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:17.633" status="PASS" starttime="20170823 21:58:17.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:58:17.635" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:58:17.635" status="PASS" starttime="20170823 21:58:17.635"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:58:17.636" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:58:17.637" status="PASS" starttime="20170823 21:58:17.636"></status>
</kw>
<status endtime="20170823 21:58:17.637" status="PASS" starttime="20170823 21:58:17.635"></status>
</kw>
<status endtime="20170823 21:58:17.637" status="PASS" starttime="20170823 21:58:17.634"></status>
</kw>
<status endtime="20170823 21:58:17.637" status="PASS" starttime="20170823 21:58:17.634"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:17.637" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:17.637" status="PASS" starttime="20170823 21:58:17.637"></status>
</kw>
<msg timestamp="20170823 21:58:17.638" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:17.638" status="PASS" starttime="20170823 21:58:17.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:17.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:17.638" status="PASS" starttime="20170823 21:58:17.638"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:58:17.639" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:58:17.639" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:58:17.639" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:58:17.639" status="PASS" starttime="20170823 21:58:17.639"></status>
</kw>
<msg timestamp="20170823 21:58:17.639" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:58:17.639" status="PASS" starttime="20170823 21:58:17.358"></status>
</kw>
<msg timestamp="20170823 21:58:17.640" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:58:17.640" status="PASS" starttime="20170823 21:58:17.358"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:58:17.640" level="FAIL">On != Off</msg>
<status endtime="20170823 21:58:17.640" status="FAIL" starttime="20170823 21:58:17.640"></status>
</kw>
<status endtime="20170823 21:58:17.641" status="FAIL" starttime="20170823 21:58:17.357"></status>
</kw>
<status endtime="20170823 21:58:17.641" status="FAIL" starttime="20170823 21:58:17.356"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:27.646" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:27.646" status="PASS" starttime="20170823 21:58:27.645"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:27.647" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:27.647" status="PASS" starttime="20170823 21:58:27.646"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:27.647" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:27.647" status="PASS" starttime="20170823 21:58:27.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:27.648" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:27.648" status="PASS" starttime="20170823 21:58:27.648"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:27.841" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:27.841" status="PASS" starttime="20170823 21:58:27.650"></status>
</kw>
<msg timestamp="20170823 21:58:27.841" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:27.841" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:27.841" status="PASS" starttime="20170823 21:58:27.649"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:27.842" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:27.842" status="PASS" starttime="20170823 21:58:27.842"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:27.843" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:27.843" status="PASS" starttime="20170823 21:58:27.842"></status>
</kw>
<status endtime="20170823 21:58:27.843" status="PASS" starttime="20170823 21:58:27.645"></status>
</kw>
<status endtime="20170823 21:58:27.843" status="PASS" starttime="20170823 21:58:27.645"></status>
</kw>
<status endtime="20170823 21:58:27.843" status="PASS" starttime="20170823 21:58:27.644"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:27.844" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:58:27.844" status="PASS" starttime="20170823 21:58:27.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:58:27.846" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:58:27.846" status="PASS" starttime="20170823 21:58:27.845"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:58:27.847" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:58:27.847" status="PASS" starttime="20170823 21:58:27.846"></status>
</kw>
<status endtime="20170823 21:58:27.847" status="PASS" starttime="20170823 21:58:27.846"></status>
</kw>
<status endtime="20170823 21:58:27.847" status="PASS" starttime="20170823 21:58:27.844"></status>
</kw>
<status endtime="20170823 21:58:27.847" status="PASS" starttime="20170823 21:58:27.844"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:27.926" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:58:27.926" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:27.926" status="PASS" starttime="20170823 21:58:27.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:58:27.928" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:58:27.928" status="PASS" starttime="20170823 21:58:27.927"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:58:27.929" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:58:27.929" status="PASS" starttime="20170823 21:58:27.929"></status>
</kw>
<status endtime="20170823 21:58:27.929" status="PASS" starttime="20170823 21:58:27.928"></status>
</kw>
<status endtime="20170823 21:58:27.929" status="PASS" starttime="20170823 21:58:27.927"></status>
</kw>
<status endtime="20170823 21:58:27.929" status="PASS" starttime="20170823 21:58:27.926"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:27.930" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:27.930" status="PASS" starttime="20170823 21:58:27.929"></status>
</kw>
<msg timestamp="20170823 21:58:27.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:27.930" status="PASS" starttime="20170823 21:58:27.643"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:27.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:27.931" status="PASS" starttime="20170823 21:58:27.930"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:58:27.931" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:58:27.931" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:58:27.931" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:58:27.931" status="PASS" starttime="20170823 21:58:27.931"></status>
</kw>
<msg timestamp="20170823 21:58:27.932" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:58:27.932" status="PASS" starttime="20170823 21:58:27.643"></status>
</kw>
<msg timestamp="20170823 21:58:27.932" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:58:27.932" status="PASS" starttime="20170823 21:58:27.642"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:58:27.933" level="FAIL">On != Off</msg>
<status endtime="20170823 21:58:27.933" status="FAIL" starttime="20170823 21:58:27.932"></status>
</kw>
<status endtime="20170823 21:58:27.933" status="FAIL" starttime="20170823 21:58:27.642"></status>
</kw>
<status endtime="20170823 21:58:27.933" status="FAIL" starttime="20170823 21:58:27.641"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:37.939" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:37.940" status="PASS" starttime="20170823 21:58:37.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:37.941" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:37.941" status="PASS" starttime="20170823 21:58:37.940"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:37.942" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:37.942" status="PASS" starttime="20170823 21:58:37.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:37.942" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:37.943" status="PASS" starttime="20170823 21:58:37.942"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:38.144" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:38.144" status="PASS" starttime="20170823 21:58:37.944"></status>
</kw>
<msg timestamp="20170823 21:58:38.144" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:38.144" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:38.144" status="PASS" starttime="20170823 21:58:37.943"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:38.145" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:38.145" status="PASS" starttime="20170823 21:58:38.145"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:38.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:38.146" status="PASS" starttime="20170823 21:58:38.146"></status>
</kw>
<status endtime="20170823 21:58:38.146" status="PASS" starttime="20170823 21:58:37.937"></status>
</kw>
<status endtime="20170823 21:58:38.146" status="PASS" starttime="20170823 21:58:37.937"></status>
</kw>
<status endtime="20170823 21:58:38.147" status="PASS" starttime="20170823 21:58:37.936"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:38.148" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 21:58:38.148" status="PASS" starttime="20170823 21:58:38.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:58:38.150" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:58:38.150" status="PASS" starttime="20170823 21:58:38.149"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:58:38.151" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 21:58:38.151" status="PASS" starttime="20170823 21:58:38.151"></status>
</kw>
<status endtime="20170823 21:58:38.151" status="PASS" starttime="20170823 21:58:38.150"></status>
</kw>
<status endtime="20170823 21:58:38.151" status="PASS" starttime="20170823 21:58:38.149"></status>
</kw>
<status endtime="20170823 21:58:38.151" status="PASS" starttime="20170823 21:58:38.148"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:38.214" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170823 21:58:38.214" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:38.214" status="PASS" starttime="20170823 21:58:38.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:58:38.216" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:58:38.216" status="PASS" starttime="20170823 21:58:38.215"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:58:38.217" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:58:38.217" status="PASS" starttime="20170823 21:58:38.217"></status>
</kw>
<status endtime="20170823 21:58:38.217" status="PASS" starttime="20170823 21:58:38.216"></status>
</kw>
<status endtime="20170823 21:58:38.217" status="PASS" starttime="20170823 21:58:38.215"></status>
</kw>
<status endtime="20170823 21:58:38.217" status="PASS" starttime="20170823 21:58:38.214"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:38.218" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:38.218" status="PASS" starttime="20170823 21:58:38.218"></status>
</kw>
<msg timestamp="20170823 21:58:38.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:38.218" status="PASS" starttime="20170823 21:58:37.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:38.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:38.219" status="PASS" starttime="20170823 21:58:38.218"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:58:38.220" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:58:38.220" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:58:38.220" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:58:38.220" status="PASS" starttime="20170823 21:58:38.219"></status>
</kw>
<msg timestamp="20170823 21:58:38.220" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 21:58:38.220" status="PASS" starttime="20170823 21:58:37.935"></status>
</kw>
<msg timestamp="20170823 21:58:38.220" level="INFO">${power_state} = Off</msg>
<status endtime="20170823 21:58:38.220" status="PASS" starttime="20170823 21:58:37.935"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170823 21:58:38.221" level="FAIL">On != Off</msg>
<status endtime="20170823 21:58:38.221" status="FAIL" starttime="20170823 21:58:38.221"></status>
</kw>
<status endtime="20170823 21:58:38.221" status="FAIL" starttime="20170823 21:58:37.934"></status>
</kw>
<status endtime="20170823 21:58:38.222" status="FAIL" starttime="20170823 21:58:37.934"></status>
</kw>
<msg timestamp="20170823 21:58:38.222" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status endtime="20170823 21:58:38.222" status="FAIL" starttime="20170823 21:48:35.775"></status>
</kw>
<status endtime="20170823 21:58:38.222" status="FAIL" starttime="20170823 21:48:34.533"></status>
</kw>
<status endtime="20170823 21:58:38.222" status="FAIL" starttime="20170823 21:48:26.638"></status>
</kw>
<status endtime="20170823 21:58:38.222" status="FAIL" starttime="20170823 21:48:26.637"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:38.227" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:38.227" status="PASS" starttime="20170823 21:58:38.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:38.228" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:38.228" status="PASS" starttime="20170823 21:58:38.228"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:38.229" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:38.229" status="PASS" starttime="20170823 21:58:38.228"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:38.229" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:38.229" status="PASS" starttime="20170823 21:58:38.229"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:38.445" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:38.445" status="PASS" starttime="20170823 21:58:38.230"></status>
</kw>
<msg timestamp="20170823 21:58:38.445" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:38.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:38.446" status="PASS" starttime="20170823 21:58:38.230"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:38.446" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:38.446" status="PASS" starttime="20170823 21:58:38.446"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:38.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:38.447" status="PASS" starttime="20170823 21:58:38.446"></status>
</kw>
<status endtime="20170823 21:58:38.447" status="PASS" starttime="20170823 21:58:38.226"></status>
</kw>
<status endtime="20170823 21:58:38.447" status="PASS" starttime="20170823 21:58:38.226"></status>
</kw>
<status endtime="20170823 21:58:38.447" status="PASS" starttime="20170823 21:58:38.225"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:38.448" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 21:58:38.448" status="PASS" starttime="20170823 21:58:38.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:58:38.451" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:58:38.451" status="PASS" starttime="20170823 21:58:38.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:58:38.452" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 21:58:38.453" status="PASS" starttime="20170823 21:58:38.452"></status>
</kw>
<status endtime="20170823 21:58:38.453" status="PASS" starttime="20170823 21:58:38.451"></status>
</kw>
<status endtime="20170823 21:58:38.453" status="PASS" starttime="20170823 21:58:38.449"></status>
</kw>
<status endtime="20170823 21:58:38.453" status="PASS" starttime="20170823 21:58:38.448"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:38.581" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 21:58:38.581" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:38.581" status="PASS" starttime="20170823 21:58:38.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 21:58:38.583" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:58:38.583" status="PASS" starttime="20170823 21:58:38.583"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 21:58:38.584" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 21:58:38.584" status="PASS" starttime="20170823 21:58:38.584"></status>
</kw>
<status endtime="20170823 21:58:38.584" status="PASS" starttime="20170823 21:58:38.583"></status>
</kw>
<status endtime="20170823 21:58:38.584" status="PASS" starttime="20170823 21:58:38.582"></status>
</kw>
<status endtime="20170823 21:58:38.584" status="PASS" starttime="20170823 21:58:38.582"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:38.585" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:38.585" status="PASS" starttime="20170823 21:58:38.585"></status>
</kw>
<msg timestamp="20170823 21:58:38.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:38.585" status="PASS" starttime="20170823 21:58:38.224"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:38.586" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:38.586" status="PASS" starttime="20170823 21:58:38.585"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 21:58:38.586" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:58:38.586" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 21:58:38.587" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status endtime="20170823 21:58:38.587" status="PASS" starttime="20170823 21:58:38.586"></status>
</kw>
<msg timestamp="20170823 21:58:38.587" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170823 21:58:38.587" status="PASS" starttime="20170823 21:58:38.224"></status>
</kw>
<msg timestamp="20170823 21:58:38.587" level="INFO">${host_state} = Off</msg>
<status endtime="20170823 21:58:38.587" status="PASS" starttime="20170823 21:58:38.223"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170823 21:58:38.588" level="FAIL">Off != Quiesced</msg>
<status endtime="20170823 21:58:38.588" status="FAIL" starttime="20170823 21:58:38.588"></status>
</kw>
<msg timestamp="20170823 21:58:38.588" level="INFO">${status} = False</msg>
<status endtime="20170823 21:58:38.589" status="PASS" starttime="20170823 21:58:38.588"></status>
</kw>
<msg timestamp="20170823 21:58:38.589" level="INFO">${status} = False</msg>
<status endtime="20170823 21:58:38.589" status="PASS" starttime="20170823 21:58:38.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170823 21:58:38.615" level="INFO">Length is 12</msg>
<status endtime="20170823 21:58:38.615" status="PASS" starttime="20170823 21:58:38.615"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170823 21:58:38.621" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170823 21:58:41.630" level="INFO">${RC} = 0</msg>
<msg timestamp="20170823 21:58:41.631" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.684 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.681 ms
64 bytes from 9.41.166.16...</msg>
<status endtime="20170823 21:58:41.632" status="PASS" starttime="20170823 21:58:38.616"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.648" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.684 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.681 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.734 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.712 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.681/0.702/0.734/0.039 ms</msg>
<status endtime="20170823 21:58:41.649" status="PASS" starttime="20170823 21:58:41.645"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170823 21:58:41.650" status="PASS" starttime="20170823 21:58:41.650"></status>
</kw>
<status endtime="20170823 21:58:41.651" status="PASS" starttime="20170823 21:58:38.615"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170823 21:58:41.690" level="INFO">${cur_time} = 2017-08-23 21:58:41:689074</msg>
<status endtime="20170823 21:58:41.690" status="PASS" starttime="20170823 21:58:41.688"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170823 21:58:41.690" level="INFO">${cur_time} = 20170823215841689074</msg>
<status endtime="20170823 21:58:41.691" status="PASS" starttime="20170823 21:58:41.690"></status>
</kw>
<status endtime="20170823 21:58:41.691" status="PASS" starttime="20170823 21:58:41.687"></status>
</kw>
<msg timestamp="20170823 21:58:41.691" level="INFO">${FFDC_TIME} = 20170823215841689074</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170823 21:58:41.703" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170823 21:58:41.703" status="PASS" starttime="20170823 21:58:41.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170823 21:58:41.704" level="INFO">${suite_name} = 20170823215841689074_TestsTestBasicPoweron</msg>
<status endtime="20170823 21:58:41.704" status="PASS" starttime="20170823 21:58:41.703"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170823 21:58:41.704" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170823 21:58:41.704" status="PASS" starttime="20170823 21:58:41.704"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170823 21:58:41.705" level="INFO">${test_name} = 20170823215841689074_PowerOnTest</msg>
<status endtime="20170823 21:58:41.705" status="PASS" starttime="20170823 21:58:41.704"></status>
</kw>
<status endtime="20170823 21:58:41.705" status="PASS" starttime="20170823 21:58:41.702"></status>
</kw>
<msg timestamp="20170823 21:58:41.705" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/</msg>
<msg timestamp="20170823 21:58:41.706" level="INFO">${FFDC_PREFIX} = 20170823215841689074_</msg>
<msg timestamp="20170823 21:58:41.726" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/</arg>
</arguments>
<msg timestamp="20170823 21:58:41.728" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.728" status="PASS" starttime="20170823 21:58:41.727"></status>
</kw>
<msg timestamp="20170823 21:58:41.733" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.754" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.754" status="PASS" starttime="20170823 21:58:41.753"></status>
</kw>
<status endtime="20170823 21:58:41.754" status="PASS" starttime="20170823 21:58:41.752"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.755" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.755" status="PASS" starttime="20170823 21:58:41.754"></status>
</kw>
<status endtime="20170823 21:58:41.755" status="PASS" starttime="20170823 21:58:41.754"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.756" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.756" status="PASS" starttime="20170823 21:58:41.756"></status>
</kw>
<status endtime="20170823 21:58:41.756" status="PASS" starttime="20170823 21:58:41.755"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.758" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.758" status="PASS" starttime="20170823 21:58:41.757"></status>
</kw>
<status endtime="20170823 21:58:41.758" status="PASS" starttime="20170823 21:58:41.756"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.759" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.759" status="PASS" starttime="20170823 21:58:41.759"></status>
</kw>
<status endtime="20170823 21:58:41.759" status="PASS" starttime="20170823 21:58:41.758"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.761" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.761" status="PASS" starttime="20170823 21:58:41.760"></status>
</kw>
<status endtime="20170823 21:58:41.761" status="PASS" starttime="20170823 21:58:41.760"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.762" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.762" status="PASS" starttime="20170823 21:58:41.762"></status>
</kw>
<status endtime="20170823 21:58:41.762" status="PASS" starttime="20170823 21:58:41.761"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.763" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.763" status="PASS" starttime="20170823 21:58:41.763"></status>
</kw>
<status endtime="20170823 21:58:41.764" status="PASS" starttime="20170823 21:58:41.762"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.765" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.765" status="PASS" starttime="20170823 21:58:41.764"></status>
</kw>
<status endtime="20170823 21:58:41.765" status="PASS" starttime="20170823 21:58:41.764"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.766" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.766" status="PASS" starttime="20170823 21:58:41.766"></status>
</kw>
<status endtime="20170823 21:58:41.766" status="PASS" starttime="20170823 21:58:41.765"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.767" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.768" status="PASS" starttime="20170823 21:58:41.767"></status>
</kw>
<status endtime="20170823 21:58:41.768" status="PASS" starttime="20170823 21:58:41.767"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.769" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.769" status="PASS" starttime="20170823 21:58:41.768"></status>
</kw>
<status endtime="20170823 21:58:41.769" status="PASS" starttime="20170823 21:58:41.768"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.770" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.770" status="PASS" starttime="20170823 21:58:41.770"></status>
</kw>
<status endtime="20170823 21:58:41.770" status="PASS" starttime="20170823 21:58:41.769"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170823 21:58:41.799" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:41.800" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170823 21:58:41.877" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170823 21:58:41.886" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170823 21:58:41.886" level="INFO">${stderr} = </msg>
<msg timestamp="20170823 21:58:41.887" level="INFO">${rc} = 0</msg>
<status endtime="20170823 21:58:41.887" status="PASS" starttime="20170823 21:58:41.771"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.887" level="INFO">Length is 0</msg>
<status endtime="20170823 21:58:41.887" status="PASS" starttime="20170823 21:58:41.887"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.888" level="INFO">Length is 11</msg>
<status endtime="20170823 21:58:41.888" status="PASS" starttime="20170823 21:58:41.887"></status>
</kw>
<msg timestamp="20170823 21:58:41.888" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170823 21:58:41.888" status="PASS" starttime="20170823 21:58:41.771"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.889" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.889" status="PASS" starttime="20170823 21:58:41.889"></status>
</kw>
<status endtime="20170823 21:58:41.890" status="PASS" starttime="20170823 21:58:41.888"></status>
</kw>
<status endtime="20170823 21:58:41.890" status="PASS" starttime="20170823 21:58:41.765"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.891" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.891" status="PASS" starttime="20170823 21:58:41.890"></status>
</kw>
<status endtime="20170823 21:58:41.891" status="PASS" starttime="20170823 21:58:41.890"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170823 21:58:41.891" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170823 21:58:41.892" status="PASS" starttime="20170823 21:58:41.891"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.893" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.893" status="PASS" starttime="20170823 21:58:41.893"></status>
</kw>
<status endtime="20170823 21:58:41.893" status="PASS" starttime="20170823 21:58:41.892"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.894" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.894" status="PASS" starttime="20170823 21:58:41.894"></status>
</kw>
<status endtime="20170823 21:58:41.894" status="PASS" starttime="20170823 21:58:41.893"></status>
</kw>
<status endtime="20170823 21:58:41.894" status="PASS" starttime="20170823 21:58:41.892"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.896" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.896" status="PASS" starttime="20170823 21:58:41.895"></status>
</kw>
<status endtime="20170823 21:58:41.896" status="PASS" starttime="20170823 21:58:41.895"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.897" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.897" status="PASS" starttime="20170823 21:58:41.897"></status>
</kw>
<status endtime="20170823 21:58:41.897" status="PASS" starttime="20170823 21:58:41.896"></status>
</kw>
<status endtime="20170823 21:58:41.897" status="PASS" starttime="20170823 21:58:41.894"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.899" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.899" status="PASS" starttime="20170823 21:58:41.898"></status>
</kw>
<status endtime="20170823 21:58:41.899" status="PASS" starttime="20170823 21:58:41.898"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.900" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.900" status="PASS" starttime="20170823 21:58:41.900"></status>
</kw>
<status endtime="20170823 21:58:41.900" status="PASS" starttime="20170823 21:58:41.899"></status>
</kw>
<status endtime="20170823 21:58:41.900" status="PASS" starttime="20170823 21:58:41.897"></status>
</kw>
<status endtime="20170823 21:58:41.900" status="PASS" starttime="20170823 21:58:41.892"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:41.901" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:41.901" status="PASS" starttime="20170823 21:58:41.901"></status>
</kw>
<status endtime="20170823 21:58:41.902" status="PASS" starttime="20170823 21:58:41.900"></status>
</kw>
<status endtime="20170823 21:58:41.902" status="PASS" starttime="20170823 21:58:41.752"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170823 21:58:41.908" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170823 21:58:41.908" status="PASS" starttime="20170823 21:58:41.908"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170823 21:58:41.910" level="INFO">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') | ('Sys Inventory Files', 'System Inventory Files') |...</msg>
<status endtime="20170823 21:58:41.910" status="PASS" starttime="20170823 21:58:41.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170823 21:58:41.911" status="PASS" starttime="20170823 21:58:41.911"></status>
</kw>
<msg timestamp="20170823 21:58:41.911" level="INFO">@{ffdc_function_list} = [ OS FFDC | BMC Specific Files | SEL Log | Core Files | Sys Inventory Files | Get Request FFDC | FFDC Generic Report ]</msg>
<status endtime="20170823 21:58:41.911" status="PASS" starttime="20170823 21:58:41.910"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 21:58:41.913" status="PASS" starttime="20170823 21:58:41.913"></status>
</kw>
<msg timestamp="20170823 21:58:41.913" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:41.913" level="INFO">${ret_values} = None</msg>
<status endtime="20170823 21:58:41.913" status="PASS" starttime="20170823 21:58:41.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 21:58:41.914" status="PASS" starttime="20170823 21:58:41.914"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170823 21:58:41.941" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170823 21:58:41.942" status="PASS" starttime="20170823 21:58:41.941"></status>
</kw>
<status endtime="20170823 21:58:41.942" status="PASS" starttime="20170823 21:58:41.940"></status>
</kw>
<status endtime="20170823 21:58:41.942" status="PASS" starttime="20170823 21:58:41.914"></status>
</kw>
<status endtime="20170823 21:58:41.942" status="PASS" starttime="20170823 21:58:41.912"></status>
</kw>
<status endtime="20170823 21:58:41.942" status="PASS" starttime="20170823 21:58:41.911"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 21:58:41.944" status="PASS" starttime="20170823 21:58:41.943"></status>
</kw>
<msg timestamp="20170823 21:58:41.944" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:41.944" level="INFO">${ret_values} = None</msg>
<status endtime="20170823 21:58:41.944" status="PASS" starttime="20170823 21:58:41.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 21:58:41.945" status="PASS" starttime="20170823 21:58:41.944"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170823 21:58:41.972" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170823 21:58:41.972" status="PASS" starttime="20170823 21:58:41.971"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170823 21:58:41.973" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ...</msg>
<status endtime="20170823 21:58:41.973" status="PASS" starttime="20170823 21:58:41.973"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:41.975" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_procinfo.txt</msg>
<status endtime="20170823 21:58:41.975" status="PASS" starttime="20170823 21:58:41.974"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170823 21:58:41.977" status="PASS" starttime="20170823 21:58:41.976"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:41.978" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170823 21:58:41.978" status="PASS" starttime="20170823 21:58:41.977"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 21:58:42.046" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:42.046" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170823 21:58:42.098" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:42.098" status="PASS" starttime="20170823 21:58:42.009"></status>
</kw>
<msg timestamp="20170823 21:58:42.099" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:42.099" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170823 21:58:42.099" status="PASS" starttime="20170823 21:58:41.978"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 21:58:42.099" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170823 21:58:42.099" status="PASS" starttime="20170823 21:58:42.099"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:58:42.100" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:58:42.100" status="PASS" starttime="20170823 21:58:42.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:42.107" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_procinfo.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:42.107" status="PASS" starttime="20170823 21:58:42.106"></status>
</kw>
<status endtime="20170823 21:58:42.107" status="PASS" starttime="20170823 21:58:42.106"></status>
</kw>
<status endtime="20170823 21:58:42.107" status="PASS" starttime="20170823 21:58:42.100"></status>
</kw>
<status endtime="20170823 21:58:42.107" status="PASS" starttime="20170823 21:58:41.975"></status>
</kw>
<status endtime="20170823 21:58:42.107" status="PASS" starttime="20170823 21:58:41.973"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:42.108" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170823 21:58:42.108" status="PASS" starttime="20170823 21:58:42.108"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170823 21:58:42.109" status="PASS" starttime="20170823 21:58:42.109"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:42.110" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170823 21:58:42.110" status="PASS" starttime="20170823 21:58:42.110"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 21:58:42.177" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:42.177" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170823 21:58:42.689" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:42.689" status="PASS" starttime="20170823 21:58:42.141"></status>
</kw>
<msg timestamp="20170823 21:58:42.689" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:42.690" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:56 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:56 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170823 21:58:42.690" status="PASS" starttime="20170823 21:58:42.110"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 21:58:42.691" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:56 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:56 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170823 21:58:42.691" status="PASS" starttime="20170823 21:58:42.691"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:58:42.692" level="INFO">${stderr} = ls: /proc/1962/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170823 21:58:42.692" status="PASS" starttime="20170823 21:58:42.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:42.699" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:42.699" status="PASS" starttime="20170823 21:58:42.698"></status>
</kw>
<status endtime="20170823 21:58:42.699" status="PASS" starttime="20170823 21:58:42.697"></status>
</kw>
<status endtime="20170823 21:58:42.699" status="PASS" starttime="20170823 21:58:42.692"></status>
</kw>
<status endtime="20170823 21:58:42.699" status="PASS" starttime="20170823 21:58:42.108"></status>
</kw>
<status endtime="20170823 21:58:42.699" status="PASS" starttime="20170823 21:58:42.107"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:42.700" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_dmesg.txt</msg>
<status endtime="20170823 21:58:42.700" status="PASS" starttime="20170823 21:58:42.700"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170823 21:58:42.702" status="PASS" starttime="20170823 21:58:42.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:42.702" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170823 21:58:42.702" status="PASS" starttime="20170823 21:58:42.702"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 21:58:42.776" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:42.776" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170823 21:58:42.843" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:42.843" status="PASS" starttime="20170823 21:58:42.739"></status>
</kw>
<msg timestamp="20170823 21:58:42.843" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:42.844" level="INFO">${ret_values} = (u'[    0.000000]   Normal zone: 992 pages used for memmap\n[    0.000000]   Normal zone: 0 pages reserved\n[    0.000000]   Normal zone: 110592 pages, LIFO batch:31\n[    0.000000] pcpu-alloc: s0 r0 ...</msg>
<status endtime="20170823 21:58:42.844" status="PASS" starttime="20170823 21:58:42.703"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 21:58:42.844" level="INFO">${stdout} = [    0.000000]   Normal zone: 992 pages used for memmap
[    0.000000]   Normal zone: 0 pages reserved
[    0.000000]   Normal zone: 110592 pages, LIFO batch:31
[    0.000000] pcpu-alloc: s0 r0 d32768...</msg>
<status endtime="20170823 21:58:42.844" status="PASS" starttime="20170823 21:58:42.844"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:58:42.845" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:58:42.845" status="PASS" starttime="20170823 21:58:42.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:42.852" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_dmesg.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:42.852" status="PASS" starttime="20170823 21:58:42.851"></status>
</kw>
<status endtime="20170823 21:58:42.852" status="PASS" starttime="20170823 21:58:42.851"></status>
</kw>
<status endtime="20170823 21:58:42.852" status="PASS" starttime="20170823 21:58:42.845"></status>
</kw>
<status endtime="20170823 21:58:42.852" status="PASS" starttime="20170823 21:58:42.700"></status>
</kw>
<status endtime="20170823 21:58:42.852" status="PASS" starttime="20170823 21:58:42.700"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:42.853" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_journalctl.txt</msg>
<status endtime="20170823 21:58:42.853" status="PASS" starttime="20170823 21:58:42.853"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170823 21:58:42.854" status="PASS" starttime="20170823 21:58:42.854"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:42.855" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170823 21:58:42.855" status="PASS" starttime="20170823 21:58:42.855"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 21:58:42.927" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:42.927" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170823 21:58:45.380" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:45.382" status="PASS" starttime="20170823 21:58:42.891"></status>
</kw>
<msg timestamp="20170823 21:58:45.382" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:45.385" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:56:20 UTC. --\nAug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:59 witherspoon kernel: Linu...</msg>
<status endtime="20170823 21:58:45.385" status="PASS" starttime="20170823 21:58:42.855"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 21:58:45.387" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:56:20 UTC. --
Aug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:59 witherspoon kernel: Linux ver...</msg>
<status endtime="20170823 21:58:45.387" status="PASS" starttime="20170823 21:58:45.386"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:58:45.387" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:58:45.387" status="PASS" starttime="20170823 21:58:45.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:45.396" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_journalctl.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:45.396" status="PASS" starttime="20170823 21:58:45.395"></status>
</kw>
<status endtime="20170823 21:58:45.396" status="PASS" starttime="20170823 21:58:45.393"></status>
</kw>
<status endtime="20170823 21:58:45.396" status="PASS" starttime="20170823 21:58:45.388"></status>
</kw>
<status endtime="20170823 21:58:45.396" status="PASS" starttime="20170823 21:58:42.853"></status>
</kw>
<status endtime="20170823 21:58:45.397" status="PASS" starttime="20170823 21:58:42.852"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:45.398" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_proc_list.txt</msg>
<status endtime="20170823 21:58:45.398" status="PASS" starttime="20170823 21:58:45.397"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170823 21:58:45.400" status="PASS" starttime="20170823 21:58:45.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:45.401" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170823 21:58:45.401" status="PASS" starttime="20170823 21:58:45.400"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 21:58:45.470" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:45.470" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170823 21:58:45.799" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:45.800" status="PASS" starttime="20170823 21:58:45.432"></status>
</kw>
<msg timestamp="20170823 21:58:45.800" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:45.800" level="INFO">${ret_values} = (u'Mem: 184800K used, 247448K free, 14784K shrd, 16608K buff, 73612K cached\nCPU:   0% usr  27% sys   0% nic  72% idle   0% io   0% irq   0% sirq\nLoad average: 0.38 0.82 0.89 1/151 1965\n  PID  PPID ...</msg>
<status endtime="20170823 21:58:45.800" status="PASS" starttime="20170823 21:58:45.401"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 21:58:45.801" level="INFO">${stdout} = Mem: 184800K used, 247448K free, 14784K shrd, 16608K buff, 73612K cached
CPU:   0% usr  27% sys   0% nic  72% idle   0% io   0% irq   0% sirq
Load average: 0.38 0.82 0.89 1/151 1965
  PID  PPID USER  ...</msg>
<status endtime="20170823 21:58:45.801" status="PASS" starttime="20170823 21:58:45.801"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:58:45.802" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:58:45.802" status="PASS" starttime="20170823 21:58:45.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:45.812" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_proc_list.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:45.812" status="PASS" starttime="20170823 21:58:45.811"></status>
</kw>
<status endtime="20170823 21:58:45.812" status="PASS" starttime="20170823 21:58:45.810"></status>
</kw>
<status endtime="20170823 21:58:45.812" status="PASS" starttime="20170823 21:58:45.802"></status>
</kw>
<status endtime="20170823 21:58:45.812" status="PASS" starttime="20170823 21:58:45.398"></status>
</kw>
<status endtime="20170823 21:58:45.812" status="PASS" starttime="20170823 21:58:45.397"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:45.813" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_meminfo.txt</msg>
<status endtime="20170823 21:58:45.813" status="PASS" starttime="20170823 21:58:45.813"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170823 21:58:45.814" status="PASS" starttime="20170823 21:58:45.814"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:45.815" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170823 21:58:45.815" status="PASS" starttime="20170823 21:58:45.815"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 21:58:45.882" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:45.883" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170823 21:58:45.939" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:45.940" status="PASS" starttime="20170823 21:58:45.847"></status>
</kw>
<msg timestamp="20170823 21:58:45.940" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:45.940" level="INFO">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          247324 kB\nMemAvailable:     321248 kB\nBuffers:           16608 kB\nCached:            73612 kB\nSwapCached:            0 kB\nActive:           11073...</msg>
<status endtime="20170823 21:58:45.940" status="PASS" starttime="20170823 21:58:45.815"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 21:58:45.940" level="INFO">${stdout} = MemTotal:         432248 kB
MemFree:          247324 kB
MemAvailable:     321248 kB
Buffers:           16608 kB
Cached:            73612 kB
SwapCached:            0 kB
Active:           110732 kB
Inac...</msg>
<status endtime="20170823 21:58:45.941" status="PASS" starttime="20170823 21:58:45.940"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:58:45.941" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:58:45.941" status="PASS" starttime="20170823 21:58:45.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:45.948" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_meminfo.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:45.948" status="PASS" starttime="20170823 21:58:45.947"></status>
</kw>
<status endtime="20170823 21:58:45.948" status="PASS" starttime="20170823 21:58:45.947"></status>
</kw>
<status endtime="20170823 21:58:45.948" status="PASS" starttime="20170823 21:58:45.941"></status>
</kw>
<status endtime="20170823 21:58:45.948" status="PASS" starttime="20170823 21:58:45.813"></status>
</kw>
<status endtime="20170823 21:58:45.948" status="PASS" starttime="20170823 21:58:45.812"></status>
</kw>
<status endtime="20170823 21:58:45.948" status="PASS" starttime="20170823 21:58:41.973"></status>
</kw>
<status endtime="20170823 21:58:45.948" status="PASS" starttime="20170823 21:58:41.972"></status>
</kw>
<status endtime="20170823 21:58:45.948" status="PASS" starttime="20170823 21:58:41.972"></status>
</kw>
<status endtime="20170823 21:58:45.948" status="PASS" starttime="20170823 21:58:41.972"></status>
</kw>
<status endtime="20170823 21:58:45.949" status="PASS" starttime="20170823 21:58:41.971"></status>
</kw>
<status endtime="20170823 21:58:45.949" status="PASS" starttime="20170823 21:58:41.945"></status>
</kw>
<status endtime="20170823 21:58:45.949" status="PASS" starttime="20170823 21:58:41.942"></status>
</kw>
<status endtime="20170823 21:58:45.949" status="PASS" starttime="20170823 21:58:41.942"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 21:58:45.951" status="PASS" starttime="20170823 21:58:45.951"></status>
</kw>
<msg timestamp="20170823 21:58:45.952" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:45.952" level="INFO">${ret_values} = None</msg>
<status endtime="20170823 21:58:45.952" status="PASS" starttime="20170823 21:58:45.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 21:58:45.952" status="PASS" starttime="20170823 21:58:45.952"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:45.980" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:45.981" status="PASS" starttime="20170823 21:58:45.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:45.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:45.981" status="PASS" starttime="20170823 21:58:45.981"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:45.982" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:45.982" status="PASS" starttime="20170823 21:58:45.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:45.983" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:45.983" status="PASS" starttime="20170823 21:58:45.982"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:46.190" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:46.190" status="PASS" starttime="20170823 21:58:45.983"></status>
</kw>
<msg timestamp="20170823 21:58:46.191" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:46.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:46.191" status="PASS" starttime="20170823 21:58:45.983"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:46.191" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:46.191" status="PASS" starttime="20170823 21:58:46.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:46.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:46.192" status="PASS" starttime="20170823 21:58:46.192"></status>
</kw>
<status endtime="20170823 21:58:46.192" status="PASS" starttime="20170823 21:58:45.979"></status>
</kw>
<status endtime="20170823 21:58:46.192" status="PASS" starttime="20170823 21:58:45.979"></status>
</kw>
<status endtime="20170823 21:58:46.192" status="PASS" starttime="20170823 21:58:45.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:46.193" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170823 21:58:46.193" status="PASS" starttime="20170823 21:58:46.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 21:58:46.194" status="PASS" starttime="20170823 21:58:46.193"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:46.236" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170823 21:58:46.236" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 21:58:46.236" status="PASS" starttime="20170823 21:58:46.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 21:58:46.237" status="PASS" starttime="20170823 21:58:46.236"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:46.237" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:46.237" status="PASS" starttime="20170823 21:58:46.237"></status>
</kw>
<msg timestamp="20170823 21:58:46.237" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 21:58:46.237" status="PASS" starttime="20170823 21:58:45.978"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:46.238" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 21:58:46.239" level="FAIL">404 != 200</msg>
<status endtime="20170823 21:58:46.239" status="FAIL" starttime="20170823 21:58:46.238"></status>
</kw>
<msg timestamp="20170823 21:58:46.239" level="INFO">${status} = False</msg>
<status endtime="20170823 21:58:46.239" status="PASS" starttime="20170823 21:58:46.238"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170823 21:58:46.239" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170823 21:58:46.240" status="PASS" starttime="20170823 21:58:46.239"></status>
</kw>
<status endtime="20170823 21:58:46.240" status="PASS" starttime="20170823 21:58:45.977"></status>
</kw>
<status endtime="20170823 21:58:46.240" status="PASS" starttime="20170823 21:58:45.952"></status>
</kw>
<status endtime="20170823 21:58:46.240" status="PASS" starttime="20170823 21:58:45.949"></status>
</kw>
<status endtime="20170823 21:58:46.240" status="PASS" starttime="20170823 21:58:45.949"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 21:58:46.242" status="PASS" starttime="20170823 21:58:46.241"></status>
</kw>
<msg timestamp="20170823 21:58:46.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:46.242" level="INFO">${ret_values} = None</msg>
<status endtime="20170823 21:58:46.242" status="PASS" starttime="20170823 21:58:46.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 21:58:46.242" status="PASS" starttime="20170823 21:58:46.242"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170823 21:58:46.300" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:46.300" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170823 21:58:46.357" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170823 21:58:46.368" level="INFO">${core_files} = /tmp/core_xargs.1291</msg>
<msg timestamp="20170823 21:58:46.368" level="INFO">${stderr} = </msg>
<msg timestamp="20170823 21:58:46.368" level="INFO">${rc} = 0</msg>
<status endtime="20170823 21:58:46.368" status="PASS" starttime="20170823 21:58:46.268"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170823 21:58:46.369" level="INFO">@{core_list} = [ /tmp/core_xargs.1291 ]</msg>
<status endtime="20170823 21:58:46.369" status="PASS" starttime="20170823 21:58:46.368"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170823 21:58:46.385" status="PASS" starttime="20170823 21:58:46.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170823 21:58:47.094" status="PASS" starttime="20170823 21:58:46.387"></status>
</kw>
<status endtime="20170823 21:58:47.094" status="PASS" starttime="20170823 21:58:46.386"></status>
</kw>
<status endtime="20170823 21:58:47.094" status="PASS" starttime="20170823 21:58:46.386"></status>
</kw>
<status endtime="20170823 21:58:47.094" status="PASS" starttime="20170823 21:58:46.378"></status>
</kw>
<status endtime="20170823 21:58:47.094" status="PASS" starttime="20170823 21:58:46.369"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_xargs.1291" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170823 21:58:47.294" status="PASS" starttime="20170823 21:58:47.095"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170823 21:58:47.328" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:47.328" level="INFO">Executing command 'rm /tmp/core_xargs.1291'.</msg>
<msg timestamp="20170823 21:58:47.385" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:47.396" status="PASS" starttime="20170823 21:58:47.294"></status>
</kw>
<status endtime="20170823 21:58:47.397" status="PASS" starttime="20170823 21:58:47.094"></status>
</kw>
<status endtime="20170823 21:58:47.397" status="PASS" starttime="20170823 21:58:47.094"></status>
</kw>
<status endtime="20170823 21:58:47.397" status="PASS" starttime="20170823 21:58:46.268"></status>
</kw>
<status endtime="20170823 21:58:47.397" status="PASS" starttime="20170823 21:58:46.243"></status>
</kw>
<status endtime="20170823 21:58:47.397" status="PASS" starttime="20170823 21:58:46.240"></status>
</kw>
<status endtime="20170823 21:58:47.397" status="PASS" starttime="20170823 21:58:46.240"></status>
</kw>
<kw name="${method} = ('Sys Inventory Files', 'System Inventory Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 21:58:47.400" status="PASS" starttime="20170823 21:58:47.399"></status>
</kw>
<msg timestamp="20170823 21:58:47.400" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:47.400" level="INFO">${ret_values} = None</msg>
<status endtime="20170823 21:58:47.400" status="PASS" starttime="20170823 21:58:47.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 21:58:47.401" status="PASS" starttime="20170823 21:58:47.401"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status endtime="20170823 21:58:47.428" status="PASS" starttime="20170823 21:58:47.427"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170823 21:58:47.429" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/7001/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status endtime="20170823 21:58:47.429" status="PASS" starttime="20170823 21:58:47.429"></status>
</kw>
<status endtime="20170823 21:58:47.429" status="PASS" starttime="20170823 21:58:47.427"></status>
</kw>
<status endtime="20170823 21:58:47.429" status="PASS" starttime="20170823 21:58:47.402"></status>
</kw>
<status endtime="20170823 21:58:47.429" status="PASS" starttime="20170823 21:58:47.398"></status>
</kw>
<status endtime="20170823 21:58:47.429" status="PASS" starttime="20170823 21:58:47.397"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 21:58:47.431" status="PASS" starttime="20170823 21:58:47.431"></status>
</kw>
<msg timestamp="20170823 21:58:47.431" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:47.431" level="INFO">${ret_values} = None</msg>
<status endtime="20170823 21:58:47.431" status="PASS" starttime="20170823 21:58:47.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 21:58:47.432" status="PASS" starttime="20170823 21:58:47.432"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170823 21:58:47.463" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170823 21:58:47.463" status="PASS" starttime="20170823 21:58:47.463"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170823 21:58:47.464" level="INFO">@{cmd_list} = [ ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | (...</msg>
<status endtime="20170823 21:58:47.465" status="PASS" starttime="20170823 21:58:47.464"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:47.465" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_sensor_xyz_list.txt</msg>
<status endtime="20170823 21:58:47.465" status="PASS" starttime="20170823 21:58:47.465"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:47.468" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:47.469" status="PASS" starttime="20170823 21:58:47.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:47.469" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:47.469" status="PASS" starttime="20170823 21:58:47.469"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:47.470" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:47.470" status="PASS" starttime="20170823 21:58:47.469"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:47.471" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:47.471" status="PASS" starttime="20170823 21:58:47.470"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:47.686" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:47.686" status="PASS" starttime="20170823 21:58:47.471"></status>
</kw>
<msg timestamp="20170823 21:58:47.686" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:47.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:47.686" status="PASS" starttime="20170823 21:58:47.471"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:47.687" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:47.687" status="PASS" starttime="20170823 21:58:47.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:47.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:47.688" status="PASS" starttime="20170823 21:58:47.687"></status>
</kw>
<status endtime="20170823 21:58:47.688" status="PASS" starttime="20170823 21:58:47.467"></status>
</kw>
<status endtime="20170823 21:58:47.688" status="PASS" starttime="20170823 21:58:47.467"></status>
</kw>
<status endtime="20170823 21:58:47.688" status="PASS" starttime="20170823 21:58:47.466"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:47.689" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status endtime="20170823 21:58:47.689" status="PASS" starttime="20170823 21:58:47.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 21:58:47.689" status="PASS" starttime="20170823 21:58:47.689"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:48.365" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 21:58:48.365" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:48.365" status="PASS" starttime="20170823 21:58:47.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 21:58:48.366" status="PASS" starttime="20170823 21:58:48.365"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:48.366" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:48.366" status="PASS" starttime="20170823 21:58:48.366"></status>
</kw>
<msg timestamp="20170823 21:58:48.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:48.366" status="PASS" starttime="20170823 21:58:47.466"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:48.367" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:48.367" status="PASS" starttime="20170823 21:58:48.367"></status>
</kw>
<msg timestamp="20170823 21:58:48.368" level="INFO">${status} = True</msg>
<status endtime="20170823 21:58:48.368" status="PASS" starttime="20170823 21:58:48.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170823 21:58:48.368" status="PASS" starttime="20170823 21:58:48.368"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170823 21:58:48.370" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30180
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 207500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 31
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:58:48.370" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170823 21:58:48.370" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status endtime="20170823 21:58:48.370" status="PASS" starttime="20170823 21:58:48.368"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:48.371" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_sensor_xyz_list.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_sensor_xyz_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:48.371" status="PASS" starttime="20170823 21:58:48.371"></status>
</kw>
<status endtime="20170823 21:58:48.372" status="PASS" starttime="20170823 21:58:48.370"></status>
</kw>
<status endtime="20170823 21:58:48.372" status="PASS" starttime="20170823 21:58:47.465"></status>
</kw>
<kw name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:48.372" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_control_list.txt</msg>
<status endtime="20170823 21:58:48.372" status="PASS" starttime="20170823 21:58:48.372"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:48.375" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:48.375" status="PASS" starttime="20170823 21:58:48.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:48.376" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:48.376" status="PASS" starttime="20170823 21:58:48.376"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:48.377" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:48.377" status="PASS" starttime="20170823 21:58:48.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:48.377" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:48.377" status="PASS" starttime="20170823 21:58:48.377"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:48.560" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:48.560" status="PASS" starttime="20170823 21:58:48.378"></status>
</kw>
<msg timestamp="20170823 21:58:48.560" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:48.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:48.560" status="PASS" starttime="20170823 21:58:48.378"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:48.561" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:48.561" status="PASS" starttime="20170823 21:58:48.561"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:48.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:48.562" status="PASS" starttime="20170823 21:58:48.561"></status>
</kw>
<status endtime="20170823 21:58:48.562" status="PASS" starttime="20170823 21:58:48.374"></status>
</kw>
<status endtime="20170823 21:58:48.562" status="PASS" starttime="20170823 21:58:48.374"></status>
</kw>
<status endtime="20170823 21:58:48.562" status="PASS" starttime="20170823 21:58:48.373"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:48.563" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status endtime="20170823 21:58:48.563" status="PASS" starttime="20170823 21:58:48.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 21:58:48.563" status="PASS" starttime="20170823 21:58:48.563"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:48.783" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 21:58:48.783" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:48.783" status="PASS" starttime="20170823 21:58:48.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 21:58:48.784" status="PASS" starttime="20170823 21:58:48.784"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:48.784" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:48.785" status="PASS" starttime="20170823 21:58:48.784"></status>
</kw>
<msg timestamp="20170823 21:58:48.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:48.785" status="PASS" starttime="20170823 21:58:48.372"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:48.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:48.786" status="PASS" starttime="20170823 21:58:48.786"></status>
</kw>
<msg timestamp="20170823 21:58:48.786" level="INFO">${status} = True</msg>
<status endtime="20170823 21:58:48.786" status="PASS" starttime="20170823 21:58:48.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170823 21:58:48.787" status="PASS" starttime="20170823 21:58:48.786"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170823 21:58:48.787" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot_mode": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"
    }, 
    "/xyz/openbmc_project/control/host0/boot_source": {
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:58:48.788" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170823 21:58:48.788" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status endtime="20170823 21:58:48.788" status="PASS" starttime="20170823 21:58:48.787"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:48.789" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_control_list.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:48.789" status="PASS" starttime="20170823 21:58:48.789"></status>
</kw>
<status endtime="20170823 21:58:48.789" status="PASS" starttime="20170823 21:58:48.788"></status>
</kw>
<status endtime="20170823 21:58:48.789" status="PASS" starttime="20170823 21:58:48.372"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:48.790" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_inventory.txt</msg>
<status endtime="20170823 21:58:48.790" status="PASS" starttime="20170823 21:58:48.790"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:48.793" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:48.793" status="PASS" starttime="20170823 21:58:48.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:48.794" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:48.794" status="PASS" starttime="20170823 21:58:48.794"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:48.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:48.795" status="PASS" starttime="20170823 21:58:48.794"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:48.795" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:48.795" status="PASS" starttime="20170823 21:58:48.795"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:49.027" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:49.027" status="PASS" starttime="20170823 21:58:48.796"></status>
</kw>
<msg timestamp="20170823 21:58:49.028" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:49.028" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:49.028" status="PASS" starttime="20170823 21:58:48.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:49.028" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:49.028" status="PASS" starttime="20170823 21:58:49.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:49.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:49.029" status="PASS" starttime="20170823 21:58:49.029"></status>
</kw>
<status endtime="20170823 21:58:49.029" status="PASS" starttime="20170823 21:58:48.792"></status>
</kw>
<status endtime="20170823 21:58:49.029" status="PASS" starttime="20170823 21:58:48.792"></status>
</kw>
<status endtime="20170823 21:58:49.029" status="PASS" starttime="20170823 21:58:48.791"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:49.030" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170823 21:58:49.030" status="PASS" starttime="20170823 21:58:49.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 21:58:49.031" status="PASS" starttime="20170823 21:58:49.030"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:50.949" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 21:58:50.949" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:50.950" status="PASS" starttime="20170823 21:58:49.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 21:58:50.950" status="PASS" starttime="20170823 21:58:50.950"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:50.951" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:50.951" status="PASS" starttime="20170823 21:58:50.950"></status>
</kw>
<msg timestamp="20170823 21:58:50.951" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:50.951" status="PASS" starttime="20170823 21:58:48.790"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:50.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:50.952" status="PASS" starttime="20170823 21:58:50.952"></status>
</kw>
<msg timestamp="20170823 21:58:50.952" level="INFO">${status} = True</msg>
<status endtime="20170823 21:58:50.952" status="PASS" starttime="20170823 21:58:50.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170823 21:58:50.953" status="PASS" starttime="20170823 21:58:50.952"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170823 21:58:50.956" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y230UF72R00C    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:58:50.956" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170823 21:58:50.957" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170823 21:58:50.957" status="PASS" starttime="20170823 21:58:50.953"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:50.958" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_inventory.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:50.958" status="PASS" starttime="20170823 21:58:50.958"></status>
</kw>
<status endtime="20170823 21:58:50.958" status="PASS" starttime="20170823 21:58:50.957"></status>
</kw>
<status endtime="20170823 21:58:50.958" status="PASS" starttime="20170823 21:58:48.789"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:50.959" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_record_log.txt</msg>
<status endtime="20170823 21:58:50.959" status="PASS" starttime="20170823 21:58:50.959"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:50.962" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:50.963" status="PASS" starttime="20170823 21:58:50.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:50.963" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:50.963" status="PASS" starttime="20170823 21:58:50.963"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:50.964" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:50.964" status="PASS" starttime="20170823 21:58:50.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:50.965" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:50.965" status="PASS" starttime="20170823 21:58:50.964"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:51.198" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:51.198" status="PASS" starttime="20170823 21:58:50.965"></status>
</kw>
<msg timestamp="20170823 21:58:51.198" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:51.198" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:51.198" status="PASS" starttime="20170823 21:58:50.965"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:51.199" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:51.199" status="PASS" starttime="20170823 21:58:51.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:51.200" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:51.200" status="PASS" starttime="20170823 21:58:51.199"></status>
</kw>
<status endtime="20170823 21:58:51.200" status="PASS" starttime="20170823 21:58:50.961"></status>
</kw>
<status endtime="20170823 21:58:51.200" status="PASS" starttime="20170823 21:58:50.961"></status>
</kw>
<status endtime="20170823 21:58:51.200" status="PASS" starttime="20170823 21:58:50.960"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:51.201" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170823 21:58:51.201" status="PASS" starttime="20170823 21:58:51.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 21:58:51.201" status="PASS" starttime="20170823 21:58:51.201"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:51.244" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 21:58:51.244" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 21:58:51.244" status="PASS" starttime="20170823 21:58:51.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 21:58:51.245" status="PASS" starttime="20170823 21:58:51.244"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:51.245" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:51.245" status="PASS" starttime="20170823 21:58:51.245"></status>
</kw>
<msg timestamp="20170823 21:58:51.245" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 21:58:51.245" status="PASS" starttime="20170823 21:58:50.959"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:51.246" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 21:58:51.247" level="FAIL">404 != 200</msg>
<status endtime="20170823 21:58:51.247" status="FAIL" starttime="20170823 21:58:51.246"></status>
</kw>
<msg timestamp="20170823 21:58:51.247" level="INFO">${status} = False</msg>
<status endtime="20170823 21:58:51.247" status="PASS" starttime="20170823 21:58:51.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170823 21:58:51.248" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170823 21:58:51.248" status="PASS" starttime="20170823 21:58:51.248"></status>
</kw>
<status endtime="20170823 21:58:51.248" status="PASS" starttime="20170823 21:58:51.247"></status>
</kw>
<status endtime="20170823 21:58:51.248" status="PASS" starttime="20170823 21:58:50.959"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:51.249" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_led.txt</msg>
<status endtime="20170823 21:58:51.249" status="PASS" starttime="20170823 21:58:51.248"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:51.251" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:51.252" status="PASS" starttime="20170823 21:58:51.251"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:51.253" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:51.253" status="PASS" starttime="20170823 21:58:51.252"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:51.253" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:51.253" status="PASS" starttime="20170823 21:58:51.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:51.254" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:51.254" status="PASS" starttime="20170823 21:58:51.254"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:51.506" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:51.506" status="PASS" starttime="20170823 21:58:51.255"></status>
</kw>
<msg timestamp="20170823 21:58:51.507" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:51.507" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:51.507" status="PASS" starttime="20170823 21:58:51.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:51.507" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:51.508" status="PASS" starttime="20170823 21:58:51.507"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:51.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:51.509" status="PASS" starttime="20170823 21:58:51.508"></status>
</kw>
<status endtime="20170823 21:58:51.509" status="PASS" starttime="20170823 21:58:51.251"></status>
</kw>
<status endtime="20170823 21:58:51.509" status="PASS" starttime="20170823 21:58:51.250"></status>
</kw>
<status endtime="20170823 21:58:51.509" status="PASS" starttime="20170823 21:58:51.250"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:51.510" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170823 21:58:51.510" status="PASS" starttime="20170823 21:58:51.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 21:58:51.510" status="PASS" starttime="20170823 21:58:51.510"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:51.560" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 21:58:51.560" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 21:58:51.560" status="PASS" starttime="20170823 21:58:51.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 21:58:51.561" status="PASS" starttime="20170823 21:58:51.561"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:51.561" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:51.561" status="PASS" starttime="20170823 21:58:51.561"></status>
</kw>
<msg timestamp="20170823 21:58:51.562" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 21:58:51.562" status="PASS" starttime="20170823 21:58:51.249"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:51.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 21:58:51.563" level="FAIL">404 != 200</msg>
<status endtime="20170823 21:58:51.563" status="FAIL" starttime="20170823 21:58:51.562"></status>
</kw>
<msg timestamp="20170823 21:58:51.563" level="INFO">${status} = False</msg>
<status endtime="20170823 21:58:51.563" status="PASS" starttime="20170823 21:58:51.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170823 21:58:51.564" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170823 21:58:51.564" status="PASS" starttime="20170823 21:58:51.564"></status>
</kw>
<status endtime="20170823 21:58:51.564" status="PASS" starttime="20170823 21:58:51.563"></status>
</kw>
<status endtime="20170823 21:58:51.564" status="PASS" starttime="20170823 21:58:51.248"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:51.565" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_elog.txt</msg>
<status endtime="20170823 21:58:51.565" status="PASS" starttime="20170823 21:58:51.565"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:51.568" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:51.568" status="PASS" starttime="20170823 21:58:51.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:51.569" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:51.569" status="PASS" starttime="20170823 21:58:51.568"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:51.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:51.570" status="PASS" starttime="20170823 21:58:51.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:51.571" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:51.571" status="PASS" starttime="20170823 21:58:51.571"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:51.780" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:51.780" status="PASS" starttime="20170823 21:58:51.572"></status>
</kw>
<msg timestamp="20170823 21:58:51.780" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:51.780" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:51.780" status="PASS" starttime="20170823 21:58:51.572"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:51.781" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:51.781" status="PASS" starttime="20170823 21:58:51.781"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:51.782" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:51.782" status="PASS" starttime="20170823 21:58:51.781"></status>
</kw>
<status endtime="20170823 21:58:51.782" status="PASS" starttime="20170823 21:58:51.567"></status>
</kw>
<status endtime="20170823 21:58:51.782" status="PASS" starttime="20170823 21:58:51.566"></status>
</kw>
<status endtime="20170823 21:58:51.782" status="PASS" starttime="20170823 21:58:51.566"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:51.783" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170823 21:58:51.783" status="PASS" starttime="20170823 21:58:51.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 21:58:51.783" status="PASS" starttime="20170823 21:58:51.783"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:51.843" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 21:58:51.844" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 21:58:51.844" status="PASS" starttime="20170823 21:58:51.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 21:58:51.844" status="PASS" starttime="20170823 21:58:51.844"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:51.845" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:51.845" status="PASS" starttime="20170823 21:58:51.844"></status>
</kw>
<msg timestamp="20170823 21:58:51.845" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 21:58:51.845" status="PASS" starttime="20170823 21:58:51.565"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:51.846" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 21:58:51.846" level="FAIL">404 != 200</msg>
<status endtime="20170823 21:58:51.846" status="FAIL" starttime="20170823 21:58:51.846"></status>
</kw>
<msg timestamp="20170823 21:58:51.846" level="INFO">${status} = False</msg>
<status endtime="20170823 21:58:51.846" status="PASS" starttime="20170823 21:58:51.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170823 21:58:51.847" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170823 21:58:51.847" status="PASS" starttime="20170823 21:58:51.847"></status>
</kw>
<status endtime="20170823 21:58:51.847" status="PASS" starttime="20170823 21:58:51.847"></status>
</kw>
<status endtime="20170823 21:58:51.848" status="PASS" starttime="20170823 21:58:51.564"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 21:58:51.848" level="INFO">${logpath} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_sensor_list.txt</msg>
<status endtime="20170823 21:58:51.848" status="PASS" starttime="20170823 21:58:51.848"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 21:58:51.851" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 21:58:51.852" status="PASS" starttime="20170823 21:58:51.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 21:58:51.852" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 21:58:51.852" status="PASS" starttime="20170823 21:58:51.852"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 21:58:51.853" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 21:58:51.853" status="PASS" starttime="20170823 21:58:51.852"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 21:58:51.854" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 21:58:51.854" status="PASS" starttime="20170823 21:58:51.853"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.049" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 21:58:52.049" status="PASS" starttime="20170823 21:58:51.855"></status>
</kw>
<msg timestamp="20170823 21:58:52.049" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:52.049" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:52.049" status="PASS" starttime="20170823 21:58:51.854"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.050" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:52.050" status="PASS" starttime="20170823 21:58:52.049"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:52.051" status="PASS" starttime="20170823 21:58:52.050"></status>
</kw>
<status endtime="20170823 21:58:52.051" status="PASS" starttime="20170823 21:58:51.850"></status>
</kw>
<status endtime="20170823 21:58:52.051" status="PASS" starttime="20170823 21:58:51.850"></status>
</kw>
<status endtime="20170823 21:58:52.051" status="PASS" starttime="20170823 21:58:51.849"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 21:58:52.051" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170823 21:58:52.051" status="PASS" starttime="20170823 21:58:52.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 21:58:52.052" status="PASS" starttime="20170823 21:58:52.052"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 21:58:52.247" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 21:58:52.248" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:52.248" status="PASS" starttime="20170823 21:58:52.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 21:58:52.248" status="PASS" starttime="20170823 21:58:52.248"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 21:58:52.249" level="INFO">Delete All Sessions</msg>
<status endtime="20170823 21:58:52.249" status="PASS" starttime="20170823 21:58:52.249"></status>
</kw>
<msg timestamp="20170823 21:58:52.249" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 21:58:52.249" status="PASS" starttime="20170823 21:58:51.849"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 21:58:52.250" status="PASS" starttime="20170823 21:58:52.250"></status>
</kw>
<msg timestamp="20170823 21:58:52.250" level="INFO">${status} = True</msg>
<status endtime="20170823 21:58:52.250" status="PASS" starttime="20170823 21:58:52.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170823 21:58:52.251" status="PASS" starttime="20170823 21:58:52.251"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170823 21:58:52.252" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 21:58:52.252" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170823 21:58:52.252" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170823 21:58:52.252" status="PASS" starttime="20170823 21:58:52.251"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.253" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_sensor_list.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.253" status="PASS" starttime="20170823 21:58:52.253"></status>
</kw>
<status endtime="20170823 21:58:52.254" status="PASS" starttime="20170823 21:58:52.252"></status>
</kw>
<status endtime="20170823 21:58:52.254" status="PASS" starttime="20170823 21:58:51.848"></status>
</kw>
<status endtime="20170823 21:58:52.254" status="PASS" starttime="20170823 21:58:47.465"></status>
</kw>
<status endtime="20170823 21:58:52.254" status="PASS" starttime="20170823 21:58:47.464"></status>
</kw>
<status endtime="20170823 21:58:52.254" status="PASS" starttime="20170823 21:58:47.463"></status>
</kw>
<status endtime="20170823 21:58:52.254" status="PASS" starttime="20170823 21:58:47.463"></status>
</kw>
<status endtime="20170823 21:58:52.254" status="PASS" starttime="20170823 21:58:47.462"></status>
</kw>
<status endtime="20170823 21:58:52.254" status="PASS" starttime="20170823 21:58:47.432"></status>
</kw>
<status endtime="20170823 21:58:52.254" status="PASS" starttime="20170823 21:58:47.430"></status>
</kw>
<status endtime="20170823 21:58:52.254" status="PASS" starttime="20170823 21:58:47.429"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 21:58:52.256" status="PASS" starttime="20170823 21:58:52.256"></status>
</kw>
<msg timestamp="20170823 21:58:52.256" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:52.256" level="INFO">${ret_values} = None</msg>
<status endtime="20170823 21:58:52.256" status="PASS" starttime="20170823 21:58:52.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 21:58:52.257" status="PASS" starttime="20170823 21:58:52.257"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170823 21:58:52.287" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170823 21:58:52.287" status="PASS" starttime="20170823 21:58:52.287"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170823 21:58:52.289" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') ]</msg>
<status endtime="20170823 21:58:52.289" status="PASS" starttime="20170823 21:58:52.288"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.298" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170823 21:58:52.298" status="PASS" starttime="20170823 21:58:52.289"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.302" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.303" status="PASS" starttime="20170823 21:58:52.302"></status>
</kw>
<status endtime="20170823 21:58:52.303" status="PASS" starttime="20170823 21:58:52.301"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.304" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.304" status="PASS" starttime="20170823 21:58:52.303"></status>
</kw>
<status endtime="20170823 21:58:52.304" status="PASS" starttime="20170823 21:58:52.303"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.305" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.305" status="PASS" starttime="20170823 21:58:52.305"></status>
</kw>
<status endtime="20170823 21:58:52.305" status="PASS" starttime="20170823 21:58:52.304"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.306" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.306" status="PASS" starttime="20170823 21:58:52.306"></status>
</kw>
<status endtime="20170823 21:58:52.307" status="PASS" starttime="20170823 21:58:52.305"></status>
</kw>
<status endtime="20170823 21:58:52.307" status="PASS" starttime="20170823 21:58:52.300"></status>
</kw>
<status endtime="20170823 21:58:52.307" status="PASS" starttime="20170823 21:58:52.300"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:52.308" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170823 21:58:52.308" status="PASS" starttime="20170823 21:58:52.307"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 21:58:52.375" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:52.375" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170823 21:58:52.432" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:52.432" status="PASS" starttime="20170823 21:58:52.339"></status>
</kw>
<msg timestamp="20170823 21:58:52.432" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:52.432" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-ba30e9ed152bab62f72da24986ee5ca22d6c9b07 #1 Wed Aug 23 20:01:56 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170823 21:58:52.432" status="PASS" starttime="20170823 21:58:52.308"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 21:58:52.433" level="INFO">${stdout} = Linux witherspoon 4.10.17-ba30e9ed152bab62f72da24986ee5ca22d6c9b07 #1 Wed Aug 23 20:01:56 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170823 21:58:52.433" status="PASS" starttime="20170823 21:58:52.433"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:58:52.434" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:58:52.434" status="PASS" starttime="20170823 21:58:52.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.441" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.441" status="PASS" starttime="20170823 21:58:52.440"></status>
</kw>
<status endtime="20170823 21:58:52.441" status="PASS" starttime="20170823 21:58:52.439"></status>
</kw>
<status endtime="20170823 21:58:52.441" status="PASS" starttime="20170823 21:58:52.434"></status>
</kw>
<status endtime="20170823 21:58:52.441" status="PASS" starttime="20170823 21:58:52.299"></status>
</kw>
<status endtime="20170823 21:58:52.441" status="PASS" starttime="20170823 21:58:52.298"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.444" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.444" status="PASS" starttime="20170823 21:58:52.443"></status>
</kw>
<status endtime="20170823 21:58:52.444" status="PASS" starttime="20170823 21:58:52.443"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.445" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.445" status="PASS" starttime="20170823 21:58:52.445"></status>
</kw>
<status endtime="20170823 21:58:52.446" status="PASS" starttime="20170823 21:58:52.444"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.447" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.447" status="PASS" starttime="20170823 21:58:52.446"></status>
</kw>
<status endtime="20170823 21:58:52.447" status="PASS" starttime="20170823 21:58:52.446"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.448" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.448" status="PASS" starttime="20170823 21:58:52.448"></status>
</kw>
<status endtime="20170823 21:58:52.448" status="PASS" starttime="20170823 21:58:52.447"></status>
</kw>
<status endtime="20170823 21:58:52.448" status="PASS" starttime="20170823 21:58:52.442"></status>
</kw>
<status endtime="20170823 21:58:52.448" status="PASS" starttime="20170823 21:58:52.442"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:52.449" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170823 21:58:52.449" status="PASS" starttime="20170823 21:58:52.448"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 21:58:52.522" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:52.522" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170823 21:58:52.589" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:52.589" status="PASS" starttime="20170823 21:58:52.481"></status>
</kw>
<msg timestamp="20170823 21:58:52.589" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:52.589" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170823 21:58:52.589" status="PASS" starttime="20170823 21:58:52.449"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 21:58:52.590" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status endtime="20170823 21:58:52.590" status="PASS" starttime="20170823 21:58:52.590"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:58:52.590" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:58:52.590" status="PASS" starttime="20170823 21:58:52.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.597" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.597" status="PASS" starttime="20170823 21:58:52.597"></status>
</kw>
<status endtime="20170823 21:58:52.597" status="PASS" starttime="20170823 21:58:52.596"></status>
</kw>
<status endtime="20170823 21:58:52.597" status="PASS" starttime="20170823 21:58:52.591"></status>
</kw>
<status endtime="20170823 21:58:52.597" status="PASS" starttime="20170823 21:58:52.441"></status>
</kw>
<status endtime="20170823 21:58:52.597" status="PASS" starttime="20170823 21:58:52.441"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.601" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.601" status="PASS" starttime="20170823 21:58:52.600"></status>
</kw>
<status endtime="20170823 21:58:52.601" status="PASS" starttime="20170823 21:58:52.600"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.602" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.602" status="PASS" starttime="20170823 21:58:52.602"></status>
</kw>
<status endtime="20170823 21:58:52.602" status="PASS" starttime="20170823 21:58:52.601"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.603" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.603" status="PASS" starttime="20170823 21:58:52.603"></status>
</kw>
<status endtime="20170823 21:58:52.604" status="PASS" starttime="20170823 21:58:52.602"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.605" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.605" status="PASS" starttime="20170823 21:58:52.604"></status>
</kw>
<status endtime="20170823 21:58:52.605" status="PASS" starttime="20170823 21:58:52.604"></status>
</kw>
<status endtime="20170823 21:58:52.605" status="PASS" starttime="20170823 21:58:52.599"></status>
</kw>
<status endtime="20170823 21:58:52.605" status="PASS" starttime="20170823 21:58:52.599"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:52.606" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170823 21:58:52.606" status="PASS" starttime="20170823 21:58:52.605"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 21:58:52.673" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:52.674" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170823 21:58:52.731" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:52.731" status="PASS" starttime="20170823 21:58:52.637"></status>
</kw>
<msg timestamp="20170823 21:58:52.731" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:52.731" level="INFO">${ret_values} = (u' 15:56:34 up 13 min,  load average: 0.42, 0.82, 0.89', u'', 0)</msg>
<status endtime="20170823 21:58:52.731" status="PASS" starttime="20170823 21:58:52.606"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 21:58:52.732" level="INFO">${stdout} =  15:56:34 up 13 min,  load average: 0.42, 0.82, 0.89</msg>
<status endtime="20170823 21:58:52.732" status="PASS" starttime="20170823 21:58:52.731"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:58:52.732" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:58:52.732" status="PASS" starttime="20170823 21:58:52.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.739" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.739" status="PASS" starttime="20170823 21:58:52.738"></status>
</kw>
<status endtime="20170823 21:58:52.739" status="PASS" starttime="20170823 21:58:52.738"></status>
</kw>
<status endtime="20170823 21:58:52.739" status="PASS" starttime="20170823 21:58:52.732"></status>
</kw>
<status endtime="20170823 21:58:52.739" status="PASS" starttime="20170823 21:58:52.598"></status>
</kw>
<status endtime="20170823 21:58:52.740" status="PASS" starttime="20170823 21:58:52.598"></status>
</kw>
<status endtime="20170823 21:58:52.740" status="PASS" starttime="20170823 21:58:52.298"></status>
</kw>
<status endtime="20170823 21:58:52.740" status="PASS" starttime="20170823 21:58:52.288"></status>
</kw>
<status endtime="20170823 21:58:52.740" status="PASS" starttime="20170823 21:58:52.287"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170823 21:58:52.741" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170823 21:58:52.741" status="PASS" starttime="20170823 21:58:52.740"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.741" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170823 21:58:52.742" status="PASS" starttime="20170823 21:58:52.741"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.745" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.745" status="PASS" starttime="20170823 21:58:52.744"></status>
</kw>
<status endtime="20170823 21:58:52.745" status="PASS" starttime="20170823 21:58:52.744"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.746" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.746" status="PASS" starttime="20170823 21:58:52.746"></status>
</kw>
<status endtime="20170823 21:58:52.746" status="PASS" starttime="20170823 21:58:52.745"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.747" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.747" status="PASS" starttime="20170823 21:58:52.747"></status>
</kw>
<status endtime="20170823 21:58:52.747" status="PASS" starttime="20170823 21:58:52.746"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.748" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.749" status="PASS" starttime="20170823 21:58:52.748"></status>
</kw>
<status endtime="20170823 21:58:52.749" status="PASS" starttime="20170823 21:58:52.748"></status>
</kw>
<status endtime="20170823 21:58:52.749" status="PASS" starttime="20170823 21:58:52.743"></status>
</kw>
<status endtime="20170823 21:58:52.749" status="PASS" starttime="20170823 21:58:52.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:52.750" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status endtime="20170823 21:58:52.750" status="PASS" starttime="20170823 21:58:52.749"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 21:58:52.822" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:52.823" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170823 21:58:52.900" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:52.900" status="PASS" starttime="20170823 21:58:52.786"></status>
</kw>
<msg timestamp="20170823 21:58:52.900" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:52.900" level="INFO">${ret_values} = (u'20170823200428', u'', 0)</msg>
<status endtime="20170823 21:58:52.900" status="PASS" starttime="20170823 21:58:52.750"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 21:58:52.901" level="INFO">${stdout} = 20170823200428</msg>
<status endtime="20170823 21:58:52.901" status="PASS" starttime="20170823 21:58:52.900"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:58:52.901" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:58:52.901" status="PASS" starttime="20170823 21:58:52.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.908" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.908" status="PASS" starttime="20170823 21:58:52.907"></status>
</kw>
<status endtime="20170823 21:58:52.908" status="PASS" starttime="20170823 21:58:52.907"></status>
</kw>
<status endtime="20170823 21:58:52.908" status="PASS" starttime="20170823 21:58:52.901"></status>
</kw>
<status endtime="20170823 21:58:52.908" status="PASS" starttime="20170823 21:58:52.742"></status>
</kw>
<status endtime="20170823 21:58:52.908" status="PASS" starttime="20170823 21:58:52.742"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.911" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.911" status="PASS" starttime="20170823 21:58:52.911"></status>
</kw>
<status endtime="20170823 21:58:52.911" status="PASS" starttime="20170823 21:58:52.910"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.913" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.913" status="PASS" starttime="20170823 21:58:52.912"></status>
</kw>
<status endtime="20170823 21:58:52.913" status="PASS" starttime="20170823 21:58:52.912"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.914" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.914" status="PASS" starttime="20170823 21:58:52.914"></status>
</kw>
<status endtime="20170823 21:58:52.914" status="PASS" starttime="20170823 21:58:52.913"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:52.915" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:52.915" status="PASS" starttime="20170823 21:58:52.915"></status>
</kw>
<status endtime="20170823 21:58:52.915" status="PASS" starttime="20170823 21:58:52.914"></status>
</kw>
<status endtime="20170823 21:58:52.915" status="PASS" starttime="20170823 21:58:52.910"></status>
</kw>
<status endtime="20170823 21:58:52.915" status="PASS" starttime="20170823 21:58:52.909"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:52.916" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170823 21:58:52.916" status="PASS" starttime="20170823 21:58:52.916"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 21:58:52.984" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:52.984" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170823 21:58:53.051" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:53.051" status="PASS" starttime="20170823 21:58:52.948"></status>
</kw>
<msg timestamp="20170823 21:58:53.051" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:53.051" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.9-33"\nVERSION_ID="v1.99.9-33-g0199f20"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status endtime="20170823 21:58:53.051" status="PASS" starttime="20170823 21:58:52.917"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 21:58:53.052" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.9-33"
VERSION_ID="v1.99.9-33-g0199f20"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status endtime="20170823 21:58:53.052" status="PASS" starttime="20170823 21:58:53.052"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:58:53.053" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:58:53.053" status="PASS" starttime="20170823 21:58:53.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:53.059" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:53.059" status="PASS" starttime="20170823 21:58:53.059"></status>
</kw>
<status endtime="20170823 21:58:53.060" status="PASS" starttime="20170823 21:58:53.058"></status>
</kw>
<status endtime="20170823 21:58:53.060" status="PASS" starttime="20170823 21:58:53.053"></status>
</kw>
<status endtime="20170823 21:58:53.060" status="PASS" starttime="20170823 21:58:52.909"></status>
</kw>
<status endtime="20170823 21:58:53.060" status="PASS" starttime="20170823 21:58:52.908"></status>
</kw>
<status endtime="20170823 21:58:53.060" status="PASS" starttime="20170823 21:58:52.742"></status>
</kw>
<status endtime="20170823 21:58:53.060" status="PASS" starttime="20170823 21:58:52.740"></status>
</kw>
<status endtime="20170823 21:58:53.060" status="PASS" starttime="20170823 21:58:52.740"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170823 21:58:53.061" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170823 21:58:53.061" status="PASS" starttime="20170823 21:58:53.061"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170823 21:58:53.062" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170823 21:58:53.062" status="PASS" starttime="20170823 21:58:53.061"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:53.065" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:53.065" status="PASS" starttime="20170823 21:58:53.064"></status>
</kw>
<status endtime="20170823 21:58:53.065" status="PASS" starttime="20170823 21:58:53.064"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:53.066" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:53.066" status="PASS" starttime="20170823 21:58:53.066"></status>
</kw>
<status endtime="20170823 21:58:53.066" status="PASS" starttime="20170823 21:58:53.065"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:53.067" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:53.068" status="PASS" starttime="20170823 21:58:53.067"></status>
</kw>
<status endtime="20170823 21:58:53.068" status="PASS" starttime="20170823 21:58:53.067"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:53.069" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:53.069" status="PASS" starttime="20170823 21:58:53.068"></status>
</kw>
<status endtime="20170823 21:58:53.069" status="PASS" starttime="20170823 21:58:53.068"></status>
</kw>
<status endtime="20170823 21:58:53.069" status="PASS" starttime="20170823 21:58:53.063"></status>
</kw>
<status endtime="20170823 21:58:53.069" status="PASS" starttime="20170823 21:58:53.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:53.070" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170823 21:58:53.070" status="PASS" starttime="20170823 21:58:53.069"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 21:58:53.138" level="INFO">width=80
host=9.41.166.169
index=1
height=24
port=22
path_separator=/
timeout=25 seconds
alias=bmc_connection
prompt=# 
encoding=UTF-8
term_type=vt100
newline=</msg>
<msg timestamp="20170823 21:58:53.138" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170823 21:58:54.464" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170823 21:58:54.464" status="PASS" starttime="20170823 21:58:53.101"></status>
</kw>
<msg timestamp="20170823 21:58:54.464" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 21:58:54.465" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status endtime="20170823 21:58:54.465" status="PASS" starttime="20170823 21:58:53.070"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 21:58:54.465" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170823 21:58:54.465" status="PASS" starttime="20170823 21:58:54.465"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 21:58:54.466" level="INFO">${stderr} = </msg>
<status endtime="20170823 21:58:54.466" status="PASS" starttime="20170823 21:58:54.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 21:58:54.473" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/20170823215841689074_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:54.473" status="PASS" starttime="20170823 21:58:54.472"></status>
</kw>
<status endtime="20170823 21:58:54.473" status="PASS" starttime="20170823 21:58:54.471"></status>
</kw>
<status endtime="20170823 21:58:54.473" status="PASS" starttime="20170823 21:58:54.466"></status>
</kw>
<status endtime="20170823 21:58:54.473" status="PASS" starttime="20170823 21:58:53.062"></status>
</kw>
<status endtime="20170823 21:58:54.473" status="PASS" starttime="20170823 21:58:53.062"></status>
</kw>
<status endtime="20170823 21:58:54.473" status="PASS" starttime="20170823 21:58:53.062"></status>
</kw>
<status endtime="20170823 21:58:54.473" status="PASS" starttime="20170823 21:58:53.060"></status>
</kw>
<status endtime="20170823 21:58:54.473" status="PASS" starttime="20170823 21:58:53.060"></status>
</kw>
<status endtime="20170823 21:58:54.473" status="PASS" starttime="20170823 21:58:52.287"></status>
</kw>
<status endtime="20170823 21:58:54.473" status="PASS" starttime="20170823 21:58:52.286"></status>
</kw>
<status endtime="20170823 21:58:54.473" status="PASS" starttime="20170823 21:58:52.257"></status>
</kw>
<status endtime="20170823 21:58:54.474" status="PASS" starttime="20170823 21:58:52.255"></status>
</kw>
<status endtime="20170823 21:58:54.474" status="PASS" starttime="20170823 21:58:52.254"></status>
</kw>
<status endtime="20170823 21:58:54.474" status="PASS" starttime="20170823 21:58:41.911"></status>
</kw>
<status endtime="20170823 21:58:54.474" status="PASS" starttime="20170823 21:58:41.908"></status>
</kw>
<status endtime="20170823 21:58:54.474" status="PASS" starttime="20170823 21:58:41.908"></status>
</kw>
<status endtime="20170823 21:58:54.474" status="PASS" starttime="20170823 21:58:41.908"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170823 21:58:54.481" status="PASS" starttime="20170823 21:58:54.481"></status>
</kw>
<status endtime="20170823 21:58:54.481" status="PASS" starttime="20170823 21:58:54.474"></status>
</kw>
<status endtime="20170823 21:58:54.481" status="PASS" starttime="20170823 21:58:41.907"></status>
</kw>
<status endtime="20170823 21:58:54.481" status="PASS" starttime="20170823 21:58:38.590"></status>
</kw>
<status endtime="20170823 21:58:54.482" status="PASS" starttime="20170823 21:58:38.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170823 21:58:54.482" status="PASS" starttime="20170823 21:58:54.482"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170823 21:58:54.496" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170823 21:58:54.496" status="PASS" starttime="20170823 21:58:54.483"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170823 21:58:54.497" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/7001/obmc-robot/logs/20170823215841689074_TestsTestBasicPoweron/20170823215841689074_PowerOnTest/</msg>
<status endtime="20170823 21:58:54.497" status="PASS" starttime="20170823 21:58:54.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170823 21:58:54.498" status="PASS" starttime="20170823 21:58:54.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170823 21:58:54.499" status="PASS" starttime="20170823 21:58:54.498"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170823 21:58:54.499" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs"&gt;/tmp/fspcibld/7001/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170823 21:58:54.499" status="PASS" starttime="20170823 21:58:54.499"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170823 21:58:54.500" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170823 21:58:54.500" status="PASS" starttime="20170823 21:58:54.500"></status>
</kw>
<msg timestamp="20170823 21:58:54.501" level="INFO">${exist} = True</msg>
<status endtime="20170823 21:58:54.501" status="PASS" starttime="20170823 21:58:54.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170823 21:58:54.501" status="PASS" starttime="20170823 21:58:54.501"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170823 21:58:54.502" status="PASS" starttime="20170823 21:58:54.501"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170823 21:58:54.503" level="INFO">${cur_time} = 2017-08-23 21:58:54:502473</msg>
<status endtime="20170823 21:58:54.503" status="PASS" starttime="20170823 21:58:54.502"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170823 21:58:54.503" level="INFO">${cur_time} = 20170823215854502473</msg>
<status endtime="20170823 21:58:54.503" status="PASS" starttime="20170823 21:58:54.503"></status>
</kw>
<msg timestamp="20170823 21:58:54.503" level="INFO">${cur_time} = 20170823215854502473</msg>
<status endtime="20170823 21:58:54.503" status="PASS" starttime="20170823 21:58:54.502"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170823 21:58:54.504" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/7001/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:54.504" status="PASS" starttime="20170823 21:58:54.504"></status>
</kw>
<status endtime="20170823 21:58:54.505" status="PASS" starttime="20170823 21:58:54.482"></status>
</kw>
<status endtime="20170823 21:58:54.505" status="PASS" starttime="20170823 21:58:38.223"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170823 21:58:54.507" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170823 21:58:54.507" status="PASS" starttime="20170823 21:58:54.506"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170823 21:58:54.507" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170823 21:58:54.507" status="PASS" starttime="20170823 21:58:54.507"></status>
</kw>
<msg timestamp="20170823 21:58:54.508" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170823 21:58:54.508" status="PASS" starttime="20170823 21:58:54.506"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:54.509" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170823 21:58:54.509" status="PASS" starttime="20170823 21:58:54.508"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 21:58:54.509" status="PASS" starttime="20170823 21:58:54.509"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170823 21:58:54.515" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170823 21:58:54.519" level="INFO">${rc} = 0</msg>
<msg timestamp="20170823 21:58:54.519" level="INFO">${output} = /tmp/fspcibld/7001/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170823 21:58:54.519" status="PASS" starttime="20170823 21:58:54.509"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170823 21:58:54.523" status="PASS" starttime="20170823 21:58:54.522"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170823 21:58:54.524" status="PASS" starttime="20170823 21:58:54.523"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:54.525" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170823 21:58:54.525" status="PASS" starttime="20170823 21:58:54.524"></status>
</kw>
<msg timestamp="20170823 21:58:54.525" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170823 21:58:54.525" status="PASS" starttime="20170823 21:58:54.508"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:54.526" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170823 21:58:54.527" status="PASS" starttime="20170823 21:58:54.526"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 21:58:54.527" status="PASS" starttime="20170823 21:58:54.527"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170823 21:58:54.538" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170823 21:58:54.545" level="INFO">${rc} = 0</msg>
<msg timestamp="20170823 21:58:54.545" level="INFO">${os_con_pid} = </msg>
<status endtime="20170823 21:58:54.545" status="PASS" starttime="20170823 21:58:54.528"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170823 21:58:54.549" status="PASS" starttime="20170823 21:58:54.548"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 21:58:54.549" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170823 21:58:54.549" status="PASS" starttime="20170823 21:58:54.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 21:58:54.553" status="PASS" starttime="20170823 21:58:54.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170823 21:58:54.554" level="INFO">${rc} = None</msg>
<msg timestamp="20170823 21:58:54.554" level="INFO">${output} = None</msg>
<status endtime="20170823 21:58:54.554" status="PASS" starttime="20170823 21:58:54.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170823 21:58:54.555" status="PASS" starttime="20170823 21:58:54.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170823 21:58:54.559" level="INFO" html="yes">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/7001/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/7001/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170823 21:58:54.559" status="PASS" starttime="20170823 21:58:54.556"></status>
</kw>
<status endtime="20170823 21:58:54.559" status="PASS" starttime="20170823 21:58:54.556"></status>
</kw>
<status endtime="20170823 21:58:54.559" status="PASS" starttime="20170823 21:58:54.555"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170823 21:58:54.559" level="INFO">${output} = </msg>
<status endtime="20170823 21:58:54.559" status="PASS" starttime="20170823 21:58:54.559"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170823 21:58:54.560" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170823 21:58:54.560" status="PASS" starttime="20170823 21:58:54.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170823 21:58:54.596" status="PASS" starttime="20170823 21:58:54.561"></status>
</kw>
<msg timestamp="20170823 21:58:54.598" level="INFO">${rc} = 0</msg>
<msg timestamp="20170823 21:58:54.598" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status endtime="20170823 21:58:54.598" status="PASS" starttime="20170823 21:58:54.561"></status>
</kw>
<msg timestamp="20170823 21:58:54.599" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status endtime="20170823 21:58:54.599" status="PASS" starttime="20170823 21:58:54.505"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170823 21:58:54.602" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-be278ac/hbicore.bin ==--

  4.10219|secure|Booting in non-secure mode.
  4.10221|secure|SecureROM valid - enabling functionality
  9.22866|ISTEP  6. 5 - host_init_fsi
  9.35225|ISTEP  6. 6 - host_set_ipl_parms
  9.45778|ISTEP  6. 7 - host_discover_targets
 15.63453|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 15.63455|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 15.75360|ISTEP  6. 8 - host_update_master_tpm
 15.76378|SECURE|Security Access Bit&gt; 0x0000000000000000
 15.76379|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 15.76398|ISTEP  6. 9 - host_gard
 15.80997|ISTEP  6.10 - host_revert_sbe_mcs_setup
 15.82215|ISTEP  6.11 - host_start_occ_xstop_handler
 15.82307|ISTEP  6.12 - host_voltage_config
 15.86557|ISTEP  7. 2 - mss_volt
 16.42215|ISTEP  7. 3 - mss_freq
 16.54967|ISTEP  7. 4 - mss_eff_config
 19.81849|ISTEP  7. 5 - mss_attr_update
 19.82912|ISTEP  8. 1 - host_slave_sbe_config
 19.88829|ISTEP  8. 2 - host_setup_sbe
 19.89474|ISTEP  8. 3 - host_cbs_start
 19.91833|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 29.54280|ISTEP  8. 5 - host_attnlisten_proc
 29.54406|ISTEP  8. 6 - host_p9_fbc_eff_config
 29.54893|ISTEP  8. 7 - host_p9_eff_config_links
 29.56038|ISTEP  8. 8 - proc_attr_update
 29.56214|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 29.61321|ISTEP  8.10 - proc_xbus_scominit
 32.82299|ISTEP  8.11 - proc_xbus_enable_ridi
 32.82830|ISTEP  9. 1 - fabric_erepair
 32.83851|ISTEP  9. 2 - fabric_io_dccal
 33.69546|ISTEP  9. 3 - fabric_pre_trainadv
 33.70528|ISTEP  9. 4 - fabric_io_run_training
 33.91904|ISTEP  9. 5 - fabric_post_trainadv
 33.92331|ISTEP  9. 6 - proc_smp_link_layer
 33.92840|ISTEP  9. 7 - proc_fab_iovalid
 33.95541|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 33.96621|ISTEP 10. 1 - proc_build_smp
 34.25230|ISTEP 10. 2 - host_slave_sbe_update
141.54037|sbe|System Rebooting To Perform SBE Update

141.55629|IPMI: Initiate power cycle
141.62955|Stopping istep dispatcher
</msg>
<status endtime="20170823 21:58:54.602" status="PASS" starttime="20170823 21:58:54.600"></status>
</kw>
<status endtime="20170823 21:58:54.603" status="PASS" starttime="20170823 21:58:38.222"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170823 21:58:54.603" status="FAIL" critical="yes" starttime="20170823 21:48:26.486">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170823 21:58:54.604" status="FAIL" starttime="20170823 21:48:26.452"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170823 21:58:54.607" status="FAIL" starttime="20170823 21:48:20.399"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" name="Tests" pass="1" fail="1">Tests</stat>
<stat id="s1-s1" name="Security" pass="1" fail="0">Tests.Security</stat>
<stat id="s1-s1-s1" name="Test Ssl" pass="1" fail="0">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" name="Test Basic Poweron" pass="0" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
