<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170731 14:50:57.566" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite name="Tests" source="/tmp/fspcibld/14003/obmc-robot/tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170731 14:50:58.036" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170731 14:50:58.036" starttime="20170731 14:50:58.035" status="FAIL"></status>
</kw>
<msg timestamp="20170731 14:50:58.036" level="INFO">${has_host} = False</msg>
<status endtime="20170731 14:50:58.036" starttime="20170731 14:50:58.035" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170731 14:50:58.037" starttime="20170731 14:50:58.037" status="PASS"></status>
</kw>
<status endtime="20170731 14:50:58.037" starttime="20170731 14:50:58.036" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170731 14:50:58.038" level="INFO">${port_num} = 22</msg>
<status endtime="20170731 14:50:58.038" starttime="20170731 14:50:58.038" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170731 14:50:58.039" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170731 14:50:58.039" starttime="20170731 14:50:58.039" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170731 14:50:58.039" level="INFO">${https_num} = 443</msg>
<status endtime="20170731 14:50:58.039" starttime="20170731 14:50:58.039" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170731 14:50:58.040" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170731 14:50:58.040" starttime="20170731 14:50:58.040" status="PASS"></status>
</kw>
<status endtime="20170731 14:50:58.040" starttime="20170731 14:50:58.038" status="PASS"></status>
</kw>
<status endtime="20170731 14:50:58.040" starttime="20170731 14:50:58.037" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170731 14:50:58.041" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170731 14:50:58.042" starttime="20170731 14:50:58.041" status="FAIL"></status>
</kw>
<msg timestamp="20170731 14:50:58.042" level="INFO">${has_port} = False</msg>
<status endtime="20170731 14:50:58.042" starttime="20170731 14:50:58.041" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170731 14:50:58.043" starttime="20170731 14:50:58.043" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170731 14:50:58.044" starttime="20170731 14:50:58.043" status="PASS"></status>
</kw>
<status endtime="20170731 14:50:58.044" starttime="20170731 14:50:58.043" status="PASS"></status>
</kw>
<status endtime="20170731 14:50:58.044" starttime="20170731 14:50:58.042" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170731 14:50:58.044" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170731 14:50:59.989" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170731 14:50:59.989" starttime="20170731 14:50:58.044" status="PASS"></status>
</kw>
<status endtime="20170731 14:50:59.990" starttime="20170731 14:50:58.034" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 14:50:59.991" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170731 14:51:00.068" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170731 14:51:00.068" level="INFO">${output} = VERSION_ID="v1.99.8-115-g0897fdd"</msg>
<msg timestamp="20170731 14:51:00.068" level="INFO">${stderr} = </msg>
<status endtime="20170731 14:51:00.069" starttime="20170731 14:50:59.991" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170731 14:51:00.069" level="INFO">Length is 0</msg>
<status endtime="20170731 14:51:00.069" starttime="20170731 14:51:00.069" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170731 14:51:00.070" level="INFO">VERSION_ID="v1.99.8-115-g0897fdd"</msg>
<status endtime="20170731 14:51:00.070" starttime="20170731 14:51:00.069" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:00.070" starttime="20170731 14:50:59.990" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:00.070" starttime="20170731 14:50:59.990" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 14:51:00.071" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170731 14:51:00.208" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170731 14:51:00.209" level="INFO">${stdout} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-redbud-ibm-OP...</msg>
<msg timestamp="20170731 14:51:00.209" level="INFO">${stderr} = </msg>
<status endtime="20170731 14:51:00.209" starttime="20170731 14:51:00.071" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170731 14:51:00.209" level="INFO">Length is 0</msg>
<status endtime="20170731 14:51:00.209" starttime="20170731 14:51:00.209" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:00.210" level="INFO">${pnor_details} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-redbud-ibm-OP...</msg>
<status endtime="20170731 14:51:00.210" starttime="20170731 14:51:00.071" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg timestamp="20170731 14:51:00.210" level="INFO">PNOR_INFO=Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-redbud-ibm-OP9_v1.17_1.68
	op-build-v1.17-177-gdd8f32b-dirty
	buildroot-2017.05-93-g9b91216
	skiboot-v5.7-rc2-p7582c9b
	hostboot-3fa8be9
	linux-4.12.1-openpower1-p899da6c
	petitboot-v1.5.0-pc8fef8e
	machine-xml-efdf4aa
	occ-1647d53
	hostboot-binaries-6a7251e
	capp-ucode-9c73e9f
	sbe-02021c6-p056301c
</msg>
<status endtime="20170731 14:51:00.211" starttime="20170731 14:51:00.210" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:00.211" starttime="20170731 14:51:00.070" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:00.211" starttime="20170731 14:51:00.070" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170731 14:51:00.393" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 14:51:00.393" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170731 14:51:01.238" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170731 14:51:01.238" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170731 14:51:01.315" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170731 14:51:01.323" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170731 14:51:01.323" level="INFO">${stderr} = </msg>
<msg timestamp="20170731 14:51:01.323" level="INFO">${rc} = 0</msg>
<status endtime="20170731 14:51:01.323" starttime="20170731 14:51:00.212" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170731 14:51:01.324" level="INFO">Length is 0</msg>
<status endtime="20170731 14:51:01.324" starttime="20170731 14:51:01.323" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170731 14:51:01.324" level="INFO">Length is 11</msg>
<status endtime="20170731 14:51:01.324" starttime="20170731 14:51:01.324" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:01.324" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170731 14:51:01.324" starttime="20170731 14:51:00.212" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170731 14:51:01.325" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170731 14:51:01.325" starttime="20170731 14:51:01.325" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:01.325" starttime="20170731 14:51:00.212" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:01.325" starttime="20170731 14:51:00.212" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170731 14:51:01.327" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170731 14:51:01.327" starttime="20170731 14:51:01.327" status="FAIL"></status>
</kw>
<msg timestamp="20170731 14:51:01.327" level="INFO">${has_host} = False</msg>
<status endtime="20170731 14:51:01.328" starttime="20170731 14:51:01.327" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170731 14:51:01.329" starttime="20170731 14:51:01.328" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:01.329" starttime="20170731 14:51:01.328" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170731 14:51:01.330" level="INFO">${port_num} = 22</msg>
<status endtime="20170731 14:51:01.330" starttime="20170731 14:51:01.330" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170731 14:51:01.331" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170731 14:51:01.331" starttime="20170731 14:51:01.330" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170731 14:51:01.331" level="INFO">${https_num} = 443</msg>
<status endtime="20170731 14:51:01.331" starttime="20170731 14:51:01.331" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170731 14:51:01.332" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170731 14:51:01.332" starttime="20170731 14:51:01.331" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:01.332" starttime="20170731 14:51:01.329" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:01.332" starttime="20170731 14:51:01.329" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170731 14:51:01.333" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170731 14:51:01.333" starttime="20170731 14:51:01.333" status="FAIL"></status>
</kw>
<msg timestamp="20170731 14:51:01.333" level="INFO">${has_port} = False</msg>
<status endtime="20170731 14:51:01.333" starttime="20170731 14:51:01.332" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170731 14:51:01.335" starttime="20170731 14:51:01.335" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170731 14:51:01.335" starttime="20170731 14:51:01.335" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:01.335" starttime="20170731 14:51:01.334" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:01.336" starttime="20170731 14:51:01.333" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170731 14:51:01.336" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170731 14:51:02.990" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170731 14:51:02.990" starttime="20170731 14:51:01.336" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:02.991" starttime="20170731 14:51:01.326" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 14:51:02.992" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170731 14:51:03.078" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170731 14:51:03.079" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170731 14:51:03.079" level="INFO">${stderr} = </msg>
<status endtime="20170731 14:51:03.079" starttime="20170731 14:51:02.991" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170731 14:51:03.079" level="INFO">Length is 0</msg>
<status endtime="20170731 14:51:03.079" starttime="20170731 14:51:03.079" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.080" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170731 14:51:03.080" starttime="20170731 14:51:02.991" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170731 14:51:03.080" starttime="20170731 14:51:03.080" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.080" starttime="20170731 14:51:01.326" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.080" starttime="20170731 14:51:01.325" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170731 14:51:03.081" starttime="20170731 14:51:03.081" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.081" starttime="20170731 14:50:58.033" status="PASS"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/14003/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/14003/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:51:03.161" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:51:03.161" starttime="20170731 14:51:03.160" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:03.162" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:03.162" starttime="20170731 14:51:03.161" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:51:03.162" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:51:03.162" starttime="20170731 14:51:03.162" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:51:03.163" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:51:03.163" starttime="20170731 14:51:03.163" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:51:03.406" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:51:03.406" starttime="20170731 14:51:03.164" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.406" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:51:03.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:03.407" starttime="20170731 14:51:03.163" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:51:03.407" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:03.407" starttime="20170731 14:51:03.407" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:03.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:03.408" starttime="20170731 14:51:03.407" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.408" starttime="20170731 14:51:03.160" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.408" starttime="20170731 14:51:03.159" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.408" starttime="20170731 14:51:03.159" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:51:03.413" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:51:03.414" starttime="20170731 14:51:03.413" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:03.415" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:03.415" starttime="20170731 14:51:03.414" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:51:03.416" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:51:03.416" starttime="20170731 14:51:03.415" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:51:03.416" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:51:03.416" starttime="20170731 14:51:03.416" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:51:03.693" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:51:03.693" starttime="20170731 14:51:03.417" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.693" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:51:03.693" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:03.693" starttime="20170731 14:51:03.417" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:51:03.694" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:03.694" starttime="20170731 14:51:03.694" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:03.695" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:03.695" starttime="20170731 14:51:03.694" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.695" starttime="20170731 14:51:03.412" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.695" starttime="20170731 14:51:03.412" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.695" starttime="20170731 14:51:03.411" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:03.696" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:51:03.696" starttime="20170731 14:51:03.695" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:03.698" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:03.698" starttime="20170731 14:51:03.697" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:03.699" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:03.699" starttime="20170731 14:51:03.698" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.699" starttime="20170731 14:51:03.698" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.699" starttime="20170731 14:51:03.696" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.699" starttime="20170731 14:51:03.696" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:51:03.764" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:51:03.764" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:03.765" starttime="20170731 14:51:03.699" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:03.766" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:03.767" starttime="20170731 14:51:03.766" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:03.767" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:03.768" starttime="20170731 14:51:03.767" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.768" starttime="20170731 14:51:03.767" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.768" starttime="20170731 14:51:03.765" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.768" starttime="20170731 14:51:03.765" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:51:03.768" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:51:03.768" starttime="20170731 14:51:03.768" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.769" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:03.769" starttime="20170731 14:51:03.410" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:03.769" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:03.769" starttime="20170731 14:51:03.769" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:51:03.770" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:51:03.770" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:51:03.770" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170731 14:51:03.770" starttime="20170731 14:51:03.769" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.770" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170731 14:51:03.770" starttime="20170731 14:51:03.410" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.771" level="INFO">${host_state} = Running</msg>
<status endtime="20170731 14:51:03.771" starttime="20170731 14:51:03.409" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170731 14:51:03.772" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:51:03.772" starttime="20170731 14:51:03.771" status="FAIL"></status>
</kw>
<msg timestamp="20170731 14:51:03.772" level="INFO">${status} = False</msg>
<status endtime="20170731 14:51:03.772" starttime="20170731 14:51:03.771" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.772" level="INFO">${status} = False</msg>
<status endtime="20170731 14:51:03.772" starttime="20170731 14:51:03.409" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170731 14:51:03.773" starttime="20170731 14:51:03.772" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170731 14:51:03.773" starttime="20170731 14:51:03.773" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170731 14:51:03.786" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170731 14:51:03.786" starttime="20170731 14:51:03.774" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170731 14:51:03.794" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170731 14:51:03.794" starttime="20170731 14:51:03.786" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 14:51:03.796" level="INFO">${cur_time} = 2017-07-31 14:51:03:795970</msg>
<status endtime="20170731 14:51:03.796" starttime="20170731 14:51:03.796" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 14:51:03.797" level="INFO">${cur_time} = 20170731145103795970</msg>
<status endtime="20170731 14:51:03.797" starttime="20170731 14:51:03.796" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.797" starttime="20170731 14:51:03.795" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.801" level="INFO">${FFDC_TIME} = 20170731145103795970</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170731 14:51:03.802" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170731 14:51:03.802" starttime="20170731 14:51:03.802" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170731 14:51:03.803" level="INFO">${suite_name} = 20170731145103795970_TestsSecurityTestSsl</msg>
<status endtime="20170731 14:51:03.803" starttime="20170731 14:51:03.803" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170731 14:51:03.804" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170731 14:51:03.804" starttime="20170731 14:51:03.803" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170731 14:51:03.804" level="INFO">${test_name} = 20170731145103795970_TestSSLConnection</msg>
<status endtime="20170731 14:51:03.804" starttime="20170731 14:51:03.804" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.804" starttime="20170731 14:51:03.802" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.805" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/14003/obmc-robot/logs/20170731145103795970_TestsSecurityTestSsl/20170731145103795970_TestSSLConnection/</msg>
<msg timestamp="20170731 14:51:03.809" level="INFO">${FFDC_PREFIX} = 20170731145103795970_</msg>
<status endtime="20170731 14:51:03.809" starttime="20170731 14:51:03.795" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.809" starttime="20170731 14:51:03.795" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170731 14:51:03.810" starttime="20170731 14:51:03.809" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170731 14:51:03.810" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs"&gt;/tmp/fspcibld/14003/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170731 14:51:03.811" starttime="20170731 14:51:03.810" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170731 14:51:03.812" level="FAIL">File '/tmp/fspcibld/14003/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170731 14:51:03.812" starttime="20170731 14:51:03.811" status="FAIL"></status>
</kw>
<msg timestamp="20170731 14:51:03.812" level="INFO">${exist} = False</msg>
<status endtime="20170731 14:51:03.812" starttime="20170731 14:51:03.811" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170731 14:51:03.813" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 14:51:03.813" starttime="20170731 14:51:03.812" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.813" starttime="20170731 14:51:03.812" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170731 14:51:03.814" starttime="20170731 14:51:03.813" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 14:51:03.814" level="INFO">${cur_time} = 2017-07-31 14:51:03:814275</msg>
<status endtime="20170731 14:51:03.814" starttime="20170731 14:51:03.814" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 14:51:03.815" level="INFO">${cur_time} = 20170731145103814275</msg>
<status endtime="20170731 14:51:03.815" starttime="20170731 14:51:03.815" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.815" level="INFO">${cur_time} = 20170731145103814275</msg>
<status endtime="20170731 14:51:03.815" starttime="20170731 14:51:03.814" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170731 14:51:03.816" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 14:51:03.816" starttime="20170731 14:51:03.815" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.816" starttime="20170731 14:51:03.773" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.816" starttime="20170731 14:51:03.409" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170731 14:51:03.816" starttime="20170731 14:51:03.158" critical="yes" status="PASS"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:51:03.817" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:51:03.818" starttime="20170731 14:51:03.817" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170731 14:51:03.818" starttime="20170731 14:51:03.083" status="PASS"></status>
</suite>
<status endtime="20170731 14:51:03.819" starttime="20170731 14:51:03.081" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/14003/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170731 14:51:03.853" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170731 14:51:03.853" starttime="20170731 14:51:03.853" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170731 14:51:03.854" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170731 14:51:03.854" starttime="20170731 14:51:03.853" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.854" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170731 14:51:03.854" starttime="20170731 14:51:03.852" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170731 14:51:03.856" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170731 14:51:03.856" starttime="20170731 14:51:03.855" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170731 14:51:03.856" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170731 14:51:03.856" starttime="20170731 14:51:03.856" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.857" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170731 14:51:03.857" starttime="20170731 14:51:03.855" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 14:51:03.857" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170731 14:51:03.858" starttime="20170731 14:51:03.857" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170731 14:51:03.858" starttime="20170731 14:51:03.858" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 14:51:03.863" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 14:51:03.866" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 14:51:03.866" level="INFO">${output} = /tmp/fspcibld/14003/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170731 14:51:03.866" starttime="20170731 14:51:03.858" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170731 14:51:03.869" starttime="20170731 14:51:03.868" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170731 14:51:03.870" starttime="20170731 14:51:03.869" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 14:51:03.871" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170731 14:51:03.871" starttime="20170731 14:51:03.870" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.871" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170731 14:51:03.871" starttime="20170731 14:51:03.857" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 14:51:03.872" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170731 14:51:03.872" starttime="20170731 14:51:03.872" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170731 14:51:03.872" starttime="20170731 14:51:03.872" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170731 14:51:03.876" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 14:51:03.892" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 14:51:03.892" level="INFO">${os_con_pid} = </msg>
<status endtime="20170731 14:51:03.893" starttime="20170731 14:51:03.873" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170731 14:51:03.905" starttime="20170731 14:51:03.903" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 14:51:03.906" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170731 14:51:03.906" starttime="20170731 14:51:03.906" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170731 14:51:03.909" starttime="20170731 14:51:03.908" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 14:51:03.910" level="INFO">${rc} = None</msg>
<msg timestamp="20170731 14:51:03.910" level="INFO">${output} = None</msg>
<status endtime="20170731 14:51:03.910" starttime="20170731 14:51:03.910" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170731 14:51:03.911" starttime="20170731 14:51:03.911" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170731 14:51:03.919" level="FAIL">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status endtime="20170731 14:51:03.919" starttime="20170731 14:51:03.914" status="FAIL"></status>
</kw>
<status endtime="20170731 14:51:03.919" starttime="20170731 14:51:03.913" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:03.920" starttime="20170731 14:51:03.912" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170731 14:51:03.920" level="INFO">${output} = </msg>
<status endtime="20170731 14:51:03.920" starttime="20170731 14:51:03.920" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170731 14:51:03.921" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170731 14:51:03.921" starttime="20170731 14:51:03.921" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170731 14:51:03.974" starttime="20170731 14:51:03.923" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.975" level="INFO">${rc} = 1</msg>
<msg timestamp="20170731 14:51:03.975" level="INFO">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170731 14:51:03.975" starttime="20170731 14:51:03.922" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:03.975" level="INFO">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170731 14:51:03.975" starttime="20170731 14:51:03.854" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170731 14:51:03.977" level="INFO">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170731 14:51:03.977" starttime="20170731 14:51:03.976" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 14:51:03.978" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170731 14:51:03.978" starttime="20170731 14:51:03.978" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170731 14:51:03.979" starttime="20170731 14:51:03.978" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 14:51:03.982" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 14:51:03.989" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 14:51:03.989" level="INFO">${output} = /tmp/fspcibld/14003/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170731 14:51:03.989" starttime="20170731 14:51:03.979" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170731 14:51:04.003" starttime="20170731 14:51:04.001" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170731 14:51:04.004" starttime="20170731 14:51:04.003" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 14:51:04.005" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170731 14:51:04.005" starttime="20170731 14:51:04.004" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:04.005" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170731 14:51:04.005" starttime="20170731 14:51:03.977" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 14:51:04.006" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170731 14:51:04.006" starttime="20170731 14:51:04.005" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170731 14:51:04.006" starttime="20170731 14:51:04.006" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 14:51:04.009" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170731 14:51:04.017" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 14:51:04.017" level="INFO">${output} = </msg>
<status endtime="20170731 14:51:04.017" starttime="20170731 14:51:04.007" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170731 14:51:04.020" starttime="20170731 14:51:04.019" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:04.020" starttime="20170731 14:51:03.852" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170731 14:51:04.023" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170731 14:51:04.024" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170731 14:51:04.025" starttime="20170731 14:51:04.024" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:04.026" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170731 14:51:04.026" starttime="20170731 14:51:04.026" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:51:04.030" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:51:04.031" starttime="20170731 14:51:04.030" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:04.032" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:04.032" starttime="20170731 14:51:04.032" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:51:04.033" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:51:04.033" starttime="20170731 14:51:04.032" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:51:04.033" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:51:04.033" starttime="20170731 14:51:04.033" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:51:04.472" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:51:04.472" starttime="20170731 14:51:04.034" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:04.472" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:51:04.472" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:04.472" starttime="20170731 14:51:04.034" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:51:04.473" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:04.473" starttime="20170731 14:51:04.473" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:04.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:04.474" starttime="20170731 14:51:04.473" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:04.474" starttime="20170731 14:51:04.029" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:04.474" starttime="20170731 14:51:04.028" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:04.474" starttime="20170731 14:51:04.027" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:04.475" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170731 14:51:04.475" starttime="20170731 14:51:04.474" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:04.475" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:04.475" starttime="20170731 14:51:04.475" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170731 14:51:04.476" starttime="20170731 14:51:04.476" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:04.477" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170731 14:51:04.477" starttime="20170731 14:51:04.477" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:04.478" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170731 14:51:04.478" starttime="20170731 14:51:04.478" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:04.478" starttime="20170731 14:51:04.478" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:04.479" starttime="20170731 14:51:04.476" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:51:05.057" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170731 14:51:05.057" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:05.057" starttime="20170731 14:51:04.479" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:05.059" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:05.059" starttime="20170731 14:51:05.058" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:05.060" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:05.061" starttime="20170731 14:51:05.059" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:05.061" starttime="20170731 14:51:05.059" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:05.061" starttime="20170731 14:51:05.057" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:51:05.061" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:51:05.061" starttime="20170731 14:51:05.061" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:05.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:05.062" starttime="20170731 14:51:04.027" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:05.062" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:05.062" starttime="20170731 14:51:05.062" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170731 14:51:05.063" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:51:05.063" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:51:05.063" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170731 14:51:05.063" starttime="20170731 14:51:05.062" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:05.063" starttime="20170731 14:51:04.025" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170731 14:51:05.064" starttime="20170731 14:51:05.063" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:51:05.068" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:51:05.069" starttime="20170731 14:51:05.068" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:05.069" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:05.069" starttime="20170731 14:51:05.069" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:51:05.070" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:51:05.070" starttime="20170731 14:51:05.069" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:51:05.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:51:05.071" starttime="20170731 14:51:05.070" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:51:08.222" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:51:08.222" starttime="20170731 14:51:05.072" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:08.222" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:51:08.222" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:08.222" starttime="20170731 14:51:05.071" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:51:08.223" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:08.223" starttime="20170731 14:51:08.222" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:08.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:08.224" starttime="20170731 14:51:08.223" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:08.224" starttime="20170731 14:51:05.067" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:08.224" starttime="20170731 14:51:05.067" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:08.224" starttime="20170731 14:51:05.066" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:08.224" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:51:08.225" starttime="20170731 14:51:08.224" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:08.227" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:08.227" starttime="20170731 14:51:08.226" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:08.228" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:08.228" starttime="20170731 14:51:08.227" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:08.228" starttime="20170731 14:51:08.227" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:08.228" starttime="20170731 14:51:08.225" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:08.228" starttime="20170731 14:51:08.225" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:51:14.356" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:51:14.356" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:14.356" starttime="20170731 14:51:08.228" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:14.358" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:14.358" starttime="20170731 14:51:14.358" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:14.359" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:14.359" starttime="20170731 14:51:14.359" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:14.359" starttime="20170731 14:51:14.358" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:14.359" starttime="20170731 14:51:14.357" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:14.359" starttime="20170731 14:51:14.357" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:51:14.360" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:51:14.360" starttime="20170731 14:51:14.360" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:14.360" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:14.360" starttime="20170731 14:51:05.066" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:14.361" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:14.361" starttime="20170731 14:51:14.360" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:51:14.361" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:51:14.361" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:51:14.361" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:51:14.362" starttime="20170731 14:51:14.361" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:14.362" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:51:14.362" starttime="20170731 14:51:05.065" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:14.362" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:51:14.362" starttime="20170731 14:51:05.065" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170731 14:51:14.363" level="FAIL">Off != On</msg>
<status endtime="20170731 14:51:14.363" starttime="20170731 14:51:14.362" status="FAIL"></status>
</kw>
<status endtime="20170731 14:51:14.364" starttime="20170731 14:51:05.065" status="FAIL"></status>
</kw>
<status endtime="20170731 14:51:14.364" starttime="20170731 14:51:05.064" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:51:24.370" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:51:24.370" starttime="20170731 14:51:24.369" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:24.371" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:24.371" starttime="20170731 14:51:24.370" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:51:24.371" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:51:24.371" starttime="20170731 14:51:24.371" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:51:24.372" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:51:24.372" starttime="20170731 14:51:24.371" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:51:24.623" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:51:24.623" starttime="20170731 14:51:24.373" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:24.623" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:51:24.623" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:24.624" starttime="20170731 14:51:24.372" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:51:24.624" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:24.624" starttime="20170731 14:51:24.624" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:24.625" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:24.625" starttime="20170731 14:51:24.624" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:24.625" starttime="20170731 14:51:24.369" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:24.625" starttime="20170731 14:51:24.368" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:24.625" starttime="20170731 14:51:24.368" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:24.626" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:51:24.626" starttime="20170731 14:51:24.625" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:24.628" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:24.628" starttime="20170731 14:51:24.627" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:24.629" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:24.629" starttime="20170731 14:51:24.628" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:24.629" starttime="20170731 14:51:24.628" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:24.629" starttime="20170731 14:51:24.626" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:24.629" starttime="20170731 14:51:24.626" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:51:24.700" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:51:24.700" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:24.700" starttime="20170731 14:51:24.629" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:24.702" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:24.702" starttime="20170731 14:51:24.701" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:24.703" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:24.703" starttime="20170731 14:51:24.702" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:24.703" starttime="20170731 14:51:24.702" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:24.703" starttime="20170731 14:51:24.701" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:24.703" starttime="20170731 14:51:24.700" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:51:24.703" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:51:24.703" starttime="20170731 14:51:24.703" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:24.704" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:24.704" starttime="20170731 14:51:24.367" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:24.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:24.704" starttime="20170731 14:51:24.704" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:51:24.705" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:51:24.705" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:51:24.705" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:51:24.705" starttime="20170731 14:51:24.705" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:24.705" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:51:24.705" starttime="20170731 14:51:24.366" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:24.706" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:51:24.706" starttime="20170731 14:51:24.365" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170731 14:51:24.706" level="FAIL">Off != On</msg>
<status endtime="20170731 14:51:24.706" starttime="20170731 14:51:24.706" status="FAIL"></status>
</kw>
<status endtime="20170731 14:51:24.707" starttime="20170731 14:51:24.365" status="FAIL"></status>
</kw>
<status endtime="20170731 14:51:24.707" starttime="20170731 14:51:24.364" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:51:34.711" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:51:34.712" starttime="20170731 14:51:34.711" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:34.712" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:34.712" starttime="20170731 14:51:34.712" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:51:34.713" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:51:34.713" starttime="20170731 14:51:34.713" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:51:34.714" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:51:34.714" starttime="20170731 14:51:34.713" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:51:34.919" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:51:34.919" starttime="20170731 14:51:34.714" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:34.919" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:51:34.919" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:34.919" starttime="20170731 14:51:34.714" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:51:34.919" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:34.919" starttime="20170731 14:51:34.919" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:34.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:34.920" starttime="20170731 14:51:34.920" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:34.920" starttime="20170731 14:51:34.710" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:34.920" starttime="20170731 14:51:34.710" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:34.920" starttime="20170731 14:51:34.709" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:34.921" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:51:34.921" starttime="20170731 14:51:34.921" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:34.923" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:34.923" starttime="20170731 14:51:34.922" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:34.924" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:34.924" starttime="20170731 14:51:34.924" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:34.924" starttime="20170731 14:51:34.923" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:34.924" starttime="20170731 14:51:34.922" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:34.924" starttime="20170731 14:51:34.921" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:51:34.988" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:51:34.988" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:34.988" starttime="20170731 14:51:34.925" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:34.990" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:34.990" starttime="20170731 14:51:34.989" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:34.991" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:34.991" starttime="20170731 14:51:34.990" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:34.991" starttime="20170731 14:51:34.990" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:34.991" starttime="20170731 14:51:34.989" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:34.991" starttime="20170731 14:51:34.988" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:51:34.991" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:51:34.992" starttime="20170731 14:51:34.991" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:34.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:34.992" starttime="20170731 14:51:34.709" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:34.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:34.993" starttime="20170731 14:51:34.992" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:51:34.993" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:51:34.993" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:51:34.993" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170731 14:51:34.993" starttime="20170731 14:51:34.993" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:34.993" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170731 14:51:34.994" starttime="20170731 14:51:34.708" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:34.994" level="INFO">${power_state} = Off</msg>
<status endtime="20170731 14:51:34.994" starttime="20170731 14:51:34.708" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:51:34.994" starttime="20170731 14:51:34.994" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:34.994" starttime="20170731 14:51:34.708" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:51:34.998" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:51:34.999" starttime="20170731 14:51:34.998" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:34.999" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:34.999" starttime="20170731 14:51:34.999" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:51:35.000" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:51:35.000" starttime="20170731 14:51:34.999" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:51:35.001" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:51:35.001" starttime="20170731 14:51:35.000" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:51:35.253" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:51:35.253" starttime="20170731 14:51:35.001" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:35.253" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:51:35.253" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:35.254" starttime="20170731 14:51:35.001" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:51:35.254" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:35.254" starttime="20170731 14:51:35.254" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:35.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:35.255" starttime="20170731 14:51:35.255" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.256" starttime="20170731 14:51:34.997" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.256" starttime="20170731 14:51:34.997" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.256" starttime="20170731 14:51:34.996" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:35.257" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:51:35.257" starttime="20170731 14:51:35.256" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:35.259" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:35.259" starttime="20170731 14:51:35.258" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:35.260" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:35.260" starttime="20170731 14:51:35.260" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.260" starttime="20170731 14:51:35.259" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.260" starttime="20170731 14:51:35.258" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.260" starttime="20170731 14:51:35.257" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:51:35.330" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:51:35.330" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:35.330" starttime="20170731 14:51:35.260" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:35.332" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:35.332" starttime="20170731 14:51:35.331" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:35.333" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:35.333" starttime="20170731 14:51:35.332" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.333" starttime="20170731 14:51:35.332" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.333" starttime="20170731 14:51:35.331" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.333" starttime="20170731 14:51:35.330" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:51:35.333" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:51:35.333" starttime="20170731 14:51:35.333" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:35.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:35.334" starttime="20170731 14:51:34.995" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:35.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:35.334" starttime="20170731 14:51:35.334" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:51:35.335" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:51:35.335" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:51:35.335" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170731 14:51:35.335" starttime="20170731 14:51:35.335" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:35.335" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170731 14:51:35.335" starttime="20170731 14:51:34.995" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:35.336" level="INFO">${host_state} = Off</msg>
<status endtime="20170731 14:51:35.336" starttime="20170731 14:51:34.995" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170731 14:51:35.336" starttime="20170731 14:51:35.336" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.336" starttime="20170731 14:51:34.707" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.336" starttime="20170731 14:51:05.064" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.336" starttime="20170731 14:51:04.023" status="PASS"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170731 14:51:35.337" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170731 14:51:35.337" starttime="20170731 14:51:35.337" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:35.338" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170731 14:51:35.339" starttime="20170731 14:51:35.338" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:51:35.342" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:51:35.342" starttime="20170731 14:51:35.341" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:35.342" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:35.342" starttime="20170731 14:51:35.342" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:51:35.343" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:51:35.343" starttime="20170731 14:51:35.343" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:51:35.344" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:51:35.344" starttime="20170731 14:51:35.343" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:51:35.538" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:51:35.538" starttime="20170731 14:51:35.344" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:35.538" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:51:35.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:35.538" starttime="20170731 14:51:35.344" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:51:35.539" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:35.539" starttime="20170731 14:51:35.539" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:35.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:35.540" starttime="20170731 14:51:35.539" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.540" starttime="20170731 14:51:35.341" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.540" starttime="20170731 14:51:35.340" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.540" starttime="20170731 14:51:35.340" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:35.540" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170731 14:51:35.540" starttime="20170731 14:51:35.540" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:35.541" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:35.541" starttime="20170731 14:51:35.541" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170731 14:51:35.542" starttime="20170731 14:51:35.541" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:35.543" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Ty...</msg>
<status endtime="20170731 14:51:35.543" starttime="20170731 14:51:35.542" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:35.544" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170731 14:51:35.544" starttime="20170731 14:51:35.544" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.544" starttime="20170731 14:51:35.543" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.544" starttime="20170731 14:51:35.542" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:51:35.736" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170731 14:51:35.736" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:35.736" starttime="20170731 14:51:35.545" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:35.737" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:35.737" starttime="20170731 14:51:35.737" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:35.738" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:35.738" starttime="20170731 14:51:35.738" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.738" starttime="20170731 14:51:35.737" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.738" starttime="20170731 14:51:35.736" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:51:35.739" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:51:35.739" starttime="20170731 14:51:35.738" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:35.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:35.739" starttime="20170731 14:51:35.339" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:35.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:35.740" starttime="20170731 14:51:35.739" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170731 14:51:35.740" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:51:35.740" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:51:35.740" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170731 14:51:35.740" starttime="20170731 14:51:35.740" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:35.740" starttime="20170731 14:51:35.338" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170731 14:51:35.741" starttime="20170731 14:51:35.741" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:51:35.746" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:51:35.746" starttime="20170731 14:51:35.745" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:35.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:35.746" starttime="20170731 14:51:35.746" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:51:35.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:51:35.747" starttime="20170731 14:51:35.747" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:51:35.748" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:51:35.748" starttime="20170731 14:51:35.747" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:51:37.539" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:51:37.539" starttime="20170731 14:51:35.749" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:37.539" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:51:37.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:37.539" starttime="20170731 14:51:35.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:51:37.540" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:37.540" starttime="20170731 14:51:37.539" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:37.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:37.540" starttime="20170731 14:51:37.540" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:37.540" starttime="20170731 14:51:35.745" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:37.541" starttime="20170731 14:51:35.744" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:37.541" starttime="20170731 14:51:35.744" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:37.541" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:51:37.541" starttime="20170731 14:51:37.541" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:37.543" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:37.543" starttime="20170731 14:51:37.543" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:37.544" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:37.544" starttime="20170731 14:51:37.544" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:37.544" starttime="20170731 14:51:37.543" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:37.545" starttime="20170731 14:51:37.542" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:37.545" starttime="20170731 14:51:37.542" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:51:45.415" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:51:45.415" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:45.415" starttime="20170731 14:51:37.545" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:45.417" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:45.417" starttime="20170731 14:51:45.416" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:45.418" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:45.418" starttime="20170731 14:51:45.418" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:45.418" starttime="20170731 14:51:45.417" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:45.418" starttime="20170731 14:51:45.416" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:45.418" starttime="20170731 14:51:45.415" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:51:45.419" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:51:45.419" starttime="20170731 14:51:45.418" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:45.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:45.419" starttime="20170731 14:51:35.743" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:45.419" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:45.420" starttime="20170731 14:51:45.419" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:51:45.420" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:51:45.420" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:51:45.420" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170731 14:51:45.420" starttime="20170731 14:51:45.420" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:45.421" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170731 14:51:45.421" starttime="20170731 14:51:35.743" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:45.421" level="INFO">${power_state} = Off</msg>
<status endtime="20170731 14:51:45.421" starttime="20170731 14:51:35.742" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170731 14:51:45.422" level="FAIL">On != Off</msg>
<status endtime="20170731 14:51:45.422" starttime="20170731 14:51:45.421" status="FAIL"></status>
</kw>
<status endtime="20170731 14:51:45.422" starttime="20170731 14:51:35.742" status="FAIL"></status>
</kw>
<status endtime="20170731 14:51:45.422" starttime="20170731 14:51:35.742" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:51:55.427" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:51:55.427" starttime="20170731 14:51:55.427" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:55.428" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:55.428" starttime="20170731 14:51:55.428" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:51:55.428" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:51:55.428" starttime="20170731 14:51:55.428" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:51:55.429" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:51:55.429" starttime="20170731 14:51:55.429" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:51:55.605" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:51:55.605" starttime="20170731 14:51:55.430" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:55.605" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:51:55.606" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:55.606" starttime="20170731 14:51:55.429" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:51:55.606" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:55.606" starttime="20170731 14:51:55.606" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:55.607" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:55.607" starttime="20170731 14:51:55.606" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:55.607" starttime="20170731 14:51:55.426" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:55.607" starttime="20170731 14:51:55.426" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:55.607" starttime="20170731 14:51:55.425" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:55.608" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:51:55.608" starttime="20170731 14:51:55.607" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:55.610" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:55.610" starttime="20170731 14:51:55.609" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:55.611" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:55.611" starttime="20170731 14:51:55.610" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:55.611" starttime="20170731 14:51:55.610" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:55.611" starttime="20170731 14:51:55.609" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:55.611" starttime="20170731 14:51:55.608" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:51:56.115" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:51:56.115" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:56.115" starttime="20170731 14:51:55.611" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:56.117" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:56.117" starttime="20170731 14:51:56.117" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:56.118" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:56.118" starttime="20170731 14:51:56.118" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.118" starttime="20170731 14:51:56.117" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.118" starttime="20170731 14:51:56.116" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.118" starttime="20170731 14:51:56.115" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:51:56.119" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:51:56.119" starttime="20170731 14:51:56.119" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:56.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:56.119" starttime="20170731 14:51:55.424" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:56.120" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:56.120" starttime="20170731 14:51:56.119" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:51:56.120" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:51:56.120" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:51:56.120" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:51:56.120" starttime="20170731 14:51:56.120" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:56.121" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:51:56.121" starttime="20170731 14:51:55.424" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:56.121" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:51:56.121" starttime="20170731 14:51:55.423" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:51:56.122" starttime="20170731 14:51:56.121" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.122" starttime="20170731 14:51:55.423" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:51:56.125" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:51:56.125" starttime="20170731 14:51:56.125" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:56.126" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:56.126" starttime="20170731 14:51:56.126" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:51:56.127" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:51:56.127" starttime="20170731 14:51:56.126" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:51:56.127" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:51:56.127" starttime="20170731 14:51:56.127" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:51:56.561" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:51:56.561" starttime="20170731 14:51:56.128" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:56.562" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:51:56.562" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:56.562" starttime="20170731 14:51:56.128" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:51:56.562" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:56.562" starttime="20170731 14:51:56.562" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:56.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:56.563" starttime="20170731 14:51:56.563" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.563" starttime="20170731 14:51:56.124" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.563" starttime="20170731 14:51:56.124" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.563" starttime="20170731 14:51:56.123" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:56.564" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:51:56.564" starttime="20170731 14:51:56.563" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:56.566" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:56.566" starttime="20170731 14:51:56.565" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:56.567" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:51:56.567" starttime="20170731 14:51:56.567" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.567" starttime="20170731 14:51:56.566" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.567" starttime="20170731 14:51:56.565" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.567" starttime="20170731 14:51:56.564" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:51:56.809" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:51:56.809" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:56.809" starttime="20170731 14:51:56.568" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:56.811" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:56.811" starttime="20170731 14:51:56.810" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:56.812" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:56.812" starttime="20170731 14:51:56.812" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.812" starttime="20170731 14:51:56.811" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.812" starttime="20170731 14:51:56.810" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:56.812" starttime="20170731 14:51:56.810" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:51:56.813" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:51:56.813" starttime="20170731 14:51:56.812" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:56.813" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:56.813" starttime="20170731 14:51:56.123" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:56.813" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:56.814" starttime="20170731 14:51:56.813" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:51:56.814" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:51:56.814" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:51:56.814" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170731 14:51:56.814" starttime="20170731 14:51:56.814" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:56.815" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170731 14:51:56.815" starttime="20170731 14:51:56.122" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:56.815" level="INFO">${host_state} = Running</msg>
<status endtime="20170731 14:51:56.815" starttime="20170731 14:51:56.122" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170731 14:51:56.815" starttime="20170731 14:51:56.815" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:51:56.819" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:51:56.820" starttime="20170731 14:51:56.819" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:51:56.820" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:51:56.820" starttime="20170731 14:51:56.820" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:51:56.821" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:51:56.821" starttime="20170731 14:51:56.820" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:51:56.821" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:51:56.822" starttime="20170731 14:51:56.821" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:51:57.078" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:51:57.078" starttime="20170731 14:51:56.825" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:57.078" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:51:57.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:57.078" starttime="20170731 14:51:56.822" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:51:57.079" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:57.079" starttime="20170731 14:51:57.079" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:57.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:57.080" starttime="20170731 14:51:57.079" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:57.080" starttime="20170731 14:51:56.818" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:57.080" starttime="20170731 14:51:56.818" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:57.080" starttime="20170731 14:51:56.818" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:51:57.081" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170731 14:51:57.081" starttime="20170731 14:51:57.080" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:57.083" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170731 14:51:57.083" starttime="20170731 14:51:57.082" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:57.084" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170731 14:51:57.084" starttime="20170731 14:51:57.083" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:57.084" starttime="20170731 14:51:57.083" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:57.084" starttime="20170731 14:51:57.081" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:57.084" starttime="20170731 14:51:57.081" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:51:57.166" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 14:51:57.166" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:57.166" starttime="20170731 14:51:57.084" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:51:57.168" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:57.168" starttime="20170731 14:51:57.167" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:51:57.169" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:51:57.169" starttime="20170731 14:51:57.169" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:57.169" starttime="20170731 14:51:57.168" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:57.169" starttime="20170731 14:51:57.167" status="PASS"></status>
</kw>
<status endtime="20170731 14:51:57.169" starttime="20170731 14:51:57.167" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:51:57.170" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:51:57.170" starttime="20170731 14:51:57.169" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:57.170" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:51:57.170" starttime="20170731 14:51:56.817" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:51:57.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:51:57.171" starttime="20170731 14:51:57.170" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:51:57.171" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:51:57.171" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:51:57.171" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170731 14:51:57.171" starttime="20170731 14:51:57.171" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:57.172" level="INFO">${state} = Off</msg>
<status endtime="20170731 14:51:57.172" starttime="20170731 14:51:56.816" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:51:57.172" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170731 14:51:57.172" starttime="20170731 14:51:56.816" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170731 14:51:57.172" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170731 14:51:57.173" starttime="20170731 14:51:57.172" status="FAIL"></status>
</kw>
<status endtime="20170731 14:51:57.173" starttime="20170731 14:51:56.816" status="FAIL"></status>
</kw>
<status endtime="20170731 14:51:57.173" starttime="20170731 14:51:55.422" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:07.178" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:07.178" starttime="20170731 14:52:07.178" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:07.179" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:07.179" starttime="20170731 14:52:07.179" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:07.180" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:07.180" starttime="20170731 14:52:07.179" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:07.180" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:07.180" starttime="20170731 14:52:07.180" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:07.448" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:07.449" starttime="20170731 14:52:07.181" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:07.449" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:07.449" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:07.449" starttime="20170731 14:52:07.181" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:07.449" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:07.450" starttime="20170731 14:52:07.449" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:07.450" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:07.450" starttime="20170731 14:52:07.450" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.450" starttime="20170731 14:52:07.177" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.450" starttime="20170731 14:52:07.177" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.450" starttime="20170731 14:52:07.176" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:07.451" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:52:07.451" starttime="20170731 14:52:07.451" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:07.453" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:07.453" starttime="20170731 14:52:07.453" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:07.454" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:07.454" starttime="20170731 14:52:07.454" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.454" starttime="20170731 14:52:07.453" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.454" starttime="20170731 14:52:07.452" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.454" starttime="20170731 14:52:07.451" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:07.516" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:52:07.516" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:07.516" starttime="20170731 14:52:07.455" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:07.518" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:07.519" starttime="20170731 14:52:07.518" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:07.519" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:07.519" starttime="20170731 14:52:07.519" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.520" starttime="20170731 14:52:07.519" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.520" starttime="20170731 14:52:07.517" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.520" starttime="20170731 14:52:07.517" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:07.520" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:07.520" starttime="20170731 14:52:07.520" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:07.520" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:07.521" starttime="20170731 14:52:07.175" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:07.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:07.521" starttime="20170731 14:52:07.521" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:07.522" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:07.522" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:07.522" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:52:07.522" starttime="20170731 14:52:07.521" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:07.522" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:52:07.522" starttime="20170731 14:52:07.174" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:07.523" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:52:07.523" starttime="20170731 14:52:07.174" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:52:07.523" starttime="20170731 14:52:07.523" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.523" starttime="20170731 14:52:07.174" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:07.527" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:07.527" starttime="20170731 14:52:07.526" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:07.528" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:07.528" starttime="20170731 14:52:07.527" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:07.528" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:07.528" starttime="20170731 14:52:07.528" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:07.529" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:07.529" starttime="20170731 14:52:07.528" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:07.735" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:07.735" starttime="20170731 14:52:07.529" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:07.735" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:07.735" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:07.735" starttime="20170731 14:52:07.529" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:07.736" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:07.736" starttime="20170731 14:52:07.736" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:07.737" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:07.737" starttime="20170731 14:52:07.736" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.737" starttime="20170731 14:52:07.526" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.737" starttime="20170731 14:52:07.525" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.737" starttime="20170731 14:52:07.525" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:07.737" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:52:07.738" starttime="20170731 14:52:07.737" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:07.740" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:07.740" starttime="20170731 14:52:07.739" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:07.741" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:07.741" starttime="20170731 14:52:07.741" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.741" starttime="20170731 14:52:07.740" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.741" starttime="20170731 14:52:07.738" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.741" starttime="20170731 14:52:07.738" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:07.804" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:52:07.805" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:07.805" starttime="20170731 14:52:07.742" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:07.806" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:07.806" starttime="20170731 14:52:07.806" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:07.808" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:07.808" starttime="20170731 14:52:07.807" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.808" starttime="20170731 14:52:07.807" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.808" starttime="20170731 14:52:07.805" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:07.808" starttime="20170731 14:52:07.805" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:07.808" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:07.809" starttime="20170731 14:52:07.808" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:07.809" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:07.809" starttime="20170731 14:52:07.524" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:07.809" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:07.809" starttime="20170731 14:52:07.809" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:07.810" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:07.810" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:07.810" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170731 14:52:07.810" starttime="20170731 14:52:07.810" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:07.810" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170731 14:52:07.810" starttime="20170731 14:52:07.524" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:07.811" level="INFO">${host_state} = Running</msg>
<status endtime="20170731 14:52:07.811" starttime="20170731 14:52:07.523" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170731 14:52:07.811" starttime="20170731 14:52:07.811" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:07.815" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:07.815" starttime="20170731 14:52:07.815" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:07.816" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:07.816" starttime="20170731 14:52:07.816" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:07.817" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:07.817" starttime="20170731 14:52:07.816" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:07.817" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:07.817" starttime="20170731 14:52:07.817" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:08.009" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:08.009" starttime="20170731 14:52:07.818" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:08.010" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:08.010" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:08.010" starttime="20170731 14:52:07.818" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:08.010" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:08.010" starttime="20170731 14:52:08.010" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:08.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:08.011" starttime="20170731 14:52:08.011" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:08.011" starttime="20170731 14:52:07.814" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:08.011" starttime="20170731 14:52:07.814" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:08.011" starttime="20170731 14:52:07.813" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:08.012" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170731 14:52:08.012" starttime="20170731 14:52:08.012" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:08.014" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170731 14:52:08.014" starttime="20170731 14:52:08.013" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:08.015" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170731 14:52:08.015" starttime="20170731 14:52:08.015" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:08.015" starttime="20170731 14:52:08.014" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:08.015" starttime="20170731 14:52:08.013" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:08.015" starttime="20170731 14:52:08.012" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:08.081" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 14:52:08.081" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:08.081" starttime="20170731 14:52:08.016" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:08.083" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:08.083" starttime="20170731 14:52:08.082" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:08.084" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:08.084" starttime="20170731 14:52:08.084" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:08.084" starttime="20170731 14:52:08.083" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:08.084" starttime="20170731 14:52:08.082" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:08.084" starttime="20170731 14:52:08.081" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:08.085" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:08.085" starttime="20170731 14:52:08.084" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:08.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:08.085" starttime="20170731 14:52:07.813" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:08.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:08.086" starttime="20170731 14:52:08.085" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:08.086" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:08.086" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:08.086" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170731 14:52:08.086" starttime="20170731 14:52:08.086" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:08.087" level="INFO">${state} = Off</msg>
<status endtime="20170731 14:52:08.087" starttime="20170731 14:52:07.812" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:08.087" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170731 14:52:08.087" starttime="20170731 14:52:07.812" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170731 14:52:08.087" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170731 14:52:08.087" starttime="20170731 14:52:08.087" status="FAIL"></status>
</kw>
<status endtime="20170731 14:52:08.088" starttime="20170731 14:52:07.811" status="FAIL"></status>
</kw>
<status endtime="20170731 14:52:08.088" starttime="20170731 14:52:07.173" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:18.093" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:18.093" starttime="20170731 14:52:18.093" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:18.094" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:18.094" starttime="20170731 14:52:18.094" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:18.095" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:18.095" starttime="20170731 14:52:18.094" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:18.095" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:18.095" starttime="20170731 14:52:18.095" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:18.382" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:18.382" starttime="20170731 14:52:18.096" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:18.382" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:18.382" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:18.382" starttime="20170731 14:52:18.095" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:18.383" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:18.383" starttime="20170731 14:52:18.382" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:18.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:18.383" starttime="20170731 14:52:18.383" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.384" starttime="20170731 14:52:18.092" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.384" starttime="20170731 14:52:18.091" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.384" starttime="20170731 14:52:18.091" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:18.384" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:52:18.384" starttime="20170731 14:52:18.384" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:18.386" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:18.386" starttime="20170731 14:52:18.386" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:18.387" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:18.387" starttime="20170731 14:52:18.387" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.388" starttime="20170731 14:52:18.387" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.388" starttime="20170731 14:52:18.385" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.388" starttime="20170731 14:52:18.385" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:18.569" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:52:18.569" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:18.569" starttime="20170731 14:52:18.388" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:18.571" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:18.571" starttime="20170731 14:52:18.570" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:18.572" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:18.572" starttime="20170731 14:52:18.572" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.572" starttime="20170731 14:52:18.571" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.572" starttime="20170731 14:52:18.570" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.572" starttime="20170731 14:52:18.569" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:18.573" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:18.573" starttime="20170731 14:52:18.572" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:18.573" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:18.573" starttime="20170731 14:52:18.090" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:18.573" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:18.574" starttime="20170731 14:52:18.573" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:18.574" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:18.574" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:18.574" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:52:18.574" starttime="20170731 14:52:18.574" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:18.575" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:52:18.575" starttime="20170731 14:52:18.089" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:18.575" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:52:18.575" starttime="20170731 14:52:18.089" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:52:18.575" starttime="20170731 14:52:18.575" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.576" starttime="20170731 14:52:18.089" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:18.579" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:18.580" starttime="20170731 14:52:18.579" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:18.580" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:18.580" starttime="20170731 14:52:18.580" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:18.581" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:18.581" starttime="20170731 14:52:18.580" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:18.582" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:18.582" starttime="20170731 14:52:18.581" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:18.950" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:18.950" starttime="20170731 14:52:18.582" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:18.951" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:18.951" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:18.951" starttime="20170731 14:52:18.582" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:18.951" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:18.951" starttime="20170731 14:52:18.951" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:18.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:18.952" starttime="20170731 14:52:18.952" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.952" starttime="20170731 14:52:18.578" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.952" starttime="20170731 14:52:18.578" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.952" starttime="20170731 14:52:18.577" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:18.953" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:52:18.953" starttime="20170731 14:52:18.953" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:18.955" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:18.955" starttime="20170731 14:52:18.954" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:18.956" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:18.956" starttime="20170731 14:52:18.956" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.956" starttime="20170731 14:52:18.956" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.957" starttime="20170731 14:52:18.954" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:18.957" starttime="20170731 14:52:18.953" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:19.052" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:52:19.053" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:19.053" starttime="20170731 14:52:18.957" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:19.054" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:19.054" starttime="20170731 14:52:19.054" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:19.055" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:19.055" starttime="20170731 14:52:19.055" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:19.055" starttime="20170731 14:52:19.054" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:19.055" starttime="20170731 14:52:19.053" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:19.056" starttime="20170731 14:52:19.053" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:19.056" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:19.056" starttime="20170731 14:52:19.056" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:19.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:19.056" starttime="20170731 14:52:18.577" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:19.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:19.057" starttime="20170731 14:52:19.057" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:19.057" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:19.057" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:19.058" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170731 14:52:19.058" starttime="20170731 14:52:19.057" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:19.058" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170731 14:52:19.058" starttime="20170731 14:52:18.576" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:19.058" level="INFO">${host_state} = Running</msg>
<status endtime="20170731 14:52:19.058" starttime="20170731 14:52:18.576" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170731 14:52:19.059" starttime="20170731 14:52:19.058" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:19.063" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:19.063" starttime="20170731 14:52:19.062" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:19.063" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:19.064" starttime="20170731 14:52:19.063" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:19.064" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:19.064" starttime="20170731 14:52:19.064" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:19.065" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:19.065" starttime="20170731 14:52:19.064" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:19.328" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:19.329" starttime="20170731 14:52:19.065" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:19.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:19.329" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:19.329" starttime="20170731 14:52:19.065" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:19.329" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:19.329" starttime="20170731 14:52:19.329" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:19.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:19.330" starttime="20170731 14:52:19.330" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:19.330" starttime="20170731 14:52:19.062" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:19.330" starttime="20170731 14:52:19.061" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:19.330" starttime="20170731 14:52:19.061" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:19.331" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170731 14:52:19.331" starttime="20170731 14:52:19.331" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:19.333" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170731 14:52:19.333" starttime="20170731 14:52:19.332" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:19.334" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170731 14:52:19.334" starttime="20170731 14:52:19.334" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:19.334" starttime="20170731 14:52:19.333" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:19.334" starttime="20170731 14:52:19.332" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:19.334" starttime="20170731 14:52:19.331" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:19.469" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 14:52:19.469" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:19.469" starttime="20170731 14:52:19.335" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:19.470" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:19.470" starttime="20170731 14:52:19.470" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:19.471" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:19.471" starttime="20170731 14:52:19.471" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:19.471" starttime="20170731 14:52:19.471" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:19.472" starttime="20170731 14:52:19.469" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:19.472" starttime="20170731 14:52:19.469" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:19.472" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:19.472" starttime="20170731 14:52:19.472" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:19.472" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:19.472" starttime="20170731 14:52:19.060" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:19.473" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:19.473" starttime="20170731 14:52:19.473" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:19.474" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:19.474" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:19.474" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170731 14:52:19.474" starttime="20170731 14:52:19.473" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:19.474" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170731 14:52:19.474" starttime="20170731 14:52:19.060" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:19.474" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170731 14:52:19.474" starttime="20170731 14:52:19.059" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170731 14:52:19.475" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170731 14:52:19.475" starttime="20170731 14:52:19.474" status="FAIL"></status>
</kw>
<status endtime="20170731 14:52:19.475" starttime="20170731 14:52:19.059" status="FAIL"></status>
</kw>
<status endtime="20170731 14:52:19.475" starttime="20170731 14:52:18.088" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:29.481" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:29.481" starttime="20170731 14:52:29.480" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:29.482" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:29.482" starttime="20170731 14:52:29.481" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:29.482" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:29.482" starttime="20170731 14:52:29.482" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:29.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:29.483" starttime="20170731 14:52:29.483" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:29.697" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:29.697" starttime="20170731 14:52:29.484" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:29.697" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:29.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:29.698" starttime="20170731 14:52:29.483" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:29.698" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:29.698" starttime="20170731 14:52:29.698" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:29.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:29.699" starttime="20170731 14:52:29.699" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:29.699" starttime="20170731 14:52:29.480" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:29.699" starttime="20170731 14:52:29.479" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:29.699" starttime="20170731 14:52:29.478" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:29.700" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:52:29.700" starttime="20170731 14:52:29.700" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:29.702" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:29.702" starttime="20170731 14:52:29.701" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:29.703" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:29.703" starttime="20170731 14:52:29.703" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:29.703" starttime="20170731 14:52:29.702" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:29.703" starttime="20170731 14:52:29.701" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:29.703" starttime="20170731 14:52:29.700" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:29.820" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:52:29.820" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:29.820" starttime="20170731 14:52:29.704" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:29.822" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:29.822" starttime="20170731 14:52:29.821" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:29.823" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:29.823" starttime="20170731 14:52:29.823" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:29.823" starttime="20170731 14:52:29.822" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:29.823" starttime="20170731 14:52:29.821" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:29.823" starttime="20170731 14:52:29.820" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:29.824" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:29.824" starttime="20170731 14:52:29.824" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:29.824" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:29.824" starttime="20170731 14:52:29.478" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:29.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:29.825" starttime="20170731 14:52:29.824" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:29.825" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:29.825" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:29.825" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:52:29.826" starttime="20170731 14:52:29.825" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:29.826" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:52:29.826" starttime="20170731 14:52:29.477" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:29.826" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:52:29.826" starttime="20170731 14:52:29.477" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:52:29.827" starttime="20170731 14:52:29.826" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:29.827" starttime="20170731 14:52:29.476" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:29.830" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:29.830" starttime="20170731 14:52:29.830" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:29.831" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:29.831" starttime="20170731 14:52:29.831" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:29.832" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:29.832" starttime="20170731 14:52:29.831" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:29.832" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:29.832" starttime="20170731 14:52:29.832" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:30.082" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:30.082" starttime="20170731 14:52:29.833" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:30.082" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:30.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:30.082" starttime="20170731 14:52:29.833" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:30.083" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:30.083" starttime="20170731 14:52:30.082" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:30.083" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:30.083" starttime="20170731 14:52:30.083" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.084" starttime="20170731 14:52:29.829" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.084" starttime="20170731 14:52:29.829" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.084" starttime="20170731 14:52:29.828" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:30.084" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:52:30.084" starttime="20170731 14:52:30.084" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:30.087" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:30.087" starttime="20170731 14:52:30.086" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:30.088" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:30.088" starttime="20170731 14:52:30.087" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.088" starttime="20170731 14:52:30.087" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.088" starttime="20170731 14:52:30.085" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.088" starttime="20170731 14:52:30.085" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:30.151" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:52:30.151" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:30.151" starttime="20170731 14:52:30.088" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:30.153" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:30.153" starttime="20170731 14:52:30.152" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:30.154" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:30.154" starttime="20170731 14:52:30.153" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.154" starttime="20170731 14:52:30.153" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.154" starttime="20170731 14:52:30.152" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.154" starttime="20170731 14:52:30.151" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:30.154" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:30.154" starttime="20170731 14:52:30.154" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:30.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:30.155" starttime="20170731 14:52:29.828" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:30.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:30.155" starttime="20170731 14:52:30.155" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:30.156" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:30.156" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:30.156" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170731 14:52:30.156" starttime="20170731 14:52:30.156" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:30.156" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170731 14:52:30.156" starttime="20170731 14:52:29.827" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:30.157" level="INFO">${host_state} = Running</msg>
<status endtime="20170731 14:52:30.157" starttime="20170731 14:52:29.827" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170731 14:52:30.157" starttime="20170731 14:52:30.157" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:30.161" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:30.161" starttime="20170731 14:52:30.161" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:30.162" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:30.162" starttime="20170731 14:52:30.162" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:30.162" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:30.162" starttime="20170731 14:52:30.162" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:30.163" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:30.163" starttime="20170731 14:52:30.163" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:30.384" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:30.384" starttime="20170731 14:52:30.166" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:30.384" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:30.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:30.384" starttime="20170731 14:52:30.163" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:30.384" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:30.385" starttime="20170731 14:52:30.384" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:30.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:30.385" starttime="20170731 14:52:30.385" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.385" starttime="20170731 14:52:30.160" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.385" starttime="20170731 14:52:30.160" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.386" starttime="20170731 14:52:30.159" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:30.386" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170731 14:52:30.386" starttime="20170731 14:52:30.386" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:30.388" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170731 14:52:30.388" starttime="20170731 14:52:30.387" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:30.389" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170731 14:52:30.389" starttime="20170731 14:52:30.389" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.389" starttime="20170731 14:52:30.388" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.389" starttime="20170731 14:52:30.387" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.389" starttime="20170731 14:52:30.386" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:30.455" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 14:52:30.455" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:30.455" starttime="20170731 14:52:30.390" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:30.457" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:30.457" starttime="20170731 14:52:30.457" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:30.458" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:30.458" starttime="20170731 14:52:30.458" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.458" starttime="20170731 14:52:30.457" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.458" starttime="20170731 14:52:30.456" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:30.458" starttime="20170731 14:52:30.456" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:30.459" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:30.459" starttime="20170731 14:52:30.459" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:30.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:30.459" starttime="20170731 14:52:30.159" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:30.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:30.460" starttime="20170731 14:52:30.459" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:30.460" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:30.460" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:30.460" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170731 14:52:30.460" starttime="20170731 14:52:30.460" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:30.461" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170731 14:52:30.461" starttime="20170731 14:52:30.158" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:30.461" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170731 14:52:30.461" starttime="20170731 14:52:30.158" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170731 14:52:30.462" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170731 14:52:30.462" starttime="20170731 14:52:30.461" status="FAIL"></status>
</kw>
<status endtime="20170731 14:52:30.462" starttime="20170731 14:52:30.157" status="FAIL"></status>
</kw>
<status endtime="20170731 14:52:30.462" starttime="20170731 14:52:29.476" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:40.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:40.507" starttime="20170731 14:52:40.506" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:40.507" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:40.508" starttime="20170731 14:52:40.507" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:40.508" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:40.508" starttime="20170731 14:52:40.508" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:40.509" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:40.509" starttime="20170731 14:52:40.508" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:40.855" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:40.855" starttime="20170731 14:52:40.510" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:40.855" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:40.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:40.855" starttime="20170731 14:52:40.509" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:40.856" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:40.856" starttime="20170731 14:52:40.855" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:40.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:40.857" starttime="20170731 14:52:40.856" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:40.857" starttime="20170731 14:52:40.506" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:40.857" starttime="20170731 14:52:40.505" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:40.857" starttime="20170731 14:52:40.465" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:40.857" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:52:40.857" starttime="20170731 14:52:40.857" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:40.859" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:40.859" starttime="20170731 14:52:40.859" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:40.861" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:40.861" starttime="20170731 14:52:40.860" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:40.861" starttime="20170731 14:52:40.860" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:40.861" starttime="20170731 14:52:40.858" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:40.861" starttime="20170731 14:52:40.858" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:40.925" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:52:40.925" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:40.925" starttime="20170731 14:52:40.861" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:40.927" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:40.927" starttime="20170731 14:52:40.926" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:40.927" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:40.928" starttime="20170731 14:52:40.927" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:40.928" starttime="20170731 14:52:40.927" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:40.928" starttime="20170731 14:52:40.926" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:40.928" starttime="20170731 14:52:40.925" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:40.928" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:40.928" starttime="20170731 14:52:40.928" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:40.929" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:40.929" starttime="20170731 14:52:40.464" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:40.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:40.929" starttime="20170731 14:52:40.929" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:40.930" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:40.930" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:40.930" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:52:40.930" starttime="20170731 14:52:40.930" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:40.930" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:52:40.930" starttime="20170731 14:52:40.464" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:40.931" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:52:40.931" starttime="20170731 14:52:40.463" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:52:40.931" starttime="20170731 14:52:40.931" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:40.931" starttime="20170731 14:52:40.463" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:40.935" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:40.935" starttime="20170731 14:52:40.935" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:40.936" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:40.936" starttime="20170731 14:52:40.936" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:40.936" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:40.937" starttime="20170731 14:52:40.936" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:40.937" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:40.937" starttime="20170731 14:52:40.937" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:41.136" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:41.136" starttime="20170731 14:52:40.938" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:41.136" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:41.136" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:41.136" starttime="20170731 14:52:40.937" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:41.137" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:41.137" starttime="20170731 14:52:41.136" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:41.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:41.138" starttime="20170731 14:52:41.137" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.138" starttime="20170731 14:52:40.934" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.138" starttime="20170731 14:52:40.934" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.138" starttime="20170731 14:52:40.933" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:41.138" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:52:41.138" starttime="20170731 14:52:41.138" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:41.141" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:41.141" starttime="20170731 14:52:41.140" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:41.141" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:41.142" starttime="20170731 14:52:41.141" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.142" starttime="20170731 14:52:41.141" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.142" starttime="20170731 14:52:41.139" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.142" starttime="20170731 14:52:41.139" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:41.205" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:52:41.205" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:41.205" starttime="20170731 14:52:41.142" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:41.207" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:41.207" starttime="20170731 14:52:41.206" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:41.208" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:41.208" starttime="20170731 14:52:41.208" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.208" starttime="20170731 14:52:41.207" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.208" starttime="20170731 14:52:41.206" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.208" starttime="20170731 14:52:41.206" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:41.209" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:41.209" starttime="20170731 14:52:41.209" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:41.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:41.209" starttime="20170731 14:52:40.933" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:41.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:41.210" starttime="20170731 14:52:41.209" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:41.210" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:41.210" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:41.210" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170731 14:52:41.210" starttime="20170731 14:52:41.210" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:41.211" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170731 14:52:41.211" starttime="20170731 14:52:40.932" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:41.211" level="INFO">${host_state} = Running</msg>
<status endtime="20170731 14:52:41.211" starttime="20170731 14:52:40.932" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170731 14:52:41.212" starttime="20170731 14:52:41.211" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:41.216" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:41.216" starttime="20170731 14:52:41.216" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:41.217" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:41.217" starttime="20170731 14:52:41.217" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:41.218" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:41.218" starttime="20170731 14:52:41.217" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:41.218" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:41.218" starttime="20170731 14:52:41.218" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:41.412" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:41.412" starttime="20170731 14:52:41.219" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:41.412" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:41.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:41.412" starttime="20170731 14:52:41.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:41.413" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:41.413" starttime="20170731 14:52:41.413" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:41.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:41.414" starttime="20170731 14:52:41.413" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.414" starttime="20170731 14:52:41.215" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.414" starttime="20170731 14:52:41.214" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.414" starttime="20170731 14:52:41.214" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:41.415" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170731 14:52:41.415" starttime="20170731 14:52:41.414" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:41.417" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170731 14:52:41.417" starttime="20170731 14:52:41.416" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:41.417" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170731 14:52:41.418" starttime="20170731 14:52:41.417" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.418" starttime="20170731 14:52:41.417" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.418" starttime="20170731 14:52:41.415" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.418" starttime="20170731 14:52:41.415" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:41.484" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 14:52:41.484" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:41.484" starttime="20170731 14:52:41.418" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:41.486" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:41.486" starttime="20170731 14:52:41.486" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:41.487" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:41.487" starttime="20170731 14:52:41.487" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.487" starttime="20170731 14:52:41.486" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.488" starttime="20170731 14:52:41.485" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:41.488" starttime="20170731 14:52:41.485" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:41.488" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:41.488" starttime="20170731 14:52:41.488" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:41.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:41.488" starttime="20170731 14:52:41.213" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:41.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:41.489" starttime="20170731 14:52:41.489" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:41.490" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:41.490" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:41.490" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170731 14:52:41.490" starttime="20170731 14:52:41.489" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:41.490" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170731 14:52:41.490" starttime="20170731 14:52:41.213" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:41.490" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170731 14:52:41.490" starttime="20170731 14:52:41.212" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170731 14:52:41.491" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170731 14:52:41.491" starttime="20170731 14:52:41.491" status="FAIL"></status>
</kw>
<status endtime="20170731 14:52:41.491" starttime="20170731 14:52:41.212" status="FAIL"></status>
</kw>
<status endtime="20170731 14:52:41.491" starttime="20170731 14:52:40.462" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:51.496" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:51.496" starttime="20170731 14:52:51.496" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:51.497" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:51.497" starttime="20170731 14:52:51.497" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:51.498" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:51.498" starttime="20170731 14:52:51.497" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:51.498" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:51.498" starttime="20170731 14:52:51.498" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:51.831" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:51.831" starttime="20170731 14:52:51.499" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:51.831" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:51.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:51.831" starttime="20170731 14:52:51.499" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:51.832" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:51.832" starttime="20170731 14:52:51.831" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:51.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:51.833" starttime="20170731 14:52:51.832" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:51.833" starttime="20170731 14:52:51.495" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:51.833" starttime="20170731 14:52:51.495" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:51.833" starttime="20170731 14:52:51.494" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:51.833" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:52:51.833" starttime="20170731 14:52:51.833" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:51.835" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:51.836" starttime="20170731 14:52:51.835" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:51.836" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:51.836" starttime="20170731 14:52:51.836" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:51.837" starttime="20170731 14:52:51.836" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:51.837" starttime="20170731 14:52:51.834" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:51.837" starttime="20170731 14:52:51.834" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:51.903" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:52:51.903" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:51.903" starttime="20170731 14:52:51.837" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:51.904" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:51.905" starttime="20170731 14:52:51.904" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:51.905" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:51.905" starttime="20170731 14:52:51.905" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:51.906" starttime="20170731 14:52:51.905" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:51.906" starttime="20170731 14:52:51.904" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:51.906" starttime="20170731 14:52:51.903" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:51.906" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:51.906" starttime="20170731 14:52:51.906" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:51.906" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:51.906" starttime="20170731 14:52:51.494" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:51.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:51.907" starttime="20170731 14:52:51.907" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:51.908" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:51.908" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:51.908" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:52:51.908" starttime="20170731 14:52:51.907" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:51.908" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:52:51.908" starttime="20170731 14:52:51.493" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:51.908" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:52:51.908" starttime="20170731 14:52:51.493" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:52:51.909" starttime="20170731 14:52:51.909" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:51.909" starttime="20170731 14:52:51.492" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:51.913" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:51.913" starttime="20170731 14:52:51.912" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:51.914" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:51.914" starttime="20170731 14:52:51.913" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:51.914" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:51.914" starttime="20170731 14:52:51.914" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:51.915" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:51.915" starttime="20170731 14:52:51.915" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:52.116" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:52.117" starttime="20170731 14:52:51.916" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:52.117" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:52.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:52.117" starttime="20170731 14:52:51.915" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:52.117" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:52.117" starttime="20170731 14:52:52.117" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:52.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:52.118" starttime="20170731 14:52:52.118" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.118" starttime="20170731 14:52:51.912" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.118" starttime="20170731 14:52:51.911" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.118" starttime="20170731 14:52:51.911" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:52.119" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:52:52.119" starttime="20170731 14:52:52.119" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:52.121" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:52.121" starttime="20170731 14:52:52.120" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:52.122" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:52:52.122" starttime="20170731 14:52:52.122" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.122" starttime="20170731 14:52:52.121" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.122" starttime="20170731 14:52:52.120" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.122" starttime="20170731 14:52:52.119" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:52.185" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:52:52.185" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:52.185" starttime="20170731 14:52:52.122" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:52.187" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:52.187" starttime="20170731 14:52:52.186" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:52.188" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:52.188" starttime="20170731 14:52:52.187" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.188" starttime="20170731 14:52:52.187" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.188" starttime="20170731 14:52:52.186" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.188" starttime="20170731 14:52:52.185" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:52.188" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:52.188" starttime="20170731 14:52:52.188" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:52.189" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:52.189" starttime="20170731 14:52:51.910" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:52.189" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:52.189" starttime="20170731 14:52:52.189" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:52.190" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:52.190" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:52.190" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170731 14:52:52.190" starttime="20170731 14:52:52.190" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:52.190" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170731 14:52:52.190" starttime="20170731 14:52:51.910" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:52.191" level="INFO">${host_state} = Running</msg>
<status endtime="20170731 14:52:52.191" starttime="20170731 14:52:51.909" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170731 14:52:52.191" starttime="20170731 14:52:52.191" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:52:52.195" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:52:52.196" starttime="20170731 14:52:52.195" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:52:52.196" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:52:52.196" starttime="20170731 14:52:52.196" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:52:52.197" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:52:52.197" starttime="20170731 14:52:52.196" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:52:52.197" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:52:52.197" starttime="20170731 14:52:52.197" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:52:52.407" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:52:52.407" starttime="20170731 14:52:52.198" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:52.407" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:52:52.407" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:52.407" starttime="20170731 14:52:52.198" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:52:52.408" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:52.408" starttime="20170731 14:52:52.407" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:52.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:52.409" starttime="20170731 14:52:52.408" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.409" starttime="20170731 14:52:52.194" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.409" starttime="20170731 14:52:52.194" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.409" starttime="20170731 14:52:52.193" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:52:52.409" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170731 14:52:52.409" starttime="20170731 14:52:52.409" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:52.412" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170731 14:52:52.412" starttime="20170731 14:52:52.411" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:52.413" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170731 14:52:52.413" starttime="20170731 14:52:52.412" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.413" starttime="20170731 14:52:52.412" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.413" starttime="20170731 14:52:52.410" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.413" starttime="20170731 14:52:52.410" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:52:52.479" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170731 14:52:52.479" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:52.479" starttime="20170731 14:52:52.413" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:52:52.481" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:52.481" starttime="20170731 14:52:52.480" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:52:52.481" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:52:52.482" starttime="20170731 14:52:52.481" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.482" starttime="20170731 14:52:52.481" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.482" starttime="20170731 14:52:52.480" status="PASS"></status>
</kw>
<status endtime="20170731 14:52:52.482" starttime="20170731 14:52:52.479" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:52:52.482" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:52:52.482" starttime="20170731 14:52:52.482" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:52.482" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:52:52.483" starttime="20170731 14:52:52.193" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:52:52.483" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:52:52.483" starttime="20170731 14:52:52.483" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:52:52.484" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:52:52.484" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:52:52.484" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170731 14:52:52.484" starttime="20170731 14:52:52.483" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:52.484" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170731 14:52:52.484" starttime="20170731 14:52:52.192" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:52:52.484" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170731 14:52:52.484" starttime="20170731 14:52:52.192" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170731 14:52:52.485" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170731 14:52:52.485" starttime="20170731 14:52:52.485" status="FAIL"></status>
</kw>
<status endtime="20170731 14:52:52.485" starttime="20170731 14:52:52.191" status="FAIL"></status>
</kw>
<status endtime="20170731 14:52:52.485" starttime="20170731 14:52:51.492" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:53:02.490" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:53:02.490" starttime="20170731 14:53:02.490" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:53:02.491" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:53:02.491" starttime="20170731 14:53:02.491" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:53:02.491" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:53:02.492" starttime="20170731 14:53:02.491" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:53:02.493" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:53:02.493" starttime="20170731 14:53:02.492" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:53:02.696" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:53:02.696" starttime="20170731 14:53:02.493" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:02.696" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:53:02.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:02.696" starttime="20170731 14:53:02.493" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:53:02.696" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:02.697" starttime="20170731 14:53:02.696" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:02.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:02.697" starttime="20170731 14:53:02.697" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.697" starttime="20170731 14:53:02.489" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.697" starttime="20170731 14:53:02.489" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.697" starttime="20170731 14:53:02.488" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:53:02.698" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:53:02.698" starttime="20170731 14:53:02.698" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:02.700" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:02.700" starttime="20170731 14:53:02.699" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:02.701" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:02.701" starttime="20170731 14:53:02.701" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.701" starttime="20170731 14:53:02.700" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.701" starttime="20170731 14:53:02.699" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.701" starttime="20170731 14:53:02.698" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:53:02.779" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:53:02.780" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:02.780" starttime="20170731 14:53:02.702" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:02.781" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:02.781" starttime="20170731 14:53:02.781" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:02.782" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:02.782" starttime="20170731 14:53:02.782" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.782" starttime="20170731 14:53:02.781" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.783" starttime="20170731 14:53:02.780" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.783" starttime="20170731 14:53:02.780" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:53:02.783" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:53:02.783" starttime="20170731 14:53:02.783" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:02.783" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:02.783" starttime="20170731 14:53:02.487" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:02.784" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:02.784" starttime="20170731 14:53:02.784" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:53:02.784" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:53:02.785" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:53:02.785" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:53:02.785" starttime="20170731 14:53:02.784" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:02.785" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:53:02.785" starttime="20170731 14:53:02.487" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:02.785" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:53:02.785" starttime="20170731 14:53:02.487" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:53:02.786" starttime="20170731 14:53:02.786" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.786" starttime="20170731 14:53:02.486" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:53:02.790" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:53:02.790" starttime="20170731 14:53:02.789" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:53:02.791" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:53:02.791" starttime="20170731 14:53:02.790" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:53:02.791" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:53:02.791" starttime="20170731 14:53:02.791" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:53:02.792" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:53:02.792" starttime="20170731 14:53:02.791" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:53:02.985" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:53:02.985" starttime="20170731 14:53:02.793" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:02.985" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:53:02.985" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:02.985" starttime="20170731 14:53:02.792" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:53:02.985" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:02.986" starttime="20170731 14:53:02.985" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:02.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:02.986" starttime="20170731 14:53:02.986" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.986" starttime="20170731 14:53:02.789" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.986" starttime="20170731 14:53:02.788" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.987" starttime="20170731 14:53:02.788" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:53:02.987" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:53:02.987" starttime="20170731 14:53:02.987" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:02.989" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:02.989" starttime="20170731 14:53:02.989" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:02.990" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:02.990" starttime="20170731 14:53:02.990" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.990" starttime="20170731 14:53:02.989" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.990" starttime="20170731 14:53:02.988" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:02.991" starttime="20170731 14:53:02.987" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:53:03.053" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:53:03.053" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:03.053" starttime="20170731 14:53:02.991" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:03.055" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:03.055" starttime="20170731 14:53:03.054" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:03.056" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:03.056" starttime="20170731 14:53:03.056" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:03.056" starttime="20170731 14:53:03.055" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:03.056" starttime="20170731 14:53:03.054" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:03.056" starttime="20170731 14:53:03.053" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:53:03.057" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:53:03.057" starttime="20170731 14:53:03.057" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:03.057" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:03.057" starttime="20170731 14:53:02.787" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:03.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:03.058" starttime="20170731 14:53:03.057" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:53:03.058" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:53:03.058" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:53:03.058" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:53:03.058" starttime="20170731 14:53:03.058" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:03.059" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:53:03.059" starttime="20170731 14:53:02.786" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:03.059" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:53:03.059" starttime="20170731 14:53:02.786" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:53:03.060" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:53:03.060" starttime="20170731 14:53:03.059" status="FAIL"></status>
</kw>
<status endtime="20170731 14:53:03.060" starttime="20170731 14:53:02.486" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:53:13.064" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:53:13.065" starttime="20170731 14:53:13.064" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:53:13.065" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:53:13.065" starttime="20170731 14:53:13.065" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:53:13.066" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:53:13.066" starttime="20170731 14:53:13.066" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:53:13.067" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:53:13.067" starttime="20170731 14:53:13.066" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:53:13.303" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:53:13.303" starttime="20170731 14:53:13.067" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:13.303" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:53:13.303" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:13.303" starttime="20170731 14:53:13.067" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:53:13.304" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:13.304" starttime="20170731 14:53:13.304" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:13.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:13.305" starttime="20170731 14:53:13.304" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.305" starttime="20170731 14:53:13.063" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.305" starttime="20170731 14:53:13.063" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.305" starttime="20170731 14:53:13.063" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:53:13.305" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:53:13.305" starttime="20170731 14:53:13.305" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:13.307" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:13.307" starttime="20170731 14:53:13.307" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:13.308" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:13.308" starttime="20170731 14:53:13.308" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.309" starttime="20170731 14:53:13.308" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.309" starttime="20170731 14:53:13.306" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.309" starttime="20170731 14:53:13.306" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:53:13.458" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:53:13.458" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:13.458" starttime="20170731 14:53:13.309" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:13.460" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:13.460" starttime="20170731 14:53:13.459" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:13.461" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:13.461" starttime="20170731 14:53:13.461" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.461" starttime="20170731 14:53:13.460" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.461" starttime="20170731 14:53:13.459" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.461" starttime="20170731 14:53:13.459" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:53:13.462" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:53:13.462" starttime="20170731 14:53:13.461" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:13.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:13.462" starttime="20170731 14:53:13.062" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:13.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:13.463" starttime="20170731 14:53:13.462" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:53:13.463" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:53:13.463" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:53:13.463" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:53:13.463" starttime="20170731 14:53:13.463" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:13.464" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:53:13.464" starttime="20170731 14:53:13.061" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:13.464" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:53:13.464" starttime="20170731 14:53:13.061" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:53:13.464" starttime="20170731 14:53:13.464" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.464" starttime="20170731 14:53:13.061" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:53:13.468" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:53:13.469" starttime="20170731 14:53:13.468" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:53:13.469" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:53:13.469" starttime="20170731 14:53:13.469" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:53:13.470" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:53:13.470" starttime="20170731 14:53:13.469" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:53:13.470" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:53:13.470" starttime="20170731 14:53:13.470" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:53:13.681" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:53:13.681" starttime="20170731 14:53:13.471" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:13.682" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:53:13.682" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:13.682" starttime="20170731 14:53:13.471" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:53:13.682" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:13.682" starttime="20170731 14:53:13.682" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:13.683" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:13.683" starttime="20170731 14:53:13.683" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.683" starttime="20170731 14:53:13.467" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.683" starttime="20170731 14:53:13.467" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.683" starttime="20170731 14:53:13.466" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:53:13.684" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:53:13.684" starttime="20170731 14:53:13.683" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:13.686" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:13.686" starttime="20170731 14:53:13.685" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:13.687" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:13.687" starttime="20170731 14:53:13.686" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.687" starttime="20170731 14:53:13.686" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.687" starttime="20170731 14:53:13.685" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.687" starttime="20170731 14:53:13.684" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:53:13.757" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:53:13.757" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:13.757" starttime="20170731 14:53:13.687" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:13.759" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:13.759" starttime="20170731 14:53:13.759" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:13.760" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:13.760" starttime="20170731 14:53:13.760" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.760" starttime="20170731 14:53:13.759" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.760" starttime="20170731 14:53:13.758" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:13.761" starttime="20170731 14:53:13.758" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:53:13.761" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:53:13.761" starttime="20170731 14:53:13.761" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:13.761" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:13.761" starttime="20170731 14:53:13.466" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:13.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:13.762" starttime="20170731 14:53:13.762" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:53:13.762" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:53:13.763" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:53:13.763" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:53:13.763" starttime="20170731 14:53:13.762" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:13.763" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:53:13.763" starttime="20170731 14:53:13.465" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:13.763" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:53:13.763" starttime="20170731 14:53:13.465" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:53:13.764" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:53:13.764" starttime="20170731 14:53:13.764" status="FAIL"></status>
</kw>
<status endtime="20170731 14:53:13.764" starttime="20170731 14:53:13.060" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:53:23.769" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:53:23.769" starttime="20170731 14:53:23.769" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:53:23.770" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:53:23.770" starttime="20170731 14:53:23.770" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:53:23.770" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:53:23.771" starttime="20170731 14:53:23.770" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:53:23.771" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:53:23.771" starttime="20170731 14:53:23.771" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:53:23.963" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:53:23.963" starttime="20170731 14:53:23.772" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:23.963" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:53:23.963" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:23.963" starttime="20170731 14:53:23.771" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:53:23.964" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:23.964" starttime="20170731 14:53:23.964" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:23.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:23.965" starttime="20170731 14:53:23.964" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:23.965" starttime="20170731 14:53:23.768" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:23.965" starttime="20170731 14:53:23.768" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:23.965" starttime="20170731 14:53:23.767" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:53:23.966" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:53:23.966" starttime="20170731 14:53:23.965" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:23.968" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:23.968" starttime="20170731 14:53:23.967" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:23.968" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:23.969" starttime="20170731 14:53:23.968" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:23.969" starttime="20170731 14:53:23.968" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:23.969" starttime="20170731 14:53:23.966" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:23.969" starttime="20170731 14:53:23.966" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:53:24.050" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:53:24.050" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:24.050" starttime="20170731 14:53:23.969" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:24.051" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:24.051" starttime="20170731 14:53:24.051" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:24.052" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:24.052" starttime="20170731 14:53:24.052" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.053" starttime="20170731 14:53:24.052" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.053" starttime="20170731 14:53:24.050" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.053" starttime="20170731 14:53:24.050" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:53:24.053" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:53:24.053" starttime="20170731 14:53:24.053" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:24.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:24.053" starttime="20170731 14:53:23.767" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:24.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:24.054" starttime="20170731 14:53:24.054" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:53:24.055" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:53:24.055" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:53:24.055" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:53:24.055" starttime="20170731 14:53:24.054" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:24.055" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:53:24.055" starttime="20170731 14:53:23.766" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:24.055" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:53:24.055" starttime="20170731 14:53:23.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:53:24.056" starttime="20170731 14:53:24.056" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.056" starttime="20170731 14:53:23.765" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:53:24.060" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:53:24.060" starttime="20170731 14:53:24.059" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:53:24.060" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:53:24.060" starttime="20170731 14:53:24.060" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:53:24.061" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:53:24.061" starttime="20170731 14:53:24.061" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:53:24.062" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:53:24.062" starttime="20170731 14:53:24.061" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:53:24.340" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:53:24.340" starttime="20170731 14:53:24.062" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:24.340" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:53:24.341" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:24.341" starttime="20170731 14:53:24.062" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:53:24.341" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:24.341" starttime="20170731 14:53:24.341" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:24.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:24.342" starttime="20170731 14:53:24.341" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.342" starttime="20170731 14:53:24.059" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.342" starttime="20170731 14:53:24.058" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.342" starttime="20170731 14:53:24.058" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:53:24.343" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:53:24.343" starttime="20170731 14:53:24.342" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:24.345" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:24.345" starttime="20170731 14:53:24.344" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:24.346" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:24.346" starttime="20170731 14:53:24.345" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.346" starttime="20170731 14:53:24.345" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.346" starttime="20170731 14:53:24.343" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.346" starttime="20170731 14:53:24.343" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:53:24.555" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:53:24.555" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:24.555" starttime="20170731 14:53:24.346" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:24.556" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:24.556" starttime="20170731 14:53:24.556" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:24.557" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:24.557" starttime="20170731 14:53:24.557" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.558" starttime="20170731 14:53:24.557" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.558" starttime="20170731 14:53:24.555" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:24.558" starttime="20170731 14:53:24.555" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:53:24.558" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:53:24.558" starttime="20170731 14:53:24.558" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:24.558" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:24.558" starttime="20170731 14:53:24.057" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:24.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:24.559" starttime="20170731 14:53:24.559" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:53:24.560" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:53:24.560" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:53:24.560" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:53:24.560" starttime="20170731 14:53:24.559" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:24.560" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:53:24.560" starttime="20170731 14:53:24.057" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:24.560" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:53:24.560" starttime="20170731 14:53:24.056" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:53:24.561" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:53:24.561" starttime="20170731 14:53:24.561" status="FAIL"></status>
</kw>
<status endtime="20170731 14:53:24.561" starttime="20170731 14:53:23.764" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:53:34.566" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:53:34.566" starttime="20170731 14:53:34.566" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:53:34.567" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:53:34.567" starttime="20170731 14:53:34.567" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:53:34.568" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:53:34.568" starttime="20170731 14:53:34.567" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:53:34.568" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:53:34.568" starttime="20170731 14:53:34.568" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:53:34.771" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:53:34.772" starttime="20170731 14:53:34.569" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:34.772" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:53:34.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:34.772" starttime="20170731 14:53:34.569" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:53:34.772" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:34.772" starttime="20170731 14:53:34.772" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:34.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:34.773" starttime="20170731 14:53:34.773" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:34.773" starttime="20170731 14:53:34.565" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:34.773" starttime="20170731 14:53:34.564" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:34.773" starttime="20170731 14:53:34.564" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:53:34.774" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:53:34.774" starttime="20170731 14:53:34.774" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:34.776" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:34.776" starttime="20170731 14:53:34.776" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:34.777" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:34.777" starttime="20170731 14:53:34.777" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:34.777" starttime="20170731 14:53:34.777" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:34.778" starttime="20170731 14:53:34.775" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:34.778" starttime="20170731 14:53:34.774" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:53:34.869" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:53:34.869" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:34.870" starttime="20170731 14:53:34.778" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:34.871" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:34.871" starttime="20170731 14:53:34.871" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:34.873" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:34.873" starttime="20170731 14:53:34.872" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:34.873" starttime="20170731 14:53:34.871" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:34.873" starttime="20170731 14:53:34.870" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:34.873" starttime="20170731 14:53:34.870" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:53:34.873" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:53:34.873" starttime="20170731 14:53:34.873" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:34.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:34.874" starttime="20170731 14:53:34.563" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:34.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:34.874" starttime="20170731 14:53:34.874" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:53:34.875" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:53:34.875" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:53:34.875" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:53:34.875" starttime="20170731 14:53:34.875" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:34.875" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:53:34.875" starttime="20170731 14:53:34.563" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:34.876" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:53:34.876" starttime="20170731 14:53:34.562" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:53:34.876" starttime="20170731 14:53:34.876" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:34.877" starttime="20170731 14:53:34.562" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:53:34.880" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:53:34.880" starttime="20170731 14:53:34.880" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:53:34.881" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:53:34.881" starttime="20170731 14:53:34.881" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:53:34.882" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:53:34.882" starttime="20170731 14:53:34.881" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:53:34.882" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:53:34.882" starttime="20170731 14:53:34.882" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:53:35.168" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:53:35.168" starttime="20170731 14:53:34.883" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:35.168" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:53:35.168" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:35.168" starttime="20170731 14:53:34.883" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:53:35.168" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:35.168" starttime="20170731 14:53:35.168" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:35.169" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:35.169" starttime="20170731 14:53:35.169" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:35.169" starttime="20170731 14:53:34.879" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:35.169" starttime="20170731 14:53:34.879" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:35.169" starttime="20170731 14:53:34.878" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:53:35.170" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:53:35.170" starttime="20170731 14:53:35.170" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:35.173" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:35.173" starttime="20170731 14:53:35.171" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:35.173" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:35.174" starttime="20170731 14:53:35.173" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:35.174" starttime="20170731 14:53:35.173" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:35.174" starttime="20170731 14:53:35.171" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:35.174" starttime="20170731 14:53:35.170" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:53:35.237" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:53:35.237" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:35.237" starttime="20170731 14:53:35.174" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:35.238" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:35.238" starttime="20170731 14:53:35.238" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:35.239" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:35.239" starttime="20170731 14:53:35.239" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:35.240" starttime="20170731 14:53:35.239" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:35.240" starttime="20170731 14:53:35.237" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:35.240" starttime="20170731 14:53:35.237" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:53:35.240" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:53:35.240" starttime="20170731 14:53:35.240" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:35.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:35.240" starttime="20170731 14:53:34.878" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:35.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:35.241" starttime="20170731 14:53:35.241" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:53:35.242" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:53:35.242" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:53:35.242" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:53:35.242" starttime="20170731 14:53:35.241" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:35.242" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:53:35.242" starttime="20170731 14:53:34.877" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:35.242" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:53:35.242" starttime="20170731 14:53:34.877" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:53:35.243" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:53:35.243" starttime="20170731 14:53:35.243" status="FAIL"></status>
</kw>
<status endtime="20170731 14:53:35.243" starttime="20170731 14:53:34.562" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:53:45.248" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:53:45.248" starttime="20170731 14:53:45.247" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:53:45.249" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:53:45.249" starttime="20170731 14:53:45.248" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:53:45.249" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:53:45.249" starttime="20170731 14:53:45.249" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:53:45.250" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:53:45.250" starttime="20170731 14:53:45.250" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:53:45.464" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:53:45.464" starttime="20170731 14:53:45.251" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:45.464" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:53:45.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:45.464" starttime="20170731 14:53:45.251" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:53:45.465" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:45.465" starttime="20170731 14:53:45.464" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:45.465" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:45.465" starttime="20170731 14:53:45.465" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.466" starttime="20170731 14:53:45.247" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.466" starttime="20170731 14:53:45.246" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.466" starttime="20170731 14:53:45.246" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:53:45.466" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:53:45.466" starttime="20170731 14:53:45.466" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:45.468" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:45.468" starttime="20170731 14:53:45.468" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:45.469" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:45.469" starttime="20170731 14:53:45.469" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.469" starttime="20170731 14:53:45.469" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.470" starttime="20170731 14:53:45.467" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.470" starttime="20170731 14:53:45.467" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:53:45.555" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:53:45.555" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:45.555" starttime="20170731 14:53:45.470" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:45.557" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:45.557" starttime="20170731 14:53:45.556" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:45.558" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:45.558" starttime="20170731 14:53:45.557" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.558" starttime="20170731 14:53:45.557" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.558" starttime="20170731 14:53:45.556" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.558" starttime="20170731 14:53:45.555" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:53:45.558" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:53:45.558" starttime="20170731 14:53:45.558" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:45.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:45.559" starttime="20170731 14:53:45.245" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:45.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:45.559" starttime="20170731 14:53:45.559" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:53:45.560" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:53:45.560" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:53:45.560" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:53:45.560" starttime="20170731 14:53:45.559" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:45.560" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:53:45.560" starttime="20170731 14:53:45.245" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:45.561" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:53:45.561" starttime="20170731 14:53:45.244" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:53:45.561" starttime="20170731 14:53:45.561" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.561" starttime="20170731 14:53:45.244" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:53:45.565" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:53:45.565" starttime="20170731 14:53:45.565" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:53:45.566" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:53:45.566" starttime="20170731 14:53:45.566" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:53:45.567" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:53:45.567" starttime="20170731 14:53:45.566" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:53:45.567" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:53:45.567" starttime="20170731 14:53:45.567" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:53:45.770" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:53:45.770" starttime="20170731 14:53:45.568" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:45.770" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:53:45.770" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:45.770" starttime="20170731 14:53:45.568" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:53:45.771" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:45.771" starttime="20170731 14:53:45.771" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:45.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:45.772" starttime="20170731 14:53:45.771" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.772" starttime="20170731 14:53:45.564" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.772" starttime="20170731 14:53:45.564" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.772" starttime="20170731 14:53:45.563" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:53:45.773" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:53:45.773" starttime="20170731 14:53:45.772" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:45.775" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:45.775" starttime="20170731 14:53:45.774" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:45.776" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:45.776" starttime="20170731 14:53:45.775" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.776" starttime="20170731 14:53:45.775" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.776" starttime="20170731 14:53:45.773" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.776" starttime="20170731 14:53:45.773" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:53:45.838" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:53:45.838" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:45.838" starttime="20170731 14:53:45.776" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:45.840" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:45.840" starttime="20170731 14:53:45.839" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:45.841" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:45.841" starttime="20170731 14:53:45.841" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.841" starttime="20170731 14:53:45.840" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.841" starttime="20170731 14:53:45.839" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:45.841" starttime="20170731 14:53:45.838" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:53:45.842" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:53:45.842" starttime="20170731 14:53:45.842" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:45.842" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:45.842" starttime="20170731 14:53:45.562" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:45.843" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:45.843" starttime="20170731 14:53:45.842" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:53:45.843" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:53:45.843" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:53:45.843" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:53:45.843" starttime="20170731 14:53:45.843" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:45.844" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:53:45.844" starttime="20170731 14:53:45.562" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:45.844" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:53:45.844" starttime="20170731 14:53:45.561" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:53:45.845" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:53:45.845" starttime="20170731 14:53:45.844" status="FAIL"></status>
</kw>
<status endtime="20170731 14:53:45.845" starttime="20170731 14:53:45.244" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:53:55.851" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:53:55.851" starttime="20170731 14:53:55.850" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:53:55.852" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:53:55.852" starttime="20170731 14:53:55.852" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:53:55.853" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:53:55.853" starttime="20170731 14:53:55.853" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:53:55.854" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:53:55.854" starttime="20170731 14:53:55.854" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:53:56.052" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:53:56.053" starttime="20170731 14:53:55.855" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:56.053" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:53:56.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:56.053" starttime="20170731 14:53:55.855" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:53:56.053" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:56.053" starttime="20170731 14:53:56.053" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:56.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:56.054" starttime="20170731 14:53:56.054" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.054" starttime="20170731 14:53:55.850" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.054" starttime="20170731 14:53:55.849" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.054" starttime="20170731 14:53:55.848" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:53:56.055" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:53:56.055" starttime="20170731 14:53:56.055" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:56.058" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:56.058" starttime="20170731 14:53:56.057" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:56.059" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:56.059" starttime="20170731 14:53:56.059" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.059" starttime="20170731 14:53:56.058" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.059" starttime="20170731 14:53:56.056" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.060" starttime="20170731 14:53:56.055" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:53:56.123" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:53:56.123" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:56.123" starttime="20170731 14:53:56.060" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:56.124" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:56.124" starttime="20170731 14:53:56.124" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:56.125" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:56.125" starttime="20170731 14:53:56.125" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.126" starttime="20170731 14:53:56.125" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.126" starttime="20170731 14:53:56.123" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.126" starttime="20170731 14:53:56.123" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:53:56.126" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:53:56.126" starttime="20170731 14:53:56.126" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:56.126" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:56.126" starttime="20170731 14:53:55.847" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:56.127" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:56.127" starttime="20170731 14:53:56.127" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:53:56.128" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:53:56.128" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:53:56.128" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:53:56.128" starttime="20170731 14:53:56.127" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:56.128" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:53:56.128" starttime="20170731 14:53:55.846" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:56.128" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:53:56.128" starttime="20170731 14:53:55.846" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:53:56.129" starttime="20170731 14:53:56.129" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.129" starttime="20170731 14:53:55.846" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:53:56.132" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:53:56.135" starttime="20170731 14:53:56.132" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:53:56.136" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:53:56.136" starttime="20170731 14:53:56.135" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:53:56.136" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:53:56.136" starttime="20170731 14:53:56.136" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:53:56.137" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:53:56.137" starttime="20170731 14:53:56.137" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:53:56.337" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:53:56.337" starttime="20170731 14:53:56.138" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:56.337" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:53:56.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:56.337" starttime="20170731 14:53:56.138" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:53:56.338" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:56.338" starttime="20170731 14:53:56.337" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:56.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:56.338" starttime="20170731 14:53:56.338" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.339" starttime="20170731 14:53:56.132" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.339" starttime="20170731 14:53:56.131" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.339" starttime="20170731 14:53:56.131" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:53:56.339" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:53:56.339" starttime="20170731 14:53:56.339" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:56.341" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:56.341" starttime="20170731 14:53:56.341" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:56.342" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:53:56.342" starttime="20170731 14:53:56.342" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.343" starttime="20170731 14:53:56.342" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.343" starttime="20170731 14:53:56.340" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.343" starttime="20170731 14:53:56.340" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:53:56.415" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:53:56.416" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:56.416" starttime="20170731 14:53:56.343" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:53:56.417" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:56.417" starttime="20170731 14:53:56.417" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:53:56.418" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:53:56.418" starttime="20170731 14:53:56.418" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.418" starttime="20170731 14:53:56.417" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.418" starttime="20170731 14:53:56.416" status="PASS"></status>
</kw>
<status endtime="20170731 14:53:56.419" starttime="20170731 14:53:56.416" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:53:56.419" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:53:56.419" starttime="20170731 14:53:56.419" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:56.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:53:56.419" starttime="20170731 14:53:56.130" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:53:56.420" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:53:56.420" starttime="20170731 14:53:56.419" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:53:56.420" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:53:56.420" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:53:56.421" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:53:56.421" starttime="20170731 14:53:56.420" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:56.421" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:53:56.421" starttime="20170731 14:53:56.130" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:53:56.421" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:53:56.421" starttime="20170731 14:53:56.129" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:53:56.422" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:53:56.422" starttime="20170731 14:53:56.421" status="FAIL"></status>
</kw>
<status endtime="20170731 14:53:56.422" starttime="20170731 14:53:55.845" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:54:06.427" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:54:06.428" starttime="20170731 14:54:06.427" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:54:06.428" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:54:06.428" starttime="20170731 14:54:06.428" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:54:06.429" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:54:06.429" starttime="20170731 14:54:06.428" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:54:06.429" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:54:06.430" starttime="20170731 14:54:06.429" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:54:06.612" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:54:06.612" starttime="20170731 14:54:06.430" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:06.612" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:54:06.612" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:06.612" starttime="20170731 14:54:06.430" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:54:06.613" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:06.613" starttime="20170731 14:54:06.612" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:06.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:06.613" starttime="20170731 14:54:06.613" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.614" starttime="20170731 14:54:06.426" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.614" starttime="20170731 14:54:06.426" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.614" starttime="20170731 14:54:06.425" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:54:06.614" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:54:06.614" starttime="20170731 14:54:06.614" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:06.616" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:06.616" starttime="20170731 14:54:06.616" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:06.617" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:06.618" starttime="20170731 14:54:06.617" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.618" starttime="20170731 14:54:06.617" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.618" starttime="20170731 14:54:06.615" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.618" starttime="20170731 14:54:06.615" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:54:06.720" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:54:06.720" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:06.720" starttime="20170731 14:54:06.618" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:06.722" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:06.722" starttime="20170731 14:54:06.721" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:06.723" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:06.723" starttime="20170731 14:54:06.723" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.723" starttime="20170731 14:54:06.722" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.723" starttime="20170731 14:54:06.721" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.723" starttime="20170731 14:54:06.721" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:54:06.724" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:54:06.724" starttime="20170731 14:54:06.723" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:06.724" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:06.724" starttime="20170731 14:54:06.425" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:06.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:06.725" starttime="20170731 14:54:06.724" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:54:06.725" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:54:06.725" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:54:06.725" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:54:06.725" starttime="20170731 14:54:06.725" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:06.726" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:54:06.726" starttime="20170731 14:54:06.424" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:06.726" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:54:06.726" starttime="20170731 14:54:06.423" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:54:06.726" starttime="20170731 14:54:06.726" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.727" starttime="20170731 14:54:06.423" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:54:06.730" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:54:06.730" starttime="20170731 14:54:06.730" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:54:06.731" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:54:06.731" starttime="20170731 14:54:06.731" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:54:06.731" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:54:06.732" starttime="20170731 14:54:06.731" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:54:06.732" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:54:06.732" starttime="20170731 14:54:06.732" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:54:06.920" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:54:06.920" starttime="20170731 14:54:06.733" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:06.920" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:54:06.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:06.920" starttime="20170731 14:54:06.732" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:54:06.920" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:06.921" starttime="20170731 14:54:06.920" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:06.921" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:06.921" starttime="20170731 14:54:06.921" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.921" starttime="20170731 14:54:06.729" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.921" starttime="20170731 14:54:06.729" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.922" starttime="20170731 14:54:06.728" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:54:06.922" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:54:06.922" starttime="20170731 14:54:06.922" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:06.924" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:06.924" starttime="20170731 14:54:06.923" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:06.925" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:06.925" starttime="20170731 14:54:06.925" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.925" starttime="20170731 14:54:06.924" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.925" starttime="20170731 14:54:06.923" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.925" starttime="20170731 14:54:06.922" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:54:06.988" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:54:06.988" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:06.988" starttime="20170731 14:54:06.926" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:06.990" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:06.990" starttime="20170731 14:54:06.989" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:06.990" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:06.991" starttime="20170731 14:54:06.990" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.991" starttime="20170731 14:54:06.990" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.991" starttime="20170731 14:54:06.989" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:06.991" starttime="20170731 14:54:06.988" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:54:06.991" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:54:06.991" starttime="20170731 14:54:06.991" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:06.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:06.992" starttime="20170731 14:54:06.728" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:06.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:06.992" starttime="20170731 14:54:06.992" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:54:06.993" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:54:06.993" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:54:06.993" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:54:06.993" starttime="20170731 14:54:06.992" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:06.993" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:54:06.993" starttime="20170731 14:54:06.727" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:06.994" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:54:06.994" starttime="20170731 14:54:06.727" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:54:06.994" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:54:06.994" starttime="20170731 14:54:06.994" status="FAIL"></status>
</kw>
<status endtime="20170731 14:54:06.994" starttime="20170731 14:54:06.422" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:54:16.999" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:54:17.000" starttime="20170731 14:54:16.999" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:54:17.000" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:54:17.000" starttime="20170731 14:54:17.000" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:54:17.001" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:54:17.001" starttime="20170731 14:54:17.001" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:54:17.002" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:54:17.002" starttime="20170731 14:54:17.001" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:54:17.187" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:54:17.187" starttime="20170731 14:54:17.002" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:17.187" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:54:17.187" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:17.187" starttime="20170731 14:54:17.002" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:54:17.188" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:17.188" starttime="20170731 14:54:17.187" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:17.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:17.188" starttime="20170731 14:54:17.188" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.188" starttime="20170731 14:54:16.998" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.188" starttime="20170731 14:54:16.998" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.189" starttime="20170731 14:54:16.997" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:54:17.189" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:54:17.189" starttime="20170731 14:54:17.189" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:17.191" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:17.191" starttime="20170731 14:54:17.190" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:17.192" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:17.192" starttime="20170731 14:54:17.192" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.192" starttime="20170731 14:54:17.191" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.192" starttime="20170731 14:54:17.190" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.192" starttime="20170731 14:54:17.189" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:54:17.255" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:54:17.255" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:17.255" starttime="20170731 14:54:17.193" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:17.257" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:17.257" starttime="20170731 14:54:17.256" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:17.258" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:17.258" starttime="20170731 14:54:17.258" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.258" starttime="20170731 14:54:17.257" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.258" starttime="20170731 14:54:17.256" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.258" starttime="20170731 14:54:17.255" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:54:17.259" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:54:17.259" starttime="20170731 14:54:17.259" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:17.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:17.259" starttime="20170731 14:54:16.997" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:17.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:17.260" starttime="20170731 14:54:17.259" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:54:17.260" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:54:17.260" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:54:17.260" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:54:17.261" starttime="20170731 14:54:17.260" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:17.261" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:54:17.261" starttime="20170731 14:54:16.996" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:17.261" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:54:17.261" starttime="20170731 14:54:16.996" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:54:17.262" starttime="20170731 14:54:17.261" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.262" starttime="20170731 14:54:16.995" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:54:17.265" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:54:17.266" starttime="20170731 14:54:17.265" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:54:17.266" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:54:17.266" starttime="20170731 14:54:17.266" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:54:17.267" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:54:17.267" starttime="20170731 14:54:17.266" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:54:17.267" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:54:17.267" starttime="20170731 14:54:17.267" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:54:17.490" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:54:17.490" starttime="20170731 14:54:17.268" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:17.490" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:54:17.490" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:17.491" starttime="20170731 14:54:17.268" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:54:17.491" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:17.491" starttime="20170731 14:54:17.491" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:17.492" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:17.492" starttime="20170731 14:54:17.491" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.492" starttime="20170731 14:54:17.264" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.492" starttime="20170731 14:54:17.264" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.492" starttime="20170731 14:54:17.264" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:54:17.493" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:54:17.493" starttime="20170731 14:54:17.492" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:17.495" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:17.495" starttime="20170731 14:54:17.494" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:17.496" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:17.496" starttime="20170731 14:54:17.496" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.496" starttime="20170731 14:54:17.495" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.496" starttime="20170731 14:54:17.494" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.496" starttime="20170731 14:54:17.493" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:54:17.605" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:54:17.606" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:17.606" starttime="20170731 14:54:17.497" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:17.607" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:17.607" starttime="20170731 14:54:17.607" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:17.608" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:17.608" starttime="20170731 14:54:17.608" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.608" starttime="20170731 14:54:17.607" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.608" starttime="20170731 14:54:17.606" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:17.609" starttime="20170731 14:54:17.606" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:54:17.609" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:54:17.609" starttime="20170731 14:54:17.609" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:17.609" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:17.609" starttime="20170731 14:54:17.263" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:17.610" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:17.610" starttime="20170731 14:54:17.609" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:54:17.610" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:54:17.610" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:54:17.611" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:54:17.611" starttime="20170731 14:54:17.610" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:17.611" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:54:17.611" starttime="20170731 14:54:17.262" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:17.611" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:54:17.611" starttime="20170731 14:54:17.262" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:54:17.612" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:54:17.612" starttime="20170731 14:54:17.611" status="FAIL"></status>
</kw>
<status endtime="20170731 14:54:17.612" starttime="20170731 14:54:16.995" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:54:27.617" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:54:27.617" starttime="20170731 14:54:27.616" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:54:27.618" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:54:27.618" starttime="20170731 14:54:27.618" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:54:27.619" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:54:27.619" starttime="20170731 14:54:27.618" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:54:27.620" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:54:27.620" starttime="20170731 14:54:27.619" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:54:27.809" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:54:27.809" starttime="20170731 14:54:27.620" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:27.809" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:54:27.809" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:27.809" starttime="20170731 14:54:27.620" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:54:27.810" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:27.810" starttime="20170731 14:54:27.810" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:27.811" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:27.811" starttime="20170731 14:54:27.810" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:27.811" starttime="20170731 14:54:27.616" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:27.811" starttime="20170731 14:54:27.615" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:27.811" starttime="20170731 14:54:27.615" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:54:27.812" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:54:27.812" starttime="20170731 14:54:27.811" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:27.814" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:27.814" starttime="20170731 14:54:27.813" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:27.815" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:27.815" starttime="20170731 14:54:27.814" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:27.815" starttime="20170731 14:54:27.814" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:27.815" starttime="20170731 14:54:27.812" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:27.815" starttime="20170731 14:54:27.812" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:54:27.878" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:54:27.878" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:27.878" starttime="20170731 14:54:27.815" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:27.880" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:27.880" starttime="20170731 14:54:27.879" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:27.881" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:27.881" starttime="20170731 14:54:27.880" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:27.881" starttime="20170731 14:54:27.880" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:27.881" starttime="20170731 14:54:27.879" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:27.881" starttime="20170731 14:54:27.878" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:54:27.881" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:54:27.881" starttime="20170731 14:54:27.881" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:27.882" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:27.882" starttime="20170731 14:54:27.614" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:27.882" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:27.882" starttime="20170731 14:54:27.882" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:54:27.883" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:54:27.883" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:54:27.883" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:54:27.883" starttime="20170731 14:54:27.882" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:27.883" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:54:27.883" starttime="20170731 14:54:27.614" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:27.884" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:54:27.884" starttime="20170731 14:54:27.613" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:54:27.884" starttime="20170731 14:54:27.884" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:27.884" starttime="20170731 14:54:27.613" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:54:27.889" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:54:27.889" starttime="20170731 14:54:27.889" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:54:27.890" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:54:27.890" starttime="20170731 14:54:27.890" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:54:27.891" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:54:27.891" starttime="20170731 14:54:27.891" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:54:27.892" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:54:27.892" starttime="20170731 14:54:27.892" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:54:28.113" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:54:28.113" starttime="20170731 14:54:27.893" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:28.113" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:54:28.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:28.113" starttime="20170731 14:54:27.893" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:54:28.114" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:28.114" starttime="20170731 14:54:28.113" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:28.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:28.114" starttime="20170731 14:54:28.114" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:28.114" starttime="20170731 14:54:27.888" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:28.115" starttime="20170731 14:54:27.887" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:28.115" starttime="20170731 14:54:27.886" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:54:28.115" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:54:28.115" starttime="20170731 14:54:28.115" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:28.117" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:28.117" starttime="20170731 14:54:28.117" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:28.118" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:28.118" starttime="20170731 14:54:28.118" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:28.118" starttime="20170731 14:54:28.117" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:28.118" starttime="20170731 14:54:28.116" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:28.118" starttime="20170731 14:54:28.115" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:54:28.205" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:54:28.205" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:28.205" starttime="20170731 14:54:28.119" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:28.207" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:28.207" starttime="20170731 14:54:28.206" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:28.208" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:28.208" starttime="20170731 14:54:28.208" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:28.208" starttime="20170731 14:54:28.207" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:28.208" starttime="20170731 14:54:28.206" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:28.209" starttime="20170731 14:54:28.206" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:54:28.209" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:54:28.209" starttime="20170731 14:54:28.209" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:28.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:28.209" starttime="20170731 14:54:27.885" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:28.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:28.210" starttime="20170731 14:54:28.209" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:54:28.210" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:54:28.210" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:54:28.211" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:54:28.211" starttime="20170731 14:54:28.210" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:28.211" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:54:28.211" starttime="20170731 14:54:27.885" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:28.211" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:54:28.211" starttime="20170731 14:54:27.884" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:54:28.212" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:54:28.212" starttime="20170731 14:54:28.211" status="FAIL"></status>
</kw>
<status endtime="20170731 14:54:28.212" starttime="20170731 14:54:27.612" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:54:38.217" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:54:38.217" starttime="20170731 14:54:38.216" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:54:38.217" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:54:38.217" starttime="20170731 14:54:38.217" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:54:38.218" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:54:38.218" starttime="20170731 14:54:38.218" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:54:38.219" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:54:38.219" starttime="20170731 14:54:38.218" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:54:38.408" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:54:38.408" starttime="20170731 14:54:38.219" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:38.408" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:54:38.408" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:38.408" starttime="20170731 14:54:38.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:54:38.409" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:38.409" starttime="20170731 14:54:38.409" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:38.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:38.410" starttime="20170731 14:54:38.410" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.410" starttime="20170731 14:54:38.216" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.411" starttime="20170731 14:54:38.215" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.411" starttime="20170731 14:54:38.215" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:54:38.412" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:54:38.412" starttime="20170731 14:54:38.411" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:38.415" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:38.415" starttime="20170731 14:54:38.414" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:38.416" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:38.416" starttime="20170731 14:54:38.416" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.416" starttime="20170731 14:54:38.415" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.416" starttime="20170731 14:54:38.413" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.417" starttime="20170731 14:54:38.412" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:54:38.493" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:54:38.493" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:38.493" starttime="20170731 14:54:38.417" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:38.495" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:38.495" starttime="20170731 14:54:38.494" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:38.496" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:38.496" starttime="20170731 14:54:38.495" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.496" starttime="20170731 14:54:38.495" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.496" starttime="20170731 14:54:38.494" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.496" starttime="20170731 14:54:38.493" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:54:38.496" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:54:38.496" starttime="20170731 14:54:38.496" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:38.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:38.497" starttime="20170731 14:54:38.214" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:38.497" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:38.497" starttime="20170731 14:54:38.497" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:54:38.498" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:54:38.498" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:54:38.498" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:54:38.498" starttime="20170731 14:54:38.497" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:38.498" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:54:38.498" starttime="20170731 14:54:38.214" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:38.499" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:54:38.499" starttime="20170731 14:54:38.213" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:54:38.499" starttime="20170731 14:54:38.499" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.499" starttime="20170731 14:54:38.213" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:54:38.503" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:54:38.503" starttime="20170731 14:54:38.502" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:54:38.504" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:54:38.504" starttime="20170731 14:54:38.504" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:54:38.505" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:54:38.505" starttime="20170731 14:54:38.504" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:54:38.505" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:54:38.505" starttime="20170731 14:54:38.505" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:54:38.707" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:54:38.707" starttime="20170731 14:54:38.506" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:38.708" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:54:38.708" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:38.708" starttime="20170731 14:54:38.505" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:54:38.708" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:38.708" starttime="20170731 14:54:38.708" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:38.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:38.709" starttime="20170731 14:54:38.709" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.710" starttime="20170731 14:54:38.502" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.710" starttime="20170731 14:54:38.501" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.710" starttime="20170731 14:54:38.501" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:54:38.711" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:54:38.711" starttime="20170731 14:54:38.710" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:38.714" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:38.714" starttime="20170731 14:54:38.713" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:38.715" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:38.715" starttime="20170731 14:54:38.715" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.715" starttime="20170731 14:54:38.714" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.715" starttime="20170731 14:54:38.712" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.715" starttime="20170731 14:54:38.711" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:54:38.779" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:54:38.779" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:38.779" starttime="20170731 14:54:38.716" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:38.780" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:38.781" starttime="20170731 14:54:38.780" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:38.781" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:38.781" starttime="20170731 14:54:38.781" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.782" starttime="20170731 14:54:38.781" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.782" starttime="20170731 14:54:38.780" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:38.782" starttime="20170731 14:54:38.779" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:54:38.782" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:54:38.782" starttime="20170731 14:54:38.782" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:38.782" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:38.782" starttime="20170731 14:54:38.500" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:38.783" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:38.783" starttime="20170731 14:54:38.783" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:54:38.784" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:54:38.784" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:54:38.784" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:54:38.784" starttime="20170731 14:54:38.783" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:38.784" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:54:38.784" starttime="20170731 14:54:38.500" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:38.784" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:54:38.785" starttime="20170731 14:54:38.499" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:54:38.785" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:54:38.785" starttime="20170731 14:54:38.785" status="FAIL"></status>
</kw>
<status endtime="20170731 14:54:38.785" starttime="20170731 14:54:38.212" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:54:48.794" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:54:48.794" starttime="20170731 14:54:48.793" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:54:48.795" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:54:48.795" starttime="20170731 14:54:48.794" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:54:48.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:54:48.795" starttime="20170731 14:54:48.795" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:54:48.796" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:54:48.796" starttime="20170731 14:54:48.796" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:54:49.086" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:54:49.086" starttime="20170731 14:54:48.797" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:49.087" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:54:49.087" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:49.087" starttime="20170731 14:54:48.796" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:54:49.087" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:49.087" starttime="20170731 14:54:49.087" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:49.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:49.088" starttime="20170731 14:54:49.088" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.088" starttime="20170731 14:54:48.793" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.088" starttime="20170731 14:54:48.792" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.088" starttime="20170731 14:54:48.792" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:54:49.089" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:54:49.089" starttime="20170731 14:54:49.088" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:49.091" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:49.091" starttime="20170731 14:54:49.090" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:49.092" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:49.092" starttime="20170731 14:54:49.092" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.092" starttime="20170731 14:54:49.091" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.092" starttime="20170731 14:54:49.090" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.092" starttime="20170731 14:54:49.089" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:54:49.155" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:54:49.155" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:49.155" starttime="20170731 14:54:49.093" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:49.157" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:49.157" starttime="20170731 14:54:49.156" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:49.158" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:49.158" starttime="20170731 14:54:49.158" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.158" starttime="20170731 14:54:49.157" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.158" starttime="20170731 14:54:49.156" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.158" starttime="20170731 14:54:49.156" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:54:49.159" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:54:49.159" starttime="20170731 14:54:49.158" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:49.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:49.159" starttime="20170731 14:54:48.791" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:49.159" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:49.160" starttime="20170731 14:54:49.159" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:54:49.160" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:54:49.160" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:54:49.160" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:54:49.160" starttime="20170731 14:54:49.160" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:49.160" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:54:49.161" starttime="20170731 14:54:48.791" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:49.161" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:54:49.161" starttime="20170731 14:54:48.786" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:54:49.161" starttime="20170731 14:54:49.161" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.161" starttime="20170731 14:54:48.786" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:54:49.165" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:54:49.165" starttime="20170731 14:54:49.165" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:54:49.166" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:54:49.166" starttime="20170731 14:54:49.165" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:54:49.166" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:54:49.166" starttime="20170731 14:54:49.166" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:54:49.167" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:54:49.167" starttime="20170731 14:54:49.167" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:54:49.358" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:54:49.358" starttime="20170731 14:54:49.168" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:49.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:54:49.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:49.358" starttime="20170731 14:54:49.167" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:54:49.359" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:49.359" starttime="20170731 14:54:49.359" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:49.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:49.360" starttime="20170731 14:54:49.359" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.360" starttime="20170731 14:54:49.164" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.360" starttime="20170731 14:54:49.164" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.360" starttime="20170731 14:54:49.163" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:54:49.361" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:54:49.361" starttime="20170731 14:54:49.360" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:49.363" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:49.363" starttime="20170731 14:54:49.362" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:49.363" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:49.364" starttime="20170731 14:54:49.363" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.364" starttime="20170731 14:54:49.363" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.364" starttime="20170731 14:54:49.361" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.364" starttime="20170731 14:54:49.361" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:54:49.429" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:54:49.429" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:49.429" starttime="20170731 14:54:49.364" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:49.431" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:49.431" starttime="20170731 14:54:49.431" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:49.433" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:49.433" starttime="20170731 14:54:49.432" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.433" starttime="20170731 14:54:49.432" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.433" starttime="20170731 14:54:49.430" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:49.433" starttime="20170731 14:54:49.430" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:54:49.434" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:54:49.434" starttime="20170731 14:54:49.433" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:49.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:49.434" starttime="20170731 14:54:49.162" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:49.434" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:49.435" starttime="20170731 14:54:49.434" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:54:49.435" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:54:49.435" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:54:49.435" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:54:49.435" starttime="20170731 14:54:49.435" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:49.436" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:54:49.436" starttime="20170731 14:54:49.162" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:49.436" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:54:49.436" starttime="20170731 14:54:49.162" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:54:49.436" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:54:49.437" starttime="20170731 14:54:49.436" status="FAIL"></status>
</kw>
<status endtime="20170731 14:54:49.437" starttime="20170731 14:54:48.786" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:54:59.442" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:54:59.442" starttime="20170731 14:54:59.441" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:54:59.443" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:54:59.443" starttime="20170731 14:54:59.443" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:54:59.444" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:54:59.444" starttime="20170731 14:54:59.443" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:54:59.445" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:54:59.445" starttime="20170731 14:54:59.445" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:54:59.700" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:54:59.700" starttime="20170731 14:54:59.446" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:59.700" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:54:59.700" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:59.700" starttime="20170731 14:54:59.446" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:54:59.701" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:59.701" starttime="20170731 14:54:59.700" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:59.701" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:59.701" starttime="20170731 14:54:59.701" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:59.701" starttime="20170731 14:54:59.440" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:59.702" starttime="20170731 14:54:59.440" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:59.702" starttime="20170731 14:54:59.439" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:54:59.702" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:54:59.702" starttime="20170731 14:54:59.702" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:59.704" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:59.704" starttime="20170731 14:54:59.704" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:59.705" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:54:59.705" starttime="20170731 14:54:59.705" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:59.705" starttime="20170731 14:54:59.705" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:59.706" starttime="20170731 14:54:59.703" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:59.706" starttime="20170731 14:54:59.702" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:54:59.811" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:54:59.811" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:59.811" starttime="20170731 14:54:59.706" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:54:59.813" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:59.813" starttime="20170731 14:54:59.812" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:54:59.814" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:54:59.814" starttime="20170731 14:54:59.814" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:59.814" starttime="20170731 14:54:59.813" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:59.814" starttime="20170731 14:54:59.812" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:59.814" starttime="20170731 14:54:59.811" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:54:59.815" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:54:59.815" starttime="20170731 14:54:59.814" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:59.815" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:54:59.815" starttime="20170731 14:54:59.439" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:54:59.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:54:59.816" starttime="20170731 14:54:59.815" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:54:59.816" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:54:59.816" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:54:59.816" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:54:59.816" starttime="20170731 14:54:59.816" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:59.816" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:54:59.817" starttime="20170731 14:54:59.438" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:54:59.817" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:54:59.817" starttime="20170731 14:54:59.438" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:54:59.817" starttime="20170731 14:54:59.817" status="PASS"></status>
</kw>
<status endtime="20170731 14:54:59.817" starttime="20170731 14:54:59.437" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:54:59.821" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:54:59.821" starttime="20170731 14:54:59.821" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:54:59.822" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:54:59.822" starttime="20170731 14:54:59.821" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:54:59.822" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:54:59.822" starttime="20170731 14:54:59.822" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:54:59.823" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:54:59.823" starttime="20170731 14:54:59.823" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:55:00.016" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:55:00.016" starttime="20170731 14:54:59.824" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:00.016" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:55:00.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:00.017" starttime="20170731 14:54:59.823" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:55:00.017" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:00.017" starttime="20170731 14:55:00.017" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:00.018" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:00.018" starttime="20170731 14:55:00.017" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:00.018" starttime="20170731 14:54:59.820" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:00.018" starttime="20170731 14:54:59.820" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:00.018" starttime="20170731 14:54:59.819" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:55:00.019" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:55:00.019" starttime="20170731 14:55:00.018" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:00.021" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:00.021" starttime="20170731 14:55:00.020" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:00.022" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:00.022" starttime="20170731 14:55:00.022" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:00.022" starttime="20170731 14:55:00.021" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:00.022" starttime="20170731 14:55:00.019" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:00.022" starttime="20170731 14:55:00.019" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:55:00.104" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:55:00.104" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:00.104" starttime="20170731 14:55:00.023" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:00.105" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:00.105" starttime="20170731 14:55:00.105" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:00.106" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:00.106" starttime="20170731 14:55:00.106" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:00.106" starttime="20170731 14:55:00.106" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:00.107" starttime="20170731 14:55:00.104" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:00.107" starttime="20170731 14:55:00.104" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:55:00.107" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:55:00.107" starttime="20170731 14:55:00.107" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:00.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:00.107" starttime="20170731 14:54:59.818" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:00.108" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:00.108" starttime="20170731 14:55:00.108" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:55:00.109" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:55:00.109" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:55:00.109" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:55:00.109" starttime="20170731 14:55:00.108" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:00.109" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:55:00.109" starttime="20170731 14:54:59.818" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:00.109" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:55:00.109" starttime="20170731 14:54:59.818" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:55:00.110" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:55:00.110" starttime="20170731 14:55:00.110" status="FAIL"></status>
</kw>
<status endtime="20170731 14:55:00.110" starttime="20170731 14:54:59.437" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:55:10.115" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:55:10.115" starttime="20170731 14:55:10.115" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:55:10.116" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:55:10.116" starttime="20170731 14:55:10.116" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:55:10.117" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:55:10.117" starttime="20170731 14:55:10.116" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:55:10.118" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:55:10.118" starttime="20170731 14:55:10.117" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:55:10.317" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:55:10.317" starttime="20170731 14:55:10.118" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:10.317" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:55:10.317" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:10.317" starttime="20170731 14:55:10.118" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:55:10.318" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:10.318" starttime="20170731 14:55:10.318" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:10.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:10.319" starttime="20170731 14:55:10.318" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.319" starttime="20170731 14:55:10.114" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.319" starttime="20170731 14:55:10.114" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.319" starttime="20170731 14:55:10.113" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:55:10.320" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:55:10.320" starttime="20170731 14:55:10.319" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:10.322" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:10.322" starttime="20170731 14:55:10.321" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:10.323" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:10.323" starttime="20170731 14:55:10.322" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.323" starttime="20170731 14:55:10.322" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.323" starttime="20170731 14:55:10.321" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.323" starttime="20170731 14:55:10.320" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:55:10.413" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:55:10.413" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:10.413" starttime="20170731 14:55:10.323" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:10.415" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:10.415" starttime="20170731 14:55:10.414" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:10.415" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:10.416" starttime="20170731 14:55:10.415" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.416" starttime="20170731 14:55:10.415" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.416" starttime="20170731 14:55:10.414" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.416" starttime="20170731 14:55:10.413" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:55:10.416" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:55:10.416" starttime="20170731 14:55:10.416" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:10.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:10.417" starttime="20170731 14:55:10.112" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:10.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:10.417" starttime="20170731 14:55:10.417" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:55:10.418" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:55:10.418" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:55:10.418" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:55:10.418" starttime="20170731 14:55:10.418" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:10.418" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:55:10.418" starttime="20170731 14:55:10.112" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:10.419" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:55:10.419" starttime="20170731 14:55:10.111" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:55:10.419" starttime="20170731 14:55:10.419" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.419" starttime="20170731 14:55:10.111" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:55:10.423" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:55:10.424" starttime="20170731 14:55:10.423" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:55:10.424" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:55:10.424" starttime="20170731 14:55:10.424" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:55:10.425" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:55:10.425" starttime="20170731 14:55:10.425" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:55:10.426" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:55:10.426" starttime="20170731 14:55:10.425" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:55:10.685" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:55:10.685" starttime="20170731 14:55:10.426" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:10.685" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:55:10.685" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:10.685" starttime="20170731 14:55:10.426" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:55:10.686" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:10.686" starttime="20170731 14:55:10.686" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:10.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:10.687" starttime="20170731 14:55:10.686" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.687" starttime="20170731 14:55:10.423" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.687" starttime="20170731 14:55:10.422" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.687" starttime="20170731 14:55:10.421" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:55:10.688" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:55:10.688" starttime="20170731 14:55:10.687" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:10.690" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:10.690" starttime="20170731 14:55:10.689" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:10.690" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:10.691" starttime="20170731 14:55:10.690" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.691" starttime="20170731 14:55:10.690" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.691" starttime="20170731 14:55:10.688" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.691" starttime="20170731 14:55:10.688" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:55:10.754" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:55:10.754" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:10.754" starttime="20170731 14:55:10.691" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:10.755" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:10.755" starttime="20170731 14:55:10.755" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:10.757" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:10.757" starttime="20170731 14:55:10.756" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.757" starttime="20170731 14:55:10.756" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.757" starttime="20170731 14:55:10.754" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:10.757" starttime="20170731 14:55:10.754" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:55:10.757" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:55:10.757" starttime="20170731 14:55:10.757" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:10.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:10.758" starttime="20170731 14:55:10.421" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:10.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:10.759" starttime="20170731 14:55:10.758" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:55:10.759" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:55:10.759" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:55:10.760" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:55:10.760" starttime="20170731 14:55:10.759" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:10.760" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:55:10.760" starttime="20170731 14:55:10.420" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:10.760" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:55:10.760" starttime="20170731 14:55:10.420" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:55:10.761" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:55:10.761" starttime="20170731 14:55:10.761" status="FAIL"></status>
</kw>
<status endtime="20170731 14:55:10.762" starttime="20170731 14:55:10.111" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:55:20.767" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:55:20.767" starttime="20170731 14:55:20.766" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:55:20.767" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:55:20.767" starttime="20170731 14:55:20.767" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:55:20.768" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:55:20.768" starttime="20170731 14:55:20.768" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:55:20.769" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:55:20.769" starttime="20170731 14:55:20.768" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:55:20.990" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:55:20.991" starttime="20170731 14:55:20.769" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:20.991" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:55:20.991" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:20.991" starttime="20170731 14:55:20.769" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:55:20.991" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:20.991" starttime="20170731 14:55:20.991" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:20.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:20.992" starttime="20170731 14:55:20.992" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:20.992" starttime="20170731 14:55:20.766" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:20.992" starttime="20170731 14:55:20.765" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:20.993" starttime="20170731 14:55:20.765" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:55:20.993" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:55:20.993" starttime="20170731 14:55:20.993" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:20.995" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:20.995" starttime="20170731 14:55:20.995" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:20.996" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:20.996" starttime="20170731 14:55:20.996" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:20.996" starttime="20170731 14:55:20.995" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:20.997" starttime="20170731 14:55:20.994" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:20.997" starttime="20170731 14:55:20.993" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:55:21.060" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:55:21.060" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:21.060" starttime="20170731 14:55:20.997" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:21.062" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:21.062" starttime="20170731 14:55:21.061" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:21.063" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:21.063" starttime="20170731 14:55:21.062" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.063" starttime="20170731 14:55:21.062" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.063" starttime="20170731 14:55:21.061" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.063" starttime="20170731 14:55:21.060" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:55:21.063" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:55:21.063" starttime="20170731 14:55:21.063" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:21.064" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:21.064" starttime="20170731 14:55:20.764" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:21.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:21.064" starttime="20170731 14:55:21.064" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:55:21.065" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:55:21.065" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:55:21.065" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:55:21.065" starttime="20170731 14:55:21.065" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:21.065" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:55:21.066" starttime="20170731 14:55:20.763" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:21.066" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:55:21.066" starttime="20170731 14:55:20.763" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:55:21.066" starttime="20170731 14:55:21.066" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.066" starttime="20170731 14:55:20.763" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:55:21.070" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:55:21.071" starttime="20170731 14:55:21.070" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:55:21.071" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:55:21.071" starttime="20170731 14:55:21.071" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:55:21.072" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:55:21.072" starttime="20170731 14:55:21.072" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:55:21.073" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:55:21.073" starttime="20170731 14:55:21.072" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:55:21.259" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:55:21.259" starttime="20170731 14:55:21.073" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:21.260" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:55:21.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:21.260" starttime="20170731 14:55:21.073" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:55:21.260" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:21.260" starttime="20170731 14:55:21.260" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:21.261" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:21.261" starttime="20170731 14:55:21.261" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.261" starttime="20170731 14:55:21.069" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.261" starttime="20170731 14:55:21.069" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.261" starttime="20170731 14:55:21.068" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:55:21.262" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:55:21.262" starttime="20170731 14:55:21.262" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:21.264" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:21.264" starttime="20170731 14:55:21.263" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:21.265" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:21.265" starttime="20170731 14:55:21.265" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.265" starttime="20170731 14:55:21.264" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.265" starttime="20170731 14:55:21.263" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.265" starttime="20170731 14:55:21.262" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:55:21.329" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:55:21.329" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:21.329" starttime="20170731 14:55:21.266" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:21.331" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:21.331" starttime="20170731 14:55:21.331" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:21.332" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:21.332" starttime="20170731 14:55:21.332" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.332" starttime="20170731 14:55:21.331" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.333" starttime="20170731 14:55:21.330" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:21.333" starttime="20170731 14:55:21.330" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:55:21.333" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:55:21.333" starttime="20170731 14:55:21.333" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:21.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:21.333" starttime="20170731 14:55:21.068" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:21.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:21.334" starttime="20170731 14:55:21.334" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:55:21.335" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:55:21.335" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:55:21.335" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:55:21.335" starttime="20170731 14:55:21.334" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:21.335" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:55:21.335" starttime="20170731 14:55:21.067" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:21.335" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:55:21.335" starttime="20170731 14:55:21.067" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:55:21.336" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:55:21.336" starttime="20170731 14:55:21.336" status="FAIL"></status>
</kw>
<status endtime="20170731 14:55:21.336" starttime="20170731 14:55:20.762" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:55:31.342" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:55:31.342" starttime="20170731 14:55:31.342" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:55:31.343" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:55:31.343" starttime="20170731 14:55:31.343" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:55:31.343" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:55:31.344" starttime="20170731 14:55:31.343" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:55:31.344" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:55:31.344" starttime="20170731 14:55:31.344" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:55:31.535" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:55:31.535" starttime="20170731 14:55:31.345" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:31.535" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:55:31.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:31.535" starttime="20170731 14:55:31.345" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:55:31.536" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:31.536" starttime="20170731 14:55:31.535" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:31.537" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:31.537" starttime="20170731 14:55:31.536" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.537" starttime="20170731 14:55:31.341" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.537" starttime="20170731 14:55:31.341" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.537" starttime="20170731 14:55:31.340" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:55:31.537" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:55:31.538" starttime="20170731 14:55:31.537" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:31.540" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:31.540" starttime="20170731 14:55:31.539" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:31.543" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:31.543" starttime="20170731 14:55:31.540" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.543" starttime="20170731 14:55:31.540" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.543" starttime="20170731 14:55:31.538" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.544" starttime="20170731 14:55:31.538" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:55:31.626" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:55:31.626" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:31.626" starttime="20170731 14:55:31.544" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:31.628" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:31.628" starttime="20170731 14:55:31.628" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:31.629" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:31.629" starttime="20170731 14:55:31.629" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.629" starttime="20170731 14:55:31.628" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.630" starttime="20170731 14:55:31.627" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.630" starttime="20170731 14:55:31.627" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:55:31.630" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:55:31.630" starttime="20170731 14:55:31.630" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:31.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:31.630" starttime="20170731 14:55:31.339" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:31.631" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:31.631" starttime="20170731 14:55:31.631" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:55:31.631" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:55:31.631" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:55:31.632" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:55:31.632" starttime="20170731 14:55:31.631" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:31.632" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:55:31.632" starttime="20170731 14:55:31.338" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:31.632" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:55:31.632" starttime="20170731 14:55:31.338" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:55:31.633" starttime="20170731 14:55:31.633" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.633" starttime="20170731 14:55:31.337" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:55:31.636" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:55:31.637" starttime="20170731 14:55:31.636" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:55:31.637" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:55:31.637" starttime="20170731 14:55:31.637" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:55:31.638" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:55:31.638" starttime="20170731 14:55:31.638" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:55:31.639" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:55:31.639" starttime="20170731 14:55:31.638" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:55:31.839" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:55:31.839" starttime="20170731 14:55:31.639" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:31.839" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:55:31.839" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:31.839" starttime="20170731 14:55:31.639" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:55:31.840" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:31.840" starttime="20170731 14:55:31.839" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:31.840" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:31.841" starttime="20170731 14:55:31.840" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.841" starttime="20170731 14:55:31.636" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.841" starttime="20170731 14:55:31.635" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.841" starttime="20170731 14:55:31.635" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:55:31.841" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:55:31.841" starttime="20170731 14:55:31.841" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:31.843" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:31.843" starttime="20170731 14:55:31.843" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:31.844" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:31.845" starttime="20170731 14:55:31.844" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.845" starttime="20170731 14:55:31.844" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.845" starttime="20170731 14:55:31.842" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.845" starttime="20170731 14:55:31.842" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:55:31.907" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:55:31.907" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:31.907" starttime="20170731 14:55:31.845" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:31.909" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:31.909" starttime="20170731 14:55:31.909" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:31.910" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:31.910" starttime="20170731 14:55:31.910" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.910" starttime="20170731 14:55:31.909" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.910" starttime="20170731 14:55:31.908" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:31.911" starttime="20170731 14:55:31.908" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:55:31.911" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:55:31.911" starttime="20170731 14:55:31.911" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:31.911" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:31.911" starttime="20170731 14:55:31.634" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:31.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:31.912" starttime="20170731 14:55:31.911" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:55:31.912" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:55:31.912" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:55:31.913" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:55:31.913" starttime="20170731 14:55:31.912" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:31.913" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:55:31.913" starttime="20170731 14:55:31.634" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:31.913" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:55:31.913" starttime="20170731 14:55:31.633" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:55:31.914" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:55:31.914" starttime="20170731 14:55:31.913" status="FAIL"></status>
</kw>
<status endtime="20170731 14:55:31.914" starttime="20170731 14:55:31.337" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:55:41.920" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:55:41.920" starttime="20170731 14:55:41.919" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:55:41.920" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:55:41.921" starttime="20170731 14:55:41.920" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:55:41.921" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:55:41.921" starttime="20170731 14:55:41.921" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:55:41.922" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:55:41.922" starttime="20170731 14:55:41.921" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:55:42.109" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:55:42.109" starttime="20170731 14:55:41.923" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:42.109" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:55:42.109" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:42.109" starttime="20170731 14:55:41.922" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:55:42.110" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:42.110" starttime="20170731 14:55:42.110" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:42.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:42.111" starttime="20170731 14:55:42.110" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.111" starttime="20170731 14:55:41.918" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.111" starttime="20170731 14:55:41.918" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.111" starttime="20170731 14:55:41.917" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:55:42.112" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:55:42.112" starttime="20170731 14:55:42.111" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:42.114" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:42.114" starttime="20170731 14:55:42.113" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:42.115" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:42.115" starttime="20170731 14:55:42.114" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.115" starttime="20170731 14:55:42.114" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.115" starttime="20170731 14:55:42.112" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.115" starttime="20170731 14:55:42.112" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:55:42.178" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:55:42.178" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:42.178" starttime="20170731 14:55:42.115" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:42.179" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:42.180" starttime="20170731 14:55:42.179" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:42.181" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:42.181" starttime="20170731 14:55:42.180" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.181" starttime="20170731 14:55:42.180" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.181" starttime="20170731 14:55:42.179" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.181" starttime="20170731 14:55:42.178" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:55:42.181" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:55:42.182" starttime="20170731 14:55:42.181" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:42.182" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:42.182" starttime="20170731 14:55:41.917" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:42.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:42.182" starttime="20170731 14:55:42.182" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:55:42.183" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:55:42.183" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:55:42.183" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:55:42.183" starttime="20170731 14:55:42.183" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:42.183" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:55:42.184" starttime="20170731 14:55:41.916" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:42.184" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:55:42.184" starttime="20170731 14:55:41.916" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:55:42.184" starttime="20170731 14:55:42.184" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.185" starttime="20170731 14:55:41.915" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:55:42.188" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:55:42.188" starttime="20170731 14:55:42.188" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:55:42.189" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:55:42.189" starttime="20170731 14:55:42.189" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:55:42.189" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:55:42.189" starttime="20170731 14:55:42.189" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:55:42.190" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:55:42.190" starttime="20170731 14:55:42.190" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:55:42.442" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:55:42.442" starttime="20170731 14:55:42.191" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:42.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:55:42.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:42.442" starttime="20170731 14:55:42.190" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:55:42.443" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:42.443" starttime="20170731 14:55:42.443" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:42.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:42.444" starttime="20170731 14:55:42.443" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.444" starttime="20170731 14:55:42.187" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.444" starttime="20170731 14:55:42.187" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.444" starttime="20170731 14:55:42.186" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:55:42.445" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:55:42.445" starttime="20170731 14:55:42.444" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:42.447" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:42.447" starttime="20170731 14:55:42.446" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:42.448" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:42.448" starttime="20170731 14:55:42.448" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.448" starttime="20170731 14:55:42.447" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.448" starttime="20170731 14:55:42.445" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.448" starttime="20170731 14:55:42.445" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:55:42.523" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:55:42.523" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:42.523" starttime="20170731 14:55:42.449" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:42.525" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:42.525" starttime="20170731 14:55:42.525" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:42.526" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:42.526" starttime="20170731 14:55:42.526" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.526" starttime="20170731 14:55:42.525" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.526" starttime="20170731 14:55:42.524" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:42.527" starttime="20170731 14:55:42.524" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:55:42.527" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:55:42.527" starttime="20170731 14:55:42.527" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:42.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:42.527" starttime="20170731 14:55:42.186" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:42.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:42.528" starttime="20170731 14:55:42.527" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:55:42.528" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:55:42.528" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:55:42.529" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:55:42.529" starttime="20170731 14:55:42.528" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:42.529" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:55:42.529" starttime="20170731 14:55:42.185" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:42.529" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:55:42.529" starttime="20170731 14:55:42.185" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:55:42.530" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:55:42.530" starttime="20170731 14:55:42.529" status="FAIL"></status>
</kw>
<status endtime="20170731 14:55:42.530" starttime="20170731 14:55:41.915" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:55:52.535" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:55:52.535" starttime="20170731 14:55:52.534" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:55:52.536" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:55:52.536" starttime="20170731 14:55:52.535" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:55:52.536" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:55:52.536" starttime="20170731 14:55:52.536" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:55:52.537" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:55:52.537" starttime="20170731 14:55:52.537" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:55:52.732" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:55:52.732" starttime="20170731 14:55:52.538" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:52.732" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:55:52.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:52.733" starttime="20170731 14:55:52.538" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:55:52.733" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:52.733" starttime="20170731 14:55:52.733" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:52.734" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:52.734" starttime="20170731 14:55:52.733" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:52.734" starttime="20170731 14:55:52.534" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:52.734" starttime="20170731 14:55:52.533" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:52.734" starttime="20170731 14:55:52.533" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:55:52.735" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:55:52.735" starttime="20170731 14:55:52.734" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:52.737" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:52.737" starttime="20170731 14:55:52.736" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:52.738" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:52.738" starttime="20170731 14:55:52.737" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:52.738" starttime="20170731 14:55:52.737" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:52.738" starttime="20170731 14:55:52.735" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:52.738" starttime="20170731 14:55:52.735" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:55:52.800" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:55:52.801" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:52.801" starttime="20170731 14:55:52.738" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:52.802" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:52.802" starttime="20170731 14:55:52.802" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:52.803" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:52.803" starttime="20170731 14:55:52.803" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:52.803" starttime="20170731 14:55:52.802" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:52.803" starttime="20170731 14:55:52.801" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:52.804" starttime="20170731 14:55:52.801" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:55:52.804" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:55:52.804" starttime="20170731 14:55:52.804" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:52.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:52.804" starttime="20170731 14:55:52.532" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:52.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:52.805" starttime="20170731 14:55:52.805" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:55:52.805" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:55:52.806" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:55:52.806" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:55:52.806" starttime="20170731 14:55:52.805" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:52.806" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:55:52.806" starttime="20170731 14:55:52.532" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:52.806" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:55:52.806" starttime="20170731 14:55:52.531" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:55:52.807" starttime="20170731 14:55:52.807" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:52.807" starttime="20170731 14:55:52.531" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:55:52.811" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:55:52.811" starttime="20170731 14:55:52.811" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:55:52.812" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:55:52.812" starttime="20170731 14:55:52.811" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:55:52.812" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:55:52.812" starttime="20170731 14:55:52.812" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:55:52.813" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:55:52.813" starttime="20170731 14:55:52.813" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:55:53.041" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:55:53.041" starttime="20170731 14:55:52.814" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:53.041" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:55:53.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:53.041" starttime="20170731 14:55:52.813" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:55:53.042" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:53.042" starttime="20170731 14:55:53.042" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:53.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:53.043" starttime="20170731 14:55:53.042" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:53.043" starttime="20170731 14:55:52.810" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:53.043" starttime="20170731 14:55:52.809" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:53.043" starttime="20170731 14:55:52.809" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:55:53.044" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:55:53.044" starttime="20170731 14:55:53.043" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:53.046" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:53.046" starttime="20170731 14:55:53.045" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:53.047" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:55:53.047" starttime="20170731 14:55:53.046" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:53.047" starttime="20170731 14:55:53.046" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:53.047" starttime="20170731 14:55:53.044" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:53.047" starttime="20170731 14:55:53.044" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:55:53.153" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:55:53.153" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:53.153" starttime="20170731 14:55:53.047" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:55:53.155" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:53.155" starttime="20170731 14:55:53.154" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:55:53.156" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:55:53.156" starttime="20170731 14:55:53.156" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:53.156" starttime="20170731 14:55:53.155" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:53.156" starttime="20170731 14:55:53.154" status="PASS"></status>
</kw>
<status endtime="20170731 14:55:53.157" starttime="20170731 14:55:53.154" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:55:53.157" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:55:53.157" starttime="20170731 14:55:53.157" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:53.157" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:55:53.157" starttime="20170731 14:55:52.808" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:55:53.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:55:53.158" starttime="20170731 14:55:53.157" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:55:53.158" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:55:53.158" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:55:53.159" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:55:53.159" starttime="20170731 14:55:53.158" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:53.159" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:55:53.159" starttime="20170731 14:55:52.808" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:55:53.159" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:55:53.159" starttime="20170731 14:55:52.807" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:55:53.160" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:55:53.160" starttime="20170731 14:55:53.159" status="FAIL"></status>
</kw>
<status endtime="20170731 14:55:53.160" starttime="20170731 14:55:52.530" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:56:03.165" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:56:03.165" starttime="20170731 14:56:03.165" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:56:03.166" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:56:03.166" starttime="20170731 14:56:03.166" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:56:03.167" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:56:03.167" starttime="20170731 14:56:03.166" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:56:03.167" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:56:03.167" starttime="20170731 14:56:03.167" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:56:03.358" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:56:03.358" starttime="20170731 14:56:03.168" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:03.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:56:03.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:03.358" starttime="20170731 14:56:03.168" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:56:03.359" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:03.359" starttime="20170731 14:56:03.358" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:03.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:03.359" starttime="20170731 14:56:03.359" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.359" starttime="20170731 14:56:03.164" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.360" starttime="20170731 14:56:03.164" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.360" starttime="20170731 14:56:03.163" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:56:03.360" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:56:03.360" starttime="20170731 14:56:03.360" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:03.362" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:03.362" starttime="20170731 14:56:03.362" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:03.363" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:03.363" starttime="20170731 14:56:03.363" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.363" starttime="20170731 14:56:03.362" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.363" starttime="20170731 14:56:03.361" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.364" starttime="20170731 14:56:03.361" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:56:03.426" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:56:03.427" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:03.427" starttime="20170731 14:56:03.364" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:03.428" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:03.428" starttime="20170731 14:56:03.428" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:03.429" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:03.429" starttime="20170731 14:56:03.429" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.429" starttime="20170731 14:56:03.428" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.430" starttime="20170731 14:56:03.427" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.430" starttime="20170731 14:56:03.427" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:56:03.430" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:56:03.430" starttime="20170731 14:56:03.430" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:03.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:03.430" starttime="20170731 14:56:03.162" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:03.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:03.431" starttime="20170731 14:56:03.431" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:56:03.431" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:56:03.432" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:56:03.432" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:56:03.432" starttime="20170731 14:56:03.431" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:03.432" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:56:03.432" starttime="20170731 14:56:03.162" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:03.433" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:56:03.433" starttime="20170731 14:56:03.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:56:03.433" starttime="20170731 14:56:03.433" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.434" starttime="20170731 14:56:03.161" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:56:03.439" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:56:03.440" starttime="20170731 14:56:03.438" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:56:03.440" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:56:03.440" starttime="20170731 14:56:03.440" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:56:03.441" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:56:03.441" starttime="20170731 14:56:03.441" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:56:03.442" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:56:03.442" starttime="20170731 14:56:03.442" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:56:03.629" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:56:03.629" starttime="20170731 14:56:03.443" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:03.629" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:56:03.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:03.629" starttime="20170731 14:56:03.443" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:56:03.630" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:03.630" starttime="20170731 14:56:03.629" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:03.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:03.630" starttime="20170731 14:56:03.630" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.631" starttime="20170731 14:56:03.438" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.631" starttime="20170731 14:56:03.437" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.631" starttime="20170731 14:56:03.436" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:56:03.631" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:56:03.631" starttime="20170731 14:56:03.631" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:03.634" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:03.634" starttime="20170731 14:56:03.633" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:03.635" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:03.635" starttime="20170731 14:56:03.635" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.636" starttime="20170731 14:56:03.634" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.636" starttime="20170731 14:56:03.632" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.636" starttime="20170731 14:56:03.632" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:56:03.710" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:56:03.710" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:03.710" starttime="20170731 14:56:03.636" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:03.711" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:03.711" starttime="20170731 14:56:03.711" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:03.712" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:03.712" starttime="20170731 14:56:03.712" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.713" starttime="20170731 14:56:03.712" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.713" starttime="20170731 14:56:03.711" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:03.713" starttime="20170731 14:56:03.710" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:56:03.713" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:56:03.713" starttime="20170731 14:56:03.713" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:03.713" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:03.713" starttime="20170731 14:56:03.435" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:03.714" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:03.714" starttime="20170731 14:56:03.714" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:56:03.715" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:56:03.715" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:56:03.715" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:56:03.715" starttime="20170731 14:56:03.714" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:03.715" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:56:03.715" starttime="20170731 14:56:03.434" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:03.715" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:56:03.715" starttime="20170731 14:56:03.434" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:56:03.716" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:56:03.716" starttime="20170731 14:56:03.716" status="FAIL"></status>
</kw>
<status endtime="20170731 14:56:03.716" starttime="20170731 14:56:03.160" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:56:13.721" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:56:13.722" starttime="20170731 14:56:13.721" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:56:13.722" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:56:13.722" starttime="20170731 14:56:13.722" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:56:13.723" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:56:13.723" starttime="20170731 14:56:13.723" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:56:13.723" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:56:13.724" starttime="20170731 14:56:13.723" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:56:13.944" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:56:13.944" starttime="20170731 14:56:13.724" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:13.944" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:56:13.944" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:13.944" starttime="20170731 14:56:13.724" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:56:13.945" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:13.945" starttime="20170731 14:56:13.944" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:13.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:13.946" starttime="20170731 14:56:13.945" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:13.946" starttime="20170731 14:56:13.720" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:13.946" starttime="20170731 14:56:13.720" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:13.946" starttime="20170731 14:56:13.719" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:56:13.946" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:56:13.946" starttime="20170731 14:56:13.946" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:13.948" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:13.948" starttime="20170731 14:56:13.948" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:13.950" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:13.950" starttime="20170731 14:56:13.949" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:13.950" starttime="20170731 14:56:13.949" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:13.950" starttime="20170731 14:56:13.947" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:13.950" starttime="20170731 14:56:13.947" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:56:14.014" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:56:14.014" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:14.014" starttime="20170731 14:56:13.950" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:14.016" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:14.016" starttime="20170731 14:56:14.015" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:14.017" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:14.017" starttime="20170731 14:56:14.016" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.017" starttime="20170731 14:56:14.016" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.017" starttime="20170731 14:56:14.015" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.017" starttime="20170731 14:56:14.014" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:56:14.017" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:56:14.018" starttime="20170731 14:56:14.017" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:14.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:14.018" starttime="20170731 14:56:13.719" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:14.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:14.019" starttime="20170731 14:56:14.018" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:56:14.019" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:56:14.019" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:56:14.019" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:56:14.019" starttime="20170731 14:56:14.019" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:14.020" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:56:14.020" starttime="20170731 14:56:13.718" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:14.020" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:56:14.020" starttime="20170731 14:56:13.717" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:56:14.021" starttime="20170731 14:56:14.020" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.021" starttime="20170731 14:56:13.717" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:56:14.024" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:56:14.024" starttime="20170731 14:56:14.024" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:56:14.025" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:56:14.025" starttime="20170731 14:56:14.025" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:56:14.026" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:56:14.026" starttime="20170731 14:56:14.025" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:56:14.026" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:56:14.026" starttime="20170731 14:56:14.026" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:56:14.249" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:56:14.249" starttime="20170731 14:56:14.027" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:14.249" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:56:14.249" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:14.249" starttime="20170731 14:56:14.027" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:56:14.250" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:14.250" starttime="20170731 14:56:14.249" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:14.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:14.250" starttime="20170731 14:56:14.250" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.251" starttime="20170731 14:56:14.023" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.251" starttime="20170731 14:56:14.023" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.251" starttime="20170731 14:56:14.022" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:56:14.251" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:56:14.251" starttime="20170731 14:56:14.251" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:14.253" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:14.253" starttime="20170731 14:56:14.253" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:14.254" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:14.254" starttime="20170731 14:56:14.254" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.254" starttime="20170731 14:56:14.253" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.255" starttime="20170731 14:56:14.252" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.255" starttime="20170731 14:56:14.252" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:56:14.318" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:56:14.318" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:14.318" starttime="20170731 14:56:14.255" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:14.320" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:14.320" starttime="20170731 14:56:14.319" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:14.321" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:14.321" starttime="20170731 14:56:14.320" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.321" starttime="20170731 14:56:14.320" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.321" starttime="20170731 14:56:14.319" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:14.321" starttime="20170731 14:56:14.318" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:56:14.321" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:56:14.321" starttime="20170731 14:56:14.321" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:14.322" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:14.322" starttime="20170731 14:56:14.022" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:14.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:14.322" starttime="20170731 14:56:14.322" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:56:14.323" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:56:14.323" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:56:14.323" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:56:14.323" starttime="20170731 14:56:14.323" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:14.323" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:56:14.323" starttime="20170731 14:56:14.021" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:14.324" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:56:14.324" starttime="20170731 14:56:14.021" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:56:14.324" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:56:14.324" starttime="20170731 14:56:14.324" status="FAIL"></status>
</kw>
<status endtime="20170731 14:56:14.325" starttime="20170731 14:56:13.717" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:56:24.330" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:56:24.330" starttime="20170731 14:56:24.329" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:56:24.331" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:56:24.331" starttime="20170731 14:56:24.330" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:56:24.331" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:56:24.331" starttime="20170731 14:56:24.331" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:56:24.332" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:56:24.332" starttime="20170731 14:56:24.331" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:56:24.541" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:56:24.541" starttime="20170731 14:56:24.333" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:24.541" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:56:24.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:24.541" starttime="20170731 14:56:24.332" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:56:24.542" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:24.542" starttime="20170731 14:56:24.542" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:24.543" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:24.543" starttime="20170731 14:56:24.542" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.543" starttime="20170731 14:56:24.328" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.543" starttime="20170731 14:56:24.328" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.543" starttime="20170731 14:56:24.327" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:56:24.544" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:56:24.544" starttime="20170731 14:56:24.543" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:24.546" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:24.546" starttime="20170731 14:56:24.545" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:24.547" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:24.547" starttime="20170731 14:56:24.546" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.547" starttime="20170731 14:56:24.546" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.547" starttime="20170731 14:56:24.544" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.547" starttime="20170731 14:56:24.544" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:56:24.610" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:56:24.610" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:24.610" starttime="20170731 14:56:24.547" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:24.611" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:24.612" starttime="20170731 14:56:24.611" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:24.613" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:24.613" starttime="20170731 14:56:24.612" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.613" starttime="20170731 14:56:24.612" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.613" starttime="20170731 14:56:24.611" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.613" starttime="20170731 14:56:24.610" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:56:24.613" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:56:24.614" starttime="20170731 14:56:24.613" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:24.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:24.614" starttime="20170731 14:56:24.327" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:24.614" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:24.614" starttime="20170731 14:56:24.614" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:56:24.615" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:56:24.615" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:56:24.615" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:56:24.615" starttime="20170731 14:56:24.615" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:24.615" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:56:24.615" starttime="20170731 14:56:24.326" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:24.616" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:56:24.616" starttime="20170731 14:56:24.326" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:56:24.616" starttime="20170731 14:56:24.616" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.616" starttime="20170731 14:56:24.325" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:56:24.620" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:56:24.620" starttime="20170731 14:56:24.620" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:56:24.621" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:56:24.621" starttime="20170731 14:56:24.620" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:56:24.621" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:56:24.621" starttime="20170731 14:56:24.621" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:56:24.622" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:56:24.622" starttime="20170731 14:56:24.622" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:56:24.801" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:56:24.801" starttime="20170731 14:56:24.623" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:24.801" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:56:24.801" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:24.801" starttime="20170731 14:56:24.622" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:56:24.801" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:24.802" starttime="20170731 14:56:24.801" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:24.802" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:24.802" starttime="20170731 14:56:24.802" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.802" starttime="20170731 14:56:24.619" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.802" starttime="20170731 14:56:24.619" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.802" starttime="20170731 14:56:24.618" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:56:24.803" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:56:24.803" starttime="20170731 14:56:24.803" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:24.805" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:24.805" starttime="20170731 14:56:24.804" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:24.806" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:24.806" starttime="20170731 14:56:24.806" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.807" starttime="20170731 14:56:24.806" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.807" starttime="20170731 14:56:24.804" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.807" starttime="20170731 14:56:24.803" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:56:24.894" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:56:24.894" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:24.894" starttime="20170731 14:56:24.807" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:24.896" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:24.896" starttime="20170731 14:56:24.896" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:24.897" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:24.897" starttime="20170731 14:56:24.897" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.897" starttime="20170731 14:56:24.896" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.897" starttime="20170731 14:56:24.895" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:24.897" starttime="20170731 14:56:24.895" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:56:24.898" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:56:24.898" starttime="20170731 14:56:24.898" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:24.898" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:24.898" starttime="20170731 14:56:24.617" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:24.899" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:24.899" starttime="20170731 14:56:24.898" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:56:24.899" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:56:24.899" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:56:24.899" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:56:24.900" starttime="20170731 14:56:24.899" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:24.900" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:56:24.900" starttime="20170731 14:56:24.617" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:24.900" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:56:24.900" starttime="20170731 14:56:24.617" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:56:24.901" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:56:24.901" starttime="20170731 14:56:24.900" status="FAIL"></status>
</kw>
<status endtime="20170731 14:56:24.901" starttime="20170731 14:56:24.325" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:56:34.906" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:56:34.906" starttime="20170731 14:56:34.905" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:56:34.907" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:56:34.907" starttime="20170731 14:56:34.906" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:56:34.907" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:56:34.907" starttime="20170731 14:56:34.907" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:56:34.908" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:56:34.908" starttime="20170731 14:56:34.907" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:56:35.150" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:56:35.150" starttime="20170731 14:56:34.909" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:35.151" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:56:35.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:35.151" starttime="20170731 14:56:34.909" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:56:35.151" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:35.151" starttime="20170731 14:56:35.151" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:35.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:35.152" starttime="20170731 14:56:35.152" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.152" starttime="20170731 14:56:34.905" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.152" starttime="20170731 14:56:34.904" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.152" starttime="20170731 14:56:34.904" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:56:35.153" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:56:35.153" starttime="20170731 14:56:35.153" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:35.155" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:35.155" starttime="20170731 14:56:35.154" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:35.156" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:35.156" starttime="20170731 14:56:35.156" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.156" starttime="20170731 14:56:35.155" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.156" starttime="20170731 14:56:35.154" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.156" starttime="20170731 14:56:35.153" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:56:35.236" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:56:35.236" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:35.236" starttime="20170731 14:56:35.157" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:35.238" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:35.238" starttime="20170731 14:56:35.237" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:35.238" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:35.239" starttime="20170731 14:56:35.238" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.239" starttime="20170731 14:56:35.238" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.239" starttime="20170731 14:56:35.237" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.239" starttime="20170731 14:56:35.236" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:56:35.239" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:56:35.239" starttime="20170731 14:56:35.239" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:35.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:35.240" starttime="20170731 14:56:34.903" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:35.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:35.240" starttime="20170731 14:56:35.240" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:56:35.241" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:56:35.241" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:56:35.241" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:56:35.241" starttime="20170731 14:56:35.240" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:35.241" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:56:35.241" starttime="20170731 14:56:34.902" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:35.241" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:56:35.242" starttime="20170731 14:56:34.902" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:56:35.242" starttime="20170731 14:56:35.242" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.242" starttime="20170731 14:56:34.902" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:56:35.246" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:56:35.246" starttime="20170731 14:56:35.246" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:56:35.247" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:56:35.247" starttime="20170731 14:56:35.247" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:56:35.248" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:56:35.248" starttime="20170731 14:56:35.247" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:56:35.248" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:56:35.248" starttime="20170731 14:56:35.248" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:56:35.451" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:56:35.451" starttime="20170731 14:56:35.249" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:35.451" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:56:35.451" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:35.451" starttime="20170731 14:56:35.248" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:56:35.452" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:35.452" starttime="20170731 14:56:35.451" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:35.452" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:35.452" starttime="20170731 14:56:35.452" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.452" starttime="20170731 14:56:35.245" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.452" starttime="20170731 14:56:35.244" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.453" starttime="20170731 14:56:35.244" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:56:35.453" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:56:35.453" starttime="20170731 14:56:35.453" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:35.455" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:35.455" starttime="20170731 14:56:35.454" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:35.456" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:35.456" starttime="20170731 14:56:35.456" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.456" starttime="20170731 14:56:35.455" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.456" starttime="20170731 14:56:35.454" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.456" starttime="20170731 14:56:35.453" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:56:35.532" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:56:35.532" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:35.532" starttime="20170731 14:56:35.457" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:35.534" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:35.534" starttime="20170731 14:56:35.534" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:35.535" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:35.535" starttime="20170731 14:56:35.535" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.536" starttime="20170731 14:56:35.534" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.536" starttime="20170731 14:56:35.533" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:35.536" starttime="20170731 14:56:35.533" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:56:35.536" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:56:35.536" starttime="20170731 14:56:35.536" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:35.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:35.536" starttime="20170731 14:56:35.243" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:35.537" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:35.537" starttime="20170731 14:56:35.537" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:56:35.538" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:56:35.538" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:56:35.538" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:56:35.538" starttime="20170731 14:56:35.537" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:35.538" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:56:35.538" starttime="20170731 14:56:35.243" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:35.538" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:56:35.538" starttime="20170731 14:56:35.242" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:56:35.539" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:56:35.539" starttime="20170731 14:56:35.539" status="FAIL"></status>
</kw>
<status endtime="20170731 14:56:35.539" starttime="20170731 14:56:34.901" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:56:45.544" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:56:45.544" starttime="20170731 14:56:45.544" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:56:45.545" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:56:45.545" starttime="20170731 14:56:45.545" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:56:45.546" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:56:45.546" starttime="20170731 14:56:45.545" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:56:45.546" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:56:45.546" starttime="20170731 14:56:45.546" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:56:45.756" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:56:45.756" starttime="20170731 14:56:45.547" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:45.756" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:56:45.756" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:45.756" starttime="20170731 14:56:45.547" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:56:45.757" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:45.757" starttime="20170731 14:56:45.757" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:45.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:45.758" starttime="20170731 14:56:45.757" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:45.758" starttime="20170731 14:56:45.543" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:45.758" starttime="20170731 14:56:45.543" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:45.758" starttime="20170731 14:56:45.542" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:56:45.759" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:56:45.759" starttime="20170731 14:56:45.758" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:45.761" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:45.761" starttime="20170731 14:56:45.760" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:45.761" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:45.762" starttime="20170731 14:56:45.761" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:45.762" starttime="20170731 14:56:45.761" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:45.762" starttime="20170731 14:56:45.759" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:45.762" starttime="20170731 14:56:45.759" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:56:45.841" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:56:45.841" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:45.841" starttime="20170731 14:56:45.762" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:45.843" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:45.843" starttime="20170731 14:56:45.842" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:45.844" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:45.844" starttime="20170731 14:56:45.843" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:45.844" starttime="20170731 14:56:45.843" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:45.844" starttime="20170731 14:56:45.842" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:45.844" starttime="20170731 14:56:45.841" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:56:45.844" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:56:45.845" starttime="20170731 14:56:45.844" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:45.845" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:45.845" starttime="20170731 14:56:45.541" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:45.845" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:45.845" starttime="20170731 14:56:45.845" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:56:45.846" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:56:45.846" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:56:45.846" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:56:45.846" starttime="20170731 14:56:45.846" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:45.846" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:56:45.846" starttime="20170731 14:56:45.541" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:45.847" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:56:45.847" starttime="20170731 14:56:45.540" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:56:45.847" starttime="20170731 14:56:45.847" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:45.847" starttime="20170731 14:56:45.540" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:56:45.851" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:56:45.852" starttime="20170731 14:56:45.851" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:56:45.852" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:56:45.852" starttime="20170731 14:56:45.852" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:56:45.853" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:56:45.853" starttime="20170731 14:56:45.853" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:56:45.854" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:56:45.854" starttime="20170731 14:56:45.853" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:56:46.045" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:56:46.045" starttime="20170731 14:56:45.854" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:46.046" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:56:46.046" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:46.046" starttime="20170731 14:56:45.854" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:56:46.046" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:46.046" starttime="20170731 14:56:46.046" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:46.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:46.047" starttime="20170731 14:56:46.047" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:46.047" starttime="20170731 14:56:45.850" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:46.047" starttime="20170731 14:56:45.850" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:46.047" starttime="20170731 14:56:45.849" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:56:46.048" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:56:46.048" starttime="20170731 14:56:46.047" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:46.050" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:46.050" starttime="20170731 14:56:46.049" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:46.051" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:46.051" starttime="20170731 14:56:46.051" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:46.051" starttime="20170731 14:56:46.050" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:46.051" starttime="20170731 14:56:46.049" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:46.051" starttime="20170731 14:56:46.048" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:56:46.134" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:56:46.134" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:46.134" starttime="20170731 14:56:46.051" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:46.136" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:46.136" starttime="20170731 14:56:46.135" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:46.137" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:46.137" starttime="20170731 14:56:46.136" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:46.137" starttime="20170731 14:56:46.136" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:46.137" starttime="20170731 14:56:46.135" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:46.137" starttime="20170731 14:56:46.134" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:56:46.137" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:56:46.137" starttime="20170731 14:56:46.137" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:46.138" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:46.138" starttime="20170731 14:56:45.848" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:46.138" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:46.138" starttime="20170731 14:56:46.138" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:56:46.139" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:56:46.139" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:56:46.139" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:56:46.139" starttime="20170731 14:56:46.139" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:46.139" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:56:46.139" starttime="20170731 14:56:45.848" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:46.140" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:56:46.140" starttime="20170731 14:56:45.848" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:56:46.140" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:56:46.140" starttime="20170731 14:56:46.140" status="FAIL"></status>
</kw>
<status endtime="20170731 14:56:46.140" starttime="20170731 14:56:45.540" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:56:56.146" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:56:56.146" starttime="20170731 14:56:56.145" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:56:56.146" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:56:56.146" starttime="20170731 14:56:56.146" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:56:56.147" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:56:56.147" starttime="20170731 14:56:56.147" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:56:56.148" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:56:56.148" starttime="20170731 14:56:56.147" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:56:56.325" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:56:56.325" starttime="20170731 14:56:56.148" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:56.325" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:56:56.325" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:56.325" starttime="20170731 14:56:56.148" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:56:56.326" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:56.326" starttime="20170731 14:56:56.326" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:56.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:56.327" starttime="20170731 14:56:56.326" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.327" starttime="20170731 14:56:56.145" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.327" starttime="20170731 14:56:56.144" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.327" starttime="20170731 14:56:56.144" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:56:56.327" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:56:56.328" starttime="20170731 14:56:56.327" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:56.330" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:56.330" starttime="20170731 14:56:56.329" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:56.330" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:56.331" starttime="20170731 14:56:56.330" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.331" starttime="20170731 14:56:56.330" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.331" starttime="20170731 14:56:56.328" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.331" starttime="20170731 14:56:56.328" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:56:56.397" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:56:56.397" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:56.397" starttime="20170731 14:56:56.331" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:56.398" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:56.398" starttime="20170731 14:56:56.398" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:56.399" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:56.399" starttime="20170731 14:56:56.399" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.399" starttime="20170731 14:56:56.399" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.400" starttime="20170731 14:56:56.397" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.400" starttime="20170731 14:56:56.397" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:56:56.400" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:56:56.400" starttime="20170731 14:56:56.400" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:56.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:56.400" starttime="20170731 14:56:56.143" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:56.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:56.401" starttime="20170731 14:56:56.401" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:56:56.401" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:56:56.402" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:56:56.402" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:56:56.402" starttime="20170731 14:56:56.401" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:56.402" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:56:56.402" starttime="20170731 14:56:56.142" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:56.402" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:56:56.402" starttime="20170731 14:56:56.142" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:56:56.403" starttime="20170731 14:56:56.403" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.403" starttime="20170731 14:56:56.141" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:56:56.407" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:56:56.407" starttime="20170731 14:56:56.407" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:56:56.408" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:56:56.408" starttime="20170731 14:56:56.408" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:56:56.408" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:56:56.409" starttime="20170731 14:56:56.408" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:56:56.409" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:56:56.409" starttime="20170731 14:56:56.409" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:56:56.587" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:56:56.587" starttime="20170731 14:56:56.410" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:56.587" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:56:56.587" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:56.587" starttime="20170731 14:56:56.409" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:56:56.587" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:56.588" starttime="20170731 14:56:56.587" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:56.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:56.588" starttime="20170731 14:56:56.588" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.588" starttime="20170731 14:56:56.406" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.588" starttime="20170731 14:56:56.406" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.589" starttime="20170731 14:56:56.405" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:56:56.589" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:56:56.589" starttime="20170731 14:56:56.589" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:56.591" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:56.591" starttime="20170731 14:56:56.590" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:56.592" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:56:56.592" starttime="20170731 14:56:56.592" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.592" starttime="20170731 14:56:56.591" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.592" starttime="20170731 14:56:56.590" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.592" starttime="20170731 14:56:56.589" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:56:56.656" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:56:56.656" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:56.656" starttime="20170731 14:56:56.593" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:56:56.658" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:56.658" starttime="20170731 14:56:56.657" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:56:56.658" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:56:56.659" starttime="20170731 14:56:56.658" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.659" starttime="20170731 14:56:56.658" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.659" starttime="20170731 14:56:56.657" status="PASS"></status>
</kw>
<status endtime="20170731 14:56:56.659" starttime="20170731 14:56:56.656" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:56:56.659" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:56:56.659" starttime="20170731 14:56:56.659" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:56.659" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:56:56.660" starttime="20170731 14:56:56.404" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:56:56.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:56:56.660" starttime="20170731 14:56:56.660" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:56:56.661" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:56:56.661" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:56:56.661" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:56:56.661" starttime="20170731 14:56:56.660" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:56.661" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:56:56.661" starttime="20170731 14:56:56.404" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:56:56.661" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:56:56.662" starttime="20170731 14:56:56.404" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:56:56.662" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:56:56.662" starttime="20170731 14:56:56.662" status="FAIL"></status>
</kw>
<status endtime="20170731 14:56:56.662" starttime="20170731 14:56:56.141" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:57:06.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:57:06.672" starttime="20170731 14:57:06.671" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:57:06.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:57:06.672" starttime="20170731 14:57:06.672" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:57:06.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:57:06.673" starttime="20170731 14:57:06.672" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:57:06.673" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:57:06.673" starttime="20170731 14:57:06.673" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:57:06.875" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:57:06.875" starttime="20170731 14:57:06.674" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:06.875" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:57:06.875" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:06.876" starttime="20170731 14:57:06.674" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:57:06.876" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:06.876" starttime="20170731 14:57:06.876" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:06.877" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:06.877" starttime="20170731 14:57:06.876" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:06.877" starttime="20170731 14:57:06.670" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:06.877" starttime="20170731 14:57:06.666" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:06.877" starttime="20170731 14:57:06.665" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:57:06.878" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:57:06.878" starttime="20170731 14:57:06.877" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:06.880" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:06.880" starttime="20170731 14:57:06.879" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:06.881" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:06.881" starttime="20170731 14:57:06.880" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:06.881" starttime="20170731 14:57:06.880" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:06.881" starttime="20170731 14:57:06.878" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:06.881" starttime="20170731 14:57:06.878" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:57:06.945" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:57:06.945" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:06.945" starttime="20170731 14:57:06.881" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:06.946" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:06.946" starttime="20170731 14:57:06.946" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:06.948" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:06.948" starttime="20170731 14:57:06.947" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:06.948" starttime="20170731 14:57:06.947" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:06.948" starttime="20170731 14:57:06.945" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:06.948" starttime="20170731 14:57:06.945" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:57:06.948" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:57:06.948" starttime="20170731 14:57:06.948" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:06.949" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:06.949" starttime="20170731 14:57:06.664" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:06.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:06.949" starttime="20170731 14:57:06.949" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:57:06.950" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:57:06.950" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:57:06.950" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:57:06.950" starttime="20170731 14:57:06.950" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:06.950" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:57:06.950" starttime="20170731 14:57:06.664" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:06.951" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:57:06.951" starttime="20170731 14:57:06.664" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:57:06.951" starttime="20170731 14:57:06.951" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:06.951" starttime="20170731 14:57:06.663" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:57:06.955" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:57:06.955" starttime="20170731 14:57:06.954" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:57:06.956" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:57:06.956" starttime="20170731 14:57:06.955" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:57:06.956" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:57:06.956" starttime="20170731 14:57:06.956" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:57:06.957" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:57:06.957" starttime="20170731 14:57:06.957" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:57:07.134" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:57:07.135" starttime="20170731 14:57:06.958" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:07.135" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:57:07.135" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:07.135" starttime="20170731 14:57:06.957" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:57:07.135" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:07.135" starttime="20170731 14:57:07.135" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:07.136" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:07.136" starttime="20170731 14:57:07.136" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:07.136" starttime="20170731 14:57:06.954" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:07.136" starttime="20170731 14:57:06.953" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:07.136" starttime="20170731 14:57:06.953" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:57:07.137" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:57:07.137" starttime="20170731 14:57:07.137" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:07.139" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:07.139" starttime="20170731 14:57:07.138" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:07.140" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:07.140" starttime="20170731 14:57:07.140" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:07.140" starttime="20170731 14:57:07.139" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:07.141" starttime="20170731 14:57:07.138" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:07.141" starttime="20170731 14:57:07.137" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:57:07.225" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:57:07.225" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:07.225" starttime="20170731 14:57:07.141" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:07.227" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:07.227" starttime="20170731 14:57:07.226" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:07.229" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:07.229" starttime="20170731 14:57:07.228" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:07.229" starttime="20170731 14:57:07.227" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:07.229" starttime="20170731 14:57:07.226" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:07.229" starttime="20170731 14:57:07.225" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:57:07.229" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:57:07.229" starttime="20170731 14:57:07.229" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:07.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:07.230" starttime="20170731 14:57:06.952" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:07.230" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:07.230" starttime="20170731 14:57:07.230" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:57:07.231" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:57:07.231" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:57:07.231" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:57:07.231" starttime="20170731 14:57:07.231" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:07.231" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:57:07.231" starttime="20170731 14:57:06.952" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:07.232" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:57:07.232" starttime="20170731 14:57:06.951" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:57:07.232" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:57:07.232" starttime="20170731 14:57:07.232" status="FAIL"></status>
</kw>
<status endtime="20170731 14:57:07.232" starttime="20170731 14:57:06.663" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:57:17.237" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:57:17.238" starttime="20170731 14:57:17.237" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:57:17.238" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:57:17.238" starttime="20170731 14:57:17.238" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:57:17.239" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:57:17.239" starttime="20170731 14:57:17.238" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:57:17.240" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:57:17.240" starttime="20170731 14:57:17.239" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:57:17.432" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:57:17.432" starttime="20170731 14:57:17.241" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:17.432" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:57:17.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:17.432" starttime="20170731 14:57:17.240" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:57:17.433" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:17.433" starttime="20170731 14:57:17.432" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:17.433" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:17.433" starttime="20170731 14:57:17.433" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.434" starttime="20170731 14:57:17.236" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.434" starttime="20170731 14:57:17.236" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.434" starttime="20170731 14:57:17.235" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:57:17.434" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:57:17.434" starttime="20170731 14:57:17.434" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:17.436" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:17.436" starttime="20170731 14:57:17.436" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:17.437" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:17.437" starttime="20170731 14:57:17.437" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.438" starttime="20170731 14:57:17.437" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.438" starttime="20170731 14:57:17.435" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.438" starttime="20170731 14:57:17.435" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:57:17.524" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:57:17.524" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:17.524" starttime="20170731 14:57:17.438" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:17.526" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:17.526" starttime="20170731 14:57:17.526" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:17.527" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:17.527" starttime="20170731 14:57:17.527" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.527" starttime="20170731 14:57:17.526" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.527" starttime="20170731 14:57:17.525" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.527" starttime="20170731 14:57:17.525" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:57:17.528" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:57:17.528" starttime="20170731 14:57:17.528" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:17.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:17.528" starttime="20170731 14:57:17.235" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:17.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:17.529" starttime="20170731 14:57:17.528" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:57:17.529" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:57:17.530" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:57:17.530" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:57:17.530" starttime="20170731 14:57:17.529" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:17.530" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:57:17.530" starttime="20170731 14:57:17.234" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:17.530" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:57:17.530" starttime="20170731 14:57:17.234" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:57:17.531" starttime="20170731 14:57:17.531" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.531" starttime="20170731 14:57:17.233" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:57:17.535" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:57:17.536" starttime="20170731 14:57:17.535" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:57:17.536" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:57:17.536" starttime="20170731 14:57:17.536" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:57:17.537" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:57:17.537" starttime="20170731 14:57:17.536" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:57:17.537" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:57:17.537" starttime="20170731 14:57:17.537" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:57:17.848" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:57:17.848" starttime="20170731 14:57:17.538" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:17.848" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:57:17.848" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:17.848" starttime="20170731 14:57:17.538" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:57:17.848" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:17.849" starttime="20170731 14:57:17.848" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:17.849" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:17.849" starttime="20170731 14:57:17.849" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.849" starttime="20170731 14:57:17.534" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.849" starttime="20170731 14:57:17.534" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.849" starttime="20170731 14:57:17.533" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:57:17.850" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:57:17.850" starttime="20170731 14:57:17.850" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:17.852" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:17.852" starttime="20170731 14:57:17.851" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:17.853" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:17.853" starttime="20170731 14:57:17.853" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.853" starttime="20170731 14:57:17.852" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.853" starttime="20170731 14:57:17.851" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.853" starttime="20170731 14:57:17.850" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:57:17.933" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:57:17.933" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:17.933" starttime="20170731 14:57:17.854" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:17.935" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:17.935" starttime="20170731 14:57:17.934" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:17.936" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:17.936" starttime="20170731 14:57:17.936" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.936" starttime="20170731 14:57:17.935" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.937" starttime="20170731 14:57:17.934" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:17.937" starttime="20170731 14:57:17.933" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:57:17.937" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:57:17.937" starttime="20170731 14:57:17.937" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:17.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:17.937" starttime="20170731 14:57:17.532" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:17.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:17.938" starttime="20170731 14:57:17.937" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:57:17.938" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:57:17.938" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:57:17.939" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:57:17.939" starttime="20170731 14:57:17.938" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:17.939" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:57:17.939" starttime="20170731 14:57:17.532" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:17.939" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:57:17.939" starttime="20170731 14:57:17.531" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:57:17.940" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:57:17.940" starttime="20170731 14:57:17.939" status="FAIL"></status>
</kw>
<status endtime="20170731 14:57:17.940" starttime="20170731 14:57:17.233" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:57:27.945" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:57:27.945" starttime="20170731 14:57:27.945" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:57:27.946" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:57:27.946" starttime="20170731 14:57:27.945" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:57:27.947" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:57:27.947" starttime="20170731 14:57:27.946" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:57:27.947" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:57:27.947" starttime="20170731 14:57:27.947" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:57:28.147" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:57:28.148" starttime="20170731 14:57:27.948" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:28.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:57:28.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:28.148" starttime="20170731 14:57:27.948" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:57:28.148" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:28.148" starttime="20170731 14:57:28.148" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:28.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:28.149" starttime="20170731 14:57:28.149" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.149" starttime="20170731 14:57:27.944" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.149" starttime="20170731 14:57:27.944" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.149" starttime="20170731 14:57:27.943" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:57:28.150" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:57:28.150" starttime="20170731 14:57:28.150" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:28.152" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:28.152" starttime="20170731 14:57:28.151" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:28.153" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:28.153" starttime="20170731 14:57:28.153" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.153" starttime="20170731 14:57:28.152" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.153" starttime="20170731 14:57:28.151" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.153" starttime="20170731 14:57:28.150" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:57:28.216" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:57:28.216" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:28.216" starttime="20170731 14:57:28.153" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:28.217" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:28.217" starttime="20170731 14:57:28.217" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:28.218" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:28.218" starttime="20170731 14:57:28.218" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.218" starttime="20170731 14:57:28.218" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.219" starttime="20170731 14:57:28.216" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.219" starttime="20170731 14:57:28.216" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:57:28.219" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:57:28.219" starttime="20170731 14:57:28.219" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:28.219" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:28.219" starttime="20170731 14:57:27.942" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:28.220" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:28.220" starttime="20170731 14:57:28.220" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:57:28.221" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:57:28.221" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:57:28.221" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:57:28.221" starttime="20170731 14:57:28.220" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:28.221" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:57:28.221" starttime="20170731 14:57:27.942" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:28.221" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:57:28.221" starttime="20170731 14:57:27.941" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:57:28.222" starttime="20170731 14:57:28.222" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.222" starttime="20170731 14:57:27.941" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:57:28.225" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:57:28.226" starttime="20170731 14:57:28.225" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:57:28.227" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:57:28.227" starttime="20170731 14:57:28.226" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:57:28.227" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:57:28.227" starttime="20170731 14:57:28.227" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:57:28.228" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:57:28.228" starttime="20170731 14:57:28.228" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:57:28.451" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:57:28.451" starttime="20170731 14:57:28.229" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:28.451" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:57:28.451" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:28.451" starttime="20170731 14:57:28.228" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:57:28.452" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:28.452" starttime="20170731 14:57:28.451" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:28.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:28.453" starttime="20170731 14:57:28.452" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.453" starttime="20170731 14:57:28.225" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.453" starttime="20170731 14:57:28.224" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.453" starttime="20170731 14:57:28.224" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:57:28.453" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:57:28.454" starttime="20170731 14:57:28.453" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:28.456" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:28.456" starttime="20170731 14:57:28.455" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:28.457" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:28.457" starttime="20170731 14:57:28.456" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.457" starttime="20170731 14:57:28.456" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.457" starttime="20170731 14:57:28.454" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.457" starttime="20170731 14:57:28.454" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:57:28.546" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:57:28.546" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:28.546" starttime="20170731 14:57:28.457" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:28.548" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:28.548" starttime="20170731 14:57:28.547" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:28.549" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:28.549" starttime="20170731 14:57:28.548" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.549" starttime="20170731 14:57:28.548" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.549" starttime="20170731 14:57:28.547" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:28.549" starttime="20170731 14:57:28.546" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:57:28.549" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:57:28.550" starttime="20170731 14:57:28.549" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:28.550" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:28.550" starttime="20170731 14:57:28.223" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:28.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:28.550" starttime="20170731 14:57:28.550" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:57:28.551" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:57:28.551" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:57:28.551" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:57:28.551" starttime="20170731 14:57:28.551" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:28.551" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:57:28.551" starttime="20170731 14:57:28.223" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:28.552" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:57:28.552" starttime="20170731 14:57:28.222" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:57:28.552" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:57:28.552" starttime="20170731 14:57:28.552" status="FAIL"></status>
</kw>
<status endtime="20170731 14:57:28.553" starttime="20170731 14:57:27.940" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:57:38.558" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:57:38.558" starttime="20170731 14:57:38.557" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:57:38.559" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:57:38.559" starttime="20170731 14:57:38.558" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:57:38.559" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:57:38.559" starttime="20170731 14:57:38.559" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:57:38.560" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:57:38.560" starttime="20170731 14:57:38.560" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:57:38.739" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:57:38.739" starttime="20170731 14:57:38.561" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:38.739" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:57:38.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:38.739" starttime="20170731 14:57:38.560" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:57:38.740" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:38.740" starttime="20170731 14:57:38.740" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:38.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:38.741" starttime="20170731 14:57:38.740" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:38.741" starttime="20170731 14:57:38.557" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:38.741" starttime="20170731 14:57:38.556" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:38.741" starttime="20170731 14:57:38.556" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:57:38.742" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:57:38.742" starttime="20170731 14:57:38.741" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:38.744" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:38.744" starttime="20170731 14:57:38.743" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:38.745" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:38.745" starttime="20170731 14:57:38.744" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:38.745" starttime="20170731 14:57:38.744" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:38.745" starttime="20170731 14:57:38.742" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:38.745" starttime="20170731 14:57:38.742" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:57:38.808" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:57:38.808" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:38.808" starttime="20170731 14:57:38.745" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:38.810" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:38.810" starttime="20170731 14:57:38.809" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:38.811" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:38.811" starttime="20170731 14:57:38.811" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:38.811" starttime="20170731 14:57:38.810" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:38.811" starttime="20170731 14:57:38.809" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:38.811" starttime="20170731 14:57:38.808" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:57:38.812" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:57:38.812" starttime="20170731 14:57:38.811" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:38.812" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:38.812" starttime="20170731 14:57:38.555" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:38.812" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:38.812" starttime="20170731 14:57:38.812" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:57:38.813" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:57:38.813" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:57:38.813" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:57:38.813" starttime="20170731 14:57:38.813" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:38.813" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:57:38.813" starttime="20170731 14:57:38.554" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:38.814" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:57:38.814" starttime="20170731 14:57:38.554" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:57:38.814" starttime="20170731 14:57:38.814" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:38.814" starttime="20170731 14:57:38.553" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:57:38.818" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:57:38.818" starttime="20170731 14:57:38.818" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:57:38.819" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:57:38.819" starttime="20170731 14:57:38.818" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:57:38.819" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:57:38.819" starttime="20170731 14:57:38.819" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:57:38.820" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:57:38.820" starttime="20170731 14:57:38.820" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:57:39.000" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:57:39.000" starttime="20170731 14:57:38.821" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:39.000" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:57:39.000" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:39.000" starttime="20170731 14:57:38.820" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:57:39.001" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:39.001" starttime="20170731 14:57:39.001" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:39.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:39.002" starttime="20170731 14:57:39.001" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:39.002" starttime="20170731 14:57:38.817" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:39.002" starttime="20170731 14:57:38.817" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:39.002" starttime="20170731 14:57:38.816" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:57:39.002" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:57:39.003" starttime="20170731 14:57:39.002" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:39.004" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:39.005" starttime="20170731 14:57:39.004" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:39.005" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:39.005" starttime="20170731 14:57:39.005" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:39.006" starttime="20170731 14:57:39.005" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:39.006" starttime="20170731 14:57:39.003" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:39.006" starttime="20170731 14:57:39.003" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:57:39.068" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:57:39.068" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:39.068" starttime="20170731 14:57:39.006" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:39.070" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:39.070" starttime="20170731 14:57:39.069" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:39.071" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:39.071" starttime="20170731 14:57:39.070" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:39.071" starttime="20170731 14:57:39.070" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:39.071" starttime="20170731 14:57:39.069" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:39.071" starttime="20170731 14:57:39.068" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:57:39.072" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:57:39.072" starttime="20170731 14:57:39.071" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:39.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:39.072" starttime="20170731 14:57:38.815" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:39.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:39.073" starttime="20170731 14:57:39.072" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:57:39.074" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:57:39.074" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:57:39.074" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:57:39.074" starttime="20170731 14:57:39.073" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:39.074" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:57:39.075" starttime="20170731 14:57:38.815" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:39.075" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:57:39.075" starttime="20170731 14:57:38.815" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:57:39.076" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:57:39.076" starttime="20170731 14:57:39.075" status="FAIL"></status>
</kw>
<status endtime="20170731 14:57:39.076" starttime="20170731 14:57:38.553" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:57:49.081" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:57:49.082" starttime="20170731 14:57:49.081" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:57:49.082" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:57:49.082" starttime="20170731 14:57:49.082" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:57:49.083" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:57:49.083" starttime="20170731 14:57:49.082" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:57:49.083" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:57:49.083" starttime="20170731 14:57:49.083" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:57:49.320" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:57:49.321" starttime="20170731 14:57:49.084" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:49.321" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:57:49.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:49.321" starttime="20170731 14:57:49.084" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:57:49.321" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:49.321" starttime="20170731 14:57:49.321" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:49.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:49.322" starttime="20170731 14:57:49.322" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.322" starttime="20170731 14:57:49.080" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.322" starttime="20170731 14:57:49.080" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.322" starttime="20170731 14:57:49.079" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:57:49.323" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:57:49.323" starttime="20170731 14:57:49.323" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:49.325" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:49.325" starttime="20170731 14:57:49.324" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:49.326" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:49.326" starttime="20170731 14:57:49.326" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.326" starttime="20170731 14:57:49.325" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.326" starttime="20170731 14:57:49.324" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.326" starttime="20170731 14:57:49.323" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:57:49.407" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:57:49.408" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:49.408" starttime="20170731 14:57:49.327" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:49.409" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:49.409" starttime="20170731 14:57:49.409" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:49.415" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:49.415" starttime="20170731 14:57:49.415" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.415" starttime="20170731 14:57:49.410" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.415" starttime="20170731 14:57:49.408" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.415" starttime="20170731 14:57:49.408" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:57:49.416" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:57:49.416" starttime="20170731 14:57:49.415" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:49.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:49.416" starttime="20170731 14:57:49.078" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:49.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:49.417" starttime="20170731 14:57:49.416" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:57:49.417" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:57:49.417" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:57:49.417" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:57:49.417" starttime="20170731 14:57:49.417" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:49.418" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:57:49.418" starttime="20170731 14:57:49.078" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:49.418" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:57:49.418" starttime="20170731 14:57:49.077" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:57:49.418" starttime="20170731 14:57:49.418" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.419" starttime="20170731 14:57:49.077" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:57:49.423" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:57:49.423" starttime="20170731 14:57:49.422" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:57:49.424" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:57:49.424" starttime="20170731 14:57:49.423" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:57:49.424" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:57:49.424" starttime="20170731 14:57:49.424" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:57:49.425" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:57:49.425" starttime="20170731 14:57:49.425" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:57:49.666" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:57:49.666" starttime="20170731 14:57:49.426" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:49.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:57:49.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:49.666" starttime="20170731 14:57:49.425" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:57:49.667" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:49.667" starttime="20170731 14:57:49.666" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:49.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:49.668" starttime="20170731 14:57:49.667" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.668" starttime="20170731 14:57:49.422" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.668" starttime="20170731 14:57:49.422" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.668" starttime="20170731 14:57:49.421" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:57:49.668" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:57:49.668" starttime="20170731 14:57:49.668" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:49.671" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:49.671" starttime="20170731 14:57:49.670" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:49.672" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:49.672" starttime="20170731 14:57:49.671" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.672" starttime="20170731 14:57:49.671" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.672" starttime="20170731 14:57:49.669" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.672" starttime="20170731 14:57:49.669" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:57:49.741" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:57:49.741" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:49.742" starttime="20170731 14:57:49.672" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:49.743" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:49.743" starttime="20170731 14:57:49.743" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:49.744" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:57:49.744" starttime="20170731 14:57:49.744" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.744" starttime="20170731 14:57:49.743" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.744" starttime="20170731 14:57:49.742" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:49.744" starttime="20170731 14:57:49.742" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:57:49.745" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:57:49.745" starttime="20170731 14:57:49.745" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:49.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:49.745" starttime="20170731 14:57:49.420" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:49.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:49.746" starttime="20170731 14:57:49.745" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:57:49.746" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:57:49.746" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:57:49.747" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:57:49.747" starttime="20170731 14:57:49.746" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:49.747" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:57:49.747" starttime="20170731 14:57:49.419" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:49.747" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:57:49.747" starttime="20170731 14:57:49.419" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:57:49.748" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:57:49.748" starttime="20170731 14:57:49.747" status="FAIL"></status>
</kw>
<status endtime="20170731 14:57:49.748" starttime="20170731 14:57:49.077" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:57:59.753" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:57:59.753" starttime="20170731 14:57:59.753" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:57:59.754" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:57:59.754" starttime="20170731 14:57:59.754" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:57:59.755" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:57:59.755" starttime="20170731 14:57:59.754" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:57:59.756" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:57:59.756" starttime="20170731 14:57:59.755" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:57:59.965" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:57:59.965" starttime="20170731 14:57:59.756" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:57:59.965" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:57:59.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:57:59.965" starttime="20170731 14:57:59.756" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:57:59.966" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:59.966" starttime="20170731 14:57:59.965" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:57:59.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:57:59.966" starttime="20170731 14:57:59.966" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:59.966" starttime="20170731 14:57:59.752" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:59.967" starttime="20170731 14:57:59.752" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:59.967" starttime="20170731 14:57:59.751" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:57:59.967" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:57:59.967" starttime="20170731 14:57:59.967" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:57:59.969" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:59.969" starttime="20170731 14:57:59.969" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:57:59.970" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:57:59.970" starttime="20170731 14:57:59.970" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:59.971" starttime="20170731 14:57:59.969" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:59.971" starttime="20170731 14:57:59.968" status="PASS"></status>
</kw>
<status endtime="20170731 14:57:59.971" starttime="20170731 14:57:59.968" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:58:00.112" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:58:00.112" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:00.112" starttime="20170731 14:57:59.971" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:00.114" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:00.114" starttime="20170731 14:58:00.113" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:00.115" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:00.115" starttime="20170731 14:58:00.115" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.115" starttime="20170731 14:58:00.114" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.115" starttime="20170731 14:58:00.113" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.115" starttime="20170731 14:58:00.112" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:58:00.116" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:58:00.116" starttime="20170731 14:58:00.115" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:00.116" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:00.116" starttime="20170731 14:57:59.750" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:00.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:00.117" starttime="20170731 14:58:00.116" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:58:00.117" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:58:00.117" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:58:00.117" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:58:00.117" starttime="20170731 14:58:00.117" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:00.118" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:58:00.118" starttime="20170731 14:57:59.750" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:00.118" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:58:00.118" starttime="20170731 14:57:59.749" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:58:00.118" starttime="20170731 14:58:00.118" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.119" starttime="20170731 14:57:59.749" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:58:00.123" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:58:00.123" starttime="20170731 14:58:00.122" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:58:00.124" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:58:00.124" starttime="20170731 14:58:00.123" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:58:00.125" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:58:00.125" starttime="20170731 14:58:00.124" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:58:00.125" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:58:00.125" starttime="20170731 14:58:00.125" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:58:00.347" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:58:00.347" starttime="20170731 14:58:00.126" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:00.347" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:58:00.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:00.347" starttime="20170731 14:58:00.126" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:58:00.348" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:00.348" starttime="20170731 14:58:00.348" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:00.349" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:00.349" starttime="20170731 14:58:00.348" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.349" starttime="20170731 14:58:00.122" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.349" starttime="20170731 14:58:00.121" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.349" starttime="20170731 14:58:00.121" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:58:00.350" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:58:00.350" starttime="20170731 14:58:00.349" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:00.352" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:00.352" starttime="20170731 14:58:00.351" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:00.353" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:00.353" starttime="20170731 14:58:00.352" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.353" starttime="20170731 14:58:00.352" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.353" starttime="20170731 14:58:00.350" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.353" starttime="20170731 14:58:00.350" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:58:00.416" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:58:00.416" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:00.416" starttime="20170731 14:58:00.353" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:00.418" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:00.418" starttime="20170731 14:58:00.417" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:00.419" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:00.419" starttime="20170731 14:58:00.419" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.419" starttime="20170731 14:58:00.418" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.419" starttime="20170731 14:58:00.417" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:00.419" starttime="20170731 14:58:00.416" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:58:00.420" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:58:00.420" starttime="20170731 14:58:00.420" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:00.420" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:00.420" starttime="20170731 14:58:00.120" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:00.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:00.421" starttime="20170731 14:58:00.420" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:58:00.422" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:58:00.422" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:58:00.422" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:58:00.422" starttime="20170731 14:58:00.421" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:00.422" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:58:00.422" starttime="20170731 14:58:00.119" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:00.422" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:58:00.422" starttime="20170731 14:58:00.119" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:58:00.423" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:58:00.423" starttime="20170731 14:58:00.423" status="FAIL"></status>
</kw>
<status endtime="20170731 14:58:00.423" starttime="20170731 14:57:59.749" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:58:10.428" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:58:10.428" starttime="20170731 14:58:10.428" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:58:10.429" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:58:10.429" starttime="20170731 14:58:10.429" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:58:10.430" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:58:10.430" starttime="20170731 14:58:10.429" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:58:10.430" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:58:10.430" starttime="20170731 14:58:10.430" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:58:10.627" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:58:10.627" starttime="20170731 14:58:10.431" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:10.627" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:58:10.628" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:10.628" starttime="20170731 14:58:10.430" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:58:10.628" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:10.628" starttime="20170731 14:58:10.628" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:10.629" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:10.629" starttime="20170731 14:58:10.629" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.629" starttime="20170731 14:58:10.427" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.629" starttime="20170731 14:58:10.427" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.629" starttime="20170731 14:58:10.426" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:58:10.630" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:58:10.630" starttime="20170731 14:58:10.630" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:10.632" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:10.632" starttime="20170731 14:58:10.631" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:10.633" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:10.633" starttime="20170731 14:58:10.633" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.633" starttime="20170731 14:58:10.632" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.633" starttime="20170731 14:58:10.631" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.634" starttime="20170731 14:58:10.630" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:58:10.697" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:58:10.697" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:10.697" starttime="20170731 14:58:10.634" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:10.698" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:10.698" starttime="20170731 14:58:10.698" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:10.699" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:10.699" starttime="20170731 14:58:10.699" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.700" starttime="20170731 14:58:10.699" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.700" starttime="20170731 14:58:10.697" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.700" starttime="20170731 14:58:10.697" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:58:10.700" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:58:10.700" starttime="20170731 14:58:10.700" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:10.700" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:10.700" starttime="20170731 14:58:10.425" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:10.701" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:10.701" starttime="20170731 14:58:10.701" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:58:10.702" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:58:10.702" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:58:10.702" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:58:10.702" starttime="20170731 14:58:10.701" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:10.702" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:58:10.702" starttime="20170731 14:58:10.425" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:10.702" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:58:10.702" starttime="20170731 14:58:10.424" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:58:10.703" starttime="20170731 14:58:10.703" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.703" starttime="20170731 14:58:10.424" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:58:10.707" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:58:10.708" starttime="20170731 14:58:10.707" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:58:10.709" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:58:10.709" starttime="20170731 14:58:10.709" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:58:10.710" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:58:10.710" starttime="20170731 14:58:10.709" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:58:10.710" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:58:10.710" starttime="20170731 14:58:10.710" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:58:10.960" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:58:10.960" starttime="20170731 14:58:10.711" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:10.960" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:58:10.960" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:10.960" starttime="20170731 14:58:10.711" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:58:10.961" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:10.961" starttime="20170731 14:58:10.960" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:10.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:10.961" starttime="20170731 14:58:10.961" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.962" starttime="20170731 14:58:10.706" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.962" starttime="20170731 14:58:10.705" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.962" starttime="20170731 14:58:10.705" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:58:10.962" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:58:10.962" starttime="20170731 14:58:10.962" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:10.965" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:10.965" starttime="20170731 14:58:10.964" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:10.966" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:10.966" starttime="20170731 14:58:10.965" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.966" starttime="20170731 14:58:10.965" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.966" starttime="20170731 14:58:10.963" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:10.966" starttime="20170731 14:58:10.963" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:58:11.037" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:58:11.037" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:11.037" starttime="20170731 14:58:10.966" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:11.039" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:11.039" starttime="20170731 14:58:11.038" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:11.040" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:11.040" starttime="20170731 14:58:11.039" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:11.040" starttime="20170731 14:58:11.039" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:11.040" starttime="20170731 14:58:11.038" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:11.040" starttime="20170731 14:58:11.037" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:58:11.040" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:58:11.041" starttime="20170731 14:58:11.040" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:11.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:11.041" starttime="20170731 14:58:10.704" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:11.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:11.041" starttime="20170731 14:58:11.041" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:58:11.042" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:58:11.042" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:58:11.042" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:58:11.042" starttime="20170731 14:58:11.042" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:11.042" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:58:11.043" starttime="20170731 14:58:10.704" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:11.043" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:58:11.043" starttime="20170731 14:58:10.703" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:58:11.043" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:58:11.043" starttime="20170731 14:58:11.043" status="FAIL"></status>
</kw>
<status endtime="20170731 14:58:11.044" starttime="20170731 14:58:10.424" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:58:21.049" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:58:21.049" starttime="20170731 14:58:21.048" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:58:21.050" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:58:21.050" starttime="20170731 14:58:21.049" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:58:21.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:58:21.050" starttime="20170731 14:58:21.050" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:58:21.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:58:21.051" starttime="20170731 14:58:21.051" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:58:21.227" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:58:21.227" starttime="20170731 14:58:21.052" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:21.227" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:58:21.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:21.228" starttime="20170731 14:58:21.051" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:58:21.228" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:21.228" starttime="20170731 14:58:21.228" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:21.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:21.229" starttime="20170731 14:58:21.228" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.229" starttime="20170731 14:58:21.048" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.229" starttime="20170731 14:58:21.047" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.230" starttime="20170731 14:58:21.047" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:58:21.230" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:58:21.230" starttime="20170731 14:58:21.230" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:21.232" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:21.232" starttime="20170731 14:58:21.232" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:21.233" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:21.234" starttime="20170731 14:58:21.233" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.234" starttime="20170731 14:58:21.233" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.234" starttime="20170731 14:58:21.231" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.234" starttime="20170731 14:58:21.231" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:58:21.296" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:58:21.297" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:21.297" starttime="20170731 14:58:21.234" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:21.298" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:21.298" starttime="20170731 14:58:21.298" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:21.299" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:21.299" starttime="20170731 14:58:21.299" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.299" starttime="20170731 14:58:21.298" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.299" starttime="20170731 14:58:21.297" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.300" starttime="20170731 14:58:21.297" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:58:21.300" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:58:21.300" starttime="20170731 14:58:21.300" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:21.300" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:21.300" starttime="20170731 14:58:21.046" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:21.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:21.301" starttime="20170731 14:58:21.301" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:58:21.302" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:58:21.302" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:58:21.302" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:58:21.302" starttime="20170731 14:58:21.301" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:21.302" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:58:21.302" starttime="20170731 14:58:21.045" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:21.302" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:58:21.302" starttime="20170731 14:58:21.045" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:58:21.303" starttime="20170731 14:58:21.303" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.303" starttime="20170731 14:58:21.045" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:58:21.307" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:58:21.307" starttime="20170731 14:58:21.306" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:58:21.307" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:58:21.307" starttime="20170731 14:58:21.307" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:58:21.308" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:58:21.308" starttime="20170731 14:58:21.308" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:58:21.309" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:58:21.309" starttime="20170731 14:58:21.308" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:58:21.511" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:58:21.511" starttime="20170731 14:58:21.309" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:21.511" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:58:21.511" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:21.511" starttime="20170731 14:58:21.309" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:58:21.512" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:21.512" starttime="20170731 14:58:21.511" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:21.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:21.512" starttime="20170731 14:58:21.512" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.513" starttime="20170731 14:58:21.306" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.513" starttime="20170731 14:58:21.305" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.513" starttime="20170731 14:58:21.305" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:58:21.513" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:58:21.513" starttime="20170731 14:58:21.513" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:21.515" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:21.515" starttime="20170731 14:58:21.515" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:21.516" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:21.516" starttime="20170731 14:58:21.516" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.516" starttime="20170731 14:58:21.516" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.517" starttime="20170731 14:58:21.514" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.517" starttime="20170731 14:58:21.514" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:58:21.579" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:58:21.579" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:21.579" starttime="20170731 14:58:21.517" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:21.581" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:21.581" starttime="20170731 14:58:21.581" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:21.582" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:21.582" starttime="20170731 14:58:21.582" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.582" starttime="20170731 14:58:21.581" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.582" starttime="20170731 14:58:21.580" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:21.582" starttime="20170731 14:58:21.580" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:58:21.583" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:58:21.583" starttime="20170731 14:58:21.583" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:21.583" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:21.583" starttime="20170731 14:58:21.304" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:21.584" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:21.584" starttime="20170731 14:58:21.583" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:58:21.584" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:58:21.584" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:58:21.584" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:58:21.585" starttime="20170731 14:58:21.584" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:21.585" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:58:21.585" starttime="20170731 14:58:21.304" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:21.585" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:58:21.585" starttime="20170731 14:58:21.303" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:58:21.586" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:58:21.586" starttime="20170731 14:58:21.585" status="FAIL"></status>
</kw>
<status endtime="20170731 14:58:21.586" starttime="20170731 14:58:21.044" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:58:31.591" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:58:31.591" starttime="20170731 14:58:31.591" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:58:31.592" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:58:31.592" starttime="20170731 14:58:31.591" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:58:31.592" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:58:31.592" starttime="20170731 14:58:31.592" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:58:31.593" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:58:31.593" starttime="20170731 14:58:31.593" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:58:31.798" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:58:31.798" starttime="20170731 14:58:31.594" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:31.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:58:31.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:31.799" starttime="20170731 14:58:31.593" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:58:31.799" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:31.799" starttime="20170731 14:58:31.799" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:31.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:31.800" starttime="20170731 14:58:31.800" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:31.800" starttime="20170731 14:58:31.590" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:31.800" starttime="20170731 14:58:31.589" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:31.800" starttime="20170731 14:58:31.589" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:58:31.801" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:58:31.801" starttime="20170731 14:58:31.801" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:31.803" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:31.803" starttime="20170731 14:58:31.802" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:31.804" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:31.804" starttime="20170731 14:58:31.804" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:31.804" starttime="20170731 14:58:31.803" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:31.804" starttime="20170731 14:58:31.802" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:31.804" starttime="20170731 14:58:31.801" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:58:31.867" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:58:31.868" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:31.868" starttime="20170731 14:58:31.805" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:31.869" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:31.869" starttime="20170731 14:58:31.869" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:31.870" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:31.870" starttime="20170731 14:58:31.870" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:31.871" starttime="20170731 14:58:31.869" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:31.871" starttime="20170731 14:58:31.868" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:31.871" starttime="20170731 14:58:31.868" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:58:31.871" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:58:31.871" starttime="20170731 14:58:31.871" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:31.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:31.871" starttime="20170731 14:58:31.588" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:31.872" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:31.872" starttime="20170731 14:58:31.872" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:58:31.873" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:58:31.873" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:58:31.873" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:58:31.873" starttime="20170731 14:58:31.872" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:31.873" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:58:31.873" starttime="20170731 14:58:31.587" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:31.873" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:58:31.873" starttime="20170731 14:58:31.587" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:58:31.874" starttime="20170731 14:58:31.874" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:31.874" starttime="20170731 14:58:31.587" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:58:31.878" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:58:31.878" starttime="20170731 14:58:31.877" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:58:31.879" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:58:31.879" starttime="20170731 14:58:31.878" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:58:31.879" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:58:31.879" starttime="20170731 14:58:31.879" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:58:31.880" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:58:31.880" starttime="20170731 14:58:31.879" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:58:32.075" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:58:32.075" starttime="20170731 14:58:31.880" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:32.075" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:58:32.075" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:32.075" starttime="20170731 14:58:31.880" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:58:32.076" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:32.076" starttime="20170731 14:58:32.075" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:32.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:32.076" starttime="20170731 14:58:32.076" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:32.077" starttime="20170731 14:58:31.877" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:32.077" starttime="20170731 14:58:31.876" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:32.077" starttime="20170731 14:58:31.876" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:58:32.077" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:58:32.077" starttime="20170731 14:58:32.077" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:32.083" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:32.083" starttime="20170731 14:58:32.079" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:32.084" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:32.084" starttime="20170731 14:58:32.084" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:32.084" starttime="20170731 14:58:32.083" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:32.084" starttime="20170731 14:58:32.078" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:32.084" starttime="20170731 14:58:32.078" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:58:32.164" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:58:32.164" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:32.164" starttime="20170731 14:58:32.085" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:32.166" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:32.166" starttime="20170731 14:58:32.165" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:32.167" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:32.167" starttime="20170731 14:58:32.167" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:32.167" starttime="20170731 14:58:32.166" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:32.167" starttime="20170731 14:58:32.165" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:32.167" starttime="20170731 14:58:32.165" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:58:32.168" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:58:32.168" starttime="20170731 14:58:32.167" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:32.168" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:32.168" starttime="20170731 14:58:31.875" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:32.168" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:32.169" starttime="20170731 14:58:32.168" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:58:32.169" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:58:32.169" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:58:32.169" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:58:32.169" starttime="20170731 14:58:32.169" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:32.170" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:58:32.170" starttime="20170731 14:58:31.875" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:32.170" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:58:32.170" starttime="20170731 14:58:31.874" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:58:32.170" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:58:32.171" starttime="20170731 14:58:32.170" status="FAIL"></status>
</kw>
<status endtime="20170731 14:58:32.171" starttime="20170731 14:58:31.586" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:58:42.175" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:58:42.176" starttime="20170731 14:58:42.175" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:58:42.176" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:58:42.176" starttime="20170731 14:58:42.176" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:58:42.177" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:58:42.177" starttime="20170731 14:58:42.177" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:58:42.178" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:58:42.178" starttime="20170731 14:58:42.177" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:58:42.387" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:58:42.387" starttime="20170731 14:58:42.179" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:42.387" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:58:42.387" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:42.387" starttime="20170731 14:58:42.178" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:58:42.388" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:42.388" starttime="20170731 14:58:42.388" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:42.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:42.389" starttime="20170731 14:58:42.388" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.389" starttime="20170731 14:58:42.174" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.389" starttime="20170731 14:58:42.174" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.389" starttime="20170731 14:58:42.173" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:58:42.390" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:58:42.390" starttime="20170731 14:58:42.389" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:42.392" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:42.392" starttime="20170731 14:58:42.391" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:42.393" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:42.393" starttime="20170731 14:58:42.392" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.393" starttime="20170731 14:58:42.392" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.393" starttime="20170731 14:58:42.390" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.393" starttime="20170731 14:58:42.390" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:58:42.470" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:58:42.470" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:42.470" starttime="20170731 14:58:42.393" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:42.472" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:42.472" starttime="20170731 14:58:42.471" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:42.472" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:42.473" starttime="20170731 14:58:42.472" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.473" starttime="20170731 14:58:42.472" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.473" starttime="20170731 14:58:42.471" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.473" starttime="20170731 14:58:42.470" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:58:42.473" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:58:42.473" starttime="20170731 14:58:42.473" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:42.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:42.474" starttime="20170731 14:58:42.173" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:42.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:42.474" starttime="20170731 14:58:42.474" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:58:42.475" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:58:42.475" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:58:42.475" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:58:42.475" starttime="20170731 14:58:42.474" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:42.475" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:58:42.475" starttime="20170731 14:58:42.172" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:42.476" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:58:42.476" starttime="20170731 14:58:42.172" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:58:42.476" starttime="20170731 14:58:42.476" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.476" starttime="20170731 14:58:42.172" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:58:42.480" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:58:42.481" starttime="20170731 14:58:42.480" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:58:42.481" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:58:42.481" starttime="20170731 14:58:42.481" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:58:42.482" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:58:42.482" starttime="20170731 14:58:42.481" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:58:42.482" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:58:42.482" starttime="20170731 14:58:42.482" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:58:42.660" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:58:42.660" starttime="20170731 14:58:42.483" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:42.660" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:58:42.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:42.660" starttime="20170731 14:58:42.483" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:58:42.661" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:42.661" starttime="20170731 14:58:42.660" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:42.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:42.662" starttime="20170731 14:58:42.661" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.662" starttime="20170731 14:58:42.479" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.662" starttime="20170731 14:58:42.479" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.662" starttime="20170731 14:58:42.478" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:58:42.662" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:58:42.662" starttime="20170731 14:58:42.662" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:42.665" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:42.666" starttime="20170731 14:58:42.664" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:42.667" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:42.667" starttime="20170731 14:58:42.666" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.667" starttime="20170731 14:58:42.666" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.667" starttime="20170731 14:58:42.663" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.667" starttime="20170731 14:58:42.663" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:58:42.730" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:58:42.730" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:42.730" starttime="20170731 14:58:42.668" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:42.732" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:42.732" starttime="20170731 14:58:42.731" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:42.733" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:42.733" starttime="20170731 14:58:42.733" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.733" starttime="20170731 14:58:42.732" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.733" starttime="20170731 14:58:42.731" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:42.733" starttime="20170731 14:58:42.730" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:58:42.734" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:58:42.734" starttime="20170731 14:58:42.734" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:42.734" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:42.734" starttime="20170731 14:58:42.477" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:42.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:42.735" starttime="20170731 14:58:42.734" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:58:42.735" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:58:42.735" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:58:42.735" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:58:42.735" starttime="20170731 14:58:42.735" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:42.736" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:58:42.736" starttime="20170731 14:58:42.477" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:42.736" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:58:42.736" starttime="20170731 14:58:42.477" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:58:42.737" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:58:42.737" starttime="20170731 14:58:42.736" status="FAIL"></status>
</kw>
<status endtime="20170731 14:58:42.737" starttime="20170731 14:58:42.171" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:58:52.742" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:58:52.742" starttime="20170731 14:58:52.741" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:58:52.743" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:58:52.743" starttime="20170731 14:58:52.742" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:58:52.743" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:58:52.743" starttime="20170731 14:58:52.743" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:58:52.744" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:58:52.744" starttime="20170731 14:58:52.744" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:58:52.941" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:58:52.941" starttime="20170731 14:58:52.745" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:52.941" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:58:52.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:52.941" starttime="20170731 14:58:52.745" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:58:52.942" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:52.942" starttime="20170731 14:58:52.942" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:52.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:52.943" starttime="20170731 14:58:52.942" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:52.943" starttime="20170731 14:58:52.741" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:52.943" starttime="20170731 14:58:52.740" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:52.943" starttime="20170731 14:58:52.740" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:58:52.944" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:58:52.944" starttime="20170731 14:58:52.943" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:52.946" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:52.946" starttime="20170731 14:58:52.945" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:52.947" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:52.947" starttime="20170731 14:58:52.946" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:52.947" starttime="20170731 14:58:52.946" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:52.947" starttime="20170731 14:58:52.944" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:52.947" starttime="20170731 14:58:52.944" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:58:53.009" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:58:53.009" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:53.009" starttime="20170731 14:58:52.947" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:53.011" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:53.011" starttime="20170731 14:58:53.011" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:53.012" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:53.012" starttime="20170731 14:58:53.012" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.012" starttime="20170731 14:58:53.011" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.012" starttime="20170731 14:58:53.010" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.012" starttime="20170731 14:58:53.010" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:58:53.013" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:58:53.013" starttime="20170731 14:58:53.013" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:53.013" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:53.013" starttime="20170731 14:58:52.739" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:53.014" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:53.014" starttime="20170731 14:58:53.013" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:58:53.014" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:58:53.015" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:58:53.015" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:58:53.015" starttime="20170731 14:58:53.014" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:53.015" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:58:53.015" starttime="20170731 14:58:52.739" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:53.015" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:58:53.015" starttime="20170731 14:58:52.738" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:58:53.016" starttime="20170731 14:58:53.016" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.016" starttime="20170731 14:58:52.738" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:58:53.019" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:58:53.020" starttime="20170731 14:58:53.019" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:58:53.021" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:58:53.021" starttime="20170731 14:58:53.020" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:58:53.021" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:58:53.021" starttime="20170731 14:58:53.021" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:58:53.022" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:58:53.022" starttime="20170731 14:58:53.022" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:58:53.201" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:58:53.201" starttime="20170731 14:58:53.023" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:53.201" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:58:53.201" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:53.201" starttime="20170731 14:58:53.022" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:58:53.202" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:53.202" starttime="20170731 14:58:53.201" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:53.202" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:53.202" starttime="20170731 14:58:53.202" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.202" starttime="20170731 14:58:53.019" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.203" starttime="20170731 14:58:53.018" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.203" starttime="20170731 14:58:53.018" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:58:53.203" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:58:53.203" starttime="20170731 14:58:53.203" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:53.205" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:53.205" starttime="20170731 14:58:53.205" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:53.206" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:58:53.206" starttime="20170731 14:58:53.206" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.207" starttime="20170731 14:58:53.206" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.207" starttime="20170731 14:58:53.204" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.207" starttime="20170731 14:58:53.204" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:58:53.297" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:58:53.297" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:53.297" starttime="20170731 14:58:53.207" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:58:53.299" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:53.299" starttime="20170731 14:58:53.299" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:58:53.300" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:58:53.300" starttime="20170731 14:58:53.300" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.300" starttime="20170731 14:58:53.299" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.300" starttime="20170731 14:58:53.298" status="PASS"></status>
</kw>
<status endtime="20170731 14:58:53.300" starttime="20170731 14:58:53.298" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:58:53.301" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:58:53.301" starttime="20170731 14:58:53.301" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:53.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:58:53.301" starttime="20170731 14:58:53.017" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:58:53.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:58:53.302" starttime="20170731 14:58:53.301" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:58:53.302" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:58:53.302" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:58:53.302" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:58:53.302" starttime="20170731 14:58:53.302" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:53.303" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:58:53.303" starttime="20170731 14:58:53.017" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:58:53.303" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:58:53.303" starttime="20170731 14:58:53.016" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:58:53.304" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:58:53.304" starttime="20170731 14:58:53.303" status="FAIL"></status>
</kw>
<status endtime="20170731 14:58:53.304" starttime="20170731 14:58:52.737" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:59:03.309" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:59:03.310" starttime="20170731 14:59:03.309" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:59:03.310" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:59:03.310" starttime="20170731 14:59:03.310" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:59:03.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:59:03.311" starttime="20170731 14:59:03.311" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:59:03.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:59:03.312" starttime="20170731 14:59:03.311" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:59:03.504" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:59:03.504" starttime="20170731 14:59:03.312" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:03.504" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:59:03.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:03.504" starttime="20170731 14:59:03.312" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:59:03.505" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:03.505" starttime="20170731 14:59:03.505" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:03.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:03.506" starttime="20170731 14:59:03.505" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.506" starttime="20170731 14:59:03.308" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.506" starttime="20170731 14:59:03.308" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.506" starttime="20170731 14:59:03.307" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:59:03.507" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:59:03.507" starttime="20170731 14:59:03.506" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:03.509" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:03.509" starttime="20170731 14:59:03.508" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:03.510" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:03.510" starttime="20170731 14:59:03.510" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.510" starttime="20170731 14:59:03.509" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.510" starttime="20170731 14:59:03.508" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.510" starttime="20170731 14:59:03.507" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:59:03.586" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:59:03.586" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:03.586" starttime="20170731 14:59:03.511" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:03.588" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:03.588" starttime="20170731 14:59:03.587" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:03.589" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:03.589" starttime="20170731 14:59:03.589" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.589" starttime="20170731 14:59:03.588" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.589" starttime="20170731 14:59:03.587" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.589" starttime="20170731 14:59:03.586" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:59:03.590" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:59:03.590" starttime="20170731 14:59:03.590" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:03.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:03.590" starttime="20170731 14:59:03.307" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:03.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:03.591" starttime="20170731 14:59:03.590" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:59:03.591" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:59:03.591" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:59:03.591" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:59:03.592" starttime="20170731 14:59:03.591" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:03.592" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:59:03.592" starttime="20170731 14:59:03.306" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:03.593" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:59:03.593" starttime="20170731 14:59:03.305" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:59:03.593" starttime="20170731 14:59:03.593" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.593" starttime="20170731 14:59:03.305" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:59:03.598" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:59:03.598" starttime="20170731 14:59:03.597" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:59:03.599" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:59:03.599" starttime="20170731 14:59:03.599" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:59:03.600" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:59:03.600" starttime="20170731 14:59:03.599" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:59:03.601" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:59:03.601" starttime="20170731 14:59:03.600" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:59:03.796" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:59:03.796" starttime="20170731 14:59:03.602" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:03.796" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:59:03.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:03.796" starttime="20170731 14:59:03.601" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:59:03.797" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:03.797" starttime="20170731 14:59:03.797" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:03.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:03.798" starttime="20170731 14:59:03.797" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.798" starttime="20170731 14:59:03.596" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.798" starttime="20170731 14:59:03.596" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.798" starttime="20170731 14:59:03.595" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:59:03.799" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:59:03.799" starttime="20170731 14:59:03.798" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:03.801" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:03.801" starttime="20170731 14:59:03.800" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:03.802" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:03.802" starttime="20170731 14:59:03.801" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.802" starttime="20170731 14:59:03.801" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.802" starttime="20170731 14:59:03.799" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.802" starttime="20170731 14:59:03.799" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:59:03.885" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:59:03.885" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:03.885" starttime="20170731 14:59:03.802" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:03.887" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:03.887" starttime="20170731 14:59:03.887" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:03.888" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:03.888" starttime="20170731 14:59:03.888" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.888" starttime="20170731 14:59:03.888" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.889" starttime="20170731 14:59:03.886" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:03.889" starttime="20170731 14:59:03.886" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:59:03.889" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:59:03.889" starttime="20170731 14:59:03.889" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:03.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:03.889" starttime="20170731 14:59:03.594" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:03.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:03.890" starttime="20170731 14:59:03.890" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:59:03.891" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:59:03.891" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:59:03.891" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:59:03.891" starttime="20170731 14:59:03.891" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:03.892" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:59:03.892" starttime="20170731 14:59:03.594" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:03.892" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:59:03.892" starttime="20170731 14:59:03.593" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:59:03.893" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:59:03.893" starttime="20170731 14:59:03.893" status="FAIL"></status>
</kw>
<status endtime="20170731 14:59:03.894" starttime="20170731 14:59:03.304" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:59:13.900" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:59:13.901" starttime="20170731 14:59:13.900" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:59:13.901" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:59:13.901" starttime="20170731 14:59:13.901" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:59:13.902" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:59:13.902" starttime="20170731 14:59:13.902" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:59:13.903" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:59:13.903" starttime="20170731 14:59:13.902" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:59:14.171" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:59:14.171" starttime="20170731 14:59:13.903" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:14.171" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:59:14.171" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:14.171" starttime="20170731 14:59:13.903" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:59:14.172" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:14.172" starttime="20170731 14:59:14.172" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:14.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:14.173" starttime="20170731 14:59:14.172" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.173" starttime="20170731 14:59:13.899" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.173" starttime="20170731 14:59:13.898" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.173" starttime="20170731 14:59:13.897" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:59:14.174" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:59:14.174" starttime="20170731 14:59:14.173" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:14.176" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:14.176" starttime="20170731 14:59:14.175" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:14.177" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:14.177" starttime="20170731 14:59:14.176" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.177" starttime="20170731 14:59:14.176" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.177" starttime="20170731 14:59:14.174" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.177" starttime="20170731 14:59:14.174" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:59:14.240" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:59:14.240" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:14.240" starttime="20170731 14:59:14.177" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:14.242" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:14.242" starttime="20170731 14:59:14.242" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:14.243" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:14.244" starttime="20170731 14:59:14.243" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.244" starttime="20170731 14:59:14.242" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.244" starttime="20170731 14:59:14.241" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.244" starttime="20170731 14:59:14.241" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:59:14.244" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:59:14.244" starttime="20170731 14:59:14.244" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:14.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:14.245" starttime="20170731 14:59:13.896" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:14.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:14.245" starttime="20170731 14:59:14.245" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:59:14.246" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:59:14.246" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:59:14.246" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:59:14.246" starttime="20170731 14:59:14.245" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:14.246" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:59:14.246" starttime="20170731 14:59:13.895" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:14.246" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:59:14.247" starttime="20170731 14:59:13.895" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:59:14.247" starttime="20170731 14:59:14.247" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.247" starttime="20170731 14:59:13.895" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:59:14.251" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:59:14.251" starttime="20170731 14:59:14.250" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:59:14.252" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:59:14.252" starttime="20170731 14:59:14.251" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:59:14.252" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:59:14.252" starttime="20170731 14:59:14.252" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:59:14.253" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:59:14.253" starttime="20170731 14:59:14.252" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:59:14.456" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:59:14.457" starttime="20170731 14:59:14.254" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:14.457" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:59:14.457" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:14.457" starttime="20170731 14:59:14.253" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:59:14.457" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:14.457" starttime="20170731 14:59:14.457" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:14.458" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:14.458" starttime="20170731 14:59:14.458" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.458" starttime="20170731 14:59:14.250" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.458" starttime="20170731 14:59:14.249" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.459" starttime="20170731 14:59:14.249" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:59:14.459" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:59:14.459" starttime="20170731 14:59:14.459" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:14.462" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:14.462" starttime="20170731 14:59:14.461" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:14.463" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:14.463" starttime="20170731 14:59:14.462" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.463" starttime="20170731 14:59:14.462" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.463" starttime="20170731 14:59:14.460" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.463" starttime="20170731 14:59:14.460" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:59:14.526" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:59:14.526" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:14.526" starttime="20170731 14:59:14.463" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:14.528" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:14.528" starttime="20170731 14:59:14.527" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:14.529" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:14.529" starttime="20170731 14:59:14.528" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.529" starttime="20170731 14:59:14.528" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.529" starttime="20170731 14:59:14.527" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:14.529" starttime="20170731 14:59:14.526" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:59:14.530" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:59:14.530" starttime="20170731 14:59:14.529" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:14.530" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:14.530" starttime="20170731 14:59:14.248" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:14.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:14.531" starttime="20170731 14:59:14.530" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:59:14.531" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:59:14.531" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:59:14.531" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:59:14.531" starttime="20170731 14:59:14.531" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:14.532" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:59:14.532" starttime="20170731 14:59:14.248" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:14.532" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:59:14.532" starttime="20170731 14:59:14.247" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:59:14.532" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:59:14.533" starttime="20170731 14:59:14.532" status="FAIL"></status>
</kw>
<status endtime="20170731 14:59:14.533" starttime="20170731 14:59:13.894" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:59:24.538" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:59:24.538" starttime="20170731 14:59:24.537" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:59:24.543" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:59:24.543" starttime="20170731 14:59:24.538" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:59:24.544" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:59:24.544" starttime="20170731 14:59:24.543" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:59:24.544" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:59:24.544" starttime="20170731 14:59:24.544" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:59:24.810" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:59:24.810" starttime="20170731 14:59:24.545" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:24.810" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:59:24.811" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:24.811" starttime="20170731 14:59:24.545" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:59:24.811" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:24.811" starttime="20170731 14:59:24.811" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:24.812" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:24.812" starttime="20170731 14:59:24.812" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:24.812" starttime="20170731 14:59:24.537" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:24.812" starttime="20170731 14:59:24.536" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:24.812" starttime="20170731 14:59:24.536" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:59:24.813" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:59:24.813" starttime="20170731 14:59:24.813" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:24.815" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:24.815" starttime="20170731 14:59:24.814" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:24.816" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:24.817" starttime="20170731 14:59:24.816" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:24.817" starttime="20170731 14:59:24.815" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:24.817" starttime="20170731 14:59:24.814" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:24.817" starttime="20170731 14:59:24.813" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:59:24.954" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:59:24.954" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:24.955" starttime="20170731 14:59:24.817" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:24.956" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:24.957" starttime="20170731 14:59:24.956" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:24.957" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:24.958" starttime="20170731 14:59:24.957" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:24.958" starttime="20170731 14:59:24.957" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:24.958" starttime="20170731 14:59:24.956" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:24.958" starttime="20170731 14:59:24.955" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:59:24.958" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:59:24.958" starttime="20170731 14:59:24.958" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:24.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:24.959" starttime="20170731 14:59:24.535" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:24.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:24.959" starttime="20170731 14:59:24.959" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:59:24.960" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:59:24.960" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:59:24.960" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:59:24.960" starttime="20170731 14:59:24.959" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:24.960" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:59:24.960" starttime="20170731 14:59:24.535" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:24.961" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:59:24.961" starttime="20170731 14:59:24.534" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:59:24.961" starttime="20170731 14:59:24.961" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:24.961" starttime="20170731 14:59:24.534" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:59:24.965" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:59:24.966" starttime="20170731 14:59:24.965" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:59:24.966" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:59:24.966" starttime="20170731 14:59:24.966" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:59:24.967" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:59:24.967" starttime="20170731 14:59:24.966" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:59:24.967" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:59:24.967" starttime="20170731 14:59:24.967" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:59:25.171" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:59:25.171" starttime="20170731 14:59:24.968" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:25.171" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:59:25.171" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:25.171" starttime="20170731 14:59:24.968" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:59:25.172" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:25.172" starttime="20170731 14:59:25.172" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:25.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:25.173" starttime="20170731 14:59:25.172" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:25.173" starttime="20170731 14:59:24.964" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:25.173" starttime="20170731 14:59:24.964" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:25.173" starttime="20170731 14:59:24.963" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:59:25.174" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:59:25.174" starttime="20170731 14:59:25.173" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:25.176" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:25.176" starttime="20170731 14:59:25.175" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:25.176" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:25.177" starttime="20170731 14:59:25.176" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:25.177" starttime="20170731 14:59:25.176" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:25.177" starttime="20170731 14:59:25.174" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:25.177" starttime="20170731 14:59:25.174" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:59:25.239" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:59:25.240" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:25.240" starttime="20170731 14:59:25.177" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:25.242" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:25.242" starttime="20170731 14:59:25.241" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:25.243" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:25.243" starttime="20170731 14:59:25.242" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:25.243" starttime="20170731 14:59:25.242" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:25.243" starttime="20170731 14:59:25.240" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:25.243" starttime="20170731 14:59:25.240" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:59:25.243" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:59:25.243" starttime="20170731 14:59:25.243" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:25.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:25.244" starttime="20170731 14:59:24.962" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:25.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:25.244" starttime="20170731 14:59:25.244" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:59:25.245" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:59:25.245" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:59:25.245" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:59:25.245" starttime="20170731 14:59:25.245" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:25.245" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:59:25.245" starttime="20170731 14:59:24.962" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:25.246" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:59:25.246" starttime="20170731 14:59:24.961" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:59:25.246" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:59:25.246" starttime="20170731 14:59:25.246" status="FAIL"></status>
</kw>
<status endtime="20170731 14:59:25.247" starttime="20170731 14:59:24.533" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:59:35.251" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:59:35.252" starttime="20170731 14:59:35.251" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:59:35.252" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:59:35.253" starttime="20170731 14:59:35.252" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:59:35.253" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:59:35.253" starttime="20170731 14:59:35.253" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:59:35.254" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:59:35.254" starttime="20170731 14:59:35.253" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:59:35.436" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:59:35.436" starttime="20170731 14:59:35.254" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:35.436" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:59:35.436" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:35.436" starttime="20170731 14:59:35.254" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:59:35.437" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:35.437" starttime="20170731 14:59:35.436" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:35.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:35.438" starttime="20170731 14:59:35.437" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.438" starttime="20170731 14:59:35.251" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.438" starttime="20170731 14:59:35.250" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.438" starttime="20170731 14:59:35.250" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:59:35.439" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:59:35.439" starttime="20170731 14:59:35.439" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:35.442" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:35.442" starttime="20170731 14:59:35.441" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:35.444" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:35.444" starttime="20170731 14:59:35.443" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.444" starttime="20170731 14:59:35.442" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.444" starttime="20170731 14:59:35.440" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.444" starttime="20170731 14:59:35.440" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:59:35.540" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:59:35.540" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:35.540" starttime="20170731 14:59:35.444" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:35.542" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:35.542" starttime="20170731 14:59:35.541" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:35.543" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:35.543" starttime="20170731 14:59:35.542" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.543" starttime="20170731 14:59:35.542" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.543" starttime="20170731 14:59:35.541" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.543" starttime="20170731 14:59:35.540" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:59:35.543" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:59:35.544" starttime="20170731 14:59:35.543" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:35.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:35.544" starttime="20170731 14:59:35.249" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:35.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:35.545" starttime="20170731 14:59:35.544" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:59:35.546" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:59:35.546" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:59:35.546" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:59:35.546" starttime="20170731 14:59:35.545" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:35.546" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:59:35.546" starttime="20170731 14:59:35.248" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:35.547" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:59:35.547" starttime="20170731 14:59:35.248" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:59:35.549" starttime="20170731 14:59:35.547" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.549" starttime="20170731 14:59:35.248" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:59:35.554" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:59:35.554" starttime="20170731 14:59:35.553" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:59:35.555" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:59:35.555" starttime="20170731 14:59:35.555" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:59:35.556" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:59:35.556" starttime="20170731 14:59:35.555" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:59:35.556" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:59:35.556" starttime="20170731 14:59:35.556" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:59:35.812" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:59:35.812" starttime="20170731 14:59:35.557" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:35.812" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:59:35.813" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:35.813" starttime="20170731 14:59:35.557" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:59:35.813" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:35.813" starttime="20170731 14:59:35.813" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:35.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:35.814" starttime="20170731 14:59:35.814" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.814" starttime="20170731 14:59:35.553" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.814" starttime="20170731 14:59:35.552" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.814" starttime="20170731 14:59:35.552" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:59:35.815" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:59:35.815" starttime="20170731 14:59:35.815" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:35.817" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:35.817" starttime="20170731 14:59:35.816" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:35.818" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:35.818" starttime="20170731 14:59:35.818" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.818" starttime="20170731 14:59:35.817" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.818" starttime="20170731 14:59:35.816" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.818" starttime="20170731 14:59:35.815" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:59:35.908" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:59:35.908" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:35.908" starttime="20170731 14:59:35.819" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:35.910" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:35.910" starttime="20170731 14:59:35.910" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:35.911" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:35.911" starttime="20170731 14:59:35.911" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.911" starttime="20170731 14:59:35.910" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.911" starttime="20170731 14:59:35.909" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:35.912" starttime="20170731 14:59:35.909" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:59:35.912" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:59:35.912" starttime="20170731 14:59:35.912" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:35.912" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:35.912" starttime="20170731 14:59:35.551" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:35.913" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:35.913" starttime="20170731 14:59:35.913" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:59:35.914" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:59:35.914" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:59:35.914" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:59:35.914" starttime="20170731 14:59:35.913" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:35.914" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:59:35.914" starttime="20170731 14:59:35.550" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:35.914" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:59:35.914" starttime="20170731 14:59:35.549" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:59:35.915" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:59:35.915" starttime="20170731 14:59:35.915" status="FAIL"></status>
</kw>
<status endtime="20170731 14:59:35.915" starttime="20170731 14:59:35.247" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:59:45.920" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:59:45.921" starttime="20170731 14:59:45.920" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:59:45.921" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:59:45.921" starttime="20170731 14:59:45.921" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:59:45.922" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:59:45.922" starttime="20170731 14:59:45.922" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:59:45.923" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:59:45.923" starttime="20170731 14:59:45.922" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:59:46.129" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:59:46.130" starttime="20170731 14:59:45.923" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:46.130" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:59:46.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:46.130" starttime="20170731 14:59:45.923" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:59:46.130" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:46.130" starttime="20170731 14:59:46.130" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:46.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:46.131" starttime="20170731 14:59:46.131" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.131" starttime="20170731 14:59:45.920" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.131" starttime="20170731 14:59:45.919" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.132" starttime="20170731 14:59:45.919" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:59:46.132" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:59:46.132" starttime="20170731 14:59:46.132" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:46.134" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:46.134" starttime="20170731 14:59:46.134" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:46.135" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:46.136" starttime="20170731 14:59:46.135" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.136" starttime="20170731 14:59:46.135" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.136" starttime="20170731 14:59:46.133" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.136" starttime="20170731 14:59:46.133" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:59:46.199" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:59:46.199" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:46.199" starttime="20170731 14:59:46.136" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:46.201" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:46.201" starttime="20170731 14:59:46.201" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:46.202" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:46.202" starttime="20170731 14:59:46.202" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.202" starttime="20170731 14:59:46.201" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.203" starttime="20170731 14:59:46.200" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.203" starttime="20170731 14:59:46.200" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:59:46.203" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:59:46.203" starttime="20170731 14:59:46.203" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:46.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:46.203" starttime="20170731 14:59:45.918" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:46.204" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:46.204" starttime="20170731 14:59:46.204" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:59:46.204" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:59:46.205" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:59:46.205" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:59:46.205" starttime="20170731 14:59:46.204" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:46.205" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:59:46.205" starttime="20170731 14:59:45.917" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:46.205" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:59:46.205" starttime="20170731 14:59:45.917" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:59:46.206" starttime="20170731 14:59:46.206" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.206" starttime="20170731 14:59:45.916" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:59:46.209" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:59:46.210" starttime="20170731 14:59:46.209" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:59:46.210" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:59:46.211" starttime="20170731 14:59:46.210" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:59:46.211" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:59:46.211" starttime="20170731 14:59:46.211" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:59:46.212" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:59:46.212" starttime="20170731 14:59:46.211" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:59:46.433" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:59:46.433" starttime="20170731 14:59:46.213" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:46.433" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:59:46.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:46.433" starttime="20170731 14:59:46.212" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:59:46.434" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:46.434" starttime="20170731 14:59:46.434" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:46.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:46.435" starttime="20170731 14:59:46.434" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.435" starttime="20170731 14:59:46.209" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.435" starttime="20170731 14:59:46.208" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.435" starttime="20170731 14:59:46.208" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:59:46.436" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:59:46.436" starttime="20170731 14:59:46.435" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:46.438" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:46.438" starttime="20170731 14:59:46.437" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:46.439" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:46.439" starttime="20170731 14:59:46.438" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.439" starttime="20170731 14:59:46.438" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.439" starttime="20170731 14:59:46.436" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.439" starttime="20170731 14:59:46.436" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:59:46.516" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:59:46.516" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:46.516" starttime="20170731 14:59:46.439" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:46.518" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:46.518" starttime="20170731 14:59:46.518" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:46.519" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:46.519" starttime="20170731 14:59:46.519" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.519" starttime="20170731 14:59:46.518" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.519" starttime="20170731 14:59:46.517" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:46.519" starttime="20170731 14:59:46.517" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:59:46.520" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:59:46.520" starttime="20170731 14:59:46.520" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:46.520" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:46.520" starttime="20170731 14:59:46.207" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:46.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:46.521" starttime="20170731 14:59:46.520" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:59:46.522" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:59:46.522" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:59:46.522" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:59:46.522" starttime="20170731 14:59:46.521" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:46.522" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:59:46.522" starttime="20170731 14:59:46.206" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:46.522" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:59:46.522" starttime="20170731 14:59:46.206" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:59:46.523" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:59:46.523" starttime="20170731 14:59:46.523" status="FAIL"></status>
</kw>
<status endtime="20170731 14:59:46.523" starttime="20170731 14:59:45.916" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:59:56.528" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:59:56.529" starttime="20170731 14:59:56.528" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:59:56.529" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:59:56.529" starttime="20170731 14:59:56.529" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:59:56.530" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:59:56.530" starttime="20170731 14:59:56.530" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:59:56.531" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:59:56.531" starttime="20170731 14:59:56.530" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:59:56.716" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:59:56.717" starttime="20170731 14:59:56.531" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:56.717" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:59:56.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:56.717" starttime="20170731 14:59:56.531" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:59:56.717" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:56.717" starttime="20170731 14:59:56.717" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:56.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:56.718" starttime="20170731 14:59:56.718" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.718" starttime="20170731 14:59:56.527" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.718" starttime="20170731 14:59:56.527" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.718" starttime="20170731 14:59:56.526" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:59:56.719" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 14:59:56.719" starttime="20170731 14:59:56.719" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:56.721" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:56.721" starttime="20170731 14:59:56.720" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:56.722" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:56.722" starttime="20170731 14:59:56.722" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.722" starttime="20170731 14:59:56.721" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.722" starttime="20170731 14:59:56.720" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.722" starttime="20170731 14:59:56.719" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:59:56.798" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 14:59:56.798" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:56.798" starttime="20170731 14:59:56.723" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:56.800" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:56.800" starttime="20170731 14:59:56.799" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:56.801" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:56.801" starttime="20170731 14:59:56.801" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.801" starttime="20170731 14:59:56.800" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.801" starttime="20170731 14:59:56.799" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.801" starttime="20170731 14:59:56.798" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:59:56.802" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:59:56.802" starttime="20170731 14:59:56.801" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:56.802" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:56.802" starttime="20170731 14:59:56.525" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:56.802" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:56.803" starttime="20170731 14:59:56.802" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:59:56.803" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:59:56.803" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:59:56.803" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 14:59:56.803" starttime="20170731 14:59:56.803" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:56.804" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 14:59:56.804" starttime="20170731 14:59:56.525" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:56.804" level="INFO">${power_state} = On</msg>
<status endtime="20170731 14:59:56.804" starttime="20170731 14:59:56.524" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 14:59:56.804" starttime="20170731 14:59:56.804" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.805" starttime="20170731 14:59:56.524" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 14:59:56.808" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 14:59:56.808" starttime="20170731 14:59:56.808" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 14:59:56.809" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 14:59:56.809" starttime="20170731 14:59:56.809" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 14:59:56.810" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 14:59:56.810" starttime="20170731 14:59:56.809" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 14:59:56.810" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 14:59:56.810" starttime="20170731 14:59:56.810" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 14:59:56.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 14:59:56.988" starttime="20170731 14:59:56.811" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:56.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 14:59:56.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:56.988" starttime="20170731 14:59:56.810" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 14:59:56.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:56.989" starttime="20170731 14:59:56.989" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:56.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:56.990" starttime="20170731 14:59:56.989" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.990" starttime="20170731 14:59:56.807" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.990" starttime="20170731 14:59:56.807" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.990" starttime="20170731 14:59:56.806" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 14:59:56.991" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 14:59:56.991" starttime="20170731 14:59:56.990" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:56.993" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:56.993" starttime="20170731 14:59:56.992" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:56.994" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 14:59:56.994" starttime="20170731 14:59:56.994" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.994" starttime="20170731 14:59:56.993" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.994" starttime="20170731 14:59:56.991" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:56.994" starttime="20170731 14:59:56.991" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 14:59:57.057" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 14:59:57.057" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:57.057" starttime="20170731 14:59:56.994" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 14:59:57.059" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:57.059" starttime="20170731 14:59:57.058" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 14:59:57.060" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 14:59:57.060" starttime="20170731 14:59:57.060" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:57.060" starttime="20170731 14:59:57.059" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:57.060" starttime="20170731 14:59:57.058" status="PASS"></status>
</kw>
<status endtime="20170731 14:59:57.060" starttime="20170731 14:59:57.057" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 14:59:57.060" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 14:59:57.061" starttime="20170731 14:59:57.060" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:57.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 14:59:57.061" starttime="20170731 14:59:56.806" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 14:59:57.062" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 14:59:57.062" starttime="20170731 14:59:57.061" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 14:59:57.063" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 14:59:57.063" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 14:59:57.063" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 14:59:57.063" starttime="20170731 14:59:57.062" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:57.063" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 14:59:57.063" starttime="20170731 14:59:56.805" status="PASS"></status>
</kw>
<msg timestamp="20170731 14:59:57.064" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 14:59:57.064" starttime="20170731 14:59:56.805" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 14:59:57.065" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 14:59:57.065" starttime="20170731 14:59:57.064" status="FAIL"></status>
</kw>
<status endtime="20170731 14:59:57.065" starttime="20170731 14:59:56.524" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:00:07.070" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:00:07.070" starttime="20170731 15:00:07.069" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:00:07.071" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:00:07.071" starttime="20170731 15:00:07.070" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:00:07.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:00:07.071" starttime="20170731 15:00:07.071" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:00:07.072" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:00:07.072" starttime="20170731 15:00:07.072" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:00:07.268" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:00:07.268" starttime="20170731 15:00:07.073" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:07.268" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:00:07.268" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:07.268" starttime="20170731 15:00:07.073" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:00:07.269" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:07.269" starttime="20170731 15:00:07.269" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:07.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:07.270" starttime="20170731 15:00:07.269" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.270" starttime="20170731 15:00:07.069" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.270" starttime="20170731 15:00:07.068" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.270" starttime="20170731 15:00:07.068" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:00:07.271" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 15:00:07.271" starttime="20170731 15:00:07.270" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:07.273" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:07.273" starttime="20170731 15:00:07.272" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:07.274" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:07.274" starttime="20170731 15:00:07.273" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.274" starttime="20170731 15:00:07.273" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.274" starttime="20170731 15:00:07.271" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.274" starttime="20170731 15:00:07.271" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:00:07.345" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 15:00:07.345" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:07.345" starttime="20170731 15:00:07.274" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:07.347" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:07.347" starttime="20170731 15:00:07.346" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:07.348" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:07.348" starttime="20170731 15:00:07.348" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.348" starttime="20170731 15:00:07.347" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.348" starttime="20170731 15:00:07.346" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.348" starttime="20170731 15:00:07.345" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:00:07.349" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:00:07.349" starttime="20170731 15:00:07.348" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:07.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:07.349" starttime="20170731 15:00:07.067" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:07.349" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:07.350" starttime="20170731 15:00:07.349" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:00:07.350" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:00:07.350" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:00:07.350" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 15:00:07.350" starttime="20170731 15:00:07.350" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:07.350" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 15:00:07.351" starttime="20170731 15:00:07.067" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:07.351" level="INFO">${power_state} = On</msg>
<status endtime="20170731 15:00:07.351" starttime="20170731 15:00:07.066" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 15:00:07.351" starttime="20170731 15:00:07.351" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.351" starttime="20170731 15:00:07.066" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:00:07.358" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:00:07.358" starttime="20170731 15:00:07.358" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:00:07.359" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:00:07.359" starttime="20170731 15:00:07.359" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:00:07.360" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:00:07.360" starttime="20170731 15:00:07.359" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:00:07.360" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:00:07.360" starttime="20170731 15:00:07.360" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:00:07.571" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:00:07.571" starttime="20170731 15:00:07.361" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:07.571" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:00:07.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:07.571" starttime="20170731 15:00:07.361" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:00:07.572" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:07.572" starttime="20170731 15:00:07.572" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:07.573" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:07.573" starttime="20170731 15:00:07.572" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.573" starttime="20170731 15:00:07.357" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.573" starttime="20170731 15:00:07.354" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.573" starttime="20170731 15:00:07.353" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:00:07.574" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:00:07.574" starttime="20170731 15:00:07.573" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:07.576" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:07.576" starttime="20170731 15:00:07.575" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:07.577" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:07.577" starttime="20170731 15:00:07.576" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.577" starttime="20170731 15:00:07.576" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.577" starttime="20170731 15:00:07.574" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.577" starttime="20170731 15:00:07.574" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:00:07.664" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:00:07.664" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:07.664" starttime="20170731 15:00:07.577" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:07.666" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:07.666" starttime="20170731 15:00:07.666" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:07.667" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:07.667" starttime="20170731 15:00:07.667" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.667" starttime="20170731 15:00:07.667" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.668" starttime="20170731 15:00:07.665" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:07.668" starttime="20170731 15:00:07.665" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:00:07.668" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:00:07.668" starttime="20170731 15:00:07.668" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:07.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:07.668" starttime="20170731 15:00:07.353" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:07.669" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:07.669" starttime="20170731 15:00:07.669" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:00:07.670" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:00:07.670" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:00:07.670" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:00:07.670" starttime="20170731 15:00:07.669" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:07.670" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:00:07.670" starttime="20170731 15:00:07.352" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:07.670" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:00:07.670" starttime="20170731 15:00:07.352" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 15:00:07.671" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 15:00:07.671" starttime="20170731 15:00:07.671" status="FAIL"></status>
</kw>
<status endtime="20170731 15:00:07.671" starttime="20170731 15:00:07.065" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:00:17.676" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:00:17.676" starttime="20170731 15:00:17.676" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:00:17.677" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:00:17.677" starttime="20170731 15:00:17.677" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:00:17.677" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:00:17.677" starttime="20170731 15:00:17.677" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:00:17.678" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:00:17.678" starttime="20170731 15:00:17.678" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:00:17.855" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:00:17.855" starttime="20170731 15:00:17.679" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:17.855" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:00:17.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:17.855" starttime="20170731 15:00:17.678" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:00:17.856" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:17.856" starttime="20170731 15:00:17.856" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:17.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:17.857" starttime="20170731 15:00:17.856" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:17.857" starttime="20170731 15:00:17.675" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:17.857" starttime="20170731 15:00:17.675" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:17.857" starttime="20170731 15:00:17.674" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:00:17.858" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 15:00:17.858" starttime="20170731 15:00:17.857" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:17.860" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:17.860" starttime="20170731 15:00:17.859" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:17.860" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:17.861" starttime="20170731 15:00:17.860" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:17.861" starttime="20170731 15:00:17.860" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:17.861" starttime="20170731 15:00:17.858" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:17.861" starttime="20170731 15:00:17.858" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:00:17.948" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 15:00:17.948" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:17.948" starttime="20170731 15:00:17.861" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:17.950" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:17.950" starttime="20170731 15:00:17.949" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:17.950" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:17.951" starttime="20170731 15:00:17.950" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:17.951" starttime="20170731 15:00:17.950" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:17.951" starttime="20170731 15:00:17.949" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:17.951" starttime="20170731 15:00:17.948" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:00:17.951" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:00:17.951" starttime="20170731 15:00:17.951" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:17.951" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:17.952" starttime="20170731 15:00:17.673" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:17.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:17.952" starttime="20170731 15:00:17.952" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:00:17.953" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:00:17.953" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:00:17.953" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 15:00:17.953" starttime="20170731 15:00:17.952" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:17.953" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 15:00:17.953" starttime="20170731 15:00:17.673" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:17.954" level="INFO">${power_state} = On</msg>
<status endtime="20170731 15:00:17.954" starttime="20170731 15:00:17.672" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 15:00:17.954" starttime="20170731 15:00:17.954" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:17.954" starttime="20170731 15:00:17.672" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:00:17.958" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:00:17.958" starttime="20170731 15:00:17.957" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:00:17.959" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:00:17.959" starttime="20170731 15:00:17.959" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:00:17.960" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:00:17.960" starttime="20170731 15:00:17.959" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:00:17.960" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:00:17.960" starttime="20170731 15:00:17.960" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:00:18.254" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:00:18.254" starttime="20170731 15:00:17.961" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:18.254" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:00:18.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:18.254" starttime="20170731 15:00:17.960" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:00:18.255" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:18.255" starttime="20170731 15:00:18.254" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:18.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:18.255" starttime="20170731 15:00:18.255" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:18.255" starttime="20170731 15:00:17.957" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:18.255" starttime="20170731 15:00:17.956" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:18.256" starttime="20170731 15:00:17.956" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:00:18.256" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:00:18.256" starttime="20170731 15:00:18.256" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:18.258" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:18.258" starttime="20170731 15:00:18.258" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:18.259" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:18.259" starttime="20170731 15:00:18.259" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:18.259" starttime="20170731 15:00:18.258" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:18.259" starttime="20170731 15:00:18.257" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:18.260" starttime="20170731 15:00:18.256" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:00:18.322" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:00:18.322" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:18.322" starttime="20170731 15:00:18.260" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:18.324" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:18.324" starttime="20170731 15:00:18.323" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:18.325" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:18.325" starttime="20170731 15:00:18.325" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:18.325" starttime="20170731 15:00:18.324" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:18.325" starttime="20170731 15:00:18.323" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:18.325" starttime="20170731 15:00:18.322" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:00:18.326" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:00:18.326" starttime="20170731 15:00:18.325" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:18.326" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:18.326" starttime="20170731 15:00:17.955" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:18.326" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:18.327" starttime="20170731 15:00:18.326" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:00:18.327" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:00:18.327" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:00:18.327" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:00:18.327" starttime="20170731 15:00:18.327" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:18.327" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:00:18.328" starttime="20170731 15:00:17.955" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:18.328" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:00:18.328" starttime="20170731 15:00:17.954" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 15:00:18.328" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 15:00:18.329" starttime="20170731 15:00:18.328" status="FAIL"></status>
</kw>
<status endtime="20170731 15:00:18.329" starttime="20170731 15:00:17.672" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:00:28.334" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:00:28.334" starttime="20170731 15:00:28.334" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:00:28.335" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:00:28.335" starttime="20170731 15:00:28.335" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:00:28.336" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:00:28.336" starttime="20170731 15:00:28.335" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:00:28.336" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:00:28.336" starttime="20170731 15:00:28.336" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:00:28.536" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:00:28.536" starttime="20170731 15:00:28.337" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:28.536" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:00:28.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:28.536" starttime="20170731 15:00:28.337" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:00:28.537" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:28.537" starttime="20170731 15:00:28.536" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:28.537" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:28.537" starttime="20170731 15:00:28.537" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.538" starttime="20170731 15:00:28.333" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.538" starttime="20170731 15:00:28.333" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.538" starttime="20170731 15:00:28.332" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:00:28.538" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 15:00:28.538" starttime="20170731 15:00:28.538" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:28.540" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:28.540" starttime="20170731 15:00:28.540" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:28.541" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:28.542" starttime="20170731 15:00:28.541" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.542" starttime="20170731 15:00:28.541" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.542" starttime="20170731 15:00:28.539" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.542" starttime="20170731 15:00:28.539" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:00:28.612" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 15:00:28.612" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:28.612" starttime="20170731 15:00:28.542" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:28.614" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:28.614" starttime="20170731 15:00:28.614" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:28.615" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:28.615" starttime="20170731 15:00:28.615" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.615" starttime="20170731 15:00:28.614" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.616" starttime="20170731 15:00:28.613" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.616" starttime="20170731 15:00:28.613" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:00:28.616" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:00:28.616" starttime="20170731 15:00:28.616" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:28.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:28.616" starttime="20170731 15:00:28.331" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:28.617" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:28.617" starttime="20170731 15:00:28.617" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:00:28.618" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:00:28.618" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:00:28.618" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 15:00:28.618" starttime="20170731 15:00:28.618" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:28.618" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 15:00:28.618" starttime="20170731 15:00:28.330" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:28.619" level="INFO">${power_state} = On</msg>
<status endtime="20170731 15:00:28.619" starttime="20170731 15:00:28.330" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 15:00:28.619" starttime="20170731 15:00:28.619" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.619" starttime="20170731 15:00:28.330" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:00:28.623" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:00:28.623" starttime="20170731 15:00:28.622" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:00:28.624" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:00:28.624" starttime="20170731 15:00:28.624" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:00:28.625" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:00:28.625" starttime="20170731 15:00:28.625" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:00:28.626" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:00:28.626" starttime="20170731 15:00:28.625" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:00:28.933" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:00:28.933" starttime="20170731 15:00:28.627" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:28.933" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:00:28.933" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:28.933" starttime="20170731 15:00:28.627" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:00:28.934" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:28.934" starttime="20170731 15:00:28.933" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:28.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:28.935" starttime="20170731 15:00:28.934" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.935" starttime="20170731 15:00:28.622" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.935" starttime="20170731 15:00:28.622" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.935" starttime="20170731 15:00:28.621" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:00:28.935" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:00:28.935" starttime="20170731 15:00:28.935" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:28.938" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:28.938" starttime="20170731 15:00:28.937" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:28.939" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:28.939" starttime="20170731 15:00:28.938" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.939" starttime="20170731 15:00:28.938" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.939" starttime="20170731 15:00:28.936" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:28.939" starttime="20170731 15:00:28.936" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:00:29.018" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:00:29.018" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:29.018" starttime="20170731 15:00:28.939" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:29.021" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:29.021" starttime="20170731 15:00:29.020" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:29.022" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:29.022" starttime="20170731 15:00:29.022" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:29.023" starttime="20170731 15:00:29.021" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:29.023" starttime="20170731 15:00:29.019" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:29.023" starttime="20170731 15:00:29.019" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:00:29.023" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:00:29.023" starttime="20170731 15:00:29.023" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:29.023" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:29.023" starttime="20170731 15:00:28.620" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:29.024" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:29.024" starttime="20170731 15:00:29.024" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:00:29.025" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:00:29.025" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:00:29.025" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:00:29.025" starttime="20170731 15:00:29.024" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:29.025" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:00:29.025" starttime="20170731 15:00:28.620" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:29.025" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:00:29.025" starttime="20170731 15:00:28.619" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 15:00:29.026" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 15:00:29.026" starttime="20170731 15:00:29.026" status="FAIL"></status>
</kw>
<status endtime="20170731 15:00:29.026" starttime="20170731 15:00:28.329" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:00:39.032" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:00:39.032" starttime="20170731 15:00:39.031" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:00:39.033" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:00:39.033" starttime="20170731 15:00:39.032" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:00:39.033" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:00:39.033" starttime="20170731 15:00:39.033" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:00:39.034" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:00:39.034" starttime="20170731 15:00:39.034" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:00:39.217" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:00:39.217" starttime="20170731 15:00:39.035" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:39.218" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:00:39.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:39.218" starttime="20170731 15:00:39.034" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:00:39.218" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:39.218" starttime="20170731 15:00:39.218" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:39.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:39.219" starttime="20170731 15:00:39.219" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.219" starttime="20170731 15:00:39.030" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.219" starttime="20170731 15:00:39.030" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.219" starttime="20170731 15:00:39.029" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:00:39.220" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 15:00:39.220" starttime="20170731 15:00:39.220" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:39.222" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:39.222" starttime="20170731 15:00:39.221" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:39.223" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:39.224" starttime="20170731 15:00:39.223" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.224" starttime="20170731 15:00:39.222" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.224" starttime="20170731 15:00:39.221" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.224" starttime="20170731 15:00:39.220" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:00:39.305" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 15:00:39.306" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:39.306" starttime="20170731 15:00:39.224" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:39.307" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:39.307" starttime="20170731 15:00:39.307" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:39.309" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:39.309" starttime="20170731 15:00:39.308" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.309" starttime="20170731 15:00:39.308" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.309" starttime="20170731 15:00:39.306" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.309" starttime="20170731 15:00:39.306" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:00:39.310" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:00:39.310" starttime="20170731 15:00:39.309" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:39.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:39.310" starttime="20170731 15:00:39.029" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:39.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:39.311" starttime="20170731 15:00:39.310" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:00:39.311" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:00:39.311" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:00:39.311" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 15:00:39.311" starttime="20170731 15:00:39.311" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:39.311" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 15:00:39.312" starttime="20170731 15:00:39.028" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:39.312" level="INFO">${power_state} = On</msg>
<status endtime="20170731 15:00:39.312" starttime="20170731 15:00:39.028" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 15:00:39.312" starttime="20170731 15:00:39.312" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.312" starttime="20170731 15:00:39.027" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:00:39.316" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:00:39.316" starttime="20170731 15:00:39.316" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:00:39.317" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:00:39.317" starttime="20170731 15:00:39.317" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:00:39.318" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:00:39.318" starttime="20170731 15:00:39.317" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:00:39.318" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:00:39.318" starttime="20170731 15:00:39.318" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:00:39.590" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:00:39.590" starttime="20170731 15:00:39.319" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:39.590" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:00:39.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:39.590" starttime="20170731 15:00:39.318" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:00:39.591" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:39.591" starttime="20170731 15:00:39.591" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:39.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:39.592" starttime="20170731 15:00:39.591" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.592" starttime="20170731 15:00:39.315" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.592" starttime="20170731 15:00:39.315" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.592" starttime="20170731 15:00:39.314" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:00:39.593" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:00:39.593" starttime="20170731 15:00:39.592" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:39.595" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:39.595" starttime="20170731 15:00:39.594" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:39.596" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:39.596" starttime="20170731 15:00:39.596" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.596" starttime="20170731 15:00:39.595" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.596" starttime="20170731 15:00:39.593" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.596" starttime="20170731 15:00:39.593" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:00:39.669" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:00:39.669" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:39.669" starttime="20170731 15:00:39.597" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:39.671" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:39.671" starttime="20170731 15:00:39.671" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:39.672" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:39.672" starttime="20170731 15:00:39.672" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.672" starttime="20170731 15:00:39.671" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.672" starttime="20170731 15:00:39.670" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:39.673" starttime="20170731 15:00:39.670" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:00:39.673" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:00:39.673" starttime="20170731 15:00:39.673" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:39.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:39.673" starttime="20170731 15:00:39.314" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:39.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:39.674" starttime="20170731 15:00:39.673" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:00:39.674" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:00:39.674" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:00:39.675" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:00:39.675" starttime="20170731 15:00:39.674" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:39.675" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:00:39.675" starttime="20170731 15:00:39.313" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:39.675" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:00:39.675" starttime="20170731 15:00:39.313" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 15:00:39.676" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 15:00:39.676" starttime="20170731 15:00:39.675" status="FAIL"></status>
</kw>
<status endtime="20170731 15:00:39.676" starttime="20170731 15:00:39.027" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:00:49.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:00:49.681" starttime="20170731 15:00:49.680" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:00:49.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:00:49.682" starttime="20170731 15:00:49.682" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:00:49.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:00:49.683" starttime="20170731 15:00:49.682" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:00:49.684" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:00:49.684" starttime="20170731 15:00:49.683" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:00:49.872" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:00:49.872" starttime="20170731 15:00:49.684" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:49.873" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:00:49.873" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:49.873" starttime="20170731 15:00:49.684" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:00:49.873" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:49.873" starttime="20170731 15:00:49.873" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:49.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:49.874" starttime="20170731 15:00:49.874" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:49.874" starttime="20170731 15:00:49.680" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:49.874" starttime="20170731 15:00:49.680" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:49.874" starttime="20170731 15:00:49.679" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:00:49.875" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 15:00:49.875" starttime="20170731 15:00:49.875" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:49.877" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:49.877" starttime="20170731 15:00:49.876" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:49.878" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:49.878" starttime="20170731 15:00:49.878" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:49.878" starttime="20170731 15:00:49.877" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:49.878" starttime="20170731 15:00:49.876" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:49.878" starttime="20170731 15:00:49.875" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:00:49.960" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 15:00:49.960" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:49.960" starttime="20170731 15:00:49.878" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:49.961" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:49.961" starttime="20170731 15:00:49.961" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:49.962" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:49.962" starttime="20170731 15:00:49.962" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:49.963" starttime="20170731 15:00:49.962" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:49.963" starttime="20170731 15:00:49.960" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:49.963" starttime="20170731 15:00:49.960" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:00:49.963" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:00:49.963" starttime="20170731 15:00:49.963" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:49.963" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:49.963" starttime="20170731 15:00:49.678" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:49.964" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:49.964" starttime="20170731 15:00:49.964" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:00:49.965" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:00:49.965" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:00:49.965" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 15:00:49.965" starttime="20170731 15:00:49.965" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:49.965" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 15:00:49.965" starttime="20170731 15:00:49.678" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:49.966" level="INFO">${power_state} = On</msg>
<status endtime="20170731 15:00:49.966" starttime="20170731 15:00:49.677" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 15:00:49.966" starttime="20170731 15:00:49.966" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:49.966" starttime="20170731 15:00:49.677" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:00:49.970" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:00:49.971" starttime="20170731 15:00:49.970" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:00:49.971" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:00:49.971" starttime="20170731 15:00:49.971" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:00:49.972" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:00:49.972" starttime="20170731 15:00:49.971" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:00:49.972" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:00:49.972" starttime="20170731 15:00:49.972" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:00:50.257" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:00:50.258" starttime="20170731 15:00:49.973" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:50.258" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:00:50.258" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:50.258" starttime="20170731 15:00:49.973" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:00:50.259" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:50.259" starttime="20170731 15:00:50.258" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:50.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:50.260" starttime="20170731 15:00:50.259" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:50.260" starttime="20170731 15:00:49.969" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:50.260" starttime="20170731 15:00:49.969" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:50.260" starttime="20170731 15:00:49.968" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:00:50.261" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:00:50.261" starttime="20170731 15:00:50.261" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:50.263" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:50.263" starttime="20170731 15:00:50.262" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:50.264" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:00:50.264" starttime="20170731 15:00:50.264" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:50.264" starttime="20170731 15:00:50.263" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:50.264" starttime="20170731 15:00:50.262" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:50.265" starttime="20170731 15:00:50.261" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:00:50.328" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:00:50.328" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:50.328" starttime="20170731 15:00:50.265" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:00:50.332" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:50.332" starttime="20170731 15:00:50.329" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:00:50.333" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:00:50.333" starttime="20170731 15:00:50.333" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:50.333" starttime="20170731 15:00:50.332" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:50.333" starttime="20170731 15:00:50.329" status="PASS"></status>
</kw>
<status endtime="20170731 15:00:50.333" starttime="20170731 15:00:50.328" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:00:50.333" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:00:50.334" starttime="20170731 15:00:50.333" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:50.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:00:50.334" starttime="20170731 15:00:49.967" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:00:50.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:00:50.334" starttime="20170731 15:00:50.334" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:00:50.335" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:00:50.335" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:00:50.335" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:00:50.335" starttime="20170731 15:00:50.335" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:50.335" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:00:50.335" starttime="20170731 15:00:49.967" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:00:50.336" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:00:50.336" starttime="20170731 15:00:49.966" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 15:00:50.336" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 15:00:50.336" starttime="20170731 15:00:50.336" status="FAIL"></status>
</kw>
<status endtime="20170731 15:00:50.337" starttime="20170731 15:00:49.676" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:00.341" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:00.342" starttime="20170731 15:01:00.341" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:00.342" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:00.342" starttime="20170731 15:01:00.342" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:00.343" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:00.343" starttime="20170731 15:01:00.342" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:00.343" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:00.344" starttime="20170731 15:01:00.343" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:00.560" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:00.561" starttime="20170731 15:01:00.344" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:00.561" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:00.561" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:00.561" starttime="20170731 15:01:00.344" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:00.561" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:00.561" starttime="20170731 15:01:00.561" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:00.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:00.562" starttime="20170731 15:01:00.562" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.562" starttime="20170731 15:01:00.340" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.562" starttime="20170731 15:01:00.340" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.562" starttime="20170731 15:01:00.339" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:00.563" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 15:01:00.563" starttime="20170731 15:01:00.563" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:00.565" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:00.565" starttime="20170731 15:01:00.564" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:00.567" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:00.567" starttime="20170731 15:01:00.566" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.567" starttime="20170731 15:01:00.566" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.567" starttime="20170731 15:01:00.564" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.567" starttime="20170731 15:01:00.563" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:00.630" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 15:01:00.630" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:00.630" starttime="20170731 15:01:00.567" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:00.631" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:00.632" starttime="20170731 15:01:00.631" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:00.632" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:00.632" starttime="20170731 15:01:00.632" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.633" starttime="20170731 15:01:00.632" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.633" starttime="20170731 15:01:00.631" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.633" starttime="20170731 15:01:00.630" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:00.633" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:00.633" starttime="20170731 15:01:00.633" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:00.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:00.633" starttime="20170731 15:01:00.339" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:00.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:00.634" starttime="20170731 15:01:00.634" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:00.635" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:00.635" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:00.635" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 15:01:00.635" starttime="20170731 15:01:00.634" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:00.635" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 15:01:00.635" starttime="20170731 15:01:00.338" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:00.635" level="INFO">${power_state} = On</msg>
<status endtime="20170731 15:01:00.635" starttime="20170731 15:01:00.338" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 15:01:00.636" starttime="20170731 15:01:00.636" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.636" starttime="20170731 15:01:00.337" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:00.640" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:00.640" starttime="20170731 15:01:00.639" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:00.641" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:00.641" starttime="20170731 15:01:00.640" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:00.641" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:00.641" starttime="20170731 15:01:00.641" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:00.642" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:00.642" starttime="20170731 15:01:00.642" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:00.847" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:00.847" starttime="20170731 15:01:00.643" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:00.847" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:00.847" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:00.847" starttime="20170731 15:01:00.642" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:00.847" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:00.848" starttime="20170731 15:01:00.847" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:00.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:00.848" starttime="20170731 15:01:00.848" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.848" starttime="20170731 15:01:00.639" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.848" starttime="20170731 15:01:00.638" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.849" starttime="20170731 15:01:00.638" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:00.849" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:01:00.849" starttime="20170731 15:01:00.849" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:00.851" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:00.851" starttime="20170731 15:01:00.850" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:00.852" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:00.852" starttime="20170731 15:01:00.852" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.852" starttime="20170731 15:01:00.851" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.852" starttime="20170731 15:01:00.850" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.852" starttime="20170731 15:01:00.849" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:00.916" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:01:00.916" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:00.916" starttime="20170731 15:01:00.853" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:00.918" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:00.918" starttime="20170731 15:01:00.917" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:00.919" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:00.919" starttime="20170731 15:01:00.919" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.919" starttime="20170731 15:01:00.918" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.919" starttime="20170731 15:01:00.917" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:00.919" starttime="20170731 15:01:00.917" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:00.920" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:00.920" starttime="20170731 15:01:00.919" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:00.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:00.920" starttime="20170731 15:01:00.637" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:00.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:00.921" starttime="20170731 15:01:00.920" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:00.921" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:00.921" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:00.921" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:01:00.921" starttime="20170731 15:01:00.921" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:00.922" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:01:00.922" starttime="20170731 15:01:00.637" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:00.922" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:01:00.922" starttime="20170731 15:01:00.636" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 15:01:00.923" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 15:01:00.923" starttime="20170731 15:01:00.922" status="FAIL"></status>
</kw>
<status endtime="20170731 15:01:00.923" starttime="20170731 15:01:00.337" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:10.928" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:10.928" starttime="20170731 15:01:10.927" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:10.929" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:10.929" starttime="20170731 15:01:10.928" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:10.929" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:10.929" starttime="20170731 15:01:10.929" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:10.930" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:10.930" starttime="20170731 15:01:10.929" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:11.123" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:11.123" starttime="20170731 15:01:10.931" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:11.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:11.124" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:11.124" starttime="20170731 15:01:10.930" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:11.124" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:11.124" starttime="20170731 15:01:11.124" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:11.125" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:11.125" starttime="20170731 15:01:11.124" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.125" starttime="20170731 15:01:10.927" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.125" starttime="20170731 15:01:10.926" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.125" starttime="20170731 15:01:10.926" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:11.126" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 15:01:11.126" starttime="20170731 15:01:11.125" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:11.128" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:11.128" starttime="20170731 15:01:11.127" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:11.129" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:11.129" starttime="20170731 15:01:11.128" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.129" starttime="20170731 15:01:11.128" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.129" starttime="20170731 15:01:11.126" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.129" starttime="20170731 15:01:11.126" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:11.206" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 15:01:11.206" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:11.206" starttime="20170731 15:01:11.130" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:11.208" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:11.208" starttime="20170731 15:01:11.207" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:11.208" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:11.209" starttime="20170731 15:01:11.208" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.209" starttime="20170731 15:01:11.208" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.209" starttime="20170731 15:01:11.207" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.209" starttime="20170731 15:01:11.206" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:11.209" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:11.209" starttime="20170731 15:01:11.209" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:11.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:11.210" starttime="20170731 15:01:10.925" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:11.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:11.210" starttime="20170731 15:01:11.210" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:11.211" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:11.211" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:11.211" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 15:01:11.211" starttime="20170731 15:01:11.210" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:11.211" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 15:01:11.211" starttime="20170731 15:01:10.924" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:11.211" level="INFO">${power_state} = On</msg>
<status endtime="20170731 15:01:11.212" starttime="20170731 15:01:10.924" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 15:01:11.212" starttime="20170731 15:01:11.212" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.212" starttime="20170731 15:01:10.923" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:11.216" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:11.216" starttime="20170731 15:01:11.215" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:11.216" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:11.217" starttime="20170731 15:01:11.216" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:11.217" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:11.217" starttime="20170731 15:01:11.217" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:11.218" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:11.218" starttime="20170731 15:01:11.217" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:11.429" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:11.430" starttime="20170731 15:01:11.218" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:11.430" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:11.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:11.430" starttime="20170731 15:01:11.218" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:11.430" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:11.430" starttime="20170731 15:01:11.430" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:11.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:11.431" starttime="20170731 15:01:11.431" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.431" starttime="20170731 15:01:11.215" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.431" starttime="20170731 15:01:11.214" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.431" starttime="20170731 15:01:11.214" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:11.432" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:01:11.432" starttime="20170731 15:01:11.432" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:11.434" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:11.434" starttime="20170731 15:01:11.433" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:11.435" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:11.435" starttime="20170731 15:01:11.435" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.435" starttime="20170731 15:01:11.434" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.435" starttime="20170731 15:01:11.433" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.435" starttime="20170731 15:01:11.432" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:11.497" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:01:11.497" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:11.498" starttime="20170731 15:01:11.435" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:11.499" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:11.499" starttime="20170731 15:01:11.499" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:11.500" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:11.500" starttime="20170731 15:01:11.500" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.500" starttime="20170731 15:01:11.499" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.500" starttime="20170731 15:01:11.498" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:11.500" starttime="20170731 15:01:11.498" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:11.501" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:11.501" starttime="20170731 15:01:11.501" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:11.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:11.501" starttime="20170731 15:01:11.213" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:11.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:11.502" starttime="20170731 15:01:11.501" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:11.502" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:11.502" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:11.503" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:01:11.503" starttime="20170731 15:01:11.502" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:11.503" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:01:11.503" starttime="20170731 15:01:11.213" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:11.503" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:01:11.503" starttime="20170731 15:01:11.212" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 15:01:11.504" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 15:01:11.504" starttime="20170731 15:01:11.503" status="FAIL"></status>
</kw>
<status endtime="20170731 15:01:11.504" starttime="20170731 15:01:10.923" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:21.509" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:21.509" starttime="20170731 15:01:21.509" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:21.510" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:21.510" starttime="20170731 15:01:21.510" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:21.510" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:21.510" starttime="20170731 15:01:21.510" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:21.511" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:21.511" starttime="20170731 15:01:21.511" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:21.718" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:21.718" starttime="20170731 15:01:21.512" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:21.718" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:21.718" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:21.718" starttime="20170731 15:01:21.511" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:21.719" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:21.719" starttime="20170731 15:01:21.719" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:21.720" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:21.720" starttime="20170731 15:01:21.719" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:21.720" starttime="20170731 15:01:21.508" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:21.720" starttime="20170731 15:01:21.507" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:21.720" starttime="20170731 15:01:21.507" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:21.720" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 15:01:21.721" starttime="20170731 15:01:21.720" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:21.723" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:21.723" starttime="20170731 15:01:21.722" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:21.724" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:21.724" starttime="20170731 15:01:21.723" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:21.724" starttime="20170731 15:01:21.723" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:21.724" starttime="20170731 15:01:21.721" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:21.724" starttime="20170731 15:01:21.721" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:21.802" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 15:01:21.802" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:21.802" starttime="20170731 15:01:21.724" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:21.804" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:21.804" starttime="20170731 15:01:21.803" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:21.806" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:21.806" starttime="20170731 15:01:21.805" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:21.806" starttime="20170731 15:01:21.804" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:21.806" starttime="20170731 15:01:21.803" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:21.806" starttime="20170731 15:01:21.802" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:21.806" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:21.807" starttime="20170731 15:01:21.806" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:21.807" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:21.807" starttime="20170731 15:01:21.506" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:21.807" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:21.807" starttime="20170731 15:01:21.807" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:21.808" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:21.808" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:21.808" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 15:01:21.808" starttime="20170731 15:01:21.808" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:21.808" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 15:01:21.808" starttime="20170731 15:01:21.506" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:21.809" level="INFO">${power_state} = On</msg>
<status endtime="20170731 15:01:21.809" starttime="20170731 15:01:21.505" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 15:01:21.809" starttime="20170731 15:01:21.809" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:21.809" starttime="20170731 15:01:21.505" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:21.813" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:21.813" starttime="20170731 15:01:21.812" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:21.814" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:21.814" starttime="20170731 15:01:21.813" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:21.814" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:21.814" starttime="20170731 15:01:21.814" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:21.815" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:21.815" starttime="20170731 15:01:21.815" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:22.127" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:22.127" starttime="20170731 15:01:21.816" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:22.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:22.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:22.128" starttime="20170731 15:01:21.815" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:22.128" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:22.128" starttime="20170731 15:01:22.128" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:22.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:22.129" starttime="20170731 15:01:22.128" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:22.129" starttime="20170731 15:01:21.812" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:22.129" starttime="20170731 15:01:21.812" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:22.129" starttime="20170731 15:01:21.811" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:22.130" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:01:22.130" starttime="20170731 15:01:22.129" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:22.132" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:22.132" starttime="20170731 15:01:22.131" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:22.133" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:22.133" starttime="20170731 15:01:22.133" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:22.133" starttime="20170731 15:01:22.132" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:22.133" starttime="20170731 15:01:22.130" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:22.133" starttime="20170731 15:01:22.130" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:22.195" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:01:22.195" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:22.195" starttime="20170731 15:01:22.134" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:22.198" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:22.198" starttime="20170731 15:01:22.197" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:22.199" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:22.199" starttime="20170731 15:01:22.199" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:22.199" starttime="20170731 15:01:22.198" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:22.200" starttime="20170731 15:01:22.196" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:22.200" starttime="20170731 15:01:22.196" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:22.200" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:22.200" starttime="20170731 15:01:22.200" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:22.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:22.200" starttime="20170731 15:01:21.810" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:22.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:22.201" starttime="20170731 15:01:22.201" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:22.202" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:22.202" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:22.202" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:01:22.202" starttime="20170731 15:01:22.201" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:22.202" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:01:22.202" starttime="20170731 15:01:21.810" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:22.202" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:01:22.202" starttime="20170731 15:01:21.809" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 15:01:22.203" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 15:01:22.203" starttime="20170731 15:01:22.203" status="FAIL"></status>
</kw>
<status endtime="20170731 15:01:22.203" starttime="20170731 15:01:21.504" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:32.208" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:32.208" starttime="20170731 15:01:32.207" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:32.209" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:32.209" starttime="20170731 15:01:32.208" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:32.209" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:32.209" starttime="20170731 15:01:32.209" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:32.210" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:32.210" starttime="20170731 15:01:32.210" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:32.423" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:32.423" starttime="20170731 15:01:32.211" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:32.424" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:32.424" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:32.424" starttime="20170731 15:01:32.211" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:32.424" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:32.424" starttime="20170731 15:01:32.424" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:32.425" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:32.425" starttime="20170731 15:01:32.425" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.425" starttime="20170731 15:01:32.207" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.425" starttime="20170731 15:01:32.207" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.425" starttime="20170731 15:01:32.206" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:32.426" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 15:01:32.426" starttime="20170731 15:01:32.425" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:32.428" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:32.428" starttime="20170731 15:01:32.427" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:32.429" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:32.429" starttime="20170731 15:01:32.429" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.429" starttime="20170731 15:01:32.428" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.429" starttime="20170731 15:01:32.427" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.429" starttime="20170731 15:01:32.426" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:32.492" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 15:01:32.492" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:32.492" starttime="20170731 15:01:32.429" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:32.494" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:32.494" starttime="20170731 15:01:32.493" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:32.495" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:32.495" starttime="20170731 15:01:32.494" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.495" starttime="20170731 15:01:32.494" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.495" starttime="20170731 15:01:32.493" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.495" starttime="20170731 15:01:32.492" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:32.495" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:32.495" starttime="20170731 15:01:32.495" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:32.496" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:32.496" starttime="20170731 15:01:32.205" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:32.496" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:32.497" starttime="20170731 15:01:32.496" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:32.497" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:32.497" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:32.498" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 15:01:32.498" starttime="20170731 15:01:32.497" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:32.498" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 15:01:32.498" starttime="20170731 15:01:32.205" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:32.498" level="INFO">${power_state} = On</msg>
<status endtime="20170731 15:01:32.498" starttime="20170731 15:01:32.204" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 15:01:32.499" starttime="20170731 15:01:32.499" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.499" starttime="20170731 15:01:32.204" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:32.505" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:32.505" starttime="20170731 15:01:32.504" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:32.505" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:32.506" starttime="20170731 15:01:32.505" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:32.506" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:32.506" starttime="20170731 15:01:32.506" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:32.507" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:32.507" starttime="20170731 15:01:32.506" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:32.731" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:32.731" starttime="20170731 15:01:32.507" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:32.731" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:32.731" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:32.731" starttime="20170731 15:01:32.507" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:32.732" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:32.732" starttime="20170731 15:01:32.732" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:32.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:32.733" starttime="20170731 15:01:32.732" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.733" starttime="20170731 15:01:32.504" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.733" starttime="20170731 15:01:32.503" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.733" starttime="20170731 15:01:32.502" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:32.734" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:01:32.734" starttime="20170731 15:01:32.733" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:32.736" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:32.736" starttime="20170731 15:01:32.735" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:32.736" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:32.737" starttime="20170731 15:01:32.736" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.737" starttime="20170731 15:01:32.736" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.737" starttime="20170731 15:01:32.734" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.737" starttime="20170731 15:01:32.734" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:32.892" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:01:32.892" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:32.892" starttime="20170731 15:01:32.737" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:32.894" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:32.894" starttime="20170731 15:01:32.893" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:32.895" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:32.895" starttime="20170731 15:01:32.895" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.895" starttime="20170731 15:01:32.894" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.895" starttime="20170731 15:01:32.893" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:32.896" starttime="20170731 15:01:32.892" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:32.896" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:32.896" starttime="20170731 15:01:32.896" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:32.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:32.896" starttime="20170731 15:01:32.501" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:32.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:32.897" starttime="20170731 15:01:32.897" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:32.897" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:32.897" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:32.898" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:01:32.898" starttime="20170731 15:01:32.897" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:32.898" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:01:32.898" starttime="20170731 15:01:32.500" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:32.898" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:01:32.898" starttime="20170731 15:01:32.500" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 15:01:32.899" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 15:01:32.899" starttime="20170731 15:01:32.898" status="FAIL"></status>
</kw>
<status endtime="20170731 15:01:32.899" starttime="20170731 15:01:32.204" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:42.904" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:42.904" starttime="20170731 15:01:42.904" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:42.905" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:42.905" starttime="20170731 15:01:42.905" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:42.906" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:42.906" starttime="20170731 15:01:42.905" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:42.906" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:42.906" starttime="20170731 15:01:42.906" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.105" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:43.106" starttime="20170731 15:01:42.907" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.106" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:43.106" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:43.106" starttime="20170731 15:01:42.907" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.106" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:43.107" starttime="20170731 15:01:43.106" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:43.107" starttime="20170731 15:01:43.107" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.107" starttime="20170731 15:01:42.903" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.108" starttime="20170731 15:01:42.903" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.108" starttime="20170731 15:01:42.902" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:43.108" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 15:01:43.108" starttime="20170731 15:01:43.108" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:43.110" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:43.110" starttime="20170731 15:01:43.110" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:43.111" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:43.111" starttime="20170731 15:01:43.111" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.111" starttime="20170731 15:01:43.110" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.111" starttime="20170731 15:01:43.109" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.112" starttime="20170731 15:01:43.108" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:43.208" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 15:01:43.208" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:43.208" starttime="20170731 15:01:43.112" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:43.210" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:43.210" starttime="20170731 15:01:43.210" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:43.211" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:43.211" starttime="20170731 15:01:43.211" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.211" starttime="20170731 15:01:43.210" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.211" starttime="20170731 15:01:43.209" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.212" starttime="20170731 15:01:43.209" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:43.212" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:43.212" starttime="20170731 15:01:43.212" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.212" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:43.212" starttime="20170731 15:01:42.901" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.213" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:43.213" starttime="20170731 15:01:43.212" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:43.213" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:43.214" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:43.214" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 15:01:43.214" starttime="20170731 15:01:43.213" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.214" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 15:01:43.214" starttime="20170731 15:01:42.901" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.214" level="INFO">${power_state} = On</msg>
<status endtime="20170731 15:01:43.214" starttime="20170731 15:01:42.900" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 15:01:43.215" starttime="20170731 15:01:43.215" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.215" starttime="20170731 15:01:42.900" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:43.219" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:43.219" starttime="20170731 15:01:43.218" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:43.220" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:43.220" starttime="20170731 15:01:43.220" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:43.221" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:43.221" starttime="20170731 15:01:43.221" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:43.222" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:43.222" starttime="20170731 15:01:43.222" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.436" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:43.436" starttime="20170731 15:01:43.223" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.436" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:43.436" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:43.436" starttime="20170731 15:01:43.223" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.437" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:43.437" starttime="20170731 15:01:43.436" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:43.437" starttime="20170731 15:01:43.437" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.438" starttime="20170731 15:01:43.218" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.438" starttime="20170731 15:01:43.217" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.438" starttime="20170731 15:01:43.217" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:43.438" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:01:43.438" starttime="20170731 15:01:43.438" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:43.440" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:43.440" starttime="20170731 15:01:43.440" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:43.441" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:43.441" starttime="20170731 15:01:43.441" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.442" starttime="20170731 15:01:43.441" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.442" starttime="20170731 15:01:43.439" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.442" starttime="20170731 15:01:43.439" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:43.547" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:01:43.548" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:43.548" starttime="20170731 15:01:43.442" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:43.549" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:43.549" starttime="20170731 15:01:43.549" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:43.550" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:43.550" starttime="20170731 15:01:43.550" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.551" starttime="20170731 15:01:43.550" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.551" starttime="20170731 15:01:43.548" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.551" starttime="20170731 15:01:43.548" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:43.551" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:43.551" starttime="20170731 15:01:43.551" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.551" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:43.551" starttime="20170731 15:01:43.216" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.552" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:43.552" starttime="20170731 15:01:43.552" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:43.553" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:43.553" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:43.553" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:01:43.553" starttime="20170731 15:01:43.552" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.553" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:01:43.553" starttime="20170731 15:01:43.216" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.553" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:01:43.554" starttime="20170731 15:01:43.215" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.554" level="FAIL">Running != Quiesced</msg>
<status endtime="20170731 15:01:43.554" starttime="20170731 15:01:43.554" status="FAIL"></status>
</kw>
<status endtime="20170731 15:01:43.555" starttime="20170731 15:01:42.900" status="FAIL"></status>
</kw>
<msg timestamp="20170731 15:01:43.555" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status endtime="20170731 15:01:43.555" starttime="20170731 14:51:35.741" status="FAIL"></status>
</kw>
<status endtime="20170731 15:01:43.555" starttime="20170731 14:51:35.337" status="FAIL"></status>
</kw>
<status endtime="20170731 15:01:43.555" starttime="20170731 14:51:04.023" status="FAIL"></status>
</kw>
<status endtime="20170731 15:01:43.555" starttime="20170731 14:51:04.022" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:43.560" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:43.561" starttime="20170731 15:01:43.560" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:43.561" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:43.561" starttime="20170731 15:01:43.561" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:43.562" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:43.562" starttime="20170731 15:01:43.561" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:43.562" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:43.563" starttime="20170731 15:01:43.562" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.813" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:43.813" starttime="20170731 15:01:43.563" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.814" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:43.814" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:43.814" starttime="20170731 15:01:43.563" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.814" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:43.814" starttime="20170731 15:01:43.814" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:43.815" starttime="20170731 15:01:43.815" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.815" starttime="20170731 15:01:43.559" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.815" starttime="20170731 15:01:43.559" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.815" starttime="20170731 15:01:43.558" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:43.816" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:01:43.816" starttime="20170731 15:01:43.816" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:43.818" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:43.818" starttime="20170731 15:01:43.817" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:43.819" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:01:43.819" starttime="20170731 15:01:43.819" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.819" starttime="20170731 15:01:43.818" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.819" starttime="20170731 15:01:43.817" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.819" starttime="20170731 15:01:43.816" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:43.883" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:01:43.883" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:43.883" starttime="20170731 15:01:43.820" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:01:43.885" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:43.885" starttime="20170731 15:01:43.884" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:01:43.886" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:01:43.886" starttime="20170731 15:01:43.885" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.886" starttime="20170731 15:01:43.885" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.886" starttime="20170731 15:01:43.884" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:43.886" starttime="20170731 15:01:43.883" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:43.886" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:43.887" starttime="20170731 15:01:43.886" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.887" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:43.887" starttime="20170731 15:01:43.557" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:43.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:43.887" starttime="20170731 15:01:43.887" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:43.888" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:43.888" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:43.888" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:01:43.888" starttime="20170731 15:01:43.888" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.889" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:01:43.889" starttime="20170731 15:01:43.557" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.889" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:01:43.889" starttime="20170731 15:01:43.556" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170731 15:01:43.890" starttime="20170731 15:01:43.890" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.890" level="INFO">${status} = True</msg>
<status endtime="20170731 15:01:43.890" starttime="20170731 15:01:43.889" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:43.891" level="INFO">${status} = True</msg>
<status endtime="20170731 15:01:43.891" starttime="20170731 15:01:43.556" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170731 15:01:43.913" level="INFO">Length is 9</msg>
<status endtime="20170731 15:01:43.913" starttime="20170731 15:01:43.913" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 15:01:43.917" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 15:01:46.930" level="INFO">${RC} = 0</msg>
<msg timestamp="20170731 15:01:46.930" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.737 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.546 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status endtime="20170731 15:01:46.931" starttime="20170731 15:01:43.914" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170731 15:01:46.945" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.737 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.546 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.533 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.535 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.533/0.587/0.737/0.091 ms</msg>
<status endtime="20170731 15:01:46.945" starttime="20170731 15:01:46.941" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170731 15:01:46.947" starttime="20170731 15:01:46.946" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:46.948" starttime="20170731 15:01:43.913" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 15:01:46.982" level="INFO">${cur_time} = 2017-07-31 15:01:46:981947</msg>
<status endtime="20170731 15:01:46.982" starttime="20170731 15:01:46.982" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 15:01:46.983" level="INFO">${cur_time} = 20170731150146981947</msg>
<status endtime="20170731 15:01:46.983" starttime="20170731 15:01:46.982" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:46.983" starttime="20170731 15:01:46.980" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:46.983" level="INFO">${FFDC_TIME} = 20170731150146981947</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170731 15:01:46.997" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170731 15:01:46.997" starttime="20170731 15:01:46.997" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170731 15:01:46.998" level="INFO">${suite_name} = 20170731150146981947_TestsTestBasicPoweron</msg>
<status endtime="20170731 15:01:46.998" starttime="20170731 15:01:46.998" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170731 15:01:46.998" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170731 15:01:46.999" starttime="20170731 15:01:46.998" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170731 15:01:46.999" level="INFO">${test_name} = 20170731150146981947_PowerOnTest</msg>
<status endtime="20170731 15:01:46.999" starttime="20170731 15:01:46.999" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:46.999" starttime="20170731 15:01:46.997" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:47.000" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/</msg>
<msg timestamp="20170731 15:01:47.000" level="INFO">${FFDC_PREFIX} = 20170731150146981947_</msg>
<msg timestamp="20170731 15:01:47.020" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.021" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.021" starttime="20170731 15:01:47.020" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:47.025" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.046" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.046" starttime="20170731 15:01:47.046" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.046" starttime="20170731 15:01:47.045" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.047" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.047" starttime="20170731 15:01:47.047" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.048" starttime="20170731 15:01:47.046" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.049" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.049" starttime="20170731 15:01:47.048" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.049" starttime="20170731 15:01:47.048" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.050" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.050" starttime="20170731 15:01:47.050" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.050" starttime="20170731 15:01:47.049" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.052" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.052" starttime="20170731 15:01:47.051" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.052" starttime="20170731 15:01:47.051" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.053" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.053" starttime="20170731 15:01:47.053" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.053" starttime="20170731 15:01:47.052" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.054" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.054" starttime="20170731 15:01:47.054" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.054" starttime="20170731 15:01:47.053" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.056" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.056" starttime="20170731 15:01:47.056" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.056" starttime="20170731 15:01:47.055" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.057" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.057" starttime="20170731 15:01:47.057" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.058" starttime="20170731 15:01:47.056" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.059" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.059" starttime="20170731 15:01:47.059" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.059" starttime="20170731 15:01:47.058" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.060" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.060" starttime="20170731 15:01:47.060" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.060" starttime="20170731 15:01:47.059" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.061" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.062" starttime="20170731 15:01:47.061" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.062" starttime="20170731 15:01:47.061" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.063" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.063" starttime="20170731 15:01:47.062" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.063" starttime="20170731 15:01:47.062" status="PASS"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170731 15:01:47.091" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:47.091" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170731 15:01:47.181" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170731 15:01:47.190" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170731 15:01:47.190" level="INFO">${stderr} = </msg>
<msg timestamp="20170731 15:01:47.190" level="INFO">${rc} = 0</msg>
<status endtime="20170731 15:01:47.190" starttime="20170731 15:01:47.064" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170731 15:01:47.191" level="INFO">Length is 0</msg>
<status endtime="20170731 15:01:47.191" starttime="20170731 15:01:47.191" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170731 15:01:47.192" level="INFO">Length is 11</msg>
<status endtime="20170731 15:01:47.192" starttime="20170731 15:01:47.191" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:47.192" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170731 15:01:47.192" starttime="20170731 15:01:47.063" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.193" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.193" starttime="20170731 15:01:47.193" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.193" starttime="20170731 15:01:47.192" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.194" starttime="20170731 15:01:47.058" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.195" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.195" starttime="20170731 15:01:47.194" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.195" starttime="20170731 15:01:47.194" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 15:01:47.195" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170731 15:01:47.195" starttime="20170731 15:01:47.195" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.197" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.197" starttime="20170731 15:01:47.197" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.197" starttime="20170731 15:01:47.196" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.198" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.198" starttime="20170731 15:01:47.198" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.199" starttime="20170731 15:01:47.198" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.199" starttime="20170731 15:01:47.196" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.200" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.200" starttime="20170731 15:01:47.199" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.200" starttime="20170731 15:01:47.199" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.201" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.201" starttime="20170731 15:01:47.201" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.201" starttime="20170731 15:01:47.200" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.201" starttime="20170731 15:01:47.199" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.203" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.203" starttime="20170731 15:01:47.202" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.203" starttime="20170731 15:01:47.202" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.204" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.204" starttime="20170731 15:01:47.203" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.204" starttime="20170731 15:01:47.203" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.204" starttime="20170731 15:01:47.201" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.204" starttime="20170731 15:01:47.196" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.205" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.205" starttime="20170731 15:01:47.205" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.205" starttime="20170731 15:01:47.204" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.206" starttime="20170731 15:01:47.045" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 15:01:47.212" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170731 15:01:47.212" starttime="20170731 15:01:47.211" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170731 15:01:47.213" level="INFO">@{method_list} = [ ('SEL Log', 'Collect eSEL Log') | ('BMC Specific Files', 'BMC FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Ge...</msg>
<status endtime="20170731 15:01:47.213" starttime="20170731 15:01:47.213" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170731 15:01:47.214" starttime="20170731 15:01:47.214" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:47.214" level="INFO">@{ffdc_function_list} = [ SEL Log | BMC Specific Files | Core Files | OS FFDC | FFDC Generic Report | Get Request FFDC ]</msg>
<status endtime="20170731 15:01:47.214" starttime="20170731 15:01:47.213" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170731 15:01:47.216" starttime="20170731 15:01:47.216" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:47.217" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:47.217" level="INFO">${ret_values} = None</msg>
<status endtime="20170731 15:01:47.217" starttime="20170731 15:01:47.215" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170731 15:01:47.217" starttime="20170731 15:01:47.217" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:47.245" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:47.245" starttime="20170731 15:01:47.244" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:47.246" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:47.246" starttime="20170731 15:01:47.245" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:47.246" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:47.246" starttime="20170731 15:01:47.246" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:47.247" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:47.247" starttime="20170731 15:01:47.247" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:47.540" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:47.540" starttime="20170731 15:01:47.248" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:47.540" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:47.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:47.540" starttime="20170731 15:01:47.247" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:47.541" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:47.541" starttime="20170731 15:01:47.541" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:47.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:47.542" starttime="20170731 15:01:47.541" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.542" starttime="20170731 15:01:47.244" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.542" starttime="20170731 15:01:47.243" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:47.542" starttime="20170731 15:01:47.243" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:47.543" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170731 15:01:47.543" starttime="20170731 15:01:47.542" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170731 15:01:47.543" starttime="20170731 15:01:47.543" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:47.798" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170731 15:01:47.798" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:47.799" starttime="20170731 15:01:47.543" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170731 15:01:47.799" starttime="20170731 15:01:47.799" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:47.800" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:47.800" starttime="20170731 15:01:47.799" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:47.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:47.800" starttime="20170731 15:01:47.242" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:47.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:47.801" starttime="20170731 15:01:47.801" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:47.801" level="INFO">${status} = True</msg>
<status endtime="20170731 15:01:47.801" starttime="20170731 15:01:47.800" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170731 15:01:47.802" starttime="20170731 15:01:47.801" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:47.802" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 e7 39 1f 70 00 00 00 07 e7 7d 3d 80 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 01 89 00 00 01 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 01 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 6d ab 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 01 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 01 00 03 20 01 9e 83 dc f0 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 01 01 05 00 00 00 00 00 00 55 44 02 1c 02 01 e5 00 00 00 00 02 e4 00 05 00 01 00 00 00 00 3d d1 13 00 08 60 04 02 00 02 00 00 dd b6 00 08 04 00 02 04 00 80 02 00 51 3a 00 00 08 0f ff bc 2b fc 40 01 00 00 0f 0c 00 08 f0 04 44 21 09 82 06 80 00 03 e2 00 01 80 00 ac c5 00 08 f7 ff ff ff 83 13 40 ff b5 a3 00 08 0f c0 04 42 40 b6 15 40 10 03 fc 00 ff ef 0c ff e0 06 5a 09 81 13 40 c0 00 00 00 7f 90 00 08 11 07 08 20 eb c3 0d 00 29 4f 00 08 30 09 82 10 7e 40 1d 00 06 61 1b 87 02 1d 60 00 08 4c 70 04 43 1d 48 64 27 87 26 b9 06 80 20 01 02 02 00 0d 7c 00 06 68 1b 87 f1 09 25 00 08 fe 04 44 8c 45 06 80 ca 01 c1 02 00 06 6f 1b 83 1f 1d 40 80 65 2d 0f 81 1c c2 00 f6 3c 40 11 3b 01 92 02 00 02 11 06 80 ff 1f 3d c2 a5 40 00 03 87 ee e1 00 08 0e 1c 82 04 43 f8 bf 00 08 f1 40 83 00 60 a8 4b 40 13 42 fc 00 00 d6 28 02 00 08 3f 02 06 f8 04 41 7d 60 e7 4e 82 04 42 60 de 00 08 18 92 0d 04 ca e3 03 80 04 7c 04 42 6f c4 12 40 04 44 04 bb 5b 0f 81 fa f8 02 00 ff 00 04 99 2b 5d 87 99 a9 3c 40 91 5f 40 0f 5f 40 d6 08 5d 85 18 08 00 31 54 40 02 00 40 04 02 10 80 00 1b 12 40 95 54 02 1f 03 80 11 0f cf 88 fc 21 80 04 44 21 c4 db 4e 80 24 f0 30 3f 13 40 54 ae 2d 41 4b 04 43 16 75 41 6d b0 4b 00 1c 01 4c d8 1b 87 cd 45 40 16 05 54 26 48 41 38 04 43 30 4b 48 e4 71 89 5d 86 01 a2 55 69 87 3b 33 06 80 0a c3 00 0c 05 02 00 b5 1b 40 03 08 f3 00 00 3f 02 00 43 d2 00 10 08 0b 60 04 43 39 5d 00 08 09 07 e0 6c cc 04 41 d9 cc 06 80 44 3d 94 c2 00 d8 99 03 87 f5 7d d4 12 80 04 44 83 60 40 28 04 44 fb 1e ac 5d 82 37 04 41 c9 a8 43 02 00 80 03 2e 4d 19 5d 84 b0 56 80 33 40 04 41 03 80 0d 00 3c bd 00 08 9f c0 20 01 00 f0 00 40 00 2c cd 5d 82 00 07 e7 5c db 9f 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501512659444, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 5a 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 08 0a 4c 2f a0 00 00 00 08 0a 8d 84 50 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 02 89 00 00 02 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 00 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 6d ab 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 00 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 00 00 03 20 02 9e 83 dc f0 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 00 01 05 00 00 00 00 00 00 55 44 02 0c 02 01 e5 00 00 00 00 02 cc 00 05 00 00 00 00 00 00 3b d1 13 00 08 20 05 80 01 82 00 dd b6 00 08 08 00 02 04 00 04 41 51 3a 00 00 08 0f ff bc 2b fc 40 00 02 00 0f 0c 00 08 f0 04 83 00 20 09 82 06 80 00 03 e2 00 00 00 01 00 ac c5 00 08 f7 ff 20 ff ff 13 40 ff b5 a3 00 08 d0 0f c0 01 82 b6 15 40 10 03 fc 00 03 ff ef ff e0 06 5a 09 81 13 40 00 c0 00 00 7f 90 00 08 11 08 07 08 eb c3 0d 00 29 4f 00 02 08 30 82 10 7e 40 1d 00 06 40 61 1b 87 1d 60 00 08 4c 70 92 04 83 1d 64 27 87 26 b9 06 80 20 00 01 02 00 0d 7c 00 06 68 82 1b 87 f1 25 00 08 fe 0d 44 8c 52 45 06 80 01 04 83 06 6f 1b 83 1f 99 1d 40 80 2d 0f 81 1c c2 00 f6 3c 40 64 11 3b 01 01 80 02 11 06 80 ff 1f 82 3d c2 a5 00 00 08 04 0d 44 ee 04 e1 00 08 0e 1c 04 83 f8 bf 13 00 08 f1 40 83 00 a8 4b 40 13 42 00 fc 00 00 d6 28 00 08 3f 13 02 06 f8 01 81 7d e7 4e 82 01 82 04 60 de 00 08 18 0d 04 ca e3 96 45 80 04 7c 01 82 6f 12 40 0d 44 04 20 bb 5b 0f 81 fa f8 00 ff 00 15 04 99 2b 5d 87 99 3c 40 91 5f 40 48 0f 5f 40 d6 08 5d 85 08 00 31 c0 54 40 01 80 40 04 02 80 00 1b 80 12 40 95 54 02 1f 80 11 0f 19 cf 88 fc 21 80 0d 44 c4 db 4e 80 0a 24 f0 30 3f 13 40 ae 2d 41 4b a2 04 83 16 75 41 6d b0 00 1c 01 4c 5a d8 1b 87 cd 45 40 16 05 26 48 41 38 a4 04 83 30 4b 48 e4 71 5d 86 01 a2 4a 55 69 87 3b 33 15 81 c3 01 02 b5 82 1b 40 03 f3 00 10 3f 01 80 43 08 d2 00 08 69 0d 44 39 5d 00 04 08 07 e6 1d 0c 01 81 d9 cc 89 06 80 3f 00 3d 01 81 d8 99 45 87 35 f5 7d 12 80 0d 44 83 60 40 28 0d 44 2e fb 1e 5d 82 37 56 02 33 40 01 81 03 80 0d 00 3c bd 00 08 9f c0 20 01 00 f0 00 40 00 2c cd 5d 82 00 08 0a 6d ba 4f 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501512660761, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/3/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501512783752, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501512904604, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:47.803" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:47.803" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/4': {u'AdditionalData': [], u'associations': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error',...</msg>
<status endtime="20170731 15:01:47.803" starttime="20170731 15:01:47.802" status="PASS"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170731 15:01:47.804" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/2/callout', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/3/callout', u'/xyz/openbmc_proj...</msg>
<status endtime="20170731 15:01:47.804" starttime="20170731 15:01:47.803" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 15:01:47.804" level="INFO">${logpath} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel</msg>
<status endtime="20170731 15:01:47.804" starttime="20170731 15:01:47.804" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:47.805" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:47.805" starttime="20170731 15:01:47.804" status="PASS"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:47.808" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:47.809" starttime="20170731 15:01:47.808" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:47.809" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:47.809" starttime="20170731 15:01:47.809" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:47.810" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:47.810" starttime="20170731 15:01:47.810" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:47.811" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:47.811" starttime="20170731 15:01:47.810" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.000" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:48.000" starttime="20170731 15:01:47.811" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:48.000" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:48.000" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:48.000" starttime="20170731 15:01:47.811" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.001" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:48.001" starttime="20170731 15:01:48.000" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:48.001" starttime="20170731 15:01:48.001" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.002" starttime="20170731 15:01:47.808" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.002" starttime="20170731 15:01:47.807" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.002" starttime="20170731 15:01:47.807" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:48.002" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170731 15:01:48.002" starttime="20170731 15:01:48.002" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170731 15:01:48.003" starttime="20170731 15:01:48.003" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:48.090" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170731 15:01:48.090" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:48.090" starttime="20170731 15:01:48.003" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170731 15:01:48.091" starttime="20170731 15:01:48.090" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:48.091" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:48.091" starttime="20170731 15:01:48.091" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:48.092" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:48.092" starttime="20170731 15:01:47.806" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:48.092" starttime="20170731 15:01:48.092" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:48.093" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 e7 39 1f 70 00 00 00 07 e7 7d 3d 80 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 01 89 00 00 01 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 01 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 6d ab 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 01 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 01 00 03 20 01 9e 83 dc f0 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 01 01 05 00 00 00 00 00 00 55 44 02 1c 02 01 e5 00 00 00 00 02 e4 00 05 00 01 00 00 00 00 3d d1 13 00 08 60 04 02 00 02 00 00 dd b6 00 08 04 00 02 04 00 80 02 00 51 3a 00 00 08 0f ff bc 2b fc 40 01 00 00 0f 0c 00 08 f0 04 44 21 09 82 06 80 00 03 e2 00 01 80 00 ac c5 00 08 f7 ff ff ff 83 13 40 ff b5 a3 00 08 0f c0 04 42 40 b6 15 40 10 03 fc 00 ff ef 0c ff e0 06 5a 09 81 13 40 c0 00 00 00 7f 90 00 08 11 07 08 20 eb c3 0d 00 29 4f 00 08 30 09 82 10 7e 40 1d 00 06 61 1b 87 02 1d 60 00 08 4c 70 04 43 1d 48 64 27 87 26 b9 06 80 20 01 02 02 00 0d 7c 00 06 68 1b 87 f1 09 25 00 08 fe 04 44 8c 45 06 80 ca 01 c1 02 00 06 6f 1b 83 1f 1d 40 80 65 2d 0f 81 1c c2 00 f6 3c 40 11 3b 01 92 02 00 02 11 06 80 ff 1f 3d c2 a5 40 00 03 87 ee e1 00 08 0e 1c 82 04 43 f8 bf 00 08 f1 40 83 00 60 a8 4b 40 13 42 fc 00 00 d6 28 02 00 08 3f 02 06 f8 04 41 7d 60 e7 4e 82 04 42 60 de 00 08 18 92 0d 04 ca e3 03 80 04 7c 04 42 6f c4 12 40 04 44 04 bb 5b 0f 81 fa f8 02 00 ff 00 04 99 2b 5d 87 99 a9 3c 40 91 5f 40 0f 5f 40 d6 08 5d 85 18 08 00 31 54 40 02 00 40 04 02 10 80 00 1b 12 40 95 54 02 1f 03 80 11 0f cf 88 fc 21 80 04 44 21 c4 db 4e 80 24 f0 30 3f 13 40 54 ae 2d 41 4b 04 43 16 75 41 6d b0 4b 00 1c 01 4c d8 1b 87 cd 45 40 16 05 54 26 48 41 38 04 43 30 4b 48 e4 71 89 5d 86 01 a2 55 69 87 3b 33 06 80 0a c3 00 0c 05 02 00 b5 1b 40 03 08 f3 00 00 3f 02 00 43 d2 00 10 08 0b 60 04 43 39 5d 00 08 09 07 e0 6c cc 04 41 d9 cc 06 80 44 3d 94 c2 00 d8 99 03 87 f5 7d d4 12 80 04 44 83 60 40 28 04 44 fb 1e ac 5d 82 37 04 41 c9 a8 43 02 00 80 03 2e 4d 19 5d 84 b0 56 80 33 40 04 41 03 80 0d 00 3c bd 00 08 9f c0 20 01 00 f0 00 40 00 2c cd 5d 82 00 07 e7 5c db 9f 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:48.093" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:48.093" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 ...</msg>
<status endtime="20170731 15:01:48.093" starttime="20170731 15:01:48.092" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:48.093" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 e7 39 1f 70 00 00 ...</msg>
<status endtime="20170731 15:01:48.093" starttime="20170731 15:01:47.805" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170731 15:01:48.094" level="INFO">Length is 2</msg>
<msg timestamp="20170731 15:01:48.094" level="INFO">${length} = 2</msg>
<status endtime="20170731 15:01:48.094" starttime="20170731 15:01:48.094" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170731 15:01:48.095" starttime="20170731 15:01:48.094" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:48.096" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:48.096" starttime="20170731 15:01:48.096" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.096" starttime="20170731 15:01:48.095" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:48.097" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:48.097" starttime="20170731 15:01:48.097" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.097" starttime="20170731 15:01:48.096" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.098" starttime="20170731 15:01:47.805" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2/callout" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:48.101" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:48.101" starttime="20170731 15:01:48.100" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:48.102" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:48.102" starttime="20170731 15:01:48.102" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:48.102" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:48.103" starttime="20170731 15:01:48.102" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:48.103" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:48.104" starttime="20170731 15:01:48.103" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.327" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:48.327" starttime="20170731 15:01:48.104" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:48.327" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:48.327" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:48.327" starttime="20170731 15:01:48.104" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.328" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:48.328" starttime="20170731 15:01:48.328" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:48.329" starttime="20170731 15:01:48.328" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.329" starttime="20170731 15:01:48.100" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.329" starttime="20170731 15:01:48.100" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.329" starttime="20170731 15:01:48.099" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:48.329" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/callout/attr/AdditionalData</msg>
<status endtime="20170731 15:01:48.330" starttime="20170731 15:01:48.329" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170731 15:01:48.330" starttime="20170731 15:01:48.330" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:48.390" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/callout/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170731 15:01:48.390" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170731 15:01:48.390" starttime="20170731 15:01:48.330" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170731 15:01:48.391" starttime="20170731 15:01:48.390" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:48.391" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:48.391" starttime="20170731 15:01:48.391" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:48.391" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170731 15:01:48.391" starttime="20170731 15:01:48.098" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.392" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170731 15:01:48.392" level="FAIL">404 != 200</msg>
<status endtime="20170731 15:01:48.392" starttime="20170731 15:01:48.392" status="FAIL"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:48.393" level="INFO">To JSON using : content={
  "data": {
    "description": "The specified property cannot be found: 'AdditionalData'"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg timestamp="20170731 15:01:48.393" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:48.393" level="INFO">${content} = {u'message': u'404 Not Found', u'status': u'error', u'data': {u'description': u"The specified property cannot be found: 'AdditionalData'"}}</msg>
<status endtime="20170731 15:01:48.393" starttime="20170731 15:01:48.393" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:48.394" level="INFO">${esel_data} = {u'description': u"The specified property cannot be found: 'AdditionalData'"}</msg>
<status endtime="20170731 15:01:48.394" starttime="20170731 15:01:48.098" status="FAIL"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170731 15:01:48.394" level="INFO">Length is 1</msg>
<msg timestamp="20170731 15:01:48.394" level="INFO">${length} = 1</msg>
<status endtime="20170731 15:01:48.394" starttime="20170731 15:01:48.394" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170731 15:01:48.395" starttime="20170731 15:01:48.394" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.395" level="FAIL">Resolving variable '${esel_data[0]}' failed: KeyError: 0</msg>
<status endtime="20170731 15:01:48.395" starttime="20170731 15:01:48.395" status="FAIL"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:48.396" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:48.397" starttime="20170731 15:01:48.396" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.397" starttime="20170731 15:01:48.395" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.397" starttime="20170731 15:01:48.098" status="FAIL"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:48.400" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:48.402" starttime="20170731 15:01:48.400" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:48.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:48.403" starttime="20170731 15:01:48.403" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:48.404" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:48.404" starttime="20170731 15:01:48.403" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:48.405" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:48.405" starttime="20170731 15:01:48.404" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.674" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:48.674" starttime="20170731 15:01:48.405" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:48.674" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:48.674" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:48.674" starttime="20170731 15:01:48.405" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.675" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:48.675" starttime="20170731 15:01:48.674" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:48.676" starttime="20170731 15:01:48.675" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.676" starttime="20170731 15:01:48.399" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.676" starttime="20170731 15:01:48.399" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.676" starttime="20170731 15:01:48.398" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:48.677" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170731 15:01:48.677" starttime="20170731 15:01:48.676" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170731 15:01:48.677" starttime="20170731 15:01:48.677" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:48.802" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170731 15:01:48.802" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:48.802" starttime="20170731 15:01:48.677" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170731 15:01:48.802" starttime="20170731 15:01:48.802" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:48.803" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:48.803" starttime="20170731 15:01:48.803" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:48.803" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:48.803" starttime="20170731 15:01:48.398" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:48.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:48.804" starttime="20170731 15:01:48.803" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:48.804" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 5a 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 08 0a 4c 2f a0 00 00 00 08 0a 8d 84 50 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 02 89 00 00 02 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 00 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 6d ab 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 00 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 00 00 03 20 02 9e 83 dc f0 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 00 01 05 00 00 00 00 00 00 55 44 02 0c 02 01 e5 00 00 00 00 02 cc 00 05 00 00 00 00 00 00 3b d1 13 00 08 20 05 80 01 82 00 dd b6 00 08 08 00 02 04 00 04 41 51 3a 00 00 08 0f ff bc 2b fc 40 00 02 00 0f 0c 00 08 f0 04 83 00 20 09 82 06 80 00 03 e2 00 00 00 01 00 ac c5 00 08 f7 ff 20 ff ff 13 40 ff b5 a3 00 08 d0 0f c0 01 82 b6 15 40 10 03 fc 00 03 ff ef ff e0 06 5a 09 81 13 40 00 c0 00 00 7f 90 00 08 11 08 07 08 eb c3 0d 00 29 4f 00 02 08 30 82 10 7e 40 1d 00 06 40 61 1b 87 1d 60 00 08 4c 70 92 04 83 1d 64 27 87 26 b9 06 80 20 00 01 02 00 0d 7c 00 06 68 82 1b 87 f1 25 00 08 fe 0d 44 8c 52 45 06 80 01 04 83 06 6f 1b 83 1f 99 1d 40 80 2d 0f 81 1c c2 00 f6 3c 40 64 11 3b 01 01 80 02 11 06 80 ff 1f 82 3d c2 a5 00 00 08 04 0d 44 ee 04 e1 00 08 0e 1c 04 83 f8 bf 13 00 08 f1 40 83 00 a8 4b 40 13 42 00 fc 00 00 d6 28 00 08 3f 13 02 06 f8 01 81 7d e7 4e 82 01 82 04 60 de 00 08 18 0d 04 ca e3 96 45 80 04 7c 01 82 6f 12 40 0d 44 04 20 bb 5b 0f 81 fa f8 00 ff 00 15 04 99 2b 5d 87 99 3c 40 91 5f 40 48 0f 5f 40 d6 08 5d 85 08 00 31 c0 54 40 01 80 40 04 02 80 00 1b 80 12 40 95 54 02 1f 80 11 0f 19 cf 88 fc 21 80 0d 44 c4 db 4e 80 0a 24 f0 30 3f 13 40 ae 2d 41 4b a2 04 83 16 75 41 6d b0 00 1c 01 4c 5a d8 1b 87 cd 45 40 16 05 26 48 41 38 a4 04 83 30 4b 48 e4 71 5d 86 01 a2 4a 55 69 87 3b 33 15 81 c3 01 02 b5 82 1b 40 03 f3 00 10 3f 01 80 43 08 d2 00 08 69 0d 44 39 5d 00 04 08 07 e6 1d 0c 01 81 d9 cc 89 06 80 3f 00 3d 01 81 d8 99 45 87 35 f5 7d 12 80 0d 44 83 60 40 28 0d 44 2e fb 1e 5d 82 37 56 02 33 40 01 81 03 80 0d 00 3c bd 00 08 9f c0 20 01 00 f0 00 40 00 2c cd 5d 82 00 08 0a 6d ba 4f 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:48.805" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:48.805" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 5a 04 aa 00 00 50 ...</msg>
<status endtime="20170731 15:01:48.805" starttime="20170731 15:01:48.804" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:48.805" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 5a 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 08 0a 4c 2f a0 00 00 ...</msg>
<status endtime="20170731 15:01:48.805" starttime="20170731 15:01:48.397" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170731 15:01:48.806" level="INFO">Length is 2</msg>
<msg timestamp="20170731 15:01:48.806" level="INFO">${length} = 2</msg>
<status endtime="20170731 15:01:48.806" starttime="20170731 15:01:48.805" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170731 15:01:48.806" starttime="20170731 15:01:48.806" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:48.808" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:48.808" starttime="20170731 15:01:48.807" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.808" starttime="20170731 15:01:48.806" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:48.809" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:48.809" starttime="20170731 15:01:48.809" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.809" starttime="20170731 15:01:48.808" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:48.809" starttime="20170731 15:01:48.397" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3/callout" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:48.813" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:48.813" starttime="20170731 15:01:48.812" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:48.814" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:48.814" starttime="20170731 15:01:48.813" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:48.814" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:48.814" starttime="20170731 15:01:48.814" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:48.815" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:48.815" starttime="20170731 15:01:48.815" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.004" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:49.004" starttime="20170731 15:01:48.816" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:49.004" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:49.004" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:49.004" starttime="20170731 15:01:48.815" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.005" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:49.005" starttime="20170731 15:01:49.004" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.005" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:49.005" starttime="20170731 15:01:49.005" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.006" starttime="20170731 15:01:48.812" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.006" starttime="20170731 15:01:48.811" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.006" starttime="20170731 15:01:48.811" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:49.006" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/callout/attr/AdditionalData</msg>
<status endtime="20170731 15:01:49.006" starttime="20170731 15:01:49.006" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170731 15:01:49.007" starttime="20170731 15:01:49.007" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:49.065" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/callout/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170731 15:01:49.065" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170731 15:01:49.065" starttime="20170731 15:01:49.007" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170731 15:01:49.066" starttime="20170731 15:01:49.065" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:49.066" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:49.066" starttime="20170731 15:01:49.066" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:49.067" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170731 15:01:49.067" starttime="20170731 15:01:48.810" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170731 15:01:49.067" level="FAIL">404 != 200</msg>
<status endtime="20170731 15:01:49.067" starttime="20170731 15:01:49.067" status="FAIL"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:49.068" level="INFO">To JSON using : content={
  "data": {
    "description": "The specified property cannot be found: 'AdditionalData'"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg timestamp="20170731 15:01:49.068" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:49.068" level="INFO">${content} = {u'message': u'404 Not Found', u'status': u'error', u'data': {u'description': u"The specified property cannot be found: 'AdditionalData'"}}</msg>
<status endtime="20170731 15:01:49.068" starttime="20170731 15:01:49.068" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:49.068" level="INFO">${esel_data} = {u'description': u"The specified property cannot be found: 'AdditionalData'"}</msg>
<status endtime="20170731 15:01:49.069" starttime="20170731 15:01:48.809" status="FAIL"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170731 15:01:49.069" level="INFO">Length is 1</msg>
<msg timestamp="20170731 15:01:49.069" level="INFO">${length} = 1</msg>
<status endtime="20170731 15:01:49.069" starttime="20170731 15:01:49.069" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170731 15:01:49.070" starttime="20170731 15:01:49.069" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.070" level="FAIL">Resolving variable '${esel_data[0]}' failed: KeyError: 0</msg>
<status endtime="20170731 15:01:49.070" starttime="20170731 15:01:49.070" status="FAIL"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:49.071" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_esel&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:49.071" starttime="20170731 15:01:49.071" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.072" starttime="20170731 15:01:49.070" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.072" starttime="20170731 15:01:48.809" status="FAIL"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:49.076" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:49.076" starttime="20170731 15:01:49.075" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:49.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:49.077" starttime="20170731 15:01:49.077" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:49.078" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:49.078" starttime="20170731 15:01:49.078" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:49.079" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:49.079" starttime="20170731 15:01:49.079" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.271" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:49.271" starttime="20170731 15:01:49.080" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:49.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:49.272" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:49.272" starttime="20170731 15:01:49.080" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:49.273" starttime="20170731 15:01:49.272" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:49.273" starttime="20170731 15:01:49.273" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.273" starttime="20170731 15:01:49.075" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.273" starttime="20170731 15:01:49.074" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.274" starttime="20170731 15:01:49.073" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:49.274" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170731 15:01:49.274" starttime="20170731 15:01:49.274" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170731 15:01:49.275" starttime="20170731 15:01:49.274" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:49.356" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170731 15:01:49.356" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:49.356" starttime="20170731 15:01:49.275" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170731 15:01:49.357" starttime="20170731 15:01:49.357" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:49.357" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:49.358" starttime="20170731 15:01:49.357" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:49.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:49.358" starttime="20170731 15:01:49.072" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:49.358" starttime="20170731 15:01:49.358" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:49.359" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:49.359" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:49.359" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170731 15:01:49.359" starttime="20170731 15:01:49.359" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:49.359" level="INFO">${esel_data} = []</msg>
<status endtime="20170731 15:01:49.360" starttime="20170731 15:01:49.072" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170731 15:01:49.360" level="INFO">Length is 0</msg>
<msg timestamp="20170731 15:01:49.360" level="INFO">${length} = 0</msg>
<status endtime="20170731 15:01:49.360" starttime="20170731 15:01:49.360" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.361" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170731 15:01:49.361" starttime="20170731 15:01:49.360" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.361" starttime="20170731 15:01:49.072" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:49.365" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:49.365" starttime="20170731 15:01:49.364" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:49.366" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:49.366" starttime="20170731 15:01:49.365" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:49.366" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:49.366" starttime="20170731 15:01:49.366" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:49.367" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:49.367" starttime="20170731 15:01:49.367" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.562" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:49.562" starttime="20170731 15:01:49.368" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:49.562" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:49.562" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:49.562" starttime="20170731 15:01:49.367" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.563" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:49.563" starttime="20170731 15:01:49.562" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:49.564" starttime="20170731 15:01:49.563" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.564" starttime="20170731 15:01:49.364" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.564" starttime="20170731 15:01:49.363" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.564" starttime="20170731 15:01:49.362" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:49.564" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170731 15:01:49.565" starttime="20170731 15:01:49.564" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170731 15:01:49.565" starttime="20170731 15:01:49.565" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:49.663" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170731 15:01:49.663" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:49.663" starttime="20170731 15:01:49.565" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170731 15:01:49.664" starttime="20170731 15:01:49.663" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:49.664" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:49.664" starttime="20170731 15:01:49.664" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:49.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:49.665" starttime="20170731 15:01:49.362" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:49.665" starttime="20170731 15:01:49.665" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:01:49.666" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:01:49.666" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:01:49.666" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170731 15:01:49.666" starttime="20170731 15:01:49.666" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:49.666" level="INFO">${esel_data} = []</msg>
<status endtime="20170731 15:01:49.666" starttime="20170731 15:01:49.361" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170731 15:01:49.667" level="INFO">Length is 0</msg>
<msg timestamp="20170731 15:01:49.667" level="INFO">${length} = 0</msg>
<status endtime="20170731 15:01:49.667" starttime="20170731 15:01:49.667" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170731 15:01:49.668" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170731 15:01:49.668" starttime="20170731 15:01:49.667" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.668" starttime="20170731 15:01:49.361" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.668" starttime="20170731 15:01:47.805" status="FAIL"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170731 15:01:49.671" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 15:01:49.674" level="INFO">${out} = </msg>
<status endtime="20170731 15:01:49.674" starttime="20170731 15:01:49.668" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170731 15:01:49.678" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170731 15:01:49.678" starttime="20170731 15:01:49.677" status="FAIL"></status>
</kw>
<msg timestamp="20170731 15:01:49.678" level="INFO">${status} = False</msg>
<status endtime="20170731 15:01:49.678" starttime="20170731 15:01:49.676" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170731 15:01:49.679" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170731 15:01:49.679" starttime="20170731 15:01:49.678" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.679" starttime="20170731 15:01:47.242" status="FAIL"></status>
</kw>
<status endtime="20170731 15:01:49.680" starttime="20170731 15:01:47.217" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.680" starttime="20170731 15:01:47.215" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:49.680" starttime="20170731 15:01:47.215" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170731 15:01:49.683" starttime="20170731 15:01:49.682" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:49.683" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:49.683" level="INFO">${ret_values} = None</msg>
<status endtime="20170731 15:01:49.683" starttime="20170731 15:01:49.682" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170731 15:01:49.684" starttime="20170731 15:01:49.684" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 15:01:49.714" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170731 15:01:49.714" starttime="20170731 15:01:49.714" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 15:01:49.715" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') | ...</msg>
<status endtime="20170731 15:01:49.715" starttime="20170731 15:01:49.715" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 15:01:49.716" level="INFO">${logpath} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170731 15:01:49.716" starttime="20170731 15:01:49.716" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170731 15:01:49.718" starttime="20170731 15:01:49.717" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:01:49.718" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170731 15:01:49.718" starttime="20170731 15:01:49.718" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 15:01:49.784" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:49.784" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170731 15:01:50.397" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170731 15:01:50.397" starttime="20170731 15:01:49.748" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:50.397" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:50.398" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Jul 31 15:01 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Jul 31 15:01 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170731 15:01:50.399" starttime="20170731 15:01:49.719" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 15:01:50.399" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Jul 31 15:01 0 -&gt; /dev/null
lrwx------    1 root     root            64 Jul 31 15:01 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170731 15:01:50.400" starttime="20170731 15:01:50.399" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 15:01:50.400" level="INFO">${stderr} = ls: /proc/2541/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170731 15:01:50.400" starttime="20170731 15:01:50.400" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:50.407" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:50.407" starttime="20170731 15:01:50.406" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:50.407" starttime="20170731 15:01:50.405" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:50.407" starttime="20170731 15:01:50.400" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:50.407" starttime="20170731 15:01:49.716" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:50.407" starttime="20170731 15:01:49.716" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 15:01:50.408" level="INFO">${logpath} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_dmesg.txt</msg>
<status endtime="20170731 15:01:50.408" starttime="20170731 15:01:50.408" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170731 15:01:50.410" starttime="20170731 15:01:50.409" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:01:50.410" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170731 15:01:50.410" starttime="20170731 15:01:50.410" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 15:01:50.477" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:50.477" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170731 15:01:50.555" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170731 15:01:50.555" starttime="20170731 15:01:50.441" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:50.555" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:50.556" level="INFO">${ret_values} = (u"[  374.910000]  slave@01:00: status: 0x04000500, sisc: 0x00040000\n[  374.910000]  slave@01:00: status: 0x04000500, sisc: 0x00040000\n[  374.910000]  slave@01:00: status: 0x04000500, sisc: 0x000400...</msg>
<status endtime="20170731 15:01:50.556" starttime="20170731 15:01:50.411" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 15:01:50.556" level="INFO">${stdout} = [  374.910000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[  374.910000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[  374.910000]  slave@01:00: status: 0x04000500, sisc: 0x00040000
[ ...</msg>
<status endtime="20170731 15:01:50.557" starttime="20170731 15:01:50.556" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 15:01:50.557" level="INFO">${stderr} = </msg>
<status endtime="20170731 15:01:50.557" starttime="20170731 15:01:50.557" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:50.567" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_dmesg.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:50.567" starttime="20170731 15:01:50.566" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:50.567" starttime="20170731 15:01:50.565" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:50.567" starttime="20170731 15:01:50.558" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:50.567" starttime="20170731 15:01:50.408" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:50.567" starttime="20170731 15:01:50.408" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 15:01:50.568" level="INFO">${logpath} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_journalctl.txt</msg>
<status endtime="20170731 15:01:50.568" starttime="20170731 15:01:50.568" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170731 15:01:50.569" starttime="20170731 15:01:50.569" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:01:50.570" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170731 15:01:50.570" starttime="20170731 15:01:50.569" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 15:01:50.636" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:50.636" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170731 15:01:54.046" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170731 15:01:54.050" starttime="20170731 15:01:50.600" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:54.050" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:54.055" level="INFO">${ret_values} = (u'-- Logs begin at Mon 2017-07-31 14:39:41 UTC, end at Mon 2017-07-31 15:01:52 UTC. --\nJul 31 14:39:41 witherspoon kernel: Booting Linux on physical CPU 0x0\nJul 31 14:39:41 witherspoon kernel: Linu...</msg>
<status endtime="20170731 15:01:54.055" starttime="20170731 15:01:50.570" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 15:01:54.057" level="INFO">${stdout} = -- Logs begin at Mon 2017-07-31 14:39:41 UTC, end at Mon 2017-07-31 15:01:52 UTC. --
Jul 31 14:39:41 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 31 14:39:41 witherspoon kernel: Linux ver...</msg>
<status endtime="20170731 15:01:54.057" starttime="20170731 15:01:54.055" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 15:01:54.058" level="INFO">${stderr} = </msg>
<status endtime="20170731 15:01:54.058" starttime="20170731 15:01:54.057" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:54.069" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_journalctl.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:54.069" starttime="20170731 15:01:54.065" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.069" starttime="20170731 15:01:54.063" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.069" starttime="20170731 15:01:54.058" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.069" starttime="20170731 15:01:50.568" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.069" starttime="20170731 15:01:50.567" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 15:01:54.070" level="INFO">${logpath} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_procinfo.txt</msg>
<status endtime="20170731 15:01:54.070" starttime="20170731 15:01:54.069" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170731 15:01:54.071" starttime="20170731 15:01:54.071" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:01:54.073" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170731 15:01:54.073" starttime="20170731 15:01:54.072" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 15:01:54.140" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:54.141" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170731 15:01:54.199" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170731 15:01:54.199" starttime="20170731 15:01:54.103" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:54.199" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:54.199" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170731 15:01:54.199" starttime="20170731 15:01:54.073" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 15:01:54.200" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170731 15:01:54.200" starttime="20170731 15:01:54.199" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 15:01:54.200" level="INFO">${stderr} = </msg>
<status endtime="20170731 15:01:54.200" starttime="20170731 15:01:54.200" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:54.206" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_procinfo.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:54.206" starttime="20170731 15:01:54.206" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.206" starttime="20170731 15:01:54.205" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.207" starttime="20170731 15:01:54.200" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.207" starttime="20170731 15:01:54.070" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.207" starttime="20170731 15:01:54.069" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 15:01:54.207" level="INFO">${logpath} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_proc_list.txt</msg>
<status endtime="20170731 15:01:54.207" starttime="20170731 15:01:54.207" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170731 15:01:54.209" starttime="20170731 15:01:54.208" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:01:54.209" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170731 15:01:54.209" starttime="20170731 15:01:54.209" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 15:01:54.276" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:54.276" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170731 15:01:54.574" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170731 15:01:54.575" starttime="20170731 15:01:54.239" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:54.575" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:54.575" level="INFO">${ret_values} = (u'Mem: 158308K used, 273960K free, 14880K shrd, 11372K buff, 52720K cached\nCPU:   8% usr  16% sys   0% nic  75% idle   0% io   0% irq   0% sirq\nLoad average: 0.72 0.75 0.94 1/148 2545\n  PID  PPID ...</msg>
<status endtime="20170731 15:01:54.575" starttime="20170731 15:01:54.210" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 15:01:54.576" level="INFO">${stdout} = Mem: 158308K used, 273960K free, 14880K shrd, 11372K buff, 52720K cached
CPU:   8% usr  16% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 0.72 0.75 0.94 1/148 2545
  PID  PPID USER  ...</msg>
<status endtime="20170731 15:01:54.576" starttime="20170731 15:01:54.575" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 15:01:54.576" level="INFO">${stderr} = </msg>
<status endtime="20170731 15:01:54.576" starttime="20170731 15:01:54.576" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:54.582" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_proc_list.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:54.583" starttime="20170731 15:01:54.582" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.583" starttime="20170731 15:01:54.581" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.583" starttime="20170731 15:01:54.577" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.583" starttime="20170731 15:01:54.208" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.583" starttime="20170731 15:01:54.207" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 15:01:54.584" level="INFO">${logpath} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_meminfo.txt</msg>
<status endtime="20170731 15:01:54.584" starttime="20170731 15:01:54.583" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170731 15:01:54.585" starttime="20170731 15:01:54.585" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:01:54.586" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170731 15:01:54.586" starttime="20170731 15:01:54.585" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 15:01:54.651" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:54.652" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170731 15:01:54.698" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170731 15:01:54.698" starttime="20170731 15:01:54.616" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:54.698" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:54.698" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          273928 kB\nMemAvailable:     321144 kB\nBuffers:           11372 kB\nCached:            52720 kB\nSwapCached:            0 kB\nActive:           10319...</msg>
<status endtime="20170731 15:01:54.698" starttime="20170731 15:01:54.586" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 15:01:54.699" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          273928 kB
MemAvailable:     321144 kB
Buffers:           11372 kB
Cached:            52720 kB
SwapCached:            0 kB
Active:           103196 kB
Inac...</msg>
<status endtime="20170731 15:01:54.699" starttime="20170731 15:01:54.699" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 15:01:54.700" level="INFO">${stderr} = </msg>
<status endtime="20170731 15:01:54.700" starttime="20170731 15:01:54.699" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:54.706" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_meminfo.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:54.706" starttime="20170731 15:01:54.705" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.706" starttime="20170731 15:01:54.705" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.706" starttime="20170731 15:01:54.700" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.706" starttime="20170731 15:01:54.584" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.706" starttime="20170731 15:01:54.583" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.706" starttime="20170731 15:01:49.715" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.706" starttime="20170731 15:01:49.715" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.706" starttime="20170731 15:01:49.714" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.706" starttime="20170731 15:01:49.714" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.706" starttime="20170731 15:01:49.713" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.707" starttime="20170731 15:01:49.684" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.707" starttime="20170731 15:01:49.680" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:54.707" starttime="20170731 15:01:49.680" status="PASS"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170731 15:01:54.709" starttime="20170731 15:01:54.708" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:54.709" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:54.709" level="INFO">${ret_values} = None</msg>
<status endtime="20170731 15:01:54.709" starttime="20170731 15:01:54.708" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170731 15:01:54.709" starttime="20170731 15:01:54.709" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170731 15:01:54.765" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:54.765" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170731 15:01:54.813" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170731 15:01:54.824" level="INFO">${core_files} = None</msg>
<msg timestamp="20170731 15:01:54.825" level="INFO">${stderr} = None</msg>
<msg timestamp="20170731 15:01:54.825" level="INFO">${rc} = None</msg>
<msg timestamp="20170731 15:01:54.825" level="FAIL">#(UTC) 2017/07/31 15:01:54.823781 -    0.059191 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status endtime="20170731 15:01:54.825" starttime="20170731 15:01:54.734" status="FAIL"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170731 15:01:54.826" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170731 15:01:54.826" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status endtime="20170731 15:01:54.826" starttime="20170731 15:01:54.825" status="FAIL"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170731 15:01:54.851" starttime="20170731 15:01:54.836" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170731 15:01:55.593" starttime="20170731 15:01:54.853" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.593" starttime="20170731 15:01:54.853" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.594" starttime="20170731 15:01:54.852" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.594" starttime="20170731 15:01:54.836" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.594" starttime="20170731 15:01:54.826" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status endtime="20170731 15:01:55.594" starttime="20170731 15:01:55.594" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.594" starttime="20170731 15:01:54.734" status="FAIL"></status>
</kw>
<status endtime="20170731 15:01:55.594" starttime="20170731 15:01:54.709" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.595" starttime="20170731 15:01:54.707" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.595" starttime="20170731 15:01:54.707" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170731 15:01:55.597" starttime="20170731 15:01:55.596" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:55.597" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:55.597" level="INFO">${ret_values} = None</msg>
<status endtime="20170731 15:01:55.597" starttime="20170731 15:01:55.596" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170731 15:01:55.597" starttime="20170731 15:01:55.597" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170731 15:01:55.623" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170731 15:01:55.623" starttime="20170731 15:01:55.623" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.624" starttime="20170731 15:01:55.622" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.624" starttime="20170731 15:01:55.598" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.624" starttime="20170731 15:01:55.595" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.624" starttime="20170731 15:01:55.595" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170731 15:01:55.626" starttime="20170731 15:01:55.625" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:55.626" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:55.626" level="INFO">${ret_values} = None</msg>
<status endtime="20170731 15:01:55.626" starttime="20170731 15:01:55.625" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170731 15:01:55.626" starttime="20170731 15:01:55.626" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 15:01:55.651" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170731 15:01:55.651" starttime="20170731 15:01:55.651" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 15:01:55.653" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170731 15:01:55.653" starttime="20170731 15:01:55.652" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170731 15:01:55.658" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170731 15:01:55.658" starttime="20170731 15:01:55.653" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:55.661" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:55.661" starttime="20170731 15:01:55.661" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.661" starttime="20170731 15:01:55.660" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:55.662" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:55.662" starttime="20170731 15:01:55.662" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.663" starttime="20170731 15:01:55.661" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:55.664" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:55.664" starttime="20170731 15:01:55.663" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.664" starttime="20170731 15:01:55.663" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:55.665" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:55.665" starttime="20170731 15:01:55.665" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.665" starttime="20170731 15:01:55.664" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.665" starttime="20170731 15:01:55.660" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.665" starttime="20170731 15:01:55.659" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:01:55.666" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170731 15:01:55.666" starttime="20170731 15:01:55.666" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 15:01:55.735" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:55.736" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170731 15:01:55.782" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170731 15:01:55.782" starttime="20170731 15:01:55.700" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:55.782" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:55.782" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-115"\nVERSION_ID="v1.99.8-115-g0897fdd"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170731 15:01:55.782" starttime="20170731 15:01:55.666" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 15:01:55.783" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-115"
VERSION_ID="v1.99.8-115-g0897fdd"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170731 15:01:55.783" starttime="20170731 15:01:55.783" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 15:01:55.784" level="INFO">${stderr} = </msg>
<status endtime="20170731 15:01:55.784" starttime="20170731 15:01:55.783" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:55.790" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:55.790" starttime="20170731 15:01:55.789" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.790" starttime="20170731 15:01:55.789" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.790" starttime="20170731 15:01:55.784" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.790" starttime="20170731 15:01:55.658" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.790" starttime="20170731 15:01:55.658" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.790" starttime="20170731 15:01:55.658" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.790" starttime="20170731 15:01:55.652" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.790" starttime="20170731 15:01:55.652" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 15:01:55.791" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170731 15:01:55.791" starttime="20170731 15:01:55.791" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170731 15:01:55.792" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170731 15:01:55.792" starttime="20170731 15:01:55.792" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:55.795" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:55.795" starttime="20170731 15:01:55.795" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.795" starttime="20170731 15:01:55.794" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:55.797" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:55.797" starttime="20170731 15:01:55.796" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.797" starttime="20170731 15:01:55.796" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:55.798" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:55.798" starttime="20170731 15:01:55.798" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.798" starttime="20170731 15:01:55.797" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:55.799" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:55.799" starttime="20170731 15:01:55.799" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.799" starttime="20170731 15:01:55.798" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.799" starttime="20170731 15:01:55.794" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:55.800" starttime="20170731 15:01:55.793" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:01:55.801" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170731 15:01:55.801" starttime="20170731 15:01:55.800" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 15:01:55.867" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:55.867" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170731 15:01:57.324" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170731 15:01:57.324" starttime="20170731 15:01:55.831" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:57.324" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:57.324" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status endtime="20170731 15:01:57.324" starttime="20170731 15:01:55.801" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 15:01:57.325" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status endtime="20170731 15:01:57.325" starttime="20170731 15:01:57.325" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 15:01:57.326" level="INFO">${stderr} = </msg>
<status endtime="20170731 15:01:57.326" starttime="20170731 15:01:57.325" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.332" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.332" starttime="20170731 15:01:57.331" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.332" starttime="20170731 15:01:57.331" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.332" starttime="20170731 15:01:57.326" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.332" starttime="20170731 15:01:55.793" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.332" starttime="20170731 15:01:55.792" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.332" starttime="20170731 15:01:55.792" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.332" starttime="20170731 15:01:55.791" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.332" starttime="20170731 15:01:55.790" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 15:01:57.333" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170731 15:01:57.333" starttime="20170731 15:01:57.333" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170731 15:01:57.334" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170731 15:01:57.334" starttime="20170731 15:01:57.334" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.337" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.337" starttime="20170731 15:01:57.337" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.337" starttime="20170731 15:01:57.336" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.339" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.339" starttime="20170731 15:01:57.338" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.339" starttime="20170731 15:01:57.337" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.340" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.340" starttime="20170731 15:01:57.340" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.340" starttime="20170731 15:01:57.339" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.341" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.341" starttime="20170731 15:01:57.341" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.341" starttime="20170731 15:01:57.340" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.342" starttime="20170731 15:01:57.336" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.342" starttime="20170731 15:01:57.335" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:01:57.342" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170731 15:01:57.342" starttime="20170731 15:01:57.342" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 15:01:57.417" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:57.417" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170731 15:01:57.495" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170731 15:01:57.495" starttime="20170731 15:01:57.376" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:57.495" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:57.495" level="INFO">${ret_values} = (u' 15:02:00 up 22 min,  load average: 0.82, 0.76, 0.94', u'', 0)</msg>
<status endtime="20170731 15:01:57.495" starttime="20170731 15:01:57.343" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 15:01:57.496" level="INFO">${stdout} =  15:02:00 up 22 min,  load average: 0.82, 0.76, 0.94</msg>
<status endtime="20170731 15:01:57.496" starttime="20170731 15:01:57.495" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 15:01:57.496" level="INFO">${stderr} = </msg>
<status endtime="20170731 15:01:57.496" starttime="20170731 15:01:57.496" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.502" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.502" starttime="20170731 15:01:57.502" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.503" starttime="20170731 15:01:57.501" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.503" starttime="20170731 15:01:57.497" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.503" starttime="20170731 15:01:57.335" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.503" starttime="20170731 15:01:57.334" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.506" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.506" starttime="20170731 15:01:57.505" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.506" starttime="20170731 15:01:57.505" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.507" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.507" starttime="20170731 15:01:57.507" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.507" starttime="20170731 15:01:57.506" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.508" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.508" starttime="20170731 15:01:57.508" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.509" starttime="20170731 15:01:57.507" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.510" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.510" starttime="20170731 15:01:57.509" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.510" starttime="20170731 15:01:57.509" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.510" starttime="20170731 15:01:57.504" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.510" starttime="20170731 15:01:57.504" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:01:57.511" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170731 15:01:57.511" starttime="20170731 15:01:57.510" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 15:01:57.577" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:57.577" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170731 15:01:57.633" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170731 15:01:57.633" starttime="20170731 15:01:57.541" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:57.634" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:57.634" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-44f0dc8ac43162c4f7082884d6cd79400341bf5b #1 Mon Jul 31 14:25:07 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170731 15:01:57.634" starttime="20170731 15:01:57.511" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 15:01:57.634" level="INFO">${stdout} = Linux witherspoon 4.10.17-44f0dc8ac43162c4f7082884d6cd79400341bf5b #1 Mon Jul 31 14:25:07 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170731 15:01:57.634" starttime="20170731 15:01:57.634" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 15:01:57.635" level="INFO">${stderr} = </msg>
<status endtime="20170731 15:01:57.635" starttime="20170731 15:01:57.635" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.641" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.641" starttime="20170731 15:01:57.641" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.641" starttime="20170731 15:01:57.640" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.641" starttime="20170731 15:01:57.635" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.641" starttime="20170731 15:01:57.503" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.641" starttime="20170731 15:01:57.503" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.644" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.644" starttime="20170731 15:01:57.644" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.644" starttime="20170731 15:01:57.643" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.646" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.646" starttime="20170731 15:01:57.645" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.646" starttime="20170731 15:01:57.645" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.647" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.647" starttime="20170731 15:01:57.647" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.647" starttime="20170731 15:01:57.646" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.648" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.648" starttime="20170731 15:01:57.648" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.648" starttime="20170731 15:01:57.647" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.649" starttime="20170731 15:01:57.643" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.649" starttime="20170731 15:01:57.642" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:01:57.649" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170731 15:01:57.649" starttime="20170731 15:01:57.649" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170731 15:01:57.715" level="INFO">encoding=UTF-8
height=24
port=22
timeout=25 seconds
alias=bmc_connection
index=1
width=80
host=9.3.21.61
path_separator=/
newline=

prompt=# 
term_type=vt100</msg>
<msg timestamp="20170731 15:01:57.715" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170731 15:01:57.772" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170731 15:01:57.772" starttime="20170731 15:01:57.680" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:57.772" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:57.772" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170731 15:01:57.772" starttime="20170731 15:01:57.650" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170731 15:01:57.773" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170731 15:01:57.773" starttime="20170731 15:01:57.772" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170731 15:01:57.773" level="INFO">${stderr} = </msg>
<status endtime="20170731 15:01:57.773" starttime="20170731 15:01:57.773" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:01:57.779" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:57.779" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:57.778" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:57.774" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:57.642" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:57.641" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:57.334" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:57.333" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:57.332" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:55.652" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:55.651" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:55.627" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:55.624" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:57.780" starttime="20170731 15:01:55.624" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170731 15:01:57.783" starttime="20170731 15:01:57.782" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:57.783" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:57.783" level="INFO">${ret_values} = None</msg>
<status endtime="20170731 15:01:57.783" starttime="20170731 15:01:57.782" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170731 15:01:57.784" starttime="20170731 15:01:57.784" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170731 15:01:57.810" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170731 15:01:57.810" starttime="20170731 15:01:57.809" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170731 15:01:57.811" level="INFO">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_list', ...</msg>
<status endtime="20170731 15:01:57.811" starttime="20170731 15:01:57.811" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 15:01:57.812" level="INFO">${logpath} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_record_log.txt</msg>
<status endtime="20170731 15:01:57.812" starttime="20170731 15:01:57.811" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:57.815" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:57.815" starttime="20170731 15:01:57.814" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:57.816" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:57.816" starttime="20170731 15:01:57.816" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:57.817" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:57.817" starttime="20170731 15:01:57.816" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:57.817" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:57.817" starttime="20170731 15:01:57.817" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:57.998" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:57.998" starttime="20170731 15:01:57.818" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:57.998" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:57.998" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:57.998" starttime="20170731 15:01:57.818" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:57.999" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:57.999" starttime="20170731 15:01:57.999" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:58.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:58.000" starttime="20170731 15:01:57.999" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.000" starttime="20170731 15:01:57.814" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.000" starttime="20170731 15:01:57.813" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.000" starttime="20170731 15:01:57.813" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:58.001" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170731 15:01:58.001" starttime="20170731 15:01:58.000" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170731 15:01:58.001" starttime="20170731 15:01:58.001" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:58.045" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 15:01:58.046" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170731 15:01:58.046" starttime="20170731 15:01:58.002" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170731 15:01:58.046" starttime="20170731 15:01:58.046" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:58.047" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:58.047" starttime="20170731 15:01:58.046" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:58.047" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170731 15:01:58.047" starttime="20170731 15:01:57.812" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:58.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170731 15:01:58.048" level="FAIL">404 != 200</msg>
<status endtime="20170731 15:01:58.048" starttime="20170731 15:01:58.048" status="FAIL"></status>
</kw>
<msg timestamp="20170731 15:01:58.048" level="INFO">${status} = False</msg>
<status endtime="20170731 15:01:58.048" starttime="20170731 15:01:58.047" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170731 15:01:58.049" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170731 15:01:58.049" starttime="20170731 15:01:58.049" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.049" starttime="20170731 15:01:58.049" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.050" starttime="20170731 15:01:57.811" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 15:01:58.050" level="INFO">${logpath} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_led.txt</msg>
<status endtime="20170731 15:01:58.050" starttime="20170731 15:01:58.050" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:58.053" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:58.053" starttime="20170731 15:01:58.053" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:58.054" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:58.054" starttime="20170731 15:01:58.054" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:58.055" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:58.055" starttime="20170731 15:01:58.054" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:58.055" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:58.055" starttime="20170731 15:01:58.055" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:58.237" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:58.237" starttime="20170731 15:01:58.056" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:58.237" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:58.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:58.237" starttime="20170731 15:01:58.056" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:58.238" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:58.238" starttime="20170731 15:01:58.238" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:58.239" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:58.239" starttime="20170731 15:01:58.238" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.239" starttime="20170731 15:01:58.052" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.239" starttime="20170731 15:01:58.052" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.239" starttime="20170731 15:01:58.051" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:58.240" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170731 15:01:58.240" starttime="20170731 15:01:58.239" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170731 15:01:58.241" starttime="20170731 15:01:58.240" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:01:58.283" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 15:01:58.283" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170731 15:01:58.283" starttime="20170731 15:01:58.241" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170731 15:01:58.284" starttime="20170731 15:01:58.283" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:01:58.284" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:01:58.284" starttime="20170731 15:01:58.284" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:58.284" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170731 15:01:58.284" starttime="20170731 15:01:58.050" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:58.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170731 15:01:58.285" level="FAIL">404 != 200</msg>
<status endtime="20170731 15:01:58.286" starttime="20170731 15:01:58.285" status="FAIL"></status>
</kw>
<msg timestamp="20170731 15:01:58.286" level="INFO">${status} = False</msg>
<status endtime="20170731 15:01:58.286" starttime="20170731 15:01:58.285" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170731 15:01:58.287" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170731 15:01:58.287" starttime="20170731 15:01:58.287" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.287" starttime="20170731 15:01:58.286" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.287" starttime="20170731 15:01:58.050" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 15:01:58.288" level="INFO">${logpath} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_inventory.txt</msg>
<status endtime="20170731 15:01:58.289" starttime="20170731 15:01:58.288" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:01:58.292" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:01:58.293" starttime="20170731 15:01:58.292" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:01:58.294" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:01:58.294" starttime="20170731 15:01:58.293" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:01:58.295" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:01:58.295" starttime="20170731 15:01:58.294" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:01:58.296" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:01:58.296" starttime="20170731 15:01:58.295" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:01:58.503" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:01:58.503" starttime="20170731 15:01:58.297" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:01:58.504" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:01:58.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:01:58.504" starttime="20170731 15:01:58.296" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:01:58.504" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:58.504" starttime="20170731 15:01:58.504" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:01:58.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:01:58.505" starttime="20170731 15:01:58.505" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.505" starttime="20170731 15:01:58.291" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.505" starttime="20170731 15:01:58.290" status="PASS"></status>
</kw>
<status endtime="20170731 15:01:58.505" starttime="20170731 15:01:58.290" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:01:58.506" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170731 15:01:58.506" starttime="20170731 15:01:58.506" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170731 15:01:58.507" starttime="20170731 15:01:58.506" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:02:00.565" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 15:02:00.565" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:00.565" starttime="20170731 15:01:58.507" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170731 15:02:00.566" starttime="20170731 15:02:00.566" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:02:00.566" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:02:00.566" starttime="20170731 15:02:00.566" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:00.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:00.567" starttime="20170731 15:01:58.289" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:00.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:00.568" starttime="20170731 15:02:00.568" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:00.568" level="INFO">${status} = True</msg>
<status endtime="20170731 15:02:00.568" starttime="20170731 15:02:00.567" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170731 15:02:00.569" starttime="20170731 15:02:00.568" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170731 15:02:00.574" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/3"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/2"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64c", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b898", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7d9ce", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b970", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b966", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7db01", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbc4", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b957", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bc0a", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:02:00.574" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170731 15:02:00.575" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170731 15:02:00.575" starttime="20170731 15:02:00.569" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:02:00.576" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_inventory.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:02:00.576" starttime="20170731 15:02:00.576" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:00.577" starttime="20170731 15:02:00.575" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:00.577" starttime="20170731 15:01:58.287" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 15:02:00.577" level="INFO">${logpath} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_sensor_list.txt</msg>
<status endtime="20170731 15:02:00.577" starttime="20170731 15:02:00.577" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:02:00.580" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:02:00.581" starttime="20170731 15:02:00.580" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:02:00.581" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:02:00.581" starttime="20170731 15:02:00.581" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:02:00.582" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:02:00.582" starttime="20170731 15:02:00.581" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:02:00.582" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:02:00.583" starttime="20170731 15:02:00.582" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:02:00.821" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:02:00.821" starttime="20170731 15:02:00.583" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:00.821" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:02:00.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:00.821" starttime="20170731 15:02:00.583" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:02:00.822" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:00.822" starttime="20170731 15:02:00.822" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:00.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:00.823" starttime="20170731 15:02:00.822" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:00.823" starttime="20170731 15:02:00.579" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:00.823" starttime="20170731 15:02:00.579" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:00.823" starttime="20170731 15:02:00.578" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:02:00.824" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170731 15:02:00.824" starttime="20170731 15:02:00.823" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170731 15:02:00.825" starttime="20170731 15:02:00.824" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:02:01.011" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 15:02:01.011" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:01.011" starttime="20170731 15:02:00.825" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170731 15:02:01.012" starttime="20170731 15:02:01.012" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:02:01.012" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:02:01.013" starttime="20170731 15:02:01.012" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:01.013" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:01.013" starttime="20170731 15:02:00.578" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:01.014" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:01.014" starttime="20170731 15:02:01.013" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:01.014" level="INFO">${status} = True</msg>
<status endtime="20170731 15:02:01.014" starttime="20170731 15:02:01.013" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170731 15:02:01.015" starttime="20170731 15:02:01.014" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170731 15:02:01.015" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:02:01.015" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170731 15:02:01.016" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170731 15:02:01.016" starttime="20170731 15:02:01.015" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:02:01.017" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_sensor_list.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:02:01.017" starttime="20170731 15:02:01.016" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.018" starttime="20170731 15:02:01.016" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.018" starttime="20170731 15:02:00.577" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170731 15:02:01.018" level="INFO">${logpath} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_elog.txt</msg>
<status endtime="20170731 15:02:01.018" starttime="20170731 15:02:01.018" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:02:01.021" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:02:01.022" starttime="20170731 15:02:01.021" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:02:01.022" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:02:01.022" starttime="20170731 15:02:01.022" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:02:01.023" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:02:01.023" starttime="20170731 15:02:01.023" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:02:01.024" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:02:01.024" starttime="20170731 15:02:01.023" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:02:01.231" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:02:01.231" starttime="20170731 15:02:01.024" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:01.231" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:02:01.231" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:01.231" starttime="20170731 15:02:01.024" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:02:01.232" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:01.232" starttime="20170731 15:02:01.231" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:01.232" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:01.232" starttime="20170731 15:02:01.232" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.233" starttime="20170731 15:02:01.020" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.233" starttime="20170731 15:02:01.020" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.233" starttime="20170731 15:02:01.019" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:02:01.233" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170731 15:02:01.233" starttime="20170731 15:02:01.233" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170731 15:02:01.234" starttime="20170731 15:02:01.234" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:02:01.547" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170731 15:02:01.547" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:01.547" starttime="20170731 15:02:01.234" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170731 15:02:01.548" starttime="20170731 15:02:01.548" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:02:01.548" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:02:01.549" starttime="20170731 15:02:01.548" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:01.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:01.549" starttime="20170731 15:02:01.019" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:01.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:01.550" starttime="20170731 15:02:01.549" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:01.550" level="INFO">${status} = True</msg>
<status endtime="20170731 15:02:01.550" starttime="20170731 15:02:01.549" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170731 15:02:01.551" starttime="20170731 15:02:01.550" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170731 15:02:01.552" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 e7 39 1f 70 00 00 00 07 e7 7d 3d 80 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 01 89 00 00 01 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 01 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 6d ab 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 01 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 01 00 03 20 01 9e 83 dc f0 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 01 01 05 00 00 00 00 00 00 55 44 02 1c 02 01 e5 00 00 00 00 02 e4 00 05 00 01 00 00 00 00 3d d1 13 00 08 60 04 02 00 02 00 00 dd b6 00 08 04 00 02 04 00 80 02 00 51 3a 00 00 08 0f ff bc 2b fc 40 01 00 00 0f 0c 00 08 f0 04 44 21 09 82 06 80 00 03 e2 00 01 80 00 ac c5 00 08 f7 ff ff ff 83 13 40 ff b5 a3 00 08 0f c0 04 42 40 b6 15 40 10 03 fc 00 ff ef 0c ff e0 06 5a 09 81 13 40 c0 00 00 00 7f 90 00 08 11 07 08 20 eb c3 0d 00 29 4f 00 08 30 09 82 10 7e 40 1d 00 06 61 1b 87 02 1d 60 00 08 4c 70 04 43 1d 48 64 27 87 26 b9 06 80 20 01 02 02 00 0d 7c 00 06 68 1b 87 f1 09 25 00 08 fe 04 44 8c 45 06 80 ca 01 c1 02 00 06 6f 1b 83 1f 1d 40 80 65 2d 0f 81 1c c2 00 f6 3c 40 11 3b 01 92 02 00 02 11 06 80 ff 1f 3d c2 a5 40 00 03 87 ee e1 00 08 0e 1c 82 04 43 f8 bf 00 08 f1 40 83 00 60 a8 4b 40 13 42 fc 00 00 d6 28 02 00 08 3f 02 06 f8 04 41 7d 60 e7 4e 82 04 42 60 de 00 08 18 92 0d 04 ca e3 03 80 04 7c 04 42 6f c4 12 40 04 44 04 bb 5b 0f 81 fa f8 02 00 ff 00 04 99 2b 5d 87 99 a9 3c 40 91 5f 40 0f 5f 40 d6 08 5d 85 18 08 00 31 54 40 02 00 40 04 02 10 80 00 1b 12 40 95 54 02 1f 03 80 11 0f cf 88 fc 21 80 04 44 21 c4 db 4e 80 24 f0 30 3f 13 40 54 ae 2d 41 4b 04 43 16 75 41 6d b0 4b 00 1c 01 4c d8 1b 87 cd 45 40 16 05 54 26 48 41 38 04 43 30 4b 48 e4 71 89 5d 86 01 a2 55 69 87 3b 33 06 80 0a c3 00 0c 05 02 00 b5 1b 40 03 08 f3 00 00 3f 02 00 43 d2 00 10 08 0b 60 04 43 39 5d 00 08 09 07 e0 6c cc 04 41 d9 cc 06 80 44 3d 94 c2 00 d8 99 03 87 f5 7d d4 12 80 04 44 83 60 40 28 04 44 fb 1e ac 5d 82 37 04 41 c9 a8 43 02 00 80 03 2e 4d 19 5d 84 b0 56 80 33 40 04 41 03 80 0d 00 3c bd 00 08 9f c0 20 01 00 f0 00 40 00 2c cd 5d 82 00 07 e7 5c db 9f 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501512659444, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 5a 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 08 0a 4c 2f a0 00 00 00 08 0a 8d 84 50 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 02 89 00 00 02 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 00 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 6d ab 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 00 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 00 00 03 20 02 9e 83 dc f0 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 00 01 05 00 00 00 00 00 00 55 44 02 0c 02 01 e5 00 00 00 00 02 cc 00 05 00 00 00 00 00 00 3b d1 13 00 08 20 05 80 01 82 00 dd b6 00 08 08 00 02 04 00 04 41 51 3a 00 00 08 0f ff bc 2b fc 40 00 02 00 0f 0c 00 08 f0 04 83 00 20 09 82 06 80 00 03 e2 00 00 00 01 00 ac c5 00 08 f7 ff 20 ff ff 13 40 ff b5 a3 00 08 d0 0f c0 01 82 b6 15 40 10 03 fc 00 03 ff ef ff e0 06 5a 09 81 13 40 00 c0 00 00 7f 90 00 08 11 08 07 08 eb c3 0d 00 29 4f 00 02 08 30 82 10 7e 40 1d 00 06 40 61 1b 87 1d 60 00 08 4c 70 92 04 83 1d 64 27 87 26 b9 06 80 20 00 01 02 00 0d 7c 00 06 68 82 1b 87 f1 25 00 08 fe 0d 44 8c 52 45 06 80 01 04 83 06 6f 1b 83 1f 99 1d 40 80 2d 0f 81 1c c2 00 f6 3c 40 64 11 3b 01 01 80 02 11 06 80 ff 1f 82 3d c2 a5 00 00 08 04 0d 44 ee 04 e1 00 08 0e 1c 04 83 f8 bf 13 00 08 f1 40 83 00 a8 4b 40 13 42 00 fc 00 00 d6 28 00 08 3f 13 02 06 f8 01 81 7d e7 4e 82 01 82 04 60 de 00 08 18 0d 04 ca e3 96 45 80 04 7c 01 82 6f 12 40 0d 44 04 20 bb 5b 0f 81 fa f8 00 ff 00 15 04 99 2b 5d 87 99 3c 40 91 5f 40 48 0f 5f 40 d6 08 5d 85 08 00 31 c0 54 40 01 80 40 04 02 80 00 1b 80 12 40 95 54 02 1f 80 11 0f 19 cf 88 fc 21 80 0d 44 c4 db 4e 80 0a 24 f0 30 3f 13 40 ae 2d 41 4b a2 04 83 16 75 41 6d b0 00 1c 01 4c 5a d8 1b 87 cd 45 40 16 05 26 48 41 38 a4 04 83 30 4b 48 e4 71 5d 86 01 a2 4a 55 69 87 3b 33 15 81 c3 01 02 b5 82 1b 40 03 f3 00 10 3f 01 80 43 08 d2 00 08 69 0d 44 39 5d 00 04 08 07 e6 1d 0c 01 81 d9 cc 89 06 80 3f 00 3d 01 81 d8 99 45 87 35 f5 7d 12 80 0d 44 83 60 40 28 0d 44 2e fb 1e 5d 82 37 56 02 33 40 01 81 03 80 0d 00 3c bd 00 08 9f c0 20 01 00 f0 00 40 00 2c cd 5d 82 00 08 0a 6d ba 4f 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501512660761, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/3/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501512783752, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501512904604, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:02:01.552" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170731 15:02:01.552" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [
                "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1...</msg>
<status endtime="20170731 15:02:01.552" starttime="20170731 15:02:01.551" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:02:01.553" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_elog.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/20170731150146981947_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:02:01.553" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:02:01.552" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:02:01.018" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:01:57.811" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:01:57.810" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:01:57.810" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:01:57.810" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:01:57.809" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:01:57.784" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:01:57.781" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:01:57.781" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:01:47.214" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.554" starttime="20170731 15:01:47.212" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.555" starttime="20170731 15:01:47.212" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.555" starttime="20170731 15:01:47.212" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170731 15:02:01.562" starttime="20170731 15:02:01.562" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.562" starttime="20170731 15:02:01.555" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.562" starttime="20170731 15:01:47.211" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.562" starttime="20170731 15:01:43.891" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.562" starttime="20170731 15:01:43.891" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw name="Recover Quiesced Host" library="state_manager">
<doc>Recover host from quisced state.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:02:01.568" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:02:01.569" starttime="20170731 15:02:01.568" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:02:01.569" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:02:01.569" starttime="20170731 15:02:01.569" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:02:01.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:02:01.570" starttime="20170731 15:02:01.569" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:02:01.570" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:02:01.570" starttime="20170731 15:02:01.570" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:02:01.766" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:02:01.766" starttime="20170731 15:02:01.571" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:01.766" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:02:01.766" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:01.766" starttime="20170731 15:02:01.571" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:02:01.767" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:01.767" starttime="20170731 15:02:01.766" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:01.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:01.768" starttime="20170731 15:02:01.767" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.768" starttime="20170731 15:02:01.567" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.768" starttime="20170731 15:02:01.566" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.768" starttime="20170731 15:02:01.566" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:02:01.769" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:02:01.769" starttime="20170731 15:02:01.768" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:02:01.771" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:02:01.771" starttime="20170731 15:02:01.770" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:02:01.772" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:02:01.772" starttime="20170731 15:02:01.772" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.772" starttime="20170731 15:02:01.771" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.772" starttime="20170731 15:02:01.770" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.772" starttime="20170731 15:02:01.769" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:02:01.854" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:02:01.854" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:01.854" starttime="20170731 15:02:01.773" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:02:01.856" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:02:01.857" starttime="20170731 15:02:01.856" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:02:01.857" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:02:01.858" starttime="20170731 15:02:01.857" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.858" starttime="20170731 15:02:01.857" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.858" starttime="20170731 15:02:01.855" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.858" starttime="20170731 15:02:01.855" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:02:01.858" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:02:01.858" starttime="20170731 15:02:01.858" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:01.858" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:01.859" starttime="20170731 15:02:01.565" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:01.859" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:01.859" starttime="20170731 15:02:01.859" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:02:01.860" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:02:01.860" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:02:01.860" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:02:01.860" starttime="20170731 15:02:01.859" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:01.860" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:02:01.860" starttime="20170731 15:02:01.565" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:01.861" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:02:01.861" starttime="20170731 15:02:01.564" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170731 15:02:01.862" starttime="20170731 15:02:01.861" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:01.862" level="INFO">${status} = True</msg>
<status endtime="20170731 15:02:01.862" starttime="20170731 15:02:01.861" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:01.862" starttime="20170731 15:02:01.564" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:01.862" level="INFO">${resp} = True</msg>
<status endtime="20170731 15:02:01.862" starttime="20170731 15:02:01.564" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170731 15:02:01.864" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170731 15:02:01.864" starttime="20170731 15:02:01.864" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:02:01.865" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170731 15:02:01.865" starttime="20170731 15:02:01.865" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:02:01.868" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:02:01.868" starttime="20170731 15:02:01.868" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:02:01.869" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:02:01.869" starttime="20170731 15:02:01.869" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:02:01.870" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:02:01.870" starttime="20170731 15:02:01.869" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:02:01.870" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:02:01.870" starttime="20170731 15:02:01.870" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:02:02.099" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:02:02.099" starttime="20170731 15:02:01.871" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:02.099" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:02:02.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:02.099" starttime="20170731 15:02:01.871" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:02:02.100" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:02.100" starttime="20170731 15:02:02.099" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:02.100" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:02.101" starttime="20170731 15:02:02.100" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:02.101" starttime="20170731 15:02:01.867" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:02.101" starttime="20170731 15:02:01.867" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:02.101" starttime="20170731 15:02:01.866" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:02:02.101" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170731 15:02:02.101" starttime="20170731 15:02:02.101" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:02:02.102" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:02:02.102" starttime="20170731 15:02:02.102" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170731 15:02:02.103" starttime="20170731 15:02:02.102" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:02:02.105" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170731 15:02:02.105" starttime="20170731 15:02:02.104" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:02:02.107" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170731 15:02:02.107" starttime="20170731 15:02:02.106" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:02.107" starttime="20170731 15:02:02.105" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:02.107" starttime="20170731 15:02:02.103" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:02:02.642" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170731 15:02:02.643" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:02.643" starttime="20170731 15:02:02.107" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:02:02.644" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:02:02.644" starttime="20170731 15:02:02.643" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:02:02.645" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:02:02.645" starttime="20170731 15:02:02.645" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:02.645" starttime="20170731 15:02:02.644" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:02.645" starttime="20170731 15:02:02.643" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:02:02.646" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:02:02.646" starttime="20170731 15:02:02.646" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:02.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:02.646" starttime="20170731 15:02:01.865" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:02.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:02.647" starttime="20170731 15:02:02.646" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170731 15:02:02.647" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:02:02.648" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:02:02.648" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170731 15:02:02.648" starttime="20170731 15:02:02.647" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:02.648" starttime="20170731 15:02:01.864" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170731 15:02:02.648" starttime="20170731 15:02:02.648" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:02:02.654" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:02:02.654" starttime="20170731 15:02:02.653" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:02:02.655" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:02:02.655" starttime="20170731 15:02:02.654" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:02:02.655" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:02:02.655" starttime="20170731 15:02:02.655" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:02:02.656" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:02:02.656" starttime="20170731 15:02:02.656" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:02:03.419" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:02:03.419" starttime="20170731 15:02:02.657" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:03.419" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:02:03.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:03.420" starttime="20170731 15:02:02.656" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:02:03.420" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:03.420" starttime="20170731 15:02:03.420" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:03.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:03.421" starttime="20170731 15:02:03.421" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:03.421" starttime="20170731 15:02:02.653" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:03.421" starttime="20170731 15:02:02.652" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:03.421" starttime="20170731 15:02:02.651" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:02:03.422" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 15:02:03.422" starttime="20170731 15:02:03.422" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:02:03.424" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:02:03.424" starttime="20170731 15:02:03.423" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:02:03.425" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:02:03.425" starttime="20170731 15:02:03.425" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:03.425" starttime="20170731 15:02:03.424" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:03.425" starttime="20170731 15:02:03.423" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:03.425" starttime="20170731 15:02:03.422" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:02:09.389" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 15:02:09.389" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:09.389" starttime="20170731 15:02:03.426" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:02:09.394" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:02:09.394" starttime="20170731 15:02:09.391" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:02:09.395" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:02:09.395" starttime="20170731 15:02:09.395" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:09.395" starttime="20170731 15:02:09.394" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:09.395" starttime="20170731 15:02:09.390" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:09.395" starttime="20170731 15:02:09.390" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:02:09.396" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:02:09.396" starttime="20170731 15:02:09.396" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:09.396" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:09.396" starttime="20170731 15:02:02.651" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:09.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:09.397" starttime="20170731 15:02:09.396" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:02:09.397" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:02:09.397" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:02:09.398" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170731 15:02:09.398" starttime="20170731 15:02:09.397" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:09.398" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170731 15:02:09.398" starttime="20170731 15:02:02.650" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:09.398" level="INFO">${power_state} = On</msg>
<status endtime="20170731 15:02:09.398" starttime="20170731 15:02:02.650" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170731 15:02:09.399" level="FAIL">Off != On</msg>
<status endtime="20170731 15:02:09.399" starttime="20170731 15:02:09.398" status="FAIL"></status>
</kw>
<status endtime="20170731 15:02:09.399" starttime="20170731 15:02:02.649" status="FAIL"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:02:09.405" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:02:09.405" starttime="20170731 15:02:09.404" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:02:09.406" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:02:09.406" starttime="20170731 15:02:09.406" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:02:09.407" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:02:09.407" starttime="20170731 15:02:09.407" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:02:09.408" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:02:09.408" starttime="20170731 15:02:09.407" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:02:09.603" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:02:09.603" starttime="20170731 15:02:09.409" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:09.604" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:02:09.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:09.604" starttime="20170731 15:02:09.409" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:02:09.604" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:09.604" starttime="20170731 15:02:09.604" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:09.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:09.605" starttime="20170731 15:02:09.605" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:09.605" starttime="20170731 15:02:09.403" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:09.605" starttime="20170731 15:02:09.402" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:09.606" starttime="20170731 15:02:09.402" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:02:09.606" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:02:09.606" starttime="20170731 15:02:09.606" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:02:09.637" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:02:09.637" starttime="20170731 15:02:09.608" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:02:09.639" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:02:09.639" starttime="20170731 15:02:09.638" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:09.639" starttime="20170731 15:02:09.638" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:09.639" starttime="20170731 15:02:09.607" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:09.639" starttime="20170731 15:02:09.606" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:02:10.711" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:02:10.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:10.712" starttime="20170731 15:02:09.640" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:02:10.713" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:02:10.713" starttime="20170731 15:02:10.713" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:02:10.714" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:02:10.714" starttime="20170731 15:02:10.714" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:10.715" starttime="20170731 15:02:10.713" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:10.715" starttime="20170731 15:02:10.712" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:10.715" starttime="20170731 15:02:10.712" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:02:10.715" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:02:10.715" starttime="20170731 15:02:10.715" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:10.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:10.715" starttime="20170731 15:02:09.401" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:10.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:10.716" starttime="20170731 15:02:10.716" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:02:10.717" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:02:10.717" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:02:10.717" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170731 15:02:10.717" starttime="20170731 15:02:10.716" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:10.717" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170731 15:02:10.717" starttime="20170731 15:02:09.400" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:10.717" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170731 15:02:10.717" starttime="20170731 15:02:09.400" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170731 15:02:10.718" level="FAIL">Off != Quiesced</msg>
<status endtime="20170731 15:02:10.718" starttime="20170731 15:02:10.718" status="FAIL"></status>
</kw>
<status endtime="20170731 15:02:10.718" starttime="20170731 15:02:02.649" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:02:20.724" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:02:20.724" starttime="20170731 15:02:20.723" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:02:20.725" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:02:20.725" starttime="20170731 15:02:20.724" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:02:20.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:02:20.725" starttime="20170731 15:02:20.725" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:02:20.726" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:02:20.726" starttime="20170731 15:02:20.725" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:02:21.056" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:02:21.056" starttime="20170731 15:02:20.727" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.056" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:02:21.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:21.056" starttime="20170731 15:02:20.726" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:02:21.057" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:21.057" starttime="20170731 15:02:21.057" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:21.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:21.058" starttime="20170731 15:02:21.057" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.058" starttime="20170731 15:02:20.722" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.058" starttime="20170731 15:02:20.722" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.058" starttime="20170731 15:02:20.721" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:02:21.059" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170731 15:02:21.059" starttime="20170731 15:02:21.058" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:02:21.061" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:02:21.061" starttime="20170731 15:02:21.060" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:02:21.062" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170731 15:02:21.062" starttime="20170731 15:02:21.061" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.062" starttime="20170731 15:02:21.061" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.062" starttime="20170731 15:02:21.059" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.062" starttime="20170731 15:02:21.059" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:02:21.125" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170731 15:02:21.126" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:21.126" starttime="20170731 15:02:21.062" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:02:21.128" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:02:21.128" starttime="20170731 15:02:21.127" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:02:21.129" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:02:21.129" starttime="20170731 15:02:21.129" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.130" starttime="20170731 15:02:21.128" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.130" starttime="20170731 15:02:21.127" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.130" starttime="20170731 15:02:21.127" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:02:21.130" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:02:21.130" starttime="20170731 15:02:21.130" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:21.130" starttime="20170731 15:02:20.721" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:21.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:21.131" starttime="20170731 15:02:21.131" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:02:21.132" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:02:21.132" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:02:21.132" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170731 15:02:21.132" starttime="20170731 15:02:21.131" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.132" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170731 15:02:21.132" starttime="20170731 15:02:20.720" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.133" level="INFO">${power_state} = Off</msg>
<status endtime="20170731 15:02:21.133" starttime="20170731 15:02:20.720" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170731 15:02:21.133" starttime="20170731 15:02:21.133" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.134" starttime="20170731 15:02:20.719" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170731 15:02:21.137" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170731 15:02:21.138" starttime="20170731 15:02:21.137" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170731 15:02:21.138" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170731 15:02:21.138" starttime="20170731 15:02:21.138" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170731 15:02:21.139" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170731 15:02:21.139" starttime="20170731 15:02:21.138" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170731 15:02:21.139" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170731 15:02:21.139" starttime="20170731 15:02:21.139" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170731 15:02:21.369" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170731 15:02:21.370" starttime="20170731 15:02:21.140" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.370" level="INFO">${status} = PASS</msg>
<msg timestamp="20170731 15:02:21.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:21.370" starttime="20170731 15:02:21.140" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170731 15:02:21.370" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:21.370" starttime="20170731 15:02:21.370" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:21.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:21.371" starttime="20170731 15:02:21.371" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.371" starttime="20170731 15:02:21.136" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.371" starttime="20170731 15:02:21.136" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.371" starttime="20170731 15:02:21.135" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170731 15:02:21.372" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170731 15:02:21.372" starttime="20170731 15:02:21.372" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:02:21.374" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:02:21.374" starttime="20170731 15:02:21.373" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:02:21.375" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170731 15:02:21.375" starttime="20170731 15:02:21.375" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.375" starttime="20170731 15:02:21.374" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.376" starttime="20170731 15:02:21.373" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.376" starttime="20170731 15:02:21.372" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170731 15:02:21.439" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170731 15:02:21.439" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:21.439" starttime="20170731 15:02:21.376" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170731 15:02:21.441" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:02:21.441" starttime="20170731 15:02:21.440" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170731 15:02:21.441" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170731 15:02:21.442" starttime="20170731 15:02:21.441" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.442" starttime="20170731 15:02:21.441" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.442" starttime="20170731 15:02:21.440" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.442" starttime="20170731 15:02:21.439" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170731 15:02:21.442" level="INFO">Delete All Sessions</msg>
<status endtime="20170731 15:02:21.442" starttime="20170731 15:02:21.442" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170731 15:02:21.443" starttime="20170731 15:02:21.135" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170731 15:02:21.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170731 15:02:21.443" starttime="20170731 15:02:21.443" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170731 15:02:21.444" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170731 15:02:21.444" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170731 15:02:21.444" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170731 15:02:21.444" starttime="20170731 15:02:21.443" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.444" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170731 15:02:21.444" starttime="20170731 15:02:21.134" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.445" level="INFO">${host_state} = Off</msg>
<status endtime="20170731 15:02:21.445" starttime="20170731 15:02:21.134" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170731 15:02:21.445" starttime="20170731 15:02:21.445" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.445" starttime="20170731 15:02:20.719" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.445" starttime="20170731 15:02:02.649" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.445" starttime="20170731 15:02:01.863" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg timestamp="20170731 15:02:21.446" level="INFO">HOST is recovered from quiesced state</msg>
<status endtime="20170731 15:02:21.446" starttime="20170731 15:02:21.446" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.446" starttime="20170731 15:02:01.863" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.446" starttime="20170731 15:02:01.862" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.446" starttime="20170731 15:02:01.563" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.446" starttime="20170731 15:02:01.563" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170731 15:02:21.457" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170731 15:02:21.457" starttime="20170731 15:02:21.447" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170731 15:02:21.458" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/14003/obmc-robot/logs/20170731150146981947_TestsTestBasicPoweron/20170731150146981947_PowerOnTest/</msg>
<status endtime="20170731 15:02:21.458" starttime="20170731 15:02:21.457" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170731 15:02:21.459" starttime="20170731 15:02:21.458" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170731 15:02:21.459" starttime="20170731 15:02:21.459" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:02:21.460" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs"&gt;/tmp/fspcibld/14003/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170731 15:02:21.460" starttime="20170731 15:02:21.460" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:02:21.461" level="INFO">File '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170731 15:02:21.461" starttime="20170731 15:02:21.461" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.461" level="INFO">${exist} = True</msg>
<status endtime="20170731 15:02:21.461" starttime="20170731 15:02:21.461" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170731 15:02:21.462" starttime="20170731 15:02:21.462" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170731 15:02:21.462" starttime="20170731 15:02:21.462" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 15:02:21.463" level="INFO">${cur_time} = 2017-07-31 15:02:21:463267</msg>
<status endtime="20170731 15:02:21.463" starttime="20170731 15:02:21.463" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170731 15:02:21.464" level="INFO">${cur_time} = 20170731150221463267</msg>
<status endtime="20170731 15:02:21.464" starttime="20170731 15:02:21.464" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.464" level="INFO">${cur_time} = 20170731150221463267</msg>
<status endtime="20170731 15:02:21.464" starttime="20170731 15:02:21.463" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:02:21.465" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14003/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170731 15:02:21.465" starttime="20170731 15:02:21.464" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.465" starttime="20170731 15:02:21.447" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.465" starttime="20170731 15:01:43.556" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170731 15:02:21.467" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170731 15:02:21.467" starttime="20170731 15:02:21.467" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170731 15:02:21.468" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170731 15:02:21.468" starttime="20170731 15:02:21.467" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.468" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170731 15:02:21.468" starttime="20170731 15:02:21.466" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:02:21.469" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170731 15:02:21.469" starttime="20170731 15:02:21.469" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170731 15:02:21.470" starttime="20170731 15:02:21.469" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 15:02:21.475" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 15:02:21.485" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 15:02:21.485" level="INFO">${output} = /tmp/fspcibld/14003/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170731 15:02:21.487" starttime="20170731 15:02:21.470" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170731 15:02:21.501" starttime="20170731 15:02:21.498" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170731 15:02:21.504" starttime="20170731 15:02:21.503" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:02:21.506" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170731 15:02:21.506" starttime="20170731 15:02:21.505" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.508" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170731 15:02:21.508" starttime="20170731 15:02:21.468" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:02:21.509" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170731 15:02:21.509" starttime="20170731 15:02:21.508" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170731 15:02:21.509" starttime="20170731 15:02:21.509" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170731 15:02:21.535" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170731 15:02:21.555" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 15:02:21.555" level="INFO">${os_con_pid} = </msg>
<status endtime="20170731 15:02:21.555" starttime="20170731 15:02:21.510" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170731 15:02:21.559" starttime="20170731 15:02:21.558" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170731 15:02:21.560" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170731 15:02:21.560" starttime="20170731 15:02:21.560" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170731 15:02:21.562" starttime="20170731 15:02:21.561" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170731 15:02:21.563" level="INFO">${rc} = None</msg>
<msg timestamp="20170731 15:02:21.563" level="INFO">${output} = None</msg>
<status endtime="20170731 15:02:21.563" starttime="20170731 15:02:21.562" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170731 15:02:21.564" starttime="20170731 15:02:21.563" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170731 15:02:21.569" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/14003/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/14003/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170731 15:02:21.569" starttime="20170731 15:02:21.566" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.570" starttime="20170731 15:02:21.565" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.570" starttime="20170731 15:02:21.564" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170731 15:02:21.570" level="INFO">${output} = </msg>
<status endtime="20170731 15:02:21.570" starttime="20170731 15:02:21.570" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170731 15:02:21.571" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170731 15:02:21.571" starttime="20170731 15:02:21.571" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170731 15:02:21.611" starttime="20170731 15:02:21.572" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.612" level="INFO">${rc} = 0</msg>
<msg timestamp="20170731 15:02:21.612" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[   85.338367584,5] IPMI: S...</msg>
<status endtime="20170731 15:02:21.612" starttime="20170731 15:02:21.571" status="PASS"></status>
</kw>
<msg timestamp="20170731 15:02:21.614" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[   85.338367584,5] IPMI: S...</msg>
<status endtime="20170731 15:02:21.615" starttime="20170731 15:02:21.466" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170731 15:02:21.624" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[   85.338367584,5] IPMI: Soft shutdown requested
[40m[2J[-1;-1f[?25l[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [33m.[   39.982153] reboot: Power down
[   91.325786544,5] OPAL: Shutdown request type 0x0...
[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [33m.  [33m.

--== Welcome to Hostboot hostboot-3fa8be9/hbicore.bin ==--

  3.86282|secure|Booting in non-secure mode.
  3.86322|secure|SecureROM invalid - skipping functionality
  7.17366|ISTEP  6. 5 - host_init_fsi
  7.24893|ISTEP  6. 6 - host_set_ipl_parms
  7.98218|ISTEP  6. 7 - host_discover_targets
  8.65644|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  8.65645|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  8.72351|ISTEP  6. 8 - host_update_master_tpm
  8.73558|SECURE|Security Access Bit&gt; 0x0000000000000000
  8.73559|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  8.73577|ISTEP  6. 9 - host_gard
  8.76211|ISTEP  6.10 - host_revert_sbe_mcs_setup
  8.77324|ISTEP  6.11 - host_start_occ_xstop_handler
  8.77461|ISTEP  6.12 - host_voltage_config
  8.80904|ISTEP  7. 2 - mss_volt
  9.20661|ISTEP  7. 3 - mss_freq
  9.31798|ISTEP  7. 4 - mss_eff_config
 12.50790|ISTEP  7. 5 - mss_attr_update
 12.51659|ISTEP  8. 1 - host_slave_sbe_config
 12.55118|ISTEP  8. 2 - host_setup_sbe
 12.55580|ISTEP  8. 3 - host_cbs_start
 12.56556|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 19.78550|ISTEP  8. 5 - host_attnlisten_proc
 19.78651|ISTEP  8. 6 - host_p9_fbc_eff_config
 19.79110|ISTEP  8. 7 - host_p9_eff_config_links
 19.80062|ISTEP  8. 8 - proc_attr_update
 19.80238|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 19.85029|ISTEP  8.10 - proc_xbus_scominit
 22.82106|ISTEP  8.11 - proc_xbus_enable_ridi
 22.82564|ISTEP  9. 1 - fabric_erepair
 22.99589|ISTEP  9. 2 - fabric_io_dccal
 23.82448|ISTEP  9. 3 - fabric_pre_trainadv
 23.82972|ISTEP  9. 4 - fabric_io_run_training
 24.03278|ISTEP  9. 5 - fabric_post_trainadv
 24.03749|ISTEP  9. 6 - proc_smp_link_layer
 24.04235|ISTEP  9. 7 - proc_fab_iovalid
 24.09498|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 24.10543|ISTEP 10. 1 - proc_build_smp
 24.31545|ISTEP 10. 2 - host_slave_sbe_update
 24.53954|ISTEP 10. 3 - host_set_voltages
 24.55222|ISTEP 10. 4 - proc_cen_ref_clk_enable
 24.55794|ISTEP 10. 5 - proc_enable_osclite
 24.55912|ISTEP 10. 6 - proc_chiplet_scominit
 24.58580|ISTEP 10. 7 - proc_abus_scominit
 24.58805|ISTEP 10. 8 - proc_obus_scominit
 24.66979|ISTEP 10. 9 - proc_npu_scominit
 24.69185|ISTEP 10.10 - proc_pcie_scominit
 24.73721|ISTEP 10.11 - proc_scomoverride_chiplets
 24.73900|ISTEP 10.12 - proc_chiplet_enable_ridi
 24.74598|ISTEP 10.13 - host_rng_bist
 24.75087|ISTEP 10.14 - host_update_redundant_tpm
 24.80829|ISTEP 11. 1 - host_prd_hwreconfig
 24.81433|ISTEP 12. 1 - mss_getecid
 24.82006|ISTEP 13. 1 - host_disable_memvolt
 24.83480|ISTEP 13. 2 - mem_pll_reset
 24.84792|ISTEP 13. 3 - mem_pll_initf
 24.86867|ISTEP 13. 4 - mem_pll_setup
 24.89498|ISTEP 13. 6 - mem_startclocks
 24.91141|ISTEP 13. 7 - host_enable_memvolt
 24.91382|ISTEP 13. 8 - mss_scominit
 25.35450|ISTEP 13. 9 - mss_ddr_phy_reset
 25.43225|ISTEP 13.10 - mss_draminit
 25.61956|ISTEP 13.11 - mss_draminit_training
 25.94898|ISTEP 13.12 - mss_draminit_trainadv
 25.95240|ISTEP 13.13 - mss_draminit_mc
 25.97831|ISTEP 14. 1 - mss_memdiag
 66.68026|ISTEP 14. 2 - mss_thermal_init
 66.69500|ISTEP 14. 3 - proc_pcie_config
 66.71164|ISTEP 14. 4 - mss_power_cleanup
 66.71600|ISTEP 14. 5 - proc_setup_bars
 66.75758|ISTEP 14. 6 - proc_htm_setup
 66.76654|ISTEP 14. 7 - proc_exit_cache_contained
 66.78364|ISTEP 15. 1 - host_build_stop_image
</msg>
<status endtime="20170731 15:02:21.624" starttime="20170731 15:02:21.622" status="PASS"></status>
</kw>
<status endtime="20170731 15:02:21.624" starttime="20170731 15:01:43.555" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170731 15:02:21.626" starttime="20170731 14:51:03.851" critical="yes" status="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170731 15:02:21.631" starttime="20170731 14:51:03.819" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170731 15:02:21.637" starttime="20170731 14:50:57.568" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" id="s1" fail="1">Tests</stat>
<stat pass="1" name="Security" id="s1-s1" fail="0">Tests.Security</stat>
<stat pass="1" name="Test Ssl" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" id="s1-s2" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
