<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161209 19:38:40.139" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite name="Tests" source="/tmp/root/21630/obmc-robot/tests" id="s1">
<suite name="Security" source="/tmp/root/21630/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/root/21630/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 19:38:40.798" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161209 19:38:40.798" status="PASS" starttime="20161209 19:38:40.798"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 19:38:40.799" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161209 19:38:40.799" status="PASS" starttime="20161209 19:38:40.799"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 19:38:40.800" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161209 19:38:40.800" status="PASS" starttime="20161209 19:38:40.799"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 19:38:40.800" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161209 19:38:40.800" status="PASS" starttime="20161209 19:38:40.800"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 19:38:41.150" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 19:38:41.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:41.150" status="PASS" starttime="20161209 19:38:40.800"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161209 19:38:41.151" status="PASS" starttime="20161209 19:38:41.150"></status>
</kw>
<status endtime="20161209 19:38:41.151" status="PASS" starttime="20161209 19:38:40.797"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161209 19:38:41.157" status="PASS" starttime="20161209 19:38:41.153"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.158" level="INFO">Created directory '&lt;a href="file:///tmp/root/21630/obmc-robot/logs"&gt;/tmp/root/21630/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.158" status="PASS" starttime="20161209 19:38:41.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.160" level="FAIL">File '/tmp/root/21630/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20161209 19:38:41.160" status="FAIL" starttime="20161209 19:38:41.159"></status>
</kw>
<msg timestamp="20161209 19:38:41.160" level="INFO">${exist} = False</msg>
<status endtime="20161209 19:38:41.160" status="PASS" starttime="20161209 19:38:41.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.164" level="INFO">Created file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/test_history.txt"&gt;/tmp/root/21630/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.164" status="PASS" starttime="20161209 19:38:41.163"></status>
</kw>
<status endtime="20161209 19:38:41.164" status="PASS" starttime="20161209 19:38:41.160"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161209 19:38:41.165" level="INFO">${cur_time} = 2016-12-09 19:38:41:164646</msg>
<status endtime="20161209 19:38:41.165" status="PASS" starttime="20161209 19:38:41.164"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161209 19:38:41.165" level="INFO">${cur_time} = 20161209193841164646</msg>
<status endtime="20161209 19:38:41.165" status="PASS" starttime="20161209 19:38:41.165"></status>
</kw>
<msg timestamp="20161209 19:38:41.166" level="INFO">${cur_time} = 20161209193841164646</msg>
<status endtime="20161209 19:38:41.166" status="PASS" starttime="20161209 19:38:41.164"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.166" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/test_history.txt"&gt;/tmp/root/21630/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.166" status="PASS" starttime="20161209 19:38:41.166"></status>
</kw>
<status endtime="20161209 19:38:41.167" status="PASS" starttime="20161209 19:38:41.157"></status>
</kw>
<status endtime="20161209 19:38:41.167" status="PASS" starttime="20161209 19:38:41.152"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20161209 19:38:41.167" status="PASS" starttime="20161209 19:38:40.797" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20161209 19:38:41.168" level="INFO">Delete All Sessions</msg>
<status endtime="20161209 19:38:41.168" status="PASS" starttime="20161209 19:38:41.168"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20161209 19:38:41.168" status="PASS" starttime="20161209 19:38:40.169"></status>
</suite>
<status endtime="20161209 19:38:41.170" status="PASS" starttime="20161209 19:38:40.167"></status>
</suite>
<suite name="Test Association" source="/tmp/root/21630/obmc-robot/tests/test_association.robot" id="s1-s2">
<kw type="setup" name="Suite Initialization Setup">
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 19:38:41.204" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20161209 19:38:41.204" status="FAIL" starttime="20161209 19:38:41.203"></status>
</kw>
<msg timestamp="20161209 19:38:41.204" level="INFO">${has_host} = False</msg>
<status endtime="20161209 19:38:41.204" status="PASS" starttime="20161209 19:38:41.203"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161209 19:38:41.208" status="PASS" starttime="20161209 19:38:41.208"></status>
</kw>
<status endtime="20161209 19:38:41.208" status="PASS" starttime="20161209 19:38:41.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161209 19:38:41.212" level="INFO">${port_num} = 22</msg>
<status endtime="20161209 19:38:41.212" status="PASS" starttime="20161209 19:38:41.212"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161209 19:38:41.213" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20161209 19:38:41.213" status="PASS" starttime="20161209 19:38:41.212"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161209 19:38:41.213" level="INFO">${https_num} = 443</msg>
<status endtime="20161209 19:38:41.213" status="PASS" starttime="20161209 19:38:41.213"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.214" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161209 19:38:41.214" status="PASS" starttime="20161209 19:38:41.213"></status>
</kw>
<status endtime="20161209 19:38:41.214" status="PASS" starttime="20161209 19:38:41.211"></status>
</kw>
<status endtime="20161209 19:38:41.214" status="PASS" starttime="20161209 19:38:41.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 19:38:41.215" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20161209 19:38:41.215" status="FAIL" starttime="20161209 19:38:41.215"></status>
</kw>
<msg timestamp="20161209 19:38:41.215" level="INFO">${has_port} = False</msg>
<status endtime="20161209 19:38:41.215" status="PASS" starttime="20161209 19:38:41.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161209 19:38:41.219" status="PASS" starttime="20161209 19:38:41.219"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161209 19:38:41.220" status="PASS" starttime="20161209 19:38:41.220"></status>
</kw>
<status endtime="20161209 19:38:41.220" status="PASS" starttime="20161209 19:38:41.218"></status>
</kw>
<status endtime="20161209 19:38:41.220" status="PASS" starttime="20161209 19:38:41.215"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.221" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161209 19:38:41.224" level="FAIL">TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</msg>
<status endtime="20161209 19:38:41.224" status="FAIL" starttime="20161209 19:38:41.221"></status>
</kw>
<status endtime="20161209 19:38:41.224" status="FAIL" starttime="20161209 19:38:41.203"></status>
</kw>
<status endtime="20161209 19:38:41.224" status="FAIL" starttime="20161209 19:38:41.202"></status>
</kw>
<test name="Create error log on single FRU" id="s1-s2-t1">
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status endtime="20161209 19:38:41.225" status="FAIL" starttime="20161209 19:38:41.224" critical="yes">Parent suite setup failed:
TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</status>
</test>
<test name="Delete error log" id="s1-s2-t2">
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status endtime="20161209 19:38:41.226" status="FAIL" starttime="20161209 19:38:41.225" critical="yes">Parent suite setup failed:
TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</status>
</test>
<kw library="SSHLibrary" type="teardown" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status endtime="20161209 19:38:41.227" status="PASS" starttime="20161209 19:38:41.226"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status endtime="20161209 19:38:41.227" status="FAIL" starttime="20161209 19:38:41.172">Suite setup failed:
TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/root/21630/obmc-robot/tests/test_basic_poweron.robot" id="s1-s3">
<test name="power on test" id="s1-s3-t1">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 19:38:41.255" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20161209 19:38:41.255" status="FAIL" starttime="20161209 19:38:41.254"></status>
</kw>
<msg timestamp="20161209 19:38:41.255" level="INFO">${has_host} = False</msg>
<status endtime="20161209 19:38:41.255" status="PASS" starttime="20161209 19:38:41.254"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161209 19:38:41.258" status="PASS" starttime="20161209 19:38:41.258"></status>
</kw>
<status endtime="20161209 19:38:41.258" status="PASS" starttime="20161209 19:38:41.255"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161209 19:38:41.263" level="INFO">${port_num} = 22</msg>
<status endtime="20161209 19:38:41.263" status="PASS" starttime="20161209 19:38:41.262"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161209 19:38:41.263" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20161209 19:38:41.263" status="PASS" starttime="20161209 19:38:41.263"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161209 19:38:41.264" level="INFO">${https_num} = 443</msg>
<status endtime="20161209 19:38:41.264" status="PASS" starttime="20161209 19:38:41.263"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.264" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161209 19:38:41.264" status="PASS" starttime="20161209 19:38:41.264"></status>
</kw>
<status endtime="20161209 19:38:41.265" status="PASS" starttime="20161209 19:38:41.262"></status>
</kw>
<status endtime="20161209 19:38:41.265" status="PASS" starttime="20161209 19:38:41.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 19:38:41.265" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20161209 19:38:41.266" status="FAIL" starttime="20161209 19:38:41.265"></status>
</kw>
<msg timestamp="20161209 19:38:41.266" level="INFO">${has_port} = False</msg>
<status endtime="20161209 19:38:41.266" status="PASS" starttime="20161209 19:38:41.265"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161209 19:38:41.270" status="PASS" starttime="20161209 19:38:41.269"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161209 19:38:41.270" status="PASS" starttime="20161209 19:38:41.270"></status>
</kw>
<status endtime="20161209 19:38:41.270" status="PASS" starttime="20161209 19:38:41.269"></status>
</kw>
<status endtime="20161209 19:38:41.270" status="PASS" starttime="20161209 19:38:41.266"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.271" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161209 19:38:41.273" level="FAIL">TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</msg>
<status endtime="20161209 19:38:41.274" status="FAIL" starttime="20161209 19:38:41.270"></status>
</kw>
<status endtime="20161209 19:38:41.274" status="FAIL" starttime="20161209 19:38:41.253"></status>
</kw>
<status endtime="20161209 19:38:41.274" status="FAIL" starttime="20161209 19:38:41.253"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Log FFDC if failed and collect SOL</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="FFDC">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161209 19:38:41.279" level="INFO">${cur_time} = 2016-12-09 19:38:41:278345</msg>
<status endtime="20161209 19:38:41.279" status="PASS" starttime="20161209 19:38:41.278"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161209 19:38:41.279" level="INFO">${cur_time} = 20161209193841278345</msg>
<status endtime="20161209 19:38:41.279" status="PASS" starttime="20161209 19:38:41.279"></status>
</kw>
<msg timestamp="20161209 19:38:41.279" level="INFO">${cur_time} = 20161209193841278345</msg>
<status endtime="20161209 19:38:41.279" status="PASS" starttime="20161209 19:38:41.278"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.282" level="INFO">${FFDC_TIME} = 20161209193841278345</msg>
<status endtime="20161209 19:38:41.282" status="PASS" starttime="20161209 19:38:41.280"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status endtime="20161209 19:38:41.283" status="PASS" starttime="20161209 19:38:41.283"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20161209 19:38:41.284" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20161209 19:38:41.284" status="PASS" starttime="20161209 19:38:41.283"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20161209 19:38:41.284" level="INFO">${suite_name} = 20161209193841278345_TestsTestBasicPoweron</msg>
<status endtime="20161209 19:38:41.284" status="PASS" starttime="20161209 19:38:41.284"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20161209 19:38:41.285" level="INFO">${test_name} = powerontest</msg>
<status endtime="20161209 19:38:41.285" status="PASS" starttime="20161209 19:38:41.284"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20161209 19:38:41.285" level="INFO">${test_name} = 20161209193841278345_powerontest</msg>
<status endtime="20161209 19:38:41.285" status="PASS" starttime="20161209 19:38:41.285"></status>
</kw>
<msg timestamp="20161209 19:38:41.286" level="INFO">${suitename} = 20161209193841278345_TestsTestBasicPoweron</msg>
<msg timestamp="20161209 19:38:41.286" level="INFO">${testname} = 20161209193841278345_powerontest</msg>
<status endtime="20161209 19:38:41.286" status="PASS" starttime="20161209 19:38:41.283"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.289" level="INFO">${FFDC_DIR_PATH} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest</msg>
<status endtime="20161209 19:38:41.289" status="PASS" starttime="20161209 19:38:41.286"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20161209 19:38:41.289" level="INFO">${prefix} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_</msg>
<status endtime="20161209 19:38:41.289" status="PASS" starttime="20161209 19:38:41.289"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.292" level="INFO">${LOG_PREFIX} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_</msg>
<status endtime="20161209 19:38:41.293" status="PASS" starttime="20161209 19:38:41.290"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Directory">
<doc>Creates directory and report file</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.294" level="INFO">Created directory '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.294" status="PASS" starttime="20161209 19:38:41.293"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Report File">
<doc>Create a generic file name for ffdc</doc>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg timestamp="20161209 19:38:41.297" level="INFO">${FFDC_FILE_PATH} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt</msg>
<status endtime="20161209 19:38:41.297" status="PASS" starttime="20161209 19:38:41.294"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.298" level="INFO">Created file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.298" status="PASS" starttime="20161209 19:38:41.298"></status>
</kw>
<status endtime="20161209 19:38:41.298" status="PASS" starttime="20161209 19:38:41.294"></status>
</kw>
<status endtime="20161209 19:38:41.298" status="PASS" starttime="20161209 19:38:41.293"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.300" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.300" status="PASS" starttime="20161209 19:38:41.299"></status>
</kw>
<status endtime="20161209 19:38:41.300" status="PASS" starttime="20161209 19:38:41.299"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.301" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.301" status="PASS" starttime="20161209 19:38:41.301"></status>
</kw>
<status endtime="20161209 19:38:41.301" status="PASS" starttime="20161209 19:38:41.300"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.302" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.302" status="PASS" starttime="20161209 19:38:41.302"></status>
</kw>
<status endtime="20161209 19:38:41.302" status="PASS" starttime="20161209 19:38:41.301"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.303" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.303" status="PASS" starttime="20161209 19:38:41.303"></status>
</kw>
<status endtime="20161209 19:38:41.304" status="PASS" starttime="20161209 19:38:41.302"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.305" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.305" status="PASS" starttime="20161209 19:38:41.304"></status>
</kw>
<status endtime="20161209 19:38:41.305" status="PASS" starttime="20161209 19:38:41.304"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.306" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.306" status="PASS" starttime="20161209 19:38:41.305"></status>
</kw>
<status endtime="20161209 19:38:41.306" status="PASS" starttime="20161209 19:38:41.305"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.307" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.307" status="PASS" starttime="20161209 19:38:41.307"></status>
</kw>
<status endtime="20161209 19:38:41.307" status="PASS" starttime="20161209 19:38:41.306"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.309" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.309" status="PASS" starttime="20161209 19:38:41.308"></status>
</kw>
<status endtime="20161209 19:38:41.309" status="PASS" starttime="20161209 19:38:41.307"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.310" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.310" status="PASS" starttime="20161209 19:38:41.309"></status>
</kw>
<status endtime="20161209 19:38:41.310" status="PASS" starttime="20161209 19:38:41.309"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.311" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.311" status="PASS" starttime="20161209 19:38:41.311"></status>
</kw>
<status endtime="20161209 19:38:41.311" status="PASS" starttime="20161209 19:38:41.310"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.312" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.312" status="PASS" starttime="20161209 19:38:41.312"></status>
</kw>
<status endtime="20161209 19:38:41.313" status="PASS" starttime="20161209 19:38:41.312"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.314" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.314" status="PASS" starttime="20161209 19:38:41.313"></status>
</kw>
<status endtime="20161209 19:38:41.314" status="PASS" starttime="20161209 19:38:41.313"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.315" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.315" status="PASS" starttime="20161209 19:38:41.314"></status>
</kw>
<status endtime="20161209 19:38:41.315" status="PASS" starttime="20161209 19:38:41.314"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.316" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.316" status="PASS" starttime="20161209 19:38:41.316"></status>
</kw>
<status endtime="20161209 19:38:41.316" status="PASS" starttime="20161209 19:38:41.315"></status>
</kw>
<status endtime="20161209 19:38:41.316" status="PASS" starttime="20161209 19:38:41.310"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.317" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.318" status="PASS" starttime="20161209 19:38:41.317"></status>
</kw>
<status endtime="20161209 19:38:41.318" status="PASS" starttime="20161209 19:38:41.317"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20161209 19:38:41.318" level="INFO">@{entries} = [ APPLICATION DATA | BMC DATA | DRIVER INFO ]</msg>
<status endtime="20161209 19:38:41.318" status="PASS" starttime="20161209 19:38:41.318"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.320" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.320" status="PASS" starttime="20161209 19:38:41.319"></status>
</kw>
<status endtime="20161209 19:38:41.320" status="PASS" starttime="20161209 19:38:41.319"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.321" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.321" status="PASS" starttime="20161209 19:38:41.321"></status>
</kw>
<status endtime="20161209 19:38:41.321" status="PASS" starttime="20161209 19:38:41.320"></status>
</kw>
<status endtime="20161209 19:38:41.321" status="PASS" starttime="20161209 19:38:41.318"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.323" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.323" status="PASS" starttime="20161209 19:38:41.322"></status>
</kw>
<status endtime="20161209 19:38:41.323" status="PASS" starttime="20161209 19:38:41.322"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.324" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.324" status="PASS" starttime="20161209 19:38:41.324"></status>
</kw>
<status endtime="20161209 19:38:41.324" status="PASS" starttime="20161209 19:38:41.323"></status>
</kw>
<status endtime="20161209 19:38:41.324" status="PASS" starttime="20161209 19:38:41.322"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.325" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.325" status="PASS" starttime="20161209 19:38:41.325"></status>
</kw>
<status endtime="20161209 19:38:41.326" status="PASS" starttime="20161209 19:38:41.324"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.326" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.327" status="PASS" starttime="20161209 19:38:41.326"></status>
</kw>
<status endtime="20161209 19:38:41.327" status="PASS" starttime="20161209 19:38:41.326"></status>
</kw>
<status endtime="20161209 19:38:41.327" status="PASS" starttime="20161209 19:38:41.324"></status>
</kw>
<status endtime="20161209 19:38:41.327" status="PASS" starttime="20161209 19:38:41.318"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.328" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.328" status="PASS" starttime="20161209 19:38:41.327"></status>
</kw>
<status endtime="20161209 19:38:41.328" status="PASS" starttime="20161209 19:38:41.327"></status>
</kw>
<status endtime="20161209 19:38:41.328" status="PASS" starttime="20161209 19:38:41.298"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20161209 19:38:41.329" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20161209 19:38:41.329" status="PASS" starttime="20161209 19:38:41.328"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20161209 19:38:41.330" level="INFO">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') ]</msg>
<status endtime="20161209 19:38:41.330" status="PASS" starttime="20161209 19:38:41.329"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 19:38:41.333" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20161209 19:38:41.333" status="FAIL" starttime="20161209 19:38:41.333"></status>
</kw>
<msg timestamp="20161209 19:38:41.333" level="INFO">${has_host} = False</msg>
<status endtime="20161209 19:38:41.333" status="PASS" starttime="20161209 19:38:41.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161209 19:38:41.337" status="PASS" starttime="20161209 19:38:41.336"></status>
</kw>
<status endtime="20161209 19:38:41.337" status="PASS" starttime="20161209 19:38:41.333"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161209 19:38:41.341" level="INFO">${port_num} = 22</msg>
<status endtime="20161209 19:38:41.341" status="PASS" starttime="20161209 19:38:41.340"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161209 19:38:41.341" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20161209 19:38:41.341" status="PASS" starttime="20161209 19:38:41.341"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161209 19:38:41.342" level="INFO">${https_num} = 443</msg>
<status endtime="20161209 19:38:41.342" status="PASS" starttime="20161209 19:38:41.341"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.342" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161209 19:38:41.342" status="PASS" starttime="20161209 19:38:41.342"></status>
</kw>
<status endtime="20161209 19:38:41.343" status="PASS" starttime="20161209 19:38:41.340"></status>
</kw>
<status endtime="20161209 19:38:41.343" status="PASS" starttime="20161209 19:38:41.337"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 19:38:41.343" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20161209 19:38:41.343" status="FAIL" starttime="20161209 19:38:41.343"></status>
</kw>
<msg timestamp="20161209 19:38:41.344" level="INFO">${has_port} = False</msg>
<status endtime="20161209 19:38:41.344" status="PASS" starttime="20161209 19:38:41.343"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161209 19:38:41.348" status="PASS" starttime="20161209 19:38:41.347"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161209 19:38:41.348" status="PASS" starttime="20161209 19:38:41.348"></status>
</kw>
<status endtime="20161209 19:38:41.348" status="PASS" starttime="20161209 19:38:41.347"></status>
</kw>
<status endtime="20161209 19:38:41.348" status="PASS" starttime="20161209 19:38:41.344"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.349" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161209 19:38:41.351" level="FAIL">TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</msg>
<status endtime="20161209 19:38:41.351" status="FAIL" starttime="20161209 19:38:41.348"></status>
</kw>
<status endtime="20161209 19:38:41.351" status="FAIL" starttime="20161209 19:38:41.332"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20161209 19:38:41.351" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20161209 19:38:41.351" status="PASS" starttime="20161209 19:38:41.351"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20161209 19:38:41.353" level="INFO">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') ]</msg>
<status endtime="20161209 19:38:41.353" status="PASS" starttime="20161209 19:38:41.352"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161209 19:38:41.353" level="INFO">${logpath} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_dmesg.txt</msg>
<status endtime="20161209 19:38:41.353" status="PASS" starttime="20161209 19:38:41.353"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161209 19:38:41.357" status="PASS" starttime="20161209 19:38:41.354"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:41.357" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20161209 19:38:41.359" level="INFO">${stdout} = None</msg>
<msg timestamp="20161209 19:38:41.359" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:41.359" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:41.359" status="FAIL" starttime="20161209 19:38:41.357"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.364" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_dmesg.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.365" status="PASS" starttime="20161209 19:38:41.363"></status>
</kw>
<status endtime="20161209 19:38:41.365" status="PASS" starttime="20161209 19:38:41.363"></status>
</kw>
<status endtime="20161209 19:38:41.365" status="PASS" starttime="20161209 19:38:41.363"></status>
</kw>
<status endtime="20161209 19:38:41.365" status="PASS" starttime="20161209 19:38:41.359"></status>
</kw>
<status endtime="20161209 19:38:41.365" status="FAIL" starttime="20161209 19:38:41.354"></status>
</kw>
<status endtime="20161209 19:38:41.365" status="FAIL" starttime="20161209 19:38:41.353"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161209 19:38:41.366" level="INFO">${logpath} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_procinfo.txt</msg>
<status endtime="20161209 19:38:41.366" status="PASS" starttime="20161209 19:38:41.365"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161209 19:38:41.369" status="PASS" starttime="20161209 19:38:41.367"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:41.370" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20161209 19:38:41.370" level="INFO">${stdout} = None</msg>
<msg timestamp="20161209 19:38:41.370" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:41.371" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:41.371" status="FAIL" starttime="20161209 19:38:41.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.376" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_procinfo.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.376" status="PASS" starttime="20161209 19:38:41.375"></status>
</kw>
<status endtime="20161209 19:38:41.376" status="PASS" starttime="20161209 19:38:41.375"></status>
</kw>
<status endtime="20161209 19:38:41.376" status="PASS" starttime="20161209 19:38:41.374"></status>
</kw>
<status endtime="20161209 19:38:41.376" status="PASS" starttime="20161209 19:38:41.371"></status>
</kw>
<status endtime="20161209 19:38:41.376" status="FAIL" starttime="20161209 19:38:41.366"></status>
</kw>
<status endtime="20161209 19:38:41.376" status="FAIL" starttime="20161209 19:38:41.365"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161209 19:38:41.377" level="INFO">${logpath} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_proc_list.txt</msg>
<status endtime="20161209 19:38:41.377" status="PASS" starttime="20161209 19:38:41.376"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161209 19:38:41.380" status="PASS" starttime="20161209 19:38:41.378"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:41.381" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20161209 19:38:41.382" level="INFO">${stdout} = None</msg>
<msg timestamp="20161209 19:38:41.382" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:41.382" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:41.382" status="FAIL" starttime="20161209 19:38:41.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.387" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_proc_list.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.387" status="PASS" starttime="20161209 19:38:41.387"></status>
</kw>
<status endtime="20161209 19:38:41.387" status="PASS" starttime="20161209 19:38:41.386"></status>
</kw>
<status endtime="20161209 19:38:41.387" status="PASS" starttime="20161209 19:38:41.386"></status>
</kw>
<status endtime="20161209 19:38:41.387" status="PASS" starttime="20161209 19:38:41.383"></status>
</kw>
<status endtime="20161209 19:38:41.388" status="FAIL" starttime="20161209 19:38:41.377"></status>
</kw>
<status endtime="20161209 19:38:41.388" status="FAIL" starttime="20161209 19:38:41.376"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161209 19:38:41.388" level="INFO">${logpath} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_journalctl.txt</msg>
<status endtime="20161209 19:38:41.388" status="PASS" starttime="20161209 19:38:41.388"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161209 19:38:41.392" status="PASS" starttime="20161209 19:38:41.389"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:41.393" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20161209 19:38:41.393" level="INFO">${stdout} = None</msg>
<msg timestamp="20161209 19:38:41.393" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:41.394" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:41.394" status="FAIL" starttime="20161209 19:38:41.392"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.399" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_journalctl.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.399" status="PASS" starttime="20161209 19:38:41.398"></status>
</kw>
<status endtime="20161209 19:38:41.399" status="PASS" starttime="20161209 19:38:41.397"></status>
</kw>
<status endtime="20161209 19:38:41.399" status="PASS" starttime="20161209 19:38:41.397"></status>
</kw>
<status endtime="20161209 19:38:41.399" status="PASS" starttime="20161209 19:38:41.394"></status>
</kw>
<status endtime="20161209 19:38:41.399" status="FAIL" starttime="20161209 19:38:41.389"></status>
</kw>
<status endtime="20161209 19:38:41.399" status="FAIL" starttime="20161209 19:38:41.388"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161209 19:38:41.400" level="INFO">${logpath} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_meminfo.txt</msg>
<status endtime="20161209 19:38:41.400" status="PASS" starttime="20161209 19:38:41.399"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161209 19:38:41.403" status="PASS" starttime="20161209 19:38:41.401"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:41.404" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20161209 19:38:41.404" level="INFO">${stdout} = None</msg>
<msg timestamp="20161209 19:38:41.405" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:41.405" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:41.405" status="FAIL" starttime="20161209 19:38:41.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:41.409" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_meminfo.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:41.410" status="PASS" starttime="20161209 19:38:41.409"></status>
</kw>
<status endtime="20161209 19:38:41.410" status="PASS" starttime="20161209 19:38:41.409"></status>
</kw>
<status endtime="20161209 19:38:41.410" status="PASS" starttime="20161209 19:38:41.408"></status>
</kw>
<status endtime="20161209 19:38:41.410" status="PASS" starttime="20161209 19:38:41.405"></status>
</kw>
<status endtime="20161209 19:38:41.410" status="FAIL" starttime="20161209 19:38:41.400"></status>
</kw>
<status endtime="20161209 19:38:41.410" status="FAIL" starttime="20161209 19:38:41.399"></status>
</kw>
<status endtime="20161209 19:38:41.410" status="FAIL" starttime="20161209 19:38:41.353"></status>
</kw>
<status endtime="20161209 19:38:41.410" status="FAIL" starttime="20161209 19:38:41.352"></status>
</kw>
<status endtime="20161209 19:38:41.410" status="FAIL" starttime="20161209 19:38:41.352"></status>
</kw>
<status endtime="20161209 19:38:41.410" status="FAIL" starttime="20161209 19:38:41.352"></status>
</kw>
<status endtime="20161209 19:38:41.413" status="FAIL" starttime="20161209 19:38:41.331"></status>
</kw>
<status endtime="20161209 19:38:41.413" status="FAIL" starttime="20161209 19:38:41.331"></status>
</kw>
<status endtime="20161209 19:38:41.413" status="FAIL" starttime="20161209 19:38:41.330"></status>
</kw>
<status endtime="20161209 19:38:41.413" status="FAIL" starttime="20161209 19:38:41.330"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 19:38:41.416" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20161209 19:38:41.416" status="FAIL" starttime="20161209 19:38:41.416"></status>
</kw>
<msg timestamp="20161209 19:38:41.416" level="INFO">${has_host} = False</msg>
<status endtime="20161209 19:38:41.416" status="PASS" starttime="20161209 19:38:41.415"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161209 19:38:41.419" status="PASS" starttime="20161209 19:38:41.419"></status>
</kw>
<status endtime="20161209 19:38:41.420" status="PASS" starttime="20161209 19:38:41.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161209 19:38:41.423" level="INFO">${port_num} = 22</msg>
<status endtime="20161209 19:38:41.423" status="PASS" starttime="20161209 19:38:41.423"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161209 19:38:41.424" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20161209 19:38:41.424" status="PASS" starttime="20161209 19:38:41.424"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161209 19:38:41.424" level="INFO">${https_num} = 443</msg>
<status endtime="20161209 19:38:41.424" status="PASS" starttime="20161209 19:38:41.424"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.425" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161209 19:38:41.425" status="PASS" starttime="20161209 19:38:41.425"></status>
</kw>
<status endtime="20161209 19:38:41.425" status="PASS" starttime="20161209 19:38:41.423"></status>
</kw>
<status endtime="20161209 19:38:41.425" status="PASS" starttime="20161209 19:38:41.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 19:38:41.426" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20161209 19:38:41.426" status="FAIL" starttime="20161209 19:38:41.426"></status>
</kw>
<msg timestamp="20161209 19:38:41.426" level="INFO">${has_port} = False</msg>
<status endtime="20161209 19:38:41.426" status="PASS" starttime="20161209 19:38:41.426"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161209 19:38:41.430" status="PASS" starttime="20161209 19:38:41.430"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161209 19:38:41.431" status="PASS" starttime="20161209 19:38:41.431"></status>
</kw>
<status endtime="20161209 19:38:41.431" status="PASS" starttime="20161209 19:38:41.430"></status>
</kw>
<status endtime="20161209 19:38:41.431" status="PASS" starttime="20161209 19:38:41.427"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 19:38:41.431" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161209 19:38:41.434" level="FAIL">TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</msg>
<status endtime="20161209 19:38:41.434" status="FAIL" starttime="20161209 19:38:41.431"></status>
</kw>
<status endtime="20161209 19:38:41.434" status="FAIL" starttime="20161209 19:38:41.415"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20161209 19:38:41.434" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20161209 19:38:41.435" status="PASS" starttime="20161209 19:38:41.434"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20161209 19:38:41.436" level="INFO">@{cmd_list} = [ ('BMC_inventory', '/org/openbmc/inventory/system/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_record_log', '/org...</msg>
<status endtime="20161209 19:38:41.436" status="PASS" starttime="20161209 19:38:41.435"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161209 19:38:41.436" level="INFO">${logpath} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_inventory.txt</msg>
<status endtime="20161209 19:38:41.437" status="PASS" starttime="20161209 19:38:41.436"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 19:38:41.438" level="INFO">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status endtime="20161209 19:38:41.438" status="PASS" starttime="20161209 19:38:41.437"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20161209 19:38:41.441" status="PASS" starttime="20161209 19:38:41.438"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 19:38:41.442" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161209 19:38:41.442" status="PASS" starttime="20161209 19:38:41.441"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 19:38:41.442" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161209 19:38:41.442" status="PASS" starttime="20161209 19:38:41.442"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 19:38:41.443" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161209 19:38:41.443" status="PASS" starttime="20161209 19:38:41.443"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 19:38:41.444" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161209 19:38:41.444" status="PASS" starttime="20161209 19:38:41.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 19:38:42.198" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 19:38:42.199" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:42.199" status="PASS" starttime="20161209 19:38:41.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 19:38:42.200" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161209 19:38:42.200" status="PASS" starttime="20161209 19:38:42.199"></status>
</kw>
<status endtime="20161209 19:38:42.200" status="PASS" starttime="20161209 19:38:41.441"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 19:38:46.064" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/enumerate, headers=None </msg>
<msg timestamp="20161209 19:38:46.064" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:46.064" status="PASS" starttime="20161209 19:38:42.200"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20161209 19:38:46.070" status="PASS" starttime="20161209 19:38:46.065"></status>
</kw>
<msg timestamp="20161209 19:38:46.070" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:46.071" status="PASS" starttime="20161209 19:38:41.437"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 19:38:46.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161209 19:38:46.072" status="PASS" starttime="20161209 19:38:46.072"></status>
</kw>
<msg timestamp="20161209 19:38:46.072" level="INFO">${status} = True</msg>
<status endtime="20161209 19:38:46.073" status="PASS" starttime="20161209 19:38:46.071"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20161209 19:38:46.077" status="PASS" starttime="20161209 19:38:46.073"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20161209 19:38:46.083" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-fda20bd", 
      "Custom Field 2": "\tskiboot-5.2.0-opdirty", 
      "Custom Field 3": "\thostboot-c223637-1d3dbf3", 
      "Custom Field 4": "\tlinux-4.4.6-openpower1-opdirty-99d283b", 
      "Custom Field 5": "\tpetitboot-72928ed-opdirty-47f54ff", 
      "Custom Field 6": "\tbarreleye-xml-1250f06-opdirty", 
      "Custom Field 7": "\tocc-1093bf9-opdir", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-v1.8", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-316-gfb02791-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/330"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/330"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 19:38:46.084" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20161209 19:38:46.085" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/inventory/system/bios": {
            "Asset Tag": "",
            "Custom Field 1": "\tbuildroot-fda20bd",
            "Custom Field 2": "\tskiboot-5.2.0-opdirty...</msg>
<status endtime="20161209 19:38:46.085" status="PASS" starttime="20161209 19:38:46.078"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:46.087" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_inventory.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:46.087" status="PASS" starttime="20161209 19:38:46.086"></status>
</kw>
<status endtime="20161209 19:38:46.087" status="PASS" starttime="20161209 19:38:46.085"></status>
</kw>
<status endtime="20161209 19:38:46.087" status="PASS" starttime="20161209 19:38:41.436"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161209 19:38:46.087" level="INFO">${logpath} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_led.txt</msg>
<status endtime="20161209 19:38:46.087" status="PASS" starttime="20161209 19:38:46.087"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 19:38:46.089" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20161209 19:38:46.089" status="PASS" starttime="20161209 19:38:46.088"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20161209 19:38:46.092" status="PASS" starttime="20161209 19:38:46.089"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 19:38:46.093" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161209 19:38:46.093" status="PASS" starttime="20161209 19:38:46.092"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 19:38:46.093" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161209 19:38:46.093" status="PASS" starttime="20161209 19:38:46.093"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 19:38:46.094" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161209 19:38:46.094" status="PASS" starttime="20161209 19:38:46.094"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 19:38:46.095" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161209 19:38:46.095" status="PASS" starttime="20161209 19:38:46.094"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 19:38:46.427" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 19:38:46.427" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:46.427" status="PASS" starttime="20161209 19:38:46.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 19:38:46.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161209 19:38:46.427" status="PASS" starttime="20161209 19:38:46.427"></status>
</kw>
<status endtime="20161209 19:38:46.428" status="PASS" starttime="20161209 19:38:46.092"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 19:38:46.750" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg timestamp="20161209 19:38:46.750" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:46.750" status="PASS" starttime="20161209 19:38:46.428"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20161209 19:38:46.754" status="PASS" starttime="20161209 19:38:46.751"></status>
</kw>
<msg timestamp="20161209 19:38:46.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:46.754" status="PASS" starttime="20161209 19:38:46.088"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 19:38:46.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161209 19:38:46.755" status="PASS" starttime="20161209 19:38:46.754"></status>
</kw>
<msg timestamp="20161209 19:38:46.755" level="INFO">${status} = True</msg>
<status endtime="20161209 19:38:46.755" status="PASS" starttime="20161209 19:38:46.754"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20161209 19:38:46.758" status="PASS" starttime="20161209 19:38:46.755"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20161209 19:38:46.758" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/records/events/330": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:11:21 06:14:21"
    }, 
    "/org/openbmc/records/events/330/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 19:38:46.759" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20161209 19:38:46.759" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/records/events/330": {
            "associations": [
                [
                    "fru",
                    "event",
                    "/org/openbmc/i...</msg>
<status endtime="20161209 19:38:46.759" status="PASS" starttime="20161209 19:38:46.758"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:46.760" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_led.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_led.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:46.760" status="PASS" starttime="20161209 19:38:46.759"></status>
</kw>
<status endtime="20161209 19:38:46.760" status="PASS" starttime="20161209 19:38:46.759"></status>
</kw>
<status endtime="20161209 19:38:46.760" status="PASS" starttime="20161209 19:38:46.087"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161209 19:38:46.761" level="INFO">${logpath} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_sensor_list.txt</msg>
<status endtime="20161209 19:38:46.761" status="PASS" starttime="20161209 19:38:46.760"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 19:38:46.762" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20161209 19:38:46.762" status="PASS" starttime="20161209 19:38:46.762"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20161209 19:38:46.765" status="PASS" starttime="20161209 19:38:46.762"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 19:38:46.766" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161209 19:38:46.766" status="PASS" starttime="20161209 19:38:46.765"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 19:38:46.767" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161209 19:38:46.767" status="PASS" starttime="20161209 19:38:46.766"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 19:38:46.767" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161209 19:38:46.767" status="PASS" starttime="20161209 19:38:46.767"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 19:38:46.768" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161209 19:38:46.768" status="PASS" starttime="20161209 19:38:46.767"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 19:38:47.098" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 19:38:47.098" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:47.098" status="PASS" starttime="20161209 19:38:46.768"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 19:38:47.099" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161209 19:38:47.099" status="PASS" starttime="20161209 19:38:47.098"></status>
</kw>
<status endtime="20161209 19:38:47.099" status="PASS" starttime="20161209 19:38:46.765"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 19:38:48.898" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg timestamp="20161209 19:38:48.898" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:48.898" status="PASS" starttime="20161209 19:38:47.100"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20161209 19:38:48.903" status="PASS" starttime="20161209 19:38:48.899"></status>
</kw>
<msg timestamp="20161209 19:38:48.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:48.903" status="PASS" starttime="20161209 19:38:46.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 19:38:48.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161209 19:38:48.904" status="PASS" starttime="20161209 19:38:48.904"></status>
</kw>
<msg timestamp="20161209 19:38:48.905" level="INFO">${status} = True</msg>
<status endtime="20161209 19:38:48.905" status="PASS" starttime="20161209 19:38:48.903"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20161209 19:38:48.908" status="PASS" starttime="20161209 19:38:48.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20161209 19:38:48.912" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 124, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 5, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 724, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 5, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 28500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 30250, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 19:38:48.912" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20161209 19:38:48.913" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/HSCA/Iout": {
            "adjust": 0.25,
            "critical_lower": 0,
            "critical_upper": 0,
            "emergency_enabled": 0,
          ...</msg>
<status endtime="20161209 19:38:48.913" status="PASS" starttime="20161209 19:38:48.908"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:48.915" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_sensor_list.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:48.915" status="PASS" starttime="20161209 19:38:48.914"></status>
</kw>
<status endtime="20161209 19:38:48.915" status="PASS" starttime="20161209 19:38:48.913"></status>
</kw>
<status endtime="20161209 19:38:48.915" status="PASS" starttime="20161209 19:38:46.760"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20161209 19:38:48.915" level="INFO">${logpath} = /tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_record_log.txt</msg>
<status endtime="20161209 19:38:48.915" status="PASS" starttime="20161209 19:38:48.915"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 19:38:48.916" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20161209 19:38:48.917" status="PASS" starttime="20161209 19:38:48.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20161209 19:38:48.919" status="PASS" starttime="20161209 19:38:48.917"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 19:38:48.920" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161209 19:38:48.921" status="PASS" starttime="20161209 19:38:48.920"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 19:38:48.921" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161209 19:38:48.921" status="PASS" starttime="20161209 19:38:48.921"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 19:38:48.922" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161209 19:38:48.922" status="PASS" starttime="20161209 19:38:48.922"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 19:38:48.922" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161209 19:38:48.922" status="PASS" starttime="20161209 19:38:48.922"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 19:38:49.248" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 19:38:49.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:49.249" status="PASS" starttime="20161209 19:38:48.923"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161209 19:38:49.249" status="PASS" starttime="20161209 19:38:49.249"></status>
</kw>
<status endtime="20161209 19:38:49.249" status="PASS" starttime="20161209 19:38:48.920"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 19:38:49.439" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg timestamp="20161209 19:38:49.439" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:49.439" status="PASS" starttime="20161209 19:38:49.250"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20161209 19:38:49.443" status="PASS" starttime="20161209 19:38:49.440"></status>
</kw>
<msg timestamp="20161209 19:38:49.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:49.443" status="PASS" starttime="20161209 19:38:48.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161209 19:38:49.444" status="PASS" starttime="20161209 19:38:49.443"></status>
</kw>
<msg timestamp="20161209 19:38:49.444" level="INFO">${status} = True</msg>
<status endtime="20161209 19:38:49.444" status="PASS" starttime="20161209 19:38:49.443"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20161209 19:38:49.447" status="PASS" starttime="20161209 19:38:49.444"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20161209 19:38:49.448" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 19:38:49.448" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20161209 19:38:49.448" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/control/led/beep": {},
        "/org/openbmc/control/led/heartbeat": {},
        "/org/openbmc/control/led/identify": {}
    },
    "message": "200 OK",
    "stat...</msg>
<status endtime="20161209 19:38:49.448" status="PASS" starttime="20161209 19:38:49.447"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.449" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_record_log.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_record_log.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.449" status="PASS" starttime="20161209 19:38:49.449"></status>
</kw>
<status endtime="20161209 19:38:49.449" status="PASS" starttime="20161209 19:38:49.448"></status>
</kw>
<status endtime="20161209 19:38:49.449" status="PASS" starttime="20161209 19:38:48.915"></status>
</kw>
<status endtime="20161209 19:38:49.449" status="PASS" starttime="20161209 19:38:41.436"></status>
</kw>
<status endtime="20161209 19:38:49.450" status="PASS" starttime="20161209 19:38:41.435"></status>
</kw>
<status endtime="20161209 19:38:49.450" status="PASS" starttime="20161209 19:38:41.435"></status>
</kw>
<status endtime="20161209 19:38:49.450" status="PASS" starttime="20161209 19:38:41.435"></status>
</kw>
<status endtime="20161209 19:38:49.450" status="FAIL" starttime="20161209 19:38:41.414"></status>
</kw>
<status endtime="20161209 19:38:49.450" status="FAIL" starttime="20161209 19:38:41.414"></status>
</kw>
<status endtime="20161209 19:38:49.450" status="FAIL" starttime="20161209 19:38:41.414"></status>
</kw>
<status endtime="20161209 19:38:49.450" status="FAIL" starttime="20161209 19:38:41.413"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 19:38:49.453" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20161209 19:38:49.453" status="FAIL" starttime="20161209 19:38:49.453"></status>
</kw>
<msg timestamp="20161209 19:38:49.453" level="INFO">${has_host} = False</msg>
<status endtime="20161209 19:38:49.453" status="PASS" starttime="20161209 19:38:49.452"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161209 19:38:49.457" status="PASS" starttime="20161209 19:38:49.456"></status>
</kw>
<status endtime="20161209 19:38:49.457" status="PASS" starttime="20161209 19:38:49.453"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161209 19:38:49.461" level="INFO">${port_num} = 22</msg>
<status endtime="20161209 19:38:49.461" status="PASS" starttime="20161209 19:38:49.460"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161209 19:38:49.461" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20161209 19:38:49.461" status="PASS" starttime="20161209 19:38:49.461"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161209 19:38:49.462" level="INFO">${https_num} = 443</msg>
<status endtime="20161209 19:38:49.462" status="PASS" starttime="20161209 19:38:49.461"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.462" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161209 19:38:49.462" status="PASS" starttime="20161209 19:38:49.462"></status>
</kw>
<status endtime="20161209 19:38:49.462" status="PASS" starttime="20161209 19:38:49.460"></status>
</kw>
<status endtime="20161209 19:38:49.463" status="PASS" starttime="20161209 19:38:49.457"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 19:38:49.463" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20161209 19:38:49.464" status="FAIL" starttime="20161209 19:38:49.463"></status>
</kw>
<msg timestamp="20161209 19:38:49.464" level="INFO">${has_port} = False</msg>
<status endtime="20161209 19:38:49.464" status="PASS" starttime="20161209 19:38:49.463"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161209 19:38:49.468" status="PASS" starttime="20161209 19:38:49.468"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161209 19:38:49.468" status="PASS" starttime="20161209 19:38:49.468"></status>
</kw>
<status endtime="20161209 19:38:49.468" status="PASS" starttime="20161209 19:38:49.467"></status>
</kw>
<status endtime="20161209 19:38:49.469" status="PASS" starttime="20161209 19:38:49.464"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.469" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161209 19:38:49.471" level="FAIL">TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</msg>
<status endtime="20161209 19:38:49.471" status="FAIL" starttime="20161209 19:38:49.469"></status>
</kw>
<status endtime="20161209 19:38:49.471" status="FAIL" starttime="20161209 19:38:49.452"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20161209 19:38:49.472" level="INFO">@{entries} = [ APPLICATION DATA | BMC DATA | DRIVER INFO ]</msg>
<status endtime="20161209 19:38:49.472" status="PASS" starttime="20161209 19:38:49.472"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20161209 19:38:49.473" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20161209 19:38:49.473" status="PASS" starttime="20161209 19:38:49.473"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.477" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20161209 19:38:49.477" status="PASS" starttime="20161209 19:38:49.474"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.482" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.482" status="PASS" starttime="20161209 19:38:49.481"></status>
</kw>
<status endtime="20161209 19:38:49.482" status="PASS" starttime="20161209 19:38:49.481"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.483" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.483" status="PASS" starttime="20161209 19:38:49.483"></status>
</kw>
<status endtime="20161209 19:38:49.484" status="PASS" starttime="20161209 19:38:49.482"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.485" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.485" status="PASS" starttime="20161209 19:38:49.484"></status>
</kw>
<status endtime="20161209 19:38:49.485" status="PASS" starttime="20161209 19:38:49.484"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.486" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.486" status="PASS" starttime="20161209 19:38:49.485"></status>
</kw>
<status endtime="20161209 19:38:49.486" status="PASS" starttime="20161209 19:38:49.485"></status>
</kw>
<status endtime="20161209 19:38:49.486" status="PASS" starttime="20161209 19:38:49.481"></status>
</kw>
<status endtime="20161209 19:38:49.486" status="PASS" starttime="20161209 19:38:49.478"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:49.487" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20161209 19:38:49.487" level="INFO">${stdout} = None</msg>
<msg timestamp="20161209 19:38:49.487" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:49.488" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:49.488" status="FAIL" starttime="20161209 19:38:49.486"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.492" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.493" status="PASS" starttime="20161209 19:38:49.492"></status>
</kw>
<status endtime="20161209 19:38:49.493" status="PASS" starttime="20161209 19:38:49.492"></status>
</kw>
<status endtime="20161209 19:38:49.493" status="PASS" starttime="20161209 19:38:49.491"></status>
</kw>
<status endtime="20161209 19:38:49.493" status="PASS" starttime="20161209 19:38:49.488"></status>
</kw>
<status endtime="20161209 19:38:49.493" status="FAIL" starttime="20161209 19:38:49.477"></status>
</kw>
<status endtime="20161209 19:38:49.493" status="FAIL" starttime="20161209 19:38:49.477"></status>
</kw>
<status endtime="20161209 19:38:49.493" status="FAIL" starttime="20161209 19:38:49.477"></status>
</kw>
<status endtime="20161209 19:38:49.493" status="FAIL" starttime="20161209 19:38:49.473"></status>
</kw>
<status endtime="20161209 19:38:49.493" status="FAIL" starttime="20161209 19:38:49.472"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20161209 19:38:49.494" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20161209 19:38:49.494" status="PASS" starttime="20161209 19:38:49.494"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.495" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20161209 19:38:49.495" status="PASS" starttime="20161209 19:38:49.494"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.501" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.501" status="PASS" starttime="20161209 19:38:49.500"></status>
</kw>
<status endtime="20161209 19:38:49.501" status="PASS" starttime="20161209 19:38:49.500"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.502" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.502" status="PASS" starttime="20161209 19:38:49.502"></status>
</kw>
<status endtime="20161209 19:38:49.502" status="PASS" starttime="20161209 19:38:49.501"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.503" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.503" status="PASS" starttime="20161209 19:38:49.503"></status>
</kw>
<status endtime="20161209 19:38:49.503" status="PASS" starttime="20161209 19:38:49.502"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.504" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.504" status="PASS" starttime="20161209 19:38:49.504"></status>
</kw>
<status endtime="20161209 19:38:49.505" status="PASS" starttime="20161209 19:38:49.504"></status>
</kw>
<status endtime="20161209 19:38:49.505" status="PASS" starttime="20161209 19:38:49.499"></status>
</kw>
<status endtime="20161209 19:38:49.505" status="PASS" starttime="20161209 19:38:49.496"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:49.505" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20161209 19:38:49.506" level="INFO">${stdout} = None</msg>
<msg timestamp="20161209 19:38:49.506" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:49.506" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:49.506" status="FAIL" starttime="20161209 19:38:49.505"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.511" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.511" status="PASS" starttime="20161209 19:38:49.511"></status>
</kw>
<status endtime="20161209 19:38:49.511" status="PASS" starttime="20161209 19:38:49.510"></status>
</kw>
<status endtime="20161209 19:38:49.511" status="PASS" starttime="20161209 19:38:49.510"></status>
</kw>
<status endtime="20161209 19:38:49.511" status="PASS" starttime="20161209 19:38:49.507"></status>
</kw>
<status endtime="20161209 19:38:49.511" status="FAIL" starttime="20161209 19:38:49.495"></status>
</kw>
<status endtime="20161209 19:38:49.511" status="FAIL" starttime="20161209 19:38:49.495"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.517" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.517" status="PASS" starttime="20161209 19:38:49.516"></status>
</kw>
<status endtime="20161209 19:38:49.517" status="PASS" starttime="20161209 19:38:49.516"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.518" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.518" status="PASS" starttime="20161209 19:38:49.518"></status>
</kw>
<status endtime="20161209 19:38:49.518" status="PASS" starttime="20161209 19:38:49.517"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.519" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.519" status="PASS" starttime="20161209 19:38:49.519"></status>
</kw>
<status endtime="20161209 19:38:49.520" status="PASS" starttime="20161209 19:38:49.519"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.521" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.521" status="PASS" starttime="20161209 19:38:49.521"></status>
</kw>
<status endtime="20161209 19:38:49.521" status="PASS" starttime="20161209 19:38:49.520"></status>
</kw>
<status endtime="20161209 19:38:49.521" status="PASS" starttime="20161209 19:38:49.515"></status>
</kw>
<status endtime="20161209 19:38:49.521" status="PASS" starttime="20161209 19:38:49.512"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:49.522" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20161209 19:38:49.522" level="INFO">${stdout} = None</msg>
<msg timestamp="20161209 19:38:49.522" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:49.523" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:49.523" status="FAIL" starttime="20161209 19:38:49.521"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.527" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.527" status="PASS" starttime="20161209 19:38:49.527"></status>
</kw>
<status endtime="20161209 19:38:49.528" status="PASS" starttime="20161209 19:38:49.526"></status>
</kw>
<status endtime="20161209 19:38:49.528" status="PASS" starttime="20161209 19:38:49.526"></status>
</kw>
<status endtime="20161209 19:38:49.528" status="PASS" starttime="20161209 19:38:49.523"></status>
</kw>
<status endtime="20161209 19:38:49.528" status="FAIL" starttime="20161209 19:38:49.512"></status>
</kw>
<status endtime="20161209 19:38:49.528" status="FAIL" starttime="20161209 19:38:49.512"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.533" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.533" status="PASS" starttime="20161209 19:38:49.533"></status>
</kw>
<status endtime="20161209 19:38:49.533" status="PASS" starttime="20161209 19:38:49.532"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.534" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.534" status="PASS" starttime="20161209 19:38:49.534"></status>
</kw>
<status endtime="20161209 19:38:49.535" status="PASS" starttime="20161209 19:38:49.533"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.536" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.536" status="PASS" starttime="20161209 19:38:49.535"></status>
</kw>
<status endtime="20161209 19:38:49.536" status="PASS" starttime="20161209 19:38:49.535"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.537" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.537" status="PASS" starttime="20161209 19:38:49.537"></status>
</kw>
<status endtime="20161209 19:38:49.537" status="PASS" starttime="20161209 19:38:49.536"></status>
</kw>
<status endtime="20161209 19:38:49.537" status="PASS" starttime="20161209 19:38:49.532"></status>
</kw>
<status endtime="20161209 19:38:49.537" status="PASS" starttime="20161209 19:38:49.529"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:49.538" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20161209 19:38:49.538" level="INFO">${stdout} = None</msg>
<msg timestamp="20161209 19:38:49.538" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:49.539" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:49.539" status="FAIL" starttime="20161209 19:38:49.538"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.544" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.544" status="PASS" starttime="20161209 19:38:49.543"></status>
</kw>
<status endtime="20161209 19:38:49.544" status="PASS" starttime="20161209 19:38:49.542"></status>
</kw>
<status endtime="20161209 19:38:49.544" status="PASS" starttime="20161209 19:38:49.542"></status>
</kw>
<status endtime="20161209 19:38:49.544" status="PASS" starttime="20161209 19:38:49.539"></status>
</kw>
<status endtime="20161209 19:38:49.544" status="FAIL" starttime="20161209 19:38:49.528"></status>
</kw>
<status endtime="20161209 19:38:49.544" status="FAIL" starttime="20161209 19:38:49.528"></status>
</kw>
<status endtime="20161209 19:38:49.544" status="FAIL" starttime="20161209 19:38:49.495"></status>
</kw>
<status endtime="20161209 19:38:49.545" status="FAIL" starttime="20161209 19:38:49.494"></status>
</kw>
<status endtime="20161209 19:38:49.545" status="FAIL" starttime="20161209 19:38:49.493"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20161209 19:38:49.546" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20161209 19:38:49.546" status="PASS" starttime="20161209 19:38:49.545"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.546" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20161209 19:38:49.546" status="PASS" starttime="20161209 19:38:49.546"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.552" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.552" status="PASS" starttime="20161209 19:38:49.551"></status>
</kw>
<status endtime="20161209 19:38:49.552" status="PASS" starttime="20161209 19:38:49.551"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.553" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.553" status="PASS" starttime="20161209 19:38:49.553"></status>
</kw>
<status endtime="20161209 19:38:49.553" status="PASS" starttime="20161209 19:38:49.552"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.554" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.555" status="PASS" starttime="20161209 19:38:49.554"></status>
</kw>
<status endtime="20161209 19:38:49.555" status="PASS" starttime="20161209 19:38:49.554"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.556" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.556" status="PASS" starttime="20161209 19:38:49.555"></status>
</kw>
<status endtime="20161209 19:38:49.556" status="PASS" starttime="20161209 19:38:49.555"></status>
</kw>
<status endtime="20161209 19:38:49.556" status="PASS" starttime="20161209 19:38:49.550"></status>
</kw>
<status endtime="20161209 19:38:49.556" status="PASS" starttime="20161209 19:38:49.547"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:49.556" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161209 19:38:49.557" level="INFO">${stdout} = None</msg>
<msg timestamp="20161209 19:38:49.557" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:49.557" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:49.558" status="FAIL" starttime="20161209 19:38:49.556"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.562" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.562" status="PASS" starttime="20161209 19:38:49.562"></status>
</kw>
<status endtime="20161209 19:38:49.563" status="PASS" starttime="20161209 19:38:49.561"></status>
</kw>
<status endtime="20161209 19:38:49.563" status="PASS" starttime="20161209 19:38:49.561"></status>
</kw>
<status endtime="20161209 19:38:49.563" status="PASS" starttime="20161209 19:38:49.558"></status>
</kw>
<status endtime="20161209 19:38:49.563" status="FAIL" starttime="20161209 19:38:49.547"></status>
</kw>
<status endtime="20161209 19:38:49.563" status="FAIL" starttime="20161209 19:38:49.547"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.568" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.568" status="PASS" starttime="20161209 19:38:49.568"></status>
</kw>
<status endtime="20161209 19:38:49.568" status="PASS" starttime="20161209 19:38:49.567"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.569" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.570" status="PASS" starttime="20161209 19:38:49.569"></status>
</kw>
<status endtime="20161209 19:38:49.570" status="PASS" starttime="20161209 19:38:49.569"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.571" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.571" status="PASS" starttime="20161209 19:38:49.570"></status>
</kw>
<status endtime="20161209 19:38:49.571" status="PASS" starttime="20161209 19:38:49.570"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.572" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.572" status="PASS" starttime="20161209 19:38:49.571"></status>
</kw>
<status endtime="20161209 19:38:49.572" status="PASS" starttime="20161209 19:38:49.571"></status>
</kw>
<status endtime="20161209 19:38:49.572" status="PASS" starttime="20161209 19:38:49.567"></status>
</kw>
<status endtime="20161209 19:38:49.573" status="PASS" starttime="20161209 19:38:49.564"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:49.573" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20161209 19:38:49.573" level="INFO">${stdout} = None</msg>
<msg timestamp="20161209 19:38:49.573" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:49.574" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:49.574" status="FAIL" starttime="20161209 19:38:49.573"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.578" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt"&gt;/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest/20161209193841278345_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.578" status="PASS" starttime="20161209 19:38:49.578"></status>
</kw>
<status endtime="20161209 19:38:49.579" status="PASS" starttime="20161209 19:38:49.577"></status>
</kw>
<status endtime="20161209 19:38:49.579" status="PASS" starttime="20161209 19:38:49.577"></status>
</kw>
<status endtime="20161209 19:38:49.579" status="PASS" starttime="20161209 19:38:49.574"></status>
</kw>
<status endtime="20161209 19:38:49.579" status="FAIL" starttime="20161209 19:38:49.563"></status>
</kw>
<status endtime="20161209 19:38:49.579" status="FAIL" starttime="20161209 19:38:49.563"></status>
</kw>
<status endtime="20161209 19:38:49.579" status="FAIL" starttime="20161209 19:38:49.546"></status>
</kw>
<status endtime="20161209 19:38:49.579" status="FAIL" starttime="20161209 19:38:49.545"></status>
</kw>
<status endtime="20161209 19:38:49.579" status="FAIL" starttime="20161209 19:38:49.545"></status>
</kw>
<status endtime="20161209 19:38:49.579" status="FAIL" starttime="20161209 19:38:49.472"></status>
</kw>
<status endtime="20161209 19:38:49.579" status="FAIL" starttime="20161209 19:38:49.451"></status>
</kw>
<status endtime="20161209 19:38:49.580" status="FAIL" starttime="20161209 19:38:49.451"></status>
</kw>
<status endtime="20161209 19:38:49.580" status="FAIL" starttime="20161209 19:38:49.450"></status>
</kw>
<status endtime="20161209 19:38:49.580" status="FAIL" starttime="20161209 19:38:49.450"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20161209 19:38:49.584" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20161209 19:38:49.584" status="PASS" starttime="20161209 19:38:49.582"></status>
</kw>
<status endtime="20161209 19:38:49.585" status="PASS" starttime="20161209 19:38:49.581"></status>
</kw>
<status endtime="20161209 19:38:49.585" status="PASS" starttime="20161209 19:38:49.581"></status>
</kw>
<status endtime="20161209 19:38:49.585" status="PASS" starttime="20161209 19:38:49.580"></status>
</kw>
<status endtime="20161209 19:38:49.585" status="PASS" starttime="20161209 19:38:49.580"></status>
</kw>
<status endtime="20161209 19:38:49.585" status="FAIL" starttime="20161209 19:38:41.330"></status>
</kw>
<status endtime="20161209 19:38:49.585" status="FAIL" starttime="20161209 19:38:41.329"></status>
</kw>
<status endtime="20161209 19:38:49.585" status="FAIL" starttime="20161209 19:38:41.329"></status>
</kw>
<status endtime="20161209 19:38:49.585" status="FAIL" starttime="20161209 19:38:41.329"></status>
</kw>
<status endtime="20161209 19:38:49.586" status="FAIL" starttime="20161209 19:38:41.328"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161209 19:38:49.587" level="INFO">${cur_time} = 2016-12-09 19:38:49:586354</msg>
<status endtime="20161209 19:38:49.587" status="PASS" starttime="20161209 19:38:49.586"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161209 19:38:49.587" level="INFO">${cur_time} = 20161209193849586354</msg>
<status endtime="20161209 19:38:49.587" status="PASS" starttime="20161209 19:38:49.587"></status>
</kw>
<msg timestamp="20161209 19:38:49.587" level="INFO">${cur_time} = 20161209193849586354</msg>
<status endtime="20161209 19:38:49.587" status="PASS" starttime="20161209 19:38:49.586"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status endtime="20161209 19:38:49.588" status="PASS" starttime="20161209 19:38:49.587"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.588" level="INFO">
/tmp/root/21630/obmc-robot/logs/20161209193841278345_TestsTestBasicPoweron/20161209193841278345_powerontest</msg>
<status endtime="20161209 19:38:49.588" status="PASS" starttime="20161209 19:38:49.588"></status>
</kw>
<status endtime="20161209 19:38:49.589" status="FAIL" starttime="20161209 19:38:41.277"></status>
</kw>
<status endtime="20161209 19:38:49.589" status="FAIL" starttime="20161209 19:38:41.275"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.590" level="INFO">Directory '&lt;a href="file:///tmp/root/21630/obmc-robot/logs"&gt;/tmp/root/21630/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161209 19:38:49.590" status="PASS" starttime="20161209 19:38:49.589"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.590" level="INFO">File '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/test_history.txt"&gt;/tmp/root/21630/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161209 19:38:49.591" status="PASS" starttime="20161209 19:38:49.590"></status>
</kw>
<msg timestamp="20161209 19:38:49.591" level="INFO">${exist} = True</msg>
<status endtime="20161209 19:38:49.591" status="PASS" starttime="20161209 19:38:49.590"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161209 19:38:49.594" status="PASS" starttime="20161209 19:38:49.591"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161209 19:38:49.594" level="INFO">${cur_time} = 2016-12-09 19:38:49:594329</msg>
<status endtime="20161209 19:38:49.594" status="PASS" starttime="20161209 19:38:49.594"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161209 19:38:49.595" level="INFO">${cur_time} = 20161209193849594329</msg>
<status endtime="20161209 19:38:49.595" status="PASS" starttime="20161209 19:38:49.595"></status>
</kw>
<msg timestamp="20161209 19:38:49.595" level="INFO">${cur_time} = 20161209193849594329</msg>
<status endtime="20161209 19:38:49.595" status="PASS" starttime="20161209 19:38:49.594"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:49.596" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/test_history.txt"&gt;/tmp/root/21630/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:49.596" status="PASS" starttime="20161209 19:38:49.595"></status>
</kw>
<status endtime="20161209 19:38:49.596" status="PASS" starttime="20161209 19:38:49.589"></status>
</kw>
<status endtime="20161209 19:38:49.596" status="FAIL" starttime="20161209 19:38:41.274"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 19:38:49.598" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20161209 19:38:49.598" status="FAIL" starttime="20161209 19:38:49.598"></status>
</kw>
<msg timestamp="20161209 19:38:49.598" level="INFO">${has_host} = False</msg>
<status endtime="20161209 19:38:49.598" status="PASS" starttime="20161209 19:38:49.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161209 19:38:49.602" status="PASS" starttime="20161209 19:38:49.601"></status>
</kw>
<status endtime="20161209 19:38:49.602" status="PASS" starttime="20161209 19:38:49.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161209 19:38:49.606" level="INFO">${port_num} = 22</msg>
<status endtime="20161209 19:38:49.606" status="PASS" starttime="20161209 19:38:49.605"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161209 19:38:49.606" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20161209 19:38:49.606" status="PASS" starttime="20161209 19:38:49.606"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161209 19:38:49.607" level="INFO">${https_num} = 443</msg>
<status endtime="20161209 19:38:49.607" status="PASS" starttime="20161209 19:38:49.607"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.608" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161209 19:38:49.608" status="PASS" starttime="20161209 19:38:49.607"></status>
</kw>
<status endtime="20161209 19:38:49.608" status="PASS" starttime="20161209 19:38:49.605"></status>
</kw>
<status endtime="20161209 19:38:49.608" status="PASS" starttime="20161209 19:38:49.602"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 19:38:49.609" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20161209 19:38:49.609" status="FAIL" starttime="20161209 19:38:49.609"></status>
</kw>
<msg timestamp="20161209 19:38:49.609" level="INFO">${has_port} = False</msg>
<status endtime="20161209 19:38:49.609" status="PASS" starttime="20161209 19:38:49.608"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161209 19:38:49.613" status="PASS" starttime="20161209 19:38:49.613"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161209 19:38:49.614" status="PASS" starttime="20161209 19:38:49.613"></status>
</kw>
<status endtime="20161209 19:38:49.614" status="PASS" starttime="20161209 19:38:49.613"></status>
</kw>
<status endtime="20161209 19:38:49.614" status="PASS" starttime="20161209 19:38:49.609"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.614" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161209 19:38:49.616" level="FAIL">TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</msg>
<status endtime="20161209 19:38:49.616" status="FAIL" starttime="20161209 19:38:49.614"></status>
</kw>
<status endtime="20161209 19:38:49.617" status="FAIL" starttime="20161209 19:38:49.597"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:49.620" level="INFO">${pid} = None</msg>
<msg timestamp="20161209 19:38:49.620" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:49.620" level="FAIL">Variable '${LOG_TIME}' not found. Did you mean:
    ${LOG_FILE}</msg>
<status endtime="20161209 19:38:49.620" status="FAIL" starttime="20161209 19:38:49.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.620" level="FAIL">Could not get length of 'None'.</msg>
<status endtime="20161209 19:38:49.620" status="FAIL" starttime="20161209 19:38:49.620"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20161209 19:38:49.621" level="INFO">Executing command 'ps ax | grep None | grep -v grep'.</msg>
<msg timestamp="20161209 19:38:49.622" level="INFO">${rc} = None</msg>
<msg timestamp="20161209 19:38:49.622" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:49.622" status="FAIL" starttime="20161209 19:38:49.621"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status endtime="20161209 19:38:49.625" status="PASS" starttime="20161209 19:38:49.622"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:49.626" level="INFO">Executing command 'kill -s KILL None'.</msg>
<msg timestamp="20161209 19:38:49.626" level="INFO">${console} = None</msg>
<msg timestamp="20161209 19:38:49.626" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:49.626" level="FAIL">SSHException: SSH session not active</msg>
<status endtime="20161209 19:38:49.627" status="FAIL" starttime="20161209 19:38:49.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.627" level="FAIL">Could not get length of 'None'.</msg>
<status endtime="20161209 19:38:49.627" status="FAIL" starttime="20161209 19:38:49.627"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.628" level="INFO">Current Client PID:None</msg>
<status endtime="20161209 19:38:49.628" status="PASS" starttime="20161209 19:38:49.627"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 19:38:49.631" level="INFO">${console} = None</msg>
<msg timestamp="20161209 19:38:49.631" level="INFO">${stderr} = None</msg>
<msg timestamp="20161209 19:38:49.631" level="FAIL">Variable '${LOG_TIME}' not found. Did you mean:
    ${LOG_FILE}</msg>
<status endtime="20161209 19:38:49.631" status="FAIL" starttime="20161209 19:38:49.628"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.631" level="FAIL">Could not get length of 'None'.</msg>
<status endtime="20161209 19:38:49.631" status="FAIL" starttime="20161209 19:38:49.631"></status>
</kw>
<msg timestamp="20161209 19:38:49.632" level="INFO">${sol_log} = None</msg>
<status endtime="20161209 19:38:49.632" status="FAIL" starttime="20161209 19:38:49.597"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.632" level="INFO">None</msg>
<status endtime="20161209 19:38:49.632" status="PASS" starttime="20161209 19:38:49.632"></status>
</kw>
<status endtime="20161209 19:38:49.632" status="FAIL" starttime="20161209 19:38:41.274">Several failures occurred:

1) TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'

2) SSHException: SSH session not active

3) SSHException: SSH session not active

4) SSHException: SSH session not active

5) SSHException: SSH session not active

6) SSHException: SSH session not active

7) TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'

8) TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'
    [ Message content over the limit has been removed. ]
14) SSHException: SSH session not active

15) TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'

16) Variable '${LOG_TIME}' not found. Did you mean:
    ${LOG_FILE}

17) Could not get length of 'None'.

18) SSHException: SSH session not active

19) SSHException: SSH session not active

20) Could not get length of 'None'.

21) Variable '${LOG_TIME}' not found. Did you mean:
    ${LOG_FILE}

22) Could not get length of 'None'.</status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status endtime="20161209 19:38:49.633" status="FAIL" starttime="20161209 19:38:41.253" critical="yes">Setup failed:
TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'

Also teardown failed:
Several failures occurred:

1) TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'

2) SSHException: SSH session not active

3) SSHException: SSH session not active

4) SSHException: SSH session not active

5) SSHException: SSH session not active

6) SSHException: SSH session not active

7) TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'

8) TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'
    [ Message content over the limit has been removed. ]
14) SSHException: SSH session not active

15) TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'

16) Variable '${LOG_TIME}' not found. Did you mean:
    ${LOG_FILE}

17) Could not get length of 'None'.

18) SSHException: SSH session not active

19) SSHException: SSH session not active

20) Could not get length of 'None'.

21) Variable '${LOG_TIME}' not found. Did you mean:
    ${LOG_FILE}

22) Could not get length of 'None'.</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status endtime="20161209 19:38:49.633" status="FAIL" starttime="20161209 19:38:41.228"></status>
</suite>
<suite name="Test Eventlog" source="/tmp/root/21630/obmc-robot/tests/test_eventlog.robot" id="s1-s4">
<kw library="connection_client" type="setup" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 19:38:49.663" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20161209 19:38:49.663" status="FAIL" starttime="20161209 19:38:49.662"></status>
</kw>
<msg timestamp="20161209 19:38:49.663" level="INFO">${has_host} = False</msg>
<status endtime="20161209 19:38:49.663" status="PASS" starttime="20161209 19:38:49.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161209 19:38:49.666" status="PASS" starttime="20161209 19:38:49.666"></status>
</kw>
<status endtime="20161209 19:38:49.666" status="PASS" starttime="20161209 19:38:49.663"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20161209 19:38:49.670" level="INFO">${port_num} = 22</msg>
<status endtime="20161209 19:38:49.670" status="PASS" starttime="20161209 19:38:49.670"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20161209 19:38:49.671" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20161209 19:38:49.671" status="PASS" starttime="20161209 19:38:49.671"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20161209 19:38:49.672" level="INFO">${https_num} = 443</msg>
<status endtime="20161209 19:38:49.672" status="PASS" starttime="20161209 19:38:49.671"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.672" level="INFO">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161209 19:38:49.672" status="PASS" starttime="20161209 19:38:49.672"></status>
</kw>
<status endtime="20161209 19:38:49.672" status="PASS" starttime="20161209 19:38:49.670"></status>
</kw>
<status endtime="20161209 19:38:49.672" status="PASS" starttime="20161209 19:38:49.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 19:38:49.673" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20161209 19:38:49.673" status="FAIL" starttime="20161209 19:38:49.673"></status>
</kw>
<msg timestamp="20161209 19:38:49.673" level="INFO">${has_port} = False</msg>
<status endtime="20161209 19:38:49.674" status="PASS" starttime="20161209 19:38:49.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161209 19:38:49.677" status="PASS" starttime="20161209 19:38:49.677"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161209 19:38:49.678" status="PASS" starttime="20161209 19:38:49.678"></status>
</kw>
<status endtime="20161209 19:38:49.678" status="PASS" starttime="20161209 19:38:49.677"></status>
</kw>
<status endtime="20161209 19:38:49.678" status="PASS" starttime="20161209 19:38:49.674"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 19:38:49.679" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161209 19:38:49.680" level="FAIL">TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</msg>
<status endtime="20161209 19:38:49.681" status="FAIL" starttime="20161209 19:38:49.678"></status>
</kw>
<status endtime="20161209 19:38:49.681" status="FAIL" starttime="20161209 19:38:49.661"></status>
</kw>
<test name="clear any logs" id="s1-s4-t1">
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status endtime="20161209 19:38:49.681" status="FAIL" starttime="20161209 19:38:49.681" critical="yes">Parent suite setup failed:
TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</status>
</test>
<test name="write a log" id="s1-s4-t2">
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status endtime="20161209 19:38:49.682" status="FAIL" starttime="20161209 19:38:49.682" critical="yes">Parent suite setup failed:
TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</status>
</test>
<kw library="SSHLibrary" type="teardown" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status endtime="20161209 19:38:49.683" status="PASS" starttime="20161209 19:38:49.682"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status endtime="20161209 19:38:49.683" status="FAIL" starttime="20161209 19:38:49.635">Suite setup failed:
TypeError: _custom_start_client() got an unexpected keyword argument 'timeout'</status>
</suite>
<suite name="Test Obmcrest" source="/tmp/root/21630/obmc-robot/tests/test_obmcrest.robot" id="s1-s5">
<test name="Get a Property" id="s1-s5-t1">
<kw library="utils" name="Get Endpoint Paths">
<doc>Returns all url paths ending with given endpoint</doc>
<arguments>
<arg>${OPENBMC_BASE_URI}inventory</arg>
<arg>cpu</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${path}/enumerate</arg>
<arg>timeout=30</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 19:38:49.710" level="INFO">${base_uri} = /org/openbmc/inventory/enumerate</msg>
<status endtime="20161209 19:38:49.710" status="PASS" starttime="20161209 19:38:49.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 19:38:49.714" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/enumerate, method:Get, args:{}</msg>
<status endtime="20161209 19:38:49.714" status="PASS" starttime="20161209 19:38:49.713"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 19:38:49.715" level="INFO">URI:https://9.3.23.30:443/org/openbmc/inventory/enumerate, method:Get, args:{}</msg>
<status endtime="20161209 19:38:49.715" status="PASS" starttime="20161209 19:38:49.715"></status>
</kw>
<status endtime="20161209 19:38:49.715" status="PASS" starttime="20161209 19:38:49.714"></status>
</kw>
<status endtime="20161209 19:38:49.715" status="PASS" starttime="20161209 19:38:49.713"></status>
</kw>
<status endtime="20161209 19:38:49.715" status="PASS" starttime="20161209 19:38:49.710"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 19:38:49.716" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161209 19:38:49.717" status="PASS" starttime="20161209 19:38:49.716"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 19:38:49.717" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161209 19:38:49.717" status="PASS" starttime="20161209 19:38:49.717"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 19:38:49.718" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161209 19:38:49.718" status="PASS" starttime="20161209 19:38:49.717"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 19:38:49.719" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161209 19:38:49.719" status="PASS" starttime="20161209 19:38:49.718"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 19:38:50.493" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 19:38:50.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:50.493" status="PASS" starttime="20161209 19:38:49.719"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 19:38:50.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161209 19:38:50.494" status="PASS" starttime="20161209 19:38:50.493"></status>
</kw>
<status endtime="20161209 19:38:50.494" status="PASS" starttime="20161209 19:38:49.716"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 19:38:54.362" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/enumerate, headers=None </msg>
<msg timestamp="20161209 19:38:54.362" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:54.362" status="PASS" starttime="20161209 19:38:50.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 19:38:54.369" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
...</msg>
<status endtime="20161209 19:38:54.369" status="PASS" starttime="20161209 19:38:54.367"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 19:38:54.370" level="INFO">Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-fda20bd", 
      "Custom Field 2": "\tskiboot-5.2.0-opdirty", 
      "Custom Field 3": "\thostboot-c223637-1d3dbf3", 
      "Custom Field 4": "\tlinux-4.4.6-openpower1-opdirty-99d283b", 
      "Custom Field 5": "\tpetitboot-72928ed-opdirty-47f54ff", 
      "Custom Field 6": "\tbarreleye-xml-1250f06-opdirty", 
      "Custom Field 7": "\tocc-1093bf9-opdir", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-v1.8", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-316-gfb02791-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/330"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/330"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161209 19:38:54.371" status="PASS" starttime="20161209 19:38:54.370"></status>
</kw>
<status endtime="20161209 19:38:54.372" status="PASS" starttime="20161209 19:38:54.369"></status>
</kw>
<status endtime="20161209 19:38:54.372" status="PASS" starttime="20161209 19:38:54.367"></status>
</kw>
<status endtime="20161209 19:38:54.372" status="PASS" starttime="20161209 19:38:54.363"></status>
</kw>
<msg timestamp="20161209 19:38:54.372" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:54.372" status="PASS" starttime="20161209 19:38:49.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 19:38:54.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161209 19:38:54.373" status="PASS" starttime="20161209 19:38:54.372"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161209 19:38:54.374" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-fda20bd", 
      "Custom Field 2": "\tskiboot-5.2.0-opdirty", 
      "Custom Field 3": "\thostboot-c223637-1d3dbf3", 
      "Custom Field 4": "\tlinux-4.4.6-openpower1-opdirty-99d283b", 
      "Custom Field 5": "\tpetitboot-72928ed-opdirty-47f54ff", 
      "Custom Field 6": "\tbarreleye-xml-1250f06-opdirty", 
      "Custom Field 7": "\tocc-1093bf9-opdir", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-v1.8", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-316-gfb02791-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/330"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/330"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 19:38:54.375" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161209 19:38:54.376" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/org/openbmc/inventory/system/chassis/motherboard/dimm3/event': {u'endpoints': [u'/org/openbmc/records/events/330']}, u'/org/openbmc/inventory/sys...</msg>
<status endtime="20161209 19:38:54.376" status="PASS" starttime="20161209 19:38:54.373"></status>
</kw>
<msg timestamp="20161209 19:38:54.377" level="INFO">${resp} = {u'/org/openbmc/inventory/system/chassis/motherboard/dimm3/event': {u'endpoints': [u'/org/openbmc/records/events/330']}, u'/org/openbmc/inventory/system/chassis/fan4': {u'is_fru': 1, u'version': u'', ...</msg>
<status endtime="20161209 19:38:54.377" status="PASS" starttime="20161209 19:38:49.708"></status>
</kw>
<kw library="Collections" name="Log Dictionary">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<msg timestamp="20161209 19:38:54.379" level="INFO">Dictionary size is 96 and it contains following items:
/org/openbmc/inventory/system: {u'is_fru': 1, u'version': u'', u'fru_type': u'SYSTEM', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/bios: {u'Custom Field 5': u'\tpetitboot-72928ed-opdirty-47f54ff', u'Custom Field 4': u'\tlinux-4.4.6-openpower1-opdirty-99d283b', u'Custom Field 7': u'\tocc-1093bf9-opdir', u'Custom Field 6': u'\tbarreleye-xml-1250f06-opdirty', u'Custom Field 1': u'\tbuildroot-fda20bd', u'present': u'True', u'Custom Field 3': u'\thostboot-c223637-1d3dbf3', u'Custom Field 2': u'\tskiboot-5.2.0-opdirty', u'Serial Number': u'', u'Version': u'open-power-barreleye-v1.8', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'', u'version': u'', u'Name': u'OpenPOWER Firmware', u'fault': u'False', u'fru_type': u'SYSTEM', u'is_fru': 1, u'Model Number': u'', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis: {u'is_fru': 1, u'version': u'', u'fru_type': u'SYSTEM', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/fan0: {u'is_fru': 1, u'version': u'', u'fru_type': u'FAN', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/fan1: {u'is_fru': 1, u'version': u'', u'fru_type': u'FAN', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/fan2: {u'is_fru': 1, u'version': u'', u'fru_type': u'FAN', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/fan3: {u'is_fru': 1, u'version': u'', u'fru_type': u'FAN', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/fan4: {u'is_fru': 1, u'version': u'', u'fru_type': u'FAN', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/fan5: {u'is_fru': 1, u'version': u'', u'fru_type': u'FAN', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/hdd_backplane: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'Rackspace US, Inc.', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'1A4218000-600-G64J000AX02', u'version': u'', u'Name': u'BARRELEYE BPx15', u'Custom Field 8': u'', u'Manufacturer': u'FOXCONN', u'Part Number': u'10034HV00-600-G', u'fault': u'False', u'fru_type': u'DAUGHTER_CARD', u'is_fru': 1, u'present': u'True', u'FRU File ID': u'FRU Ver 0.01'}
/org/openbmc/inventory/system/chassis/io_board: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'Rackspace US, Inc.', u'Custom Field 3': u'', u'Custom Field 2': u'1C666D854AD0', u'Serial Number': u'10010VU00X1571001', u'version': u'', u'Name': u'BARRELEYE IO Board', u'Custom Field 8': u'', u'Manufacturer': u'INGRASYS', u'Part Number': u'10010VU00-600-G', u'fault': u'False', u'fru_type': u'DAUGHTER_CARD', u'is_fru': 1, u'present': u'True', u'FRU File ID': u'FRU Ver 0.01'}
/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0: {u'is_fru': 1, u'version': u'', u'fru_type': u'PCIE_CARD', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1: {u'is_fru': 1, u'version': u'', u'fru_type': u'PCIE_CARD', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot0: {u'is_fru': 1, u'version': u'', u'fru_type': u'PCIE_CARD', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser: {u'is_fru': 1, u'version': u'', u'fru_type': u'PCIE_RISER', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot1: {u'is_fru': 1, u'version': u'', u'fru_type': u'PCIE_CARD', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser: {u'is_fru': 1, u'version': u'', u'fru_type': u'PCIE_RISER', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot2: {u'is_fru': 1, u'version': u'', u'fru_type': u'PCIE_CARD', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser: {u'is_fru': 1, u'version': u'', u'fru_type': u'PCIE_RISER', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'65D0008X02', u'version': u'', u'Part Number': u'1A21GBR00-600-G', u'Custom Field 8': u'', u'fru_type': u'MAIN_PLANAR', u'fault': u'True', u'Type': 23, u'is_fru': 1, u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/apss: {u'is_fru': 0, u'version': u'', u'fru_type': u'MAIN_PLANAR', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/bmc: {u'fault': u'False', u'version': u'v1.99.0-316-gfb02791-dirty', u'manufacturer': u'ASPEED', u'fru_type': u'BMC', u'is_fru': 0, u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'Custom Field 3': u'EC:20', u'Custom Field 2': u'ECID:019A007780242718070D0000008D35D1', u'Serial Number': u'YA1933063160', u'version': u'', u'Name': u'PROCESSOR MODULE', u'Custom Field 8': u'', u'Manufacturer': u'IBM', u'Part Number': u'00UL864', u'fault': u'False', u'fru_type': u'CPU', u'is_fru': 1, u'present': u'True', u'FRU File ID': u'0x2020'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'Custom Field 3': u'EC:20', u'Custom Field 2': u'ECID:019A0077C120471803070000005A3822', u'Serial Number': u'YA1933063136', u'version': u'', u'Name': u'PROCESSOR MODULE', u'Custom Field 8': u'', u'Manufacturer': u'IBM', u'Part Number': u'00UL864', u'fault': u'False', u'fru_type': u'CPU', u'is_fru': 1, u'present': u'True', u'FRU File ID': u'0x2020'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9: {u'is_fru': 0, u'version': u'', u'fru_type': u'CORE', u'fault': u'False', u'present': u'True'}
/org/openbmc/inventory/system/chassis/motherboard/dimm0: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f30', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'False', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm1: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f54', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'False', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm10: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm11: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm12: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f25', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'True', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm13: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f52', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'True', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm14: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm15: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm16: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f2f', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'False', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm17: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f37', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'False', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm18: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm19: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm2: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm2/event: {u'endpoints': [u'/org/openbmc/records/events/330']}
/org/openbmc/inventory/system/chassis/motherboard/dimm20: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f29', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'False', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm21: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f33', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'False', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm22: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm23: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm24: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317da404', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'False', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm25: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f93', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'False', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm26: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm27: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm28: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f27', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'False', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm29: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f2c', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'False', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm3: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm3/event: {u'endpoints': [u'/org/openbmc/records/events/330']}
/org/openbmc/inventory/system/chassis/motherboard/dimm30: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm31: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm4: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f2b', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'False', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm5: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f53', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'False', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm6: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm7: {u'is_fru': 1, u'version': u'', u'fru_type': u'DIMM', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm8: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f94', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'True', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm9: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'present': u'True', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'0x317d9f56', u'Version': u'0x0000', u'Asset Tag': u'', u'Custom Field 8': u'', u'Manufacturer': u'0xce80', u'version': u'', u'Name': u'0x0b', u'fault': u'True', u'fru_type': u'DIMM', u'is_fru': 1, u'Model Number': u'M393B2G70DB0-YK0  ', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf0: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'64Q0004X02', u'version': u'', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Manufacturer': u'INGRASYS', u'Part Number': u'1A4218800-600-G', u'fault': u'False', u'fru_type': u'MEMORY_BUFFER', u'is_fru': 0, u'present': u'True', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf1: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'64Q0004X02', u'version': u'', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Manufacturer': u'INGRASYS', u'Part Number': u'1A4218800-600-G', u'fault': u'False', u'fru_type': u'MEMORY_BUFFER', u'is_fru': 0, u'present': u'True', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf2: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'64Q0004X02', u'version': u'', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Manufacturer': u'INGRASYS', u'Part Number': u'1A4218800-600-G', u'fault': u'True', u'fru_type': u'MEMORY_BUFFER', u'is_fru': 0, u'present': u'True', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf3: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'64Q0004X02', u'version': u'', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Manufacturer': u'INGRASYS', u'Part Number': u'1A4218800-600-G', u'fault': u'True', u'fru_type': u'MEMORY_BUFFER', u'is_fru': 0, u'present': u'True', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf4: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'64Q0004X02', u'version': u'', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Manufacturer': u'INGRASYS', u'Part Number': u'1A4218800-600-G', u'fault': u'False', u'fru_type': u'MEMORY_BUFFER', u'is_fru': 0, u'present': u'True', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf5: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'64Q0004X02', u'version': u'', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Manufacturer': u'INGRASYS', u'Part Number': u'1A4218800-600-G', u'fault': u'False', u'fru_type': u'MEMORY_BUFFER', u'is_fru': 0, u'present': u'True', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf6: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'64Q0004X02', u'version': u'', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Manufacturer': u'INGRASYS', u'Part Number': u'1A4218800-600-G', u'fault': u'False', u'fru_type': u'MEMORY_BUFFER', u'is_fru': 0, u'present': u'True', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf7: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'64Q0004X02', u'version': u'', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Manufacturer': u'INGRASYS', u'Part Number': u'1A4218800-600-G', u'fault': u'False', u'fru_type': u'MEMORY_BUFFER', u'is_fru': 0, u'present': u'True', u'FRU File ID': u''}
/org/openbmc/inventory/system/chassis/motherboard/pcieclock: {u'is_fru': 0, u'version': u'', u'fru_type': u'MAIN_PLANAR', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/refclock: {u'is_fru': 0, u'version': u'', u'fru_type': u'MAIN_PLANAR', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/todclock: {u'is_fru': 0, u'version': u'', u'fru_type': u'MAIN_PLANAR', u'fault': u'False', u'present': u'False'}
/org/openbmc/inventory/system/chassis/sas_expander: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'Rackspace US, Inc.', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'1A421AR00-600-G64J0002X02', u'version': u'', u'Name': u'BARRELEYE PEB', u'Custom Field 8': u'', u'Manufacturer': u'FOXCONN', u'Part Number': u'10034HV00-600-G', u'fault': u'False', u'fru_type': u'DAUGHTER_CARD', u'is_fru': 1, u'present': u'True', u'FRU File ID': u'FRU Ver 0.01'}
/org/openbmc/inventory/system/misc: {u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 1': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Serial Number': u'64Q0004X02', u'version': u'', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Manufacturer': u'INGRASYS', u'Part Number': u'1A4218800-600-G', u'fault': u'True', u'fru_type': u'SYSTEM', u'is_fru': 0, u'present': u'True', u'FRU File ID': u''}
/org/openbmc/inventory/system/systemevent: {u'is_fru': 0, u'version': u'', u'fru_type': u'SYSTEM_EVENT', u'fault': u'False', u'present': u'False'}</msg>
<status endtime="20161209 19:38:54.379" status="PASS" starttime="20161209 19:38:54.377"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20161209 19:38:54.380" level="INFO">${list} = [u'/org/openbmc/inventory/system', u'/org/openbmc/inventory/system/bios', u'/org/openbmc/inventory/system/chassis', u'/org/openbmc/inventory/system/chassis/fan0', u'/org/openbmc/inventory/system/chass...</msg>
<status endtime="20161209 19:38:54.380" status="PASS" starttime="20161209 19:38:54.379"></status>
</kw>
<kw library="Collections" name="Get Matches">
<doc>Returns a list of matches to ``pattern`` in ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>regexp=^.*[0-9a-z_].${endpoint}[0-9]*$</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 19:38:54.381" level="INFO">${resp} = [u'/org/openbmc/inventory/system/chassis/motherboard/cpu0', u'/org/openbmc/inventory/system/chassis/motherboard/cpu1']</msg>
<status endtime="20161209 19:38:54.381" status="PASS" starttime="20161209 19:38:54.380"></status>
</kw>
<msg timestamp="20161209 19:38:54.381" level="INFO">${url_list} = [u'/org/openbmc/inventory/system/chassis/motherboard/cpu0', u'/org/openbmc/inventory/system/chassis/motherboard/cpu1']</msg>
<status endtime="20161209 19:38:54.381" status="PASS" starttime="20161209 19:38:49.707"></status>
</kw>
<kw library="Collections" name="Get From List">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${url_list}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg timestamp="20161209 19:38:54.382" level="INFO">${url} = /org/openbmc/inventory/system/chassis/motherboard/cpu0</msg>
<status endtime="20161209 19:38:54.382" status="PASS" starttime="20161209 19:38:54.382"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${url}</arg>
<arg>is_fru</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 19:38:54.383" level="INFO">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru</msg>
<status endtime="20161209 19:38:54.383" status="PASS" starttime="20161209 19:38:54.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 19:38:54.387" level="INFO">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status endtime="20161209 19:38:54.388" status="PASS" starttime="20161209 19:38:54.387"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 19:38:54.388" level="INFO">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status endtime="20161209 19:38:54.388" status="PASS" starttime="20161209 19:38:54.388"></status>
</kw>
<status endtime="20161209 19:38:54.388" status="PASS" starttime="20161209 19:38:54.388"></status>
</kw>
<status endtime="20161209 19:38:54.389" status="PASS" starttime="20161209 19:38:54.386"></status>
</kw>
<status endtime="20161209 19:38:54.389" status="PASS" starttime="20161209 19:38:54.384"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 19:38:54.389" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161209 19:38:54.390" status="PASS" starttime="20161209 19:38:54.389"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 19:38:54.390" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161209 19:38:54.390" status="PASS" starttime="20161209 19:38:54.390"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 19:38:54.391" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161209 19:38:54.391" status="PASS" starttime="20161209 19:38:54.390"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 19:38:54.391" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161209 19:38:54.391" status="PASS" starttime="20161209 19:38:54.391"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 19:38:55.228" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 19:38:55.228" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:55.228" status="PASS" starttime="20161209 19:38:54.392"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 19:38:55.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161209 19:38:55.229" status="PASS" starttime="20161209 19:38:55.229"></status>
</kw>
<status endtime="20161209 19:38:55.230" status="PASS" starttime="20161209 19:38:54.389"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 19:38:55.432" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, headers=None </msg>
<msg timestamp="20161209 19:38:55.432" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:55.432" status="PASS" starttime="20161209 19:38:55.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 19:38:55.438" level="INFO">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161209 19:38:55.438" status="PASS" starttime="20161209 19:38:55.437"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 19:38:55.439" level="INFO">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161209 19:38:55.439" status="PASS" starttime="20161209 19:38:55.439"></status>
</kw>
<status endtime="20161209 19:38:55.440" status="PASS" starttime="20161209 19:38:55.438"></status>
</kw>
<status endtime="20161209 19:38:55.440" status="PASS" starttime="20161209 19:38:55.437"></status>
</kw>
<status endtime="20161209 19:38:55.440" status="PASS" starttime="20161209 19:38:55.433"></status>
</kw>
<msg timestamp="20161209 19:38:55.440" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161209 19:38:55.440" status="PASS" starttime="20161209 19:38:54.382"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161209 19:38:55.441" level="INFO">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 19:38:55.441" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161209 19:38:55.441" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 1}</msg>
<status endtime="20161209 19:38:55.441" status="PASS" starttime="20161209 19:38:55.440"></status>
</kw>
<msg timestamp="20161209 19:38:55.442" level="INFO">${resp} = 1</msg>
<status endtime="20161209 19:38:55.442" status="PASS" starttime="20161209 19:38:54.382"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${1}</arg>
</arguments>
<status endtime="20161209 19:38:55.442" status="PASS" starttime="20161209 19:38:55.442"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161209 19:38:55.445" status="PASS" starttime="20161209 19:38:55.443"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:55.446" level="INFO">Directory '&lt;a href="file:///tmp/root/21630/obmc-robot/logs"&gt;/tmp/root/21630/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161209 19:38:55.446" status="PASS" starttime="20161209 19:38:55.446"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:55.447" level="INFO">File '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/test_history.txt"&gt;/tmp/root/21630/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161209 19:38:55.447" status="PASS" starttime="20161209 19:38:55.447"></status>
</kw>
<msg timestamp="20161209 19:38:55.447" level="INFO">${exist} = True</msg>
<status endtime="20161209 19:38:55.447" status="PASS" starttime="20161209 19:38:55.446"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161209 19:38:55.450" status="PASS" starttime="20161209 19:38:55.447"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161209 19:38:55.451" level="INFO">${cur_time} = 2016-12-09 19:38:55:450690</msg>
<status endtime="20161209 19:38:55.451" status="PASS" starttime="20161209 19:38:55.451"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20161209 19:38:55.451" level="INFO">${cur_time} = 20161209193855450690</msg>
<status endtime="20161209 19:38:55.451" status="PASS" starttime="20161209 19:38:55.451"></status>
</kw>
<msg timestamp="20161209 19:38:55.452" level="INFO">${cur_time} = 20161209193855450690</msg>
<status endtime="20161209 19:38:55.452" status="PASS" starttime="20161209 19:38:55.450"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20161209 19:38:55.452" level="INFO">Appended to file '&lt;a href="file:///tmp/root/21630/obmc-robot/logs/test_history.txt"&gt;/tmp/root/21630/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161209 19:38:55.452" status="PASS" starttime="20161209 19:38:55.452"></status>
</kw>
<status endtime="20161209 19:38:55.453" status="PASS" starttime="20161209 19:38:55.445"></status>
</kw>
<status endtime="20161209 19:38:55.453" status="PASS" starttime="20161209 19:38:55.442"></status>
</kw>
<tags>
<tag>Get_a_Property</tag>
</tags>
<status endtime="20161209 19:38:55.453" status="PASS" starttime="20161209 19:38:49.707" critical="yes"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status endtime="20161209 19:38:55.453" status="PASS" starttime="20161209 19:38:49.684"></status>
</suite>
<status endtime="20161209 19:38:55.456" status="FAIL" starttime="20161209 19:38:40.141"></status>
</suite>
<statistics>
<total>
<stat fail="5" pass="2">Critical Tests</stat>
<stat fail="5" pass="2">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="2" pass="0">CI</stat>
<stat fail="1" pass="0">clear_any_logs</stat>
<stat fail="1" pass="0">Create_error_log_on_single_FRU</stat>
<stat fail="1" pass="0">Delete_error_log</stat>
<stat fail="0" pass="1">Get_a_Property</stat>
<stat fail="1" pass="0">power_on_test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
<stat fail="1" pass="0">write_a_log</stat>
</tag>
<suite>
<stat fail="5" id="s1" pass="2" name="Tests">Tests</stat>
<stat fail="0" id="s1-s1" pass="1" name="Security">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" pass="1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat fail="2" id="s1-s2" pass="0" name="Test Association">Tests.Test Association</stat>
<stat fail="1" id="s1-s3" pass="0" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
<stat fail="2" id="s1-s4" pass="0" name="Test Eventlog">Tests.Test Eventlog</stat>
<stat fail="0" id="s1-s5" pass="1" name="Test Obmcrest">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
