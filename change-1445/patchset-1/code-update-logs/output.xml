<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161209 16:52:59.506" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code update BMC">
<kw name="Check If File Exist" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n PATH: ${filepath}</arg>
</arguments>
<msg timestamp="20161209 16:52:59.980" level="INFO">
PATH: /home/fspcibld/witherspoon-20161209152749.all.tar</msg>
<status status="PASS" endtime="20161209 16:52:59.980" starttime="20161209 16:52:59.980"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>msg=${filepath} doesn't exist [ ERROR ]</arg>
</arguments>
<msg timestamp="20161209 16:52:59.981" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon-20161209152749.all.tar"&gt;/home/fspcibld/witherspoon-20161209152749.all.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161209 16:52:59.981" starttime="20161209 16:52:59.981"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${filepath}</arg>
</arguments>
<msg timestamp="20161209 16:52:59.982" level="INFO">${FILE_PATH} = /home/fspcibld/witherspoon-20161209152749.all.tar</msg>
<status status="PASS" endtime="20161209 16:52:59.982" starttime="20161209 16:52:59.981"></status>
</kw>
<status status="PASS" endtime="20161209 16:52:59.982" starttime="20161209 16:52:59.979"></status>
</kw>
<kw name="System Readiness Test" library="code_update_utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<assign>
<var>${l_status}</var>
</assign>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:52:59.984" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:52:59.984" starttime="20161209 16:52:59.984"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:52:59.990" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:53:02.995" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:53:02.995" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.55 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.661 ms
64 bytes from 9.3.185.72: icmp_seq...</msg>
<status status="PASS" endtime="20161209 16:53:02.995" starttime="20161209 16:52:59.984"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:53:02.999" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.55 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.661 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.673 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.752 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.661/0.910/1.555/0.374 ms</msg>
<status status="PASS" endtime="20161209 16:53:02.999" starttime="20161209 16:53:02.998"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:03.000" starttime="20161209 16:53:03.000"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:03.001" starttime="20161209 16:52:59.983"></status>
</kw>
<msg timestamp="20161209 16:53:03.001" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:53:03.001" starttime="20161209 16:52:59.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:03.007" starttime="20161209 16:53:03.002"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:53:03.009" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:53:03.011" starttime="20161209 16:53:03.008"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:03.012" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:03.012" starttime="20161209 16:53:03.011"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:53:03.013" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:53:03.013" starttime="20161209 16:53:03.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:53:03.014" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:53:03.014" starttime="20161209 16:53:03.013"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:53:04.127" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:04.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:04.128" starttime="20161209 16:53:03.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:04.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:04.129" starttime="20161209 16:53:04.128"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:04.129" starttime="20161209 16:53:03.008"></status>
</kw>
<msg timestamp="20161209 16:53:04.129" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161209 16:53:04.129" starttime="20161209 16:53:03.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:04.134" starttime="20161209 16:53:04.130"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 16:53:04.137" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161209 16:53:04.137" starttime="20161209 16:53:04.136"></status>
</kw>
<msg timestamp="20161209 16:53:04.137" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161209 16:53:04.137" starttime="20161209 16:53:04.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:04.143" starttime="20161209 16:53:04.142"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:04.143" starttime="20161209 16:53:04.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:04.145" starttime="20161209 16:53:04.143"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 16:53:04.146" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161209 16:53:04.146" starttime="20161209 16:53:04.146"></status>
</kw>
<msg timestamp="20161209 16:53:04.146" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161209 16:53:04.146" starttime="20161209 16:53:04.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:04.150" starttime="20161209 16:53:04.150"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:04.150" starttime="20161209 16:53:04.149"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:04.150" starttime="20161209 16:53:04.147"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 16:53:04.151" level="INFO">Logging into '9.3.185.72:22' as 'root'.</msg>
<msg timestamp="20161209 16:53:06.785" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161209 16:53:06.786" starttime="20161209 16:53:04.150"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:06.786" starttime="20161209 16:53:04.135"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 16:53:06.787" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161209 16:53:06.904" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 16:53:06.904" level="INFO">${system} = w6</msg>
<msg timestamp="20161209 16:53:06.905" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 16:53:06.905" starttime="20161209 16:53:06.786"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 16:53:06.905" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 16:53:06.905" starttime="20161209 16:53:06.905"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:06.906" starttime="20161209 16:52:59.983"></status>
</kw>
<msg timestamp="20161209 16:53:06.906" level="INFO">${l_status} = True</msg>
<status status="PASS" endtime="20161209 16:53:06.906" starttime="20161209 16:52:59.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_status}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=System not in ideal state to use [ERROR]</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:06.911" starttime="20161209 16:53:06.906"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:06.911" starttime="20161209 16:52:59.982"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Validate BMC Version</arg>
<arg>before</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Validate BMC Version" library="code_update_utils">
<arguments>
<arg>before</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 16:53:06.914" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161209 16:53:06.914" starttime="20161209 16:53:06.914"></status>
</kw>
<msg timestamp="20161209 16:53:06.914" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161209 16:53:06.914" starttime="20161209 16:53:06.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:06.918" starttime="20161209 16:53:06.917"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:06.918" starttime="20161209 16:53:06.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:06.920" starttime="20161209 16:53:06.918"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 16:53:06.921" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161209 16:53:06.921" starttime="20161209 16:53:06.921"></status>
</kw>
<msg timestamp="20161209 16:53:06.921" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161209 16:53:06.921" starttime="20161209 16:53:06.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:06.925" starttime="20161209 16:53:06.925"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:06.925" starttime="20161209 16:53:06.925"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:06.925" starttime="20161209 16:53:06.922"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 16:53:06.926" level="INFO">Logging into '9.3.185.72:22' as 'root'.</msg>
<msg timestamp="20161209 16:53:09.521" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161209 16:53:09.521" starttime="20161209 16:53:06.925"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:09.521" starttime="20161209 16:53:06.912"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat /etc/version</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${version}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 16:53:09.522" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161209 16:53:09.640" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 16:53:09.640" level="INFO">${version} = 20160707150257</msg>
<msg timestamp="20161209 16:53:09.640" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 16:53:09.640" starttime="20161209 16:53:09.522"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 16:53:09.641" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 16:53:09.641" starttime="20161209 16:53:09.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${args}' == 'before'</arg>
<arg>Should not Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
<arg>ELSE</arg>
<arg>Should Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:09.647" starttime="20161209 16:53:09.646"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:09.647" starttime="20161209 16:53:09.641"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:09.647" starttime="20161209 16:53:06.912"></status>
</kw>
<msg timestamp="20161209 16:53:09.647" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20161209 16:53:09.647" starttime="20161209 16:53:06.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Pass Execution</arg>
<arg>Same Driver version installed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:09.652" starttime="20161209 16:53:09.648"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161209 16:53:09.653" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161209 16:53:09.653" starttime="20161209 16:53:09.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161209 16:53:09.654" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161209 16:53:09.654" starttime="20161209 16:53:09.654"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:53:09.655" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161209 16:53:09.655" starttime="20161209 16:53:09.655"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:53:09.657" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status status="PASS" endtime="20161209 16:53:09.657" starttime="20161209 16:53:09.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:09.657" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:09.657" starttime="20161209 16:53:09.657"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:09.658" starttime="20161209 16:53:09.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:09.663" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:53:09.663" starttime="20161209 16:53:09.662"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:09.664" level="INFO">URI:https://9.3.185.72/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:53:09.664" starttime="20161209 16:53:09.664"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:09.664" starttime="20161209 16:53:09.663"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:09.664" starttime="20161209 16:53:09.661"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:09.664" starttime="20161209 16:53:09.658"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:53:09.665" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:53:09.666" starttime="20161209 16:53:09.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:09.666" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:09.666" starttime="20161209 16:53:09.666"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:53:09.667" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:53:09.667" starttime="20161209 16:53:09.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:53:09.668" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:53:09.668" starttime="20161209 16:53:09.667"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:53:10.149" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:10.149" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:10.149" starttime="20161209 16:53:09.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:10.150" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:10.150" starttime="20161209 16:53:10.150"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:10.150" starttime="20161209 16:53:09.665"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 16:53:10.917" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:10.917" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:10.918" starttime="20161209 16:53:10.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:10.924" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:10.924" starttime="20161209 16:53:10.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:10.925" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:10.926" starttime="20161209 16:53:10.925"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:10.926" starttime="20161209 16:53:10.924"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:10.926" starttime="20161209 16:53:10.923"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:10.926" starttime="20161209 16:53:10.918"></status>
</kw>
<msg timestamp="20161209 16:53:10.926" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:10.926" starttime="20161209 16:53:09.656"></status>
</kw>
<msg timestamp="20161209 16:53:10.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:10.927" starttime="20161209 16:53:09.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:10.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:10.928" starttime="20161209 16:53:10.927"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161209 16:53:10.931" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161209 16:53:10.931" starttime="20161209 16:53:10.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161209 16:53:10.932" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161209 16:53:10.932" starttime="20161209 16:53:10.931"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:53:10.933" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161209 16:53:10.933" starttime="20161209 16:53:10.933"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:53:10.935" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161209 16:53:10.935" starttime="20161209 16:53:10.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:10.935" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:10.935" starttime="20161209 16:53:10.935"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:10.936" starttime="20161209 16:53:10.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:10.940" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:53:10.940" starttime="20161209 16:53:10.939"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:10.941" level="INFO">URI:https://9.3.185.72/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:53:10.941" starttime="20161209 16:53:10.941"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:10.941" starttime="20161209 16:53:10.940"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:10.942" starttime="20161209 16:53:10.939"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:10.942" starttime="20161209 16:53:10.936"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:53:10.943" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:53:10.943" starttime="20161209 16:53:10.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:10.944" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:10.944" starttime="20161209 16:53:10.943"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:53:10.944" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:53:10.944" starttime="20161209 16:53:10.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:53:10.945" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:53:10.945" starttime="20161209 16:53:10.944"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:53:12.153" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:12.153" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:12.153" starttime="20161209 16:53:10.945"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:12.154" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:12.154" starttime="20161209 16:53:12.153"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:12.154" starttime="20161209 16:53:10.942"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 16:53:12.928" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:12.929" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:12.929" starttime="20161209 16:53:12.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:12.936" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:12.936" starttime="20161209 16:53:12.935"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:12.937" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:12.937" starttime="20161209 16:53:12.937"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:12.938" starttime="20161209 16:53:12.936"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:12.938" starttime="20161209 16:53:12.934"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:12.938" starttime="20161209 16:53:12.929"></status>
</kw>
<msg timestamp="20161209 16:53:12.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:12.939" starttime="20161209 16:53:10.933"></status>
</kw>
<msg timestamp="20161209 16:53:12.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:12.939" starttime="20161209 16:53:10.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:12.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:12.940" starttime="20161209 16:53:12.939"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161209 16:53:12.941" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 16:53:12.941" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161209 16:53:12.941" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': 0}</msg>
<status status="PASS" endtime="20161209 16:53:12.941" starttime="20161209 16:53:12.940"></status>
</kw>
<msg timestamp="20161209 16:53:12.942" level="INFO">${state} = 0</msg>
<status status="PASS" endtime="20161209 16:53:12.942" starttime="20161209 16:53:10.930"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:12.942" starttime="20161209 16:53:12.942"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:12.943" starttime="20161209 16:53:10.929"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:12.943" starttime="20161209 16:53:10.929"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:12.943" starttime="20161209 16:53:09.652"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20161209 16:53:12.944" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161209 16:53:12.944" starttime="20161209 16:53:12.944"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:53:12.945" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20161209 16:53:12.945" starttime="20161209 16:53:12.945"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:53:12.946" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161209 16:53:12.947" starttime="20161209 16:53:12.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:12.947" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:12.947" starttime="20161209 16:53:12.947"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:12.947" starttime="20161209 16:53:12.947"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:12.949" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:53:12.949" starttime="20161209 16:53:12.948"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:12.950" level="INFO">URI:https://9.3.185.72/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:53:12.950" starttime="20161209 16:53:12.949"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:12.950" starttime="20161209 16:53:12.949"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:12.950" starttime="20161209 16:53:12.948"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:53:12.951" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:53:12.951" starttime="20161209 16:53:12.951"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:12.952" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:12.952" starttime="20161209 16:53:12.952"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:53:12.952" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:53:12.952" starttime="20161209 16:53:12.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:53:12.953" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:53:12.953" starttime="20161209 16:53:12.953"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:53:14.093" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:14.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:14.094" starttime="20161209 16:53:12.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:14.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:14.095" starttime="20161209 16:53:14.094"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:14.095" starttime="20161209 16:53:12.950"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 16:53:14.581" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:14.581" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:14.582" starttime="20161209 16:53:14.095"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:14.583" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:14.583" starttime="20161209 16:53:14.582"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:14.585" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:14.586" starttime="20161209 16:53:14.585"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:14.586" starttime="20161209 16:53:14.584"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:14.586" starttime="20161209 16:53:14.582"></status>
</kw>
<msg timestamp="20161209 16:53:14.587" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:14.587" starttime="20161209 16:53:12.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:14.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:14.588" starttime="20161209 16:53:14.587"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161209 16:53:14.588" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 16:53:14.589" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161209 16:53:14.589" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20161209 16:53:14.589" starttime="20161209 16:53:14.588"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:14.589" starttime="20161209 16:53:12.945"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:53:14.592" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161209 16:53:14.592" starttime="20161209 16:53:14.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:14.596" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/settings/host0/attr/power_policy, method:Get, args:{}</msg>
<status status="PASS" endtime="20161209 16:53:14.596" starttime="20161209 16:53:14.596"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:14.597" level="INFO">URI:https://9.3.185.72/org/openbmc/settings/host0/attr/power_policy, method:Get, args:{}</msg>
<status status="PASS" endtime="20161209 16:53:14.597" starttime="20161209 16:53:14.597"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:14.597" starttime="20161209 16:53:14.596"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:14.597" starttime="20161209 16:53:14.595"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:14.598" starttime="20161209 16:53:14.592"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:53:14.599" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:53:14.599" starttime="20161209 16:53:14.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:14.600" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:14.600" starttime="20161209 16:53:14.599"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:53:14.600" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:53:14.600" starttime="20161209 16:53:14.600"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:53:14.601" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:53:14.601" starttime="20161209 16:53:14.600"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:53:15.718" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:15.719" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:15.719" starttime="20161209 16:53:14.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:15.720" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:15.720" starttime="20161209 16:53:15.719"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:15.720" starttime="20161209 16:53:14.598"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 16:53:15.912" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20161209 16:53:15.912" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:15.912" starttime="20161209 16:53:15.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:15.918" level="INFO">${msg} = Response code:200, Content:{
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:15.918" starttime="20161209 16:53:15.917"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:15.919" level="INFO">Response code:200, Content:{
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:15.919" starttime="20161209 16:53:15.919"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:15.920" starttime="20161209 16:53:15.918"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:15.920" starttime="20161209 16:53:15.917"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:15.920" starttime="20161209 16:53:15.913"></status>
</kw>
<msg timestamp="20161209 16:53:15.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:15.920" starttime="20161209 16:53:14.590"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161209 16:53:15.921" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 16:53:15.921" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161209 16:53:15.921" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161209 16:53:15.921" starttime="20161209 16:53:15.920"></status>
</kw>
<msg timestamp="20161209 16:53:15.922" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20161209 16:53:15.922" starttime="20161209 16:53:14.589"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:15.923" starttime="20161209 16:53:15.922"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:15.923" starttime="20161209 16:53:12.943"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:53:15.924" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20161209 16:53:15.924" starttime="20161209 16:53:15.923"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:53:15.925" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20161209 16:53:15.925" starttime="20161209 16:53:15.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:15.925" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:15.925" starttime="20161209 16:53:15.925"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:15.926" starttime="20161209 16:53:15.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:15.930" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/control/flash/bmc/action/PrepareForUpdate, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:53:15.930" starttime="20161209 16:53:15.930"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:15.931" level="INFO">URI:https://9.3.185.72/org/openbmc/control/flash/bmc/action/PrepareForUpdate, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:53:15.931" starttime="20161209 16:53:15.931"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:15.931" starttime="20161209 16:53:15.930"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:15.931" starttime="20161209 16:53:15.929"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:15.931" starttime="20161209 16:53:15.926"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:53:15.932" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:53:15.933" starttime="20161209 16:53:15.932"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:15.933" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:15.933" starttime="20161209 16:53:15.933"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:53:15.934" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:53:15.934" starttime="20161209 16:53:15.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:53:15.934" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:53:15.934" starttime="20161209 16:53:15.934"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:53:17.043" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:17.044" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:17.044" starttime="20161209 16:53:15.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:17.045" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:17.045" starttime="20161209 16:53:17.044"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:17.045" starttime="20161209 16:53:15.932"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 16:53:17.891" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:17.891" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:17.891" starttime="20161209 16:53:17.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:17.897" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:17.897" starttime="20161209 16:53:17.896"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:17.898" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:17.898" starttime="20161209 16:53:17.898"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:17.898" starttime="20161209 16:53:17.897"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:17.898" starttime="20161209 16:53:17.896"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:17.898" starttime="20161209 16:53:17.891"></status>
</kw>
<msg timestamp="20161209 16:53:17.899" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:17.899" starttime="20161209 16:53:15.924"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:17.900" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:17.900" starttime="20161209 16:53:17.899"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:53:17.904" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161209 16:53:17.904" starttime="20161209 16:53:17.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:17.908" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161209 16:53:17.908" starttime="20161209 16:53:17.907"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:17.908" level="INFO">URI:https://9.3.185.72/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161209 16:53:17.908" starttime="20161209 16:53:17.908"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:17.909" starttime="20161209 16:53:17.908"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:17.909" starttime="20161209 16:53:17.906"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:17.909" starttime="20161209 16:53:17.904"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:53:17.910" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:53:17.910" starttime="20161209 16:53:17.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:17.911" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:17.911" starttime="20161209 16:53:17.910"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:53:17.911" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:53:17.911" starttime="20161209 16:53:17.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:53:17.912" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:53:17.912" starttime="20161209 16:53:17.911"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:53:19.022" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:19.023" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:19.023" starttime="20161209 16:53:17.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:19.024" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:19.024" starttime="20161209 16:53:19.023"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:19.024" starttime="20161209 16:53:17.909"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 16:53:19.246" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161209 16:53:19.246" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:19.246" starttime="20161209 16:53:19.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:19.253" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "...</msg>
<status status="PASS" endtime="20161209 16:53:19.253" starttime="20161209 16:53:19.252"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:19.254" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:19.255" starttime="20161209 16:53:19.254"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:19.255" starttime="20161209 16:53:19.253"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:19.255" starttime="20161209 16:53:19.251"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:19.255" starttime="20161209 16:53:19.246"></status>
</kw>
<msg timestamp="20161209 16:53:19.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:19.256" starttime="20161209 16:53:17.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:19.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:19.257" starttime="20161209 16:53:19.257"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161209 16:53:19.258" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 16:53:19.258" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161209 16:53:19.258" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'p...</msg>
<status status="PASS" endtime="20161209 16:53:19.258" starttime="20161209 16:53:19.258"></status>
</kw>
<msg timestamp="20161209 16:53:19.259" level="INFO">${data} = {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application...</msg>
<status status="PASS" endtime="20161209 16:53:19.259" starttime="20161209 16:53:17.900"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>Switch to update mode in progress</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:19.260" starttime="20161209 16:53:19.259"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:19.260" starttime="20161209 16:53:15.923"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:53:19.264" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:53:19.264" starttime="20161209 16:53:19.264"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:53:19.270" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:53:22.275" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:53:22.275" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.938 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.724 ms
64 bytes from 9.3.185.72: icmp_se...</msg>
<status status="PASS" endtime="20161209 16:53:22.275" starttime="20161209 16:53:19.264"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:53:22.279" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.938 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.724 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.789 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.728 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.724/0.794/0.938/0.093 ms</msg>
<status status="PASS" endtime="20161209 16:53:22.279" starttime="20161209 16:53:22.278"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:22.280" starttime="20161209 16:53:22.279"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:22.280" starttime="20161209 16:53:19.263"></status>
</kw>
<msg timestamp="20161209 16:53:22.281" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:53:22.281" starttime="20161209 16:53:19.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:22.286" starttime="20161209 16:53:22.281"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:53:22.288" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:53:22.289" starttime="20161209 16:53:22.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:22.289" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:22.290" starttime="20161209 16:53:22.289"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:53:22.290" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:53:22.290" starttime="20161209 16:53:22.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:53:22.291" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:53:22.291" starttime="20161209 16:53:22.291"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:53:22.808" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:22.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:22.808" starttime="20161209 16:53:22.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:22.808" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:22.809" starttime="20161209 16:53:22.808"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:22.809" starttime="20161209 16:53:22.287"></status>
</kw>
<msg timestamp="20161209 16:53:22.809" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161209 16:53:22.809" starttime="20161209 16:53:22.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:22.811" starttime="20161209 16:53:22.809"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 16:53:22.814" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161209 16:53:22.814" starttime="20161209 16:53:22.813"></status>
</kw>
<msg timestamp="20161209 16:53:22.814" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161209 16:53:22.814" starttime="20161209 16:53:22.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:22.817" starttime="20161209 16:53:22.817"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:22.817" starttime="20161209 16:53:22.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:22.820" starttime="20161209 16:53:22.817"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 16:53:22.820" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161209 16:53:22.820" starttime="20161209 16:53:22.820"></status>
</kw>
<msg timestamp="20161209 16:53:22.821" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161209 16:53:22.821" starttime="20161209 16:53:22.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:22.824" starttime="20161209 16:53:22.824"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:22.824" starttime="20161209 16:53:22.824"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:22.825" starttime="20161209 16:53:22.821"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 16:53:22.825" level="INFO">Logging into '9.3.185.72:22' as 'root'.</msg>
<msg timestamp="20161209 16:53:25.388" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161209 16:53:25.389" starttime="20161209 16:53:22.825"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:25.389" starttime="20161209 16:53:22.812"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 16:53:25.390" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161209 16:53:25.498" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 16:53:25.498" level="INFO">${system} = w6</msg>
<msg timestamp="20161209 16:53:25.498" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 16:53:25.498" starttime="20161209 16:53:25.389"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 16:53:25.499" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 16:53:25.499" starttime="20161209 16:53:25.499"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:25.499" starttime="20161209 16:53:19.262"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:25.499" starttime="20161209 16:53:19.262"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:25.499" starttime="20161209 16:53:19.261"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20161209 16:53:25.500" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20161209 16:53:25.500" starttime="20161209 16:53:25.500"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
</arguments>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161209 16:53:25.503" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161209 16:53:25.503" starttime="20161209 16:53:25.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161209 16:53:25.504" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161209 16:53:25.504" starttime="20161209 16:53:25.503"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:53:25.505" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161209 16:53:25.505" starttime="20161209 16:53:25.505"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:53:25.506" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161209 16:53:25.506" starttime="20161209 16:53:25.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:25.507" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:25.507" starttime="20161209 16:53:25.507"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:25.507" starttime="20161209 16:53:25.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:25.511" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:53:25.511" starttime="20161209 16:53:25.511"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:25.512" level="INFO">URI:https://9.3.185.72/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:53:25.512" starttime="20161209 16:53:25.512"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:25.513" starttime="20161209 16:53:25.512"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:25.513" starttime="20161209 16:53:25.510"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:25.513" starttime="20161209 16:53:25.508"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:53:25.514" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:53:25.514" starttime="20161209 16:53:25.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:53:25.515" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:53:25.515" starttime="20161209 16:53:25.514"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:53:25.515" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:53:25.515" starttime="20161209 16:53:25.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:53:25.516" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:53:25.516" starttime="20161209 16:53:25.515"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:53:25.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:25.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:25.989" starttime="20161209 16:53:25.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:25.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:25.990" starttime="20161209 16:53:25.989"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:25.990" starttime="20161209 16:53:25.513"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 16:53:26.706" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:53:26.706" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:26.706" starttime="20161209 16:53:25.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:53:26.710" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:26.710" starttime="20161209 16:53:26.709"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:53:26.711" level="INFO">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:53:26.711" starttime="20161209 16:53:26.710"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:26.711" starttime="20161209 16:53:26.710"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:26.711" starttime="20161209 16:53:26.709"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:26.711" starttime="20161209 16:53:26.706"></status>
</kw>
<msg timestamp="20161209 16:53:26.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:26.711" starttime="20161209 16:53:25.505"></status>
</kw>
<msg timestamp="20161209 16:53:26.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:53:26.711" starttime="20161209 16:53:25.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:53:26.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:53:26.712" starttime="20161209 16:53:26.712"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161209 16:53:26.713" level="INFO">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 16:53:26.713" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161209 16:53:26.713" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_READY'}</msg>
<status status="PASS" endtime="20161209 16:53:26.713" starttime="20161209 16:53:26.712"></status>
</kw>
<msg timestamp="20161209 16:53:26.713" level="INFO">${current} = BMC_READY</msg>
<status status="PASS" endtime="20161209 16:53:26.713" starttime="20161209 16:53:25.503"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:53:26.714" starttime="20161209 16:53:26.713"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:26.714" starttime="20161209 16:53:25.502"></status>
</kw>
<status status="PASS" endtime="20161209 16:53:26.714" starttime="20161209 16:53:25.501"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1 min</arg>
</arguments>
<msg timestamp="20161209 16:54:26.714" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20161209 16:54:26.715" starttime="20161209 16:53:26.714"></status>
</kw>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20161209 16:54:26.717" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20161209 16:54:26.717" starttime="20161209 16:54:26.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20161209 16:54:26.718" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20161209 16:54:26.718" starttime="20161209 16:54:26.718"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:54:26.720" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161209 16:54:26.720" starttime="20161209 16:54:26.720"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:54:26.722" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20161209 16:54:26.722" starttime="20161209 16:54:26.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:54:26.723" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:54:26.723" starttime="20161209 16:54:26.722"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:54:26.724" starttime="20161209 16:54:26.723"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:54:26.726" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:54:26.726" starttime="20161209 16:54:26.725"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:54:26.728" level="INFO">URI:https://9.3.185.72/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:54:26.728" starttime="20161209 16:54:26.727"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:26.729" starttime="20161209 16:54:26.727"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:26.729" starttime="20161209 16:54:26.724"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:54:26.730" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:54:26.731" starttime="20161209 16:54:26.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:54:26.732" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:54:26.732" starttime="20161209 16:54:26.731"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:54:26.733" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:54:26.733" starttime="20161209 16:54:26.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:54:26.734" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:54:26.734" starttime="20161209 16:54:26.733"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:54:27.210" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:54:27.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:54:27.210" starttime="20161209 16:54:26.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:54:27.211" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:54:27.211" starttime="20161209 16:54:27.211"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:27.211" starttime="20161209 16:54:26.729"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 16:54:27.741" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161209 16:54:27.741" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:54:27.741" starttime="20161209 16:54:27.211"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:54:27.742" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:54:27.742" starttime="20161209 16:54:27.742"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:54:27.743" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:54:27.743" starttime="20161209 16:54:27.743"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:27.743" starttime="20161209 16:54:27.742"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:27.743" starttime="20161209 16:54:27.741"></status>
</kw>
<msg timestamp="20161209 16:54:27.744" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:54:27.744" starttime="20161209 16:54:26.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:54:27.745" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:54:27.745" starttime="20161209 16:54:27.744"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161209 16:54:27.746" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 16:54:27.746" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161209 16:54:27.746" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20161209 16:54:27.746" starttime="20161209 16:54:27.745"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:27.746" starttime="20161209 16:54:26.719"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:54:27.749" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161209 16:54:27.749" starttime="20161209 16:54:27.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:54:27.757" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161209 16:54:27.757" starttime="20161209 16:54:27.756"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:54:27.758" level="INFO">URI:https://9.3.185.72/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161209 16:54:27.758" starttime="20161209 16:54:27.758"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:27.758" starttime="20161209 16:54:27.757"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:27.758" starttime="20161209 16:54:27.755"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:27.758" starttime="20161209 16:54:27.749"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:54:27.759" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:54:27.760" starttime="20161209 16:54:27.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:54:27.761" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:54:27.761" starttime="20161209 16:54:27.760"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:54:27.761" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:54:27.761" starttime="20161209 16:54:27.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:54:27.762" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:54:27.762" starttime="20161209 16:54:27.761"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:54:28.873" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:54:28.873" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:54:28.874" starttime="20161209 16:54:27.762"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:54:28.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:54:28.875" starttime="20161209 16:54:28.874"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:28.875" starttime="20161209 16:54:27.759"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 16:54:29.090" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161209 16:54:29.091" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:54:29.091" starttime="20161209 16:54:28.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:54:29.097" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "...</msg>
<status status="PASS" endtime="20161209 16:54:29.097" starttime="20161209 16:54:29.096"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:54:29.099" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:54:29.099" starttime="20161209 16:54:29.098"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:29.099" starttime="20161209 16:54:29.098"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:29.099" starttime="20161209 16:54:29.096"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:29.099" starttime="20161209 16:54:29.091"></status>
</kw>
<msg timestamp="20161209 16:54:29.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:54:29.100" starttime="20161209 16:54:27.747"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:54:29.101" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:54:29.101" starttime="20161209 16:54:29.100"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161209 16:54:29.102" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 16:54:29.102" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161209 16:54:29.102" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'p...</msg>
<status status="PASS" endtime="20161209 16:54:29.102" starttime="20161209 16:54:29.101"></status>
</kw>
<msg timestamp="20161209 16:54:29.102" level="INFO">${data} = {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application...</msg>
<status status="PASS" endtime="20161209 16:54:29.103" starttime="20161209 16:54:27.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20161209 16:54:29.104" starttime="20161209 16:54:29.103"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:29.104" starttime="20161209 16:54:26.716"></status>
</kw>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20161209 16:54:29.115" starttime="20161209 16:54:29.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:54:30.562" starttime="20161209 16:54:29.118"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:30.562" starttime="20161209 16:54:29.115"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:30.563" starttime="20161209 16:54:29.105"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20161209 16:54:56.802" starttime="20161209 16:54:30.563"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:56.802" starttime="20161209 16:54:29.104"></status>
</kw>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20161209 16:54:56.805" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20161209 16:54:56.805" starttime="20161209 16:54:56.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:54:56.806" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20161209 16:54:56.807" starttime="20161209 16:54:56.806"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:54:56.809" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20161209 16:54:56.809" starttime="20161209 16:54:56.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:54:56.810" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:54:56.810" starttime="20161209 16:54:56.809"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:54:56.811" starttime="20161209 16:54:56.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:54:56.820" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/control/flash/bmc/action/update, method:Post, args:{u'data': {u'data': [u'/tmp/flashimg']}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:54:56.820" starttime="20161209 16:54:56.819"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:54:56.821" level="INFO">URI:https://9.3.185.72/org/openbmc/control/flash/bmc/action/update, method:Post, args:{u'data': {u'data': [u'/tmp/flashimg']}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:54:56.822" starttime="20161209 16:54:56.821"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:56.822" starttime="20161209 16:54:56.820"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:56.822" starttime="20161209 16:54:56.818"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:56.822" starttime="20161209 16:54:56.812"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:54:56.823" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:54:56.824" starttime="20161209 16:54:56.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:54:56.825" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:54:56.825" starttime="20161209 16:54:56.824"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:54:56.825" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:54:56.825" starttime="20161209 16:54:56.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:54:56.826" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:54:56.826" starttime="20161209 16:54:56.826"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:54:57.301" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:54:57.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:54:57.301" starttime="20161209 16:54:56.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:54:57.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:54:57.302" starttime="20161209 16:54:57.301"></status>
</kw>
<status status="PASS" endtime="20161209 16:54:57.302" starttime="20161209 16:54:56.822"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 16:55:17.282" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:55:17.282" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:55:17.282" starttime="20161209 16:54:57.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:55:17.289" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:55:17.289" starttime="20161209 16:55:17.288"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:55:17.291" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:55:17.291" starttime="20161209 16:55:17.290"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:17.291" starttime="20161209 16:55:17.290"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:17.291" starttime="20161209 16:55:17.288"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:17.291" starttime="20161209 16:55:17.283"></status>
</kw>
<msg timestamp="20161209 16:55:17.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:55:17.292" starttime="20161209 16:54:56.807"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:55:17.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:55:17.315" starttime="20161209 16:55:17.314"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:55:17.318" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161209 16:55:17.318" starttime="20161209 16:55:17.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:55:17.325" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161209 16:55:17.325" starttime="20161209 16:55:17.324"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:55:17.326" level="INFO">URI:https://9.3.185.72/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161209 16:55:17.326" starttime="20161209 16:55:17.326"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:17.327" starttime="20161209 16:55:17.326"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:17.328" starttime="20161209 16:55:17.323"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:17.328" starttime="20161209 16:55:17.319"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:55:17.329" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:55:17.329" starttime="20161209 16:55:17.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:55:17.330" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:55:17.330" starttime="20161209 16:55:17.329"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:55:17.331" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:55:17.331" starttime="20161209 16:55:17.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:55:17.331" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:55:17.331" starttime="20161209 16:55:17.331"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:55:18.404" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:55:18.404" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:55:18.404" starttime="20161209 16:55:17.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:55:18.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:55:18.405" starttime="20161209 16:55:18.404"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:18.405" starttime="20161209 16:55:17.328"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 16:55:18.662" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161209 16:55:18.662" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:55:18.662" starttime="20161209 16:55:18.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:55:18.669" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_default...</msg>
<status status="PASS" endtime="20161209 16:55:18.669" starttime="20161209 16:55:18.669"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:55:18.671" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Deferred for mounted filesystem. reboot BMC to apply.", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:55:18.672" starttime="20161209 16:55:18.670"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:18.672" starttime="20161209 16:55:18.670"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:18.672" starttime="20161209 16:55:18.667"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:18.673" starttime="20161209 16:55:18.663"></status>
</kw>
<msg timestamp="20161209 16:55:18.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:55:18.673" starttime="20161209 16:55:17.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:55:18.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:55:18.674" starttime="20161209 16:55:18.673"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161209 16:55:18.675" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Deferred for mounted filesystem. reboot BMC to apply.", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 16:55:18.675" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161209 16:55:18.675" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Deferred for mounted filesystem. reboot BMC to apply.', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u...</msg>
<status status="PASS" endtime="20161209 16:55:18.675" starttime="20161209 16:55:18.674"></status>
</kw>
<msg timestamp="20161209 16:55:18.676" level="INFO">${data} = {u'status': u'Deferred for mounted filesystem. reboot BMC to apply.', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'/tmp/flashimg', u'preserve_network_se...</msg>
<status status="PASS" endtime="20161209 16:55:18.676" starttime="20161209 16:55:17.315"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:18.677" starttime="20161209 16:55:18.676"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:18.678" starttime="20161209 16:55:18.677"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:18.678" starttime="20161209 16:54:56.803"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Trigger Warm Reset</arg>
</arguments>
<kw name="Trigger Warm Reset" library="utils">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>"Triggering warm reset"</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:18.681" starttime="20161209 16:55:18.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:55:18.682" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20161209 16:55:18.682" starttime="20161209 16:55:18.681"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/bmc0/action/warmReset</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 16:55:18.684" level="INFO">${base_uri} = /org/openbmc/control/bmc0/action/warmReset</msg>
<status status="PASS" endtime="20161209 16:55:18.684" starttime="20161209 16:55:18.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:55:18.685" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:55:18.685" starttime="20161209 16:55:18.684"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:18.685" starttime="20161209 16:55:18.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:55:18.689" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/control/bmc0/action/warmReset, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:55:18.689" starttime="20161209 16:55:18.689"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:55:18.690" level="INFO">URI:https://9.3.185.72/org/openbmc/control/bmc0/action/warmReset, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 16:55:18.690" starttime="20161209 16:55:18.690"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:18.690" starttime="20161209 16:55:18.689"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:18.690" starttime="20161209 16:55:18.688"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:18.690" starttime="20161209 16:55:18.686"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:55:18.691" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:55:18.692" starttime="20161209 16:55:18.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:55:18.692" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:55:18.692" starttime="20161209 16:55:18.692"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:55:18.693" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:55:18.693" starttime="20161209 16:55:18.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:55:18.693" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:55:18.693" starttime="20161209 16:55:18.693"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:55:19.785" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:55:19.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:55:19.785" starttime="20161209 16:55:18.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:55:19.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:55:19.786" starttime="20161209 16:55:19.785"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:19.786" starttime="20161209 16:55:18.691"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 16:55:20.268" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/bmc0/action/warmReset, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 16:55:20.268" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:55:20.268" starttime="20161209 16:55:19.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 16:55:20.275" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:55:20.275" starttime="20161209 16:55:20.274"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 16:55:20.276" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 16:55:20.277" starttime="20161209 16:55:20.276"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:20.277" starttime="20161209 16:55:20.275"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:20.277" starttime="20161209 16:55:20.274"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:20.277" starttime="20161209 16:55:20.269"></status>
</kw>
<msg timestamp="20161209 16:55:20.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 16:55:20.277" starttime="20161209 16:55:18.682"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 16:55:20.278" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 16:55:20.279" starttime="20161209 16:55:20.278"></status>
</kw>
<kw name="Check If warmReset is Initiated" library="utils">
<doc>Ping would be still alive, so try SSH to connect</doc>
<assign>
<var>${session_active}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Open Connection And Log In</arg>
</arguments>
<assign>
<var>${alive}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 16:55:20.282" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161209 16:55:20.282" starttime="20161209 16:55:20.282"></status>
</kw>
<msg timestamp="20161209 16:55:20.283" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161209 16:55:20.283" starttime="20161209 16:55:20.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:20.287" starttime="20161209 16:55:20.287"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:20.287" starttime="20161209 16:55:20.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:20.290" starttime="20161209 16:55:20.287"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 16:55:20.290" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161209 16:55:20.291" starttime="20161209 16:55:20.290"></status>
</kw>
<msg timestamp="20161209 16:55:20.291" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161209 16:55:20.291" starttime="20161209 16:55:20.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:20.296" starttime="20161209 16:55:20.294"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:20.296" starttime="20161209 16:55:20.294"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:20.296" starttime="20161209 16:55:20.291"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 16:55:20.296" level="INFO">Logging into '9.3.185.72:22' as 'root'.</msg>
<msg timestamp="20161209 16:55:22.849" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161209 16:55:22.850" starttime="20161209 16:55:20.296"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:22.850" starttime="20161209 16:55:20.280"></status>
</kw>
<msg timestamp="20161209 16:55:22.850" level="INFO">${alive} = True</msg>
<status status="PASS" endtime="20161209 16:55:22.850" starttime="20161209 16:55:20.280"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${alive}' == '${False}'</arg>
<arg>${False}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:22.855" starttime="20161209 16:55:22.851"></status>
</kw>
<msg timestamp="20161209 16:55:22.856" level="INFO">${session_active} = True</msg>
<status status="PASS" endtime="20161209 16:55:22.856" starttime="20161209 16:55:20.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${session_active}' == '${True}'</arg>
<arg>Fail</arg>
<arg>msg=warm reset didn't occur</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=warm reset didn't occur</arg>
</arguments>
<msg timestamp="20161209 16:55:22.862" level="FAIL">warm reset didn't occur</msg>
<status status="FAIL" endtime="20161209 16:55:22.862" starttime="20161209 16:55:22.862"></status>
</kw>
<status status="FAIL" endtime="20161209 16:55:22.863" starttime="20161209 16:55:22.856"></status>
</kw>
<status status="FAIL" endtime="20161209 16:55:22.863" starttime="20161209 16:55:18.679"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:22.863" starttime="20161209 16:55:18.678"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>7s</arg>
</arguments>
<msg timestamp="20161209 16:55:29.864" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20161209 16:55:29.865" starttime="20161209 16:55:22.864"></status>
</kw>
<kw name="Check If warmReset is Initiated" library="utils">
<doc>Ping would be still alive, so try SSH to connect</doc>
<assign>
<var>${session_active}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Open Connection And Log In</arg>
</arguments>
<assign>
<var>${alive}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 16:55:29.869" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161209 16:55:29.869" starttime="20161209 16:55:29.868"></status>
</kw>
<msg timestamp="20161209 16:55:29.869" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161209 16:55:29.869" starttime="20161209 16:55:29.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:29.874" starttime="20161209 16:55:29.873"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:29.874" starttime="20161209 16:55:29.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:29.879" starttime="20161209 16:55:29.874"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 16:55:29.881" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161209 16:55:29.881" starttime="20161209 16:55:29.880"></status>
</kw>
<msg timestamp="20161209 16:55:29.881" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161209 16:55:29.881" starttime="20161209 16:55:29.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:29.886" starttime="20161209 16:55:29.886"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:29.886" starttime="20161209 16:55:29.885"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:29.886" starttime="20161209 16:55:29.881"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 16:55:29.887" level="INFO">Logging into '9.3.185.72:22' as 'root'.</msg>
<msg timestamp="20161209 16:55:32.434" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161209 16:55:32.435" starttime="20161209 16:55:29.887"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:32.435" starttime="20161209 16:55:29.867"></status>
</kw>
<msg timestamp="20161209 16:55:32.435" level="INFO">${alive} = True</msg>
<status status="PASS" endtime="20161209 16:55:32.435" starttime="20161209 16:55:29.866"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${alive}' == '${False}'</arg>
<arg>${False}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:32.438" starttime="20161209 16:55:32.436"></status>
</kw>
<msg timestamp="20161209 16:55:32.438" level="INFO">${session_active} = True</msg>
<status status="PASS" endtime="20161209 16:55:32.438" starttime="20161209 16:55:29.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${session_active}' == '${True}'</arg>
<arg>Trigger Warm Reset via Reboot</arg>
</arguments>
<kw name="Trigger Warm Reset via Reboot" library="code_update_utils">
<doc>Execute reboot command on the remote BMC and</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 16:55:32.443" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161209 16:55:32.443" starttime="20161209 16:55:32.443"></status>
</kw>
<msg timestamp="20161209 16:55:32.443" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161209 16:55:32.443" starttime="20161209 16:55:32.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:32.446" starttime="20161209 16:55:32.446"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:32.446" starttime="20161209 16:55:32.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:32.449" starttime="20161209 16:55:32.446"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 16:55:32.450" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161209 16:55:32.450" starttime="20161209 16:55:32.450"></status>
</kw>
<msg timestamp="20161209 16:55:32.450" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161209 16:55:32.451" starttime="20161209 16:55:32.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:32.454" starttime="20161209 16:55:32.454"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:32.454" starttime="20161209 16:55:32.454"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:32.454" starttime="20161209 16:55:32.451"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 16:55:32.455" level="INFO">Logging into '9.3.185.72:22' as 'root'.</msg>
<msg timestamp="20161209 16:55:34.929" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161209 16:55:34.930" starttime="20161209 16:55:32.455"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:34.930" starttime="20161209 16:55:32.442"></status>
</kw>
<kw name="Start Command" library="SSHLibrary">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>/sbin/reboot</arg>
</arguments>
<msg timestamp="20161209 16:55:34.931" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20161209 16:55:34.957" starttime="20161209 16:55:34.930"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:34.957" starttime="20161209 16:55:32.441"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:34.957" starttime="20161209 16:55:32.439"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>30 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:55:34.963" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:55:34.963" starttime="20161209 16:55:34.962"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:55:34.971" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:55:37.979" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:55:37.979" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.43 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=1.22 ms
64 bytes from 9.3.185.72: icmp_seq=...</msg>
<status status="PASS" endtime="20161209 16:55:37.980" starttime="20161209 16:55:34.963"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:55:37.985" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.43 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=1.22 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.775 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.780 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 0.775/1.052/1.435/0.288 ms</msg>
<status status="PASS" endtime="20161209 16:55:37.985" starttime="20161209 16:55:37.983"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:37.986" starttime="20161209 16:55:37.986"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:37.986" starttime="20161209 16:55:34.962"></status>
</kw>
<msg timestamp="20161209 16:55:37.987" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:55:37.987" starttime="20161209 16:55:34.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:37.992" starttime="20161209 16:55:37.988"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:55:37.993" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:55:37.996" starttime="20161209 16:55:37.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:55:37.996" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:55:37.997" starttime="20161209 16:55:37.996"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:55:37.997" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:55:37.997" starttime="20161209 16:55:37.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:55:37.998" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:55:37.998" starttime="20161209 16:55:37.997"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:55:38.719" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8d9c5bd0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:55:38.720" starttime="20161209 16:55:37.998"></status>
</kw>
<status status="FAIL" endtime="20161209 16:55:38.720" starttime="20161209 16:55:37.992"></status>
</kw>
<msg timestamp="20161209 16:55:38.720" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:55:38.720" starttime="20161209 16:55:37.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:55:38.726" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:55:38.726" starttime="20161209 16:55:38.725"></status>
</kw>
<status status="FAIL" endtime="20161209 16:55:38.726" starttime="20161209 16:55:38.721"></status>
</kw>
<status status="FAIL" endtime="20161209 16:55:38.726" starttime="20161209 16:55:34.960"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:55:48.729" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:55:48.729" starttime="20161209 16:55:48.729"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:55:48.733" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:55:51.739" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:55:51.740" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.764 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.862 ms
64 bytes from 9.3.185.72: icmp_se...</msg>
<status status="PASS" endtime="20161209 16:55:51.740" starttime="20161209 16:55:48.730"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:55:51.744" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.764 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.862 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.744 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.721 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.721/0.772/0.862/0.063 ms</msg>
<status status="PASS" endtime="20161209 16:55:51.744" starttime="20161209 16:55:51.743"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:51.745" starttime="20161209 16:55:51.744"></status>
</kw>
<status status="PASS" endtime="20161209 16:55:51.745" starttime="20161209 16:55:48.728"></status>
</kw>
<msg timestamp="20161209 16:55:51.745" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:55:51.745" starttime="20161209 16:55:48.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:55:51.751" starttime="20161209 16:55:51.746"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:55:51.755" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:55:51.756" starttime="20161209 16:55:51.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:55:51.757" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:55:51.757" starttime="20161209 16:55:51.756"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:55:51.757" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:55:51.757" starttime="20161209 16:55:51.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:55:51.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:55:51.758" starttime="20161209 16:55:51.757"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:55:52.365" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8e8f4dd0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:55:52.365" starttime="20161209 16:55:51.758"></status>
</kw>
<status status="FAIL" endtime="20161209 16:55:52.365" starttime="20161209 16:55:51.752"></status>
</kw>
<msg timestamp="20161209 16:55:52.366" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:55:52.366" starttime="20161209 16:55:51.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:55:52.369" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:55:52.369" starttime="20161209 16:55:52.369"></status>
</kw>
<status status="FAIL" endtime="20161209 16:55:52.369" starttime="20161209 16:55:52.366"></status>
</kw>
<status status="FAIL" endtime="20161209 16:55:52.369" starttime="20161209 16:55:48.727"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:56:02.372" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:56:02.372" starttime="20161209 16:56:02.372"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:56:02.381" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:56:05.383" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:56:05.383" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.798 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.724 ms
64 bytes from 9.3.185.72: icmp_se...</msg>
<status status="PASS" endtime="20161209 16:56:05.384" starttime="20161209 16:56:02.373"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:56:05.387" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.798 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.724 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.736 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.752 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.724/0.752/0.798/0.039 ms</msg>
<status status="PASS" endtime="20161209 16:56:05.387" starttime="20161209 16:56:05.386"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:56:05.388" starttime="20161209 16:56:05.388"></status>
</kw>
<status status="PASS" endtime="20161209 16:56:05.388" starttime="20161209 16:56:02.371"></status>
</kw>
<msg timestamp="20161209 16:56:05.389" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:56:05.389" starttime="20161209 16:56:02.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:56:05.392" starttime="20161209 16:56:05.389"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:56:05.394" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:56:05.395" starttime="20161209 16:56:05.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:56:05.396" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:56:05.396" starttime="20161209 16:56:05.396"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:56:05.397" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:56:05.397" starttime="20161209 16:56:05.396"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:56:05.397" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:56:05.397" starttime="20161209 16:56:05.397"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:56:06.005" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8c175950&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:56:06.006" starttime="20161209 16:56:05.397"></status>
</kw>
<status status="FAIL" endtime="20161209 16:56:06.006" starttime="20161209 16:56:05.393"></status>
</kw>
<msg timestamp="20161209 16:56:06.006" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:56:06.006" starttime="20161209 16:56:05.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:56:06.012" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:56:06.012" starttime="20161209 16:56:06.011"></status>
</kw>
<status status="FAIL" endtime="20161209 16:56:06.012" starttime="20161209 16:56:06.007"></status>
</kw>
<status status="FAIL" endtime="20161209 16:56:06.012" starttime="20161209 16:56:02.370"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:56:16.016" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:56:16.016" starttime="20161209 16:56:16.015"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:56:16.024" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:56:19.027" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:56:19.028" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.86 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.793 ms
64 bytes from 9.3.185.72: icmp_seq...</msg>
<status status="PASS" endtime="20161209 16:56:19.028" starttime="20161209 16:56:16.017"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:56:19.032" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.86 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.793 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.818 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.755 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.755/1.057/1.863/0.466 ms</msg>
<status status="PASS" endtime="20161209 16:56:19.032" starttime="20161209 16:56:19.031"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:56:19.033" starttime="20161209 16:56:19.032"></status>
</kw>
<status status="PASS" endtime="20161209 16:56:19.033" starttime="20161209 16:56:16.015"></status>
</kw>
<msg timestamp="20161209 16:56:19.034" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:56:19.034" starttime="20161209 16:56:16.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:56:19.038" starttime="20161209 16:56:19.034"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:56:19.039" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:56:19.040" starttime="20161209 16:56:19.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:56:19.041" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:56:19.041" starttime="20161209 16:56:19.041"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:56:19.042" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:56:19.042" starttime="20161209 16:56:19.041"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:56:19.042" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:56:19.042" starttime="20161209 16:56:19.042"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:56:19.650" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8cf429d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:56:19.650" starttime="20161209 16:56:19.043"></status>
</kw>
<status status="FAIL" endtime="20161209 16:56:19.650" starttime="20161209 16:56:19.039"></status>
</kw>
<msg timestamp="20161209 16:56:19.650" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:56:19.650" starttime="20161209 16:56:19.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:56:19.654" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:56:19.654" starttime="20161209 16:56:19.654"></status>
</kw>
<status status="FAIL" endtime="20161209 16:56:19.654" starttime="20161209 16:56:19.651"></status>
</kw>
<status status="FAIL" endtime="20161209 16:56:19.654" starttime="20161209 16:56:16.013"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:56:29.658" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:56:29.658" starttime="20161209 16:56:29.657"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:56:29.663" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:56:32.667" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:56:32.667" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.68 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.789 ms
64 bytes from 9.3.185.72: icmp_seq...</msg>
<status status="PASS" endtime="20161209 16:56:32.668" starttime="20161209 16:56:29.658"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:56:32.672" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.68 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.789 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.701 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.697 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.697/0.966/1.680/0.415 ms</msg>
<status status="PASS" endtime="20161209 16:56:32.672" starttime="20161209 16:56:32.671"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:56:32.675" starttime="20161209 16:56:32.672"></status>
</kw>
<status status="PASS" endtime="20161209 16:56:32.675" starttime="20161209 16:56:29.657"></status>
</kw>
<msg timestamp="20161209 16:56:32.675" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:56:32.675" starttime="20161209 16:56:29.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:56:32.679" starttime="20161209 16:56:32.676"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:56:32.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:56:32.682" starttime="20161209 16:56:32.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:56:32.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:56:32.682" starttime="20161209 16:56:32.682"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:56:32.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:56:32.683" starttime="20161209 16:56:32.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:56:32.683" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:56:32.683" starttime="20161209 16:56:32.683"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:56:33.290" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8c16bb90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:56:33.290" starttime="20161209 16:56:32.683"></status>
</kw>
<status status="FAIL" endtime="20161209 16:56:33.290" starttime="20161209 16:56:32.680"></status>
</kw>
<msg timestamp="20161209 16:56:33.290" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:56:33.290" starttime="20161209 16:56:32.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:56:33.294" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:56:33.294" starttime="20161209 16:56:33.293"></status>
</kw>
<status status="FAIL" endtime="20161209 16:56:33.294" starttime="20161209 16:56:33.291"></status>
</kw>
<status status="FAIL" endtime="20161209 16:56:33.294" starttime="20161209 16:56:29.655"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:56:43.296" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:56:43.296" starttime="20161209 16:56:43.296"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:56:43.301" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:56:46.303" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:56:46.303" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.761 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.707 ms
64 bytes from 9.3.185.72: icmp_se...</msg>
<status status="PASS" endtime="20161209 16:56:46.304" starttime="20161209 16:56:43.296"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:56:46.307" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.761 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.707 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.636 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.627 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.627/0.682/0.761/0.063 ms</msg>
<status status="PASS" endtime="20161209 16:56:46.307" starttime="20161209 16:56:46.306"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:56:46.308" starttime="20161209 16:56:46.308"></status>
</kw>
<status status="PASS" endtime="20161209 16:56:46.308" starttime="20161209 16:56:43.295"></status>
</kw>
<msg timestamp="20161209 16:56:46.309" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:56:46.309" starttime="20161209 16:56:43.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:56:46.314" starttime="20161209 16:56:46.309"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:56:46.317" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:56:46.318" starttime="20161209 16:56:46.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:56:46.318" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:56:46.318" starttime="20161209 16:56:46.318"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:56:46.319" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:56:46.319" starttime="20161209 16:56:46.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:56:46.320" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:56:46.320" starttime="20161209 16:56:46.319"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:56:46.928" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8c182e10&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:56:46.928" starttime="20161209 16:56:46.320"></status>
</kw>
<status status="FAIL" endtime="20161209 16:56:46.928" starttime="20161209 16:56:46.315"></status>
</kw>
<msg timestamp="20161209 16:56:46.928" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:56:46.928" starttime="20161209 16:56:46.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:56:46.932" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:56:46.932" starttime="20161209 16:56:46.931"></status>
</kw>
<status status="FAIL" endtime="20161209 16:56:46.932" starttime="20161209 16:56:46.929"></status>
</kw>
<status status="FAIL" endtime="20161209 16:56:46.932" starttime="20161209 16:56:43.294"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:56:56.934" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:56:56.934" starttime="20161209 16:56:56.934"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:56:56.939" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:56:59.943" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:56:59.944" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.879 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.683 ms
64 bytes from 9.3.185.72: icmp_se...</msg>
<status status="PASS" endtime="20161209 16:56:59.944" starttime="20161209 16:56:56.934"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:56:59.948" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.879 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.683 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.655 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.687 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.655/0.726/0.879/0.089 ms</msg>
<status status="PASS" endtime="20161209 16:56:59.948" starttime="20161209 16:56:59.947"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:56:59.949" starttime="20161209 16:56:59.948"></status>
</kw>
<status status="PASS" endtime="20161209 16:56:59.949" starttime="20161209 16:56:56.933"></status>
</kw>
<msg timestamp="20161209 16:56:59.949" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:56:59.950" starttime="20161209 16:56:56.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:56:59.955" starttime="20161209 16:56:59.950"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:56:59.957" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:56:59.958" starttime="20161209 16:56:59.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:56:59.959" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:56:59.959" starttime="20161209 16:56:59.959"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:56:59.959" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:56:59.959" starttime="20161209 16:56:59.959"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:56:59.960" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:56:59.960" starttime="20161209 16:56:59.960"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:57:00.567" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8cf5f290&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:57:00.567" starttime="20161209 16:56:59.960"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:00.567" starttime="20161209 16:56:59.956"></status>
</kw>
<msg timestamp="20161209 16:57:00.567" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:57:00.567" starttime="20161209 16:56:59.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:57:00.571" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:57:00.571" starttime="20161209 16:57:00.570"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:00.571" starttime="20161209 16:57:00.568"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:00.571" starttime="20161209 16:56:56.932"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:57:10.574" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:57:10.574" starttime="20161209 16:57:10.574"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:57:10.581" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:57:13.583" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:57:13.583" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.932 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.675 ms
64 bytes from 9.3.185.72: icmp_se...</msg>
<status status="PASS" endtime="20161209 16:57:13.583" starttime="20161209 16:57:10.575"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:57:13.589" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.932 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.675 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.656 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.673 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.656/0.734/0.932/0.114 ms</msg>
<status status="PASS" endtime="20161209 16:57:13.590" starttime="20161209 16:57:13.586"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:57:13.590" starttime="20161209 16:57:13.590"></status>
</kw>
<status status="PASS" endtime="20161209 16:57:13.591" starttime="20161209 16:57:10.573"></status>
</kw>
<msg timestamp="20161209 16:57:13.591" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:57:13.591" starttime="20161209 16:57:10.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:57:13.596" starttime="20161209 16:57:13.591"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:57:13.598" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:57:13.599" starttime="20161209 16:57:13.597"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:57:13.599" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:57:13.599" starttime="20161209 16:57:13.599"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:57:13.600" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:57:13.600" starttime="20161209 16:57:13.600"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:57:13.600" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:57:13.601" starttime="20161209 16:57:13.600"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:57:14.208" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8cf53f10&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:57:14.208" starttime="20161209 16:57:13.601"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:14.209" starttime="20161209 16:57:13.597"></status>
</kw>
<msg timestamp="20161209 16:57:14.209" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:57:14.209" starttime="20161209 16:57:13.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:57:14.214" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:57:14.214" starttime="20161209 16:57:14.214"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:14.214" starttime="20161209 16:57:14.209"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:14.214" starttime="20161209 16:57:10.571"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:57:24.218" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:57:24.218" starttime="20161209 16:57:24.217"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:57:24.232" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:57:27.227" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:57:27.228" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.04 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.682 ms
64 bytes from 9.3.185.72: icmp_seq...</msg>
<status status="PASS" endtime="20161209 16:57:27.228" starttime="20161209 16:57:24.218"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:57:27.232" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.04 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.682 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.677 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.719 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.677/0.781/1.048/0.157 ms</msg>
<status status="PASS" endtime="20161209 16:57:27.232" starttime="20161209 16:57:27.231"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:57:27.233" starttime="20161209 16:57:27.232"></status>
</kw>
<status status="PASS" endtime="20161209 16:57:27.233" starttime="20161209 16:57:24.216"></status>
</kw>
<msg timestamp="20161209 16:57:27.233" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:57:27.234" starttime="20161209 16:57:24.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:57:27.238" starttime="20161209 16:57:27.234"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:57:27.240" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:57:27.241" starttime="20161209 16:57:27.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:57:27.241" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:57:27.241" starttime="20161209 16:57:27.241"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:57:27.242" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:57:27.242" starttime="20161209 16:57:27.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:57:27.243" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:57:27.243" starttime="20161209 16:57:27.242"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:57:27.850" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8cf538d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:57:27.850" starttime="20161209 16:57:27.243"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:27.850" starttime="20161209 16:57:27.239"></status>
</kw>
<msg timestamp="20161209 16:57:27.850" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:57:27.850" starttime="20161209 16:57:27.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:57:27.854" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:57:27.854" starttime="20161209 16:57:27.853"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:27.854" starttime="20161209 16:57:27.851"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:27.854" starttime="20161209 16:57:24.215"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:57:37.857" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:57:37.857" starttime="20161209 16:57:37.857"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:57:37.862" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:57:40.863" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:57:40.863" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.788 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.647 ms
64 bytes from 9.3.185.72: icmp_se...</msg>
<status status="PASS" endtime="20161209 16:57:40.864" starttime="20161209 16:57:37.858"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:57:40.867" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.788 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.647 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.655 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.704 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.647/0.698/0.788/0.062 ms</msg>
<status status="PASS" endtime="20161209 16:57:40.867" starttime="20161209 16:57:40.866"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:57:40.869" starttime="20161209 16:57:40.868"></status>
</kw>
<status status="PASS" endtime="20161209 16:57:40.869" starttime="20161209 16:57:37.856"></status>
</kw>
<msg timestamp="20161209 16:57:40.869" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:57:40.869" starttime="20161209 16:57:37.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:57:40.875" starttime="20161209 16:57:40.870"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:57:40.878" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:57:40.879" starttime="20161209 16:57:40.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:57:40.879" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:57:40.879" starttime="20161209 16:57:40.879"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:57:40.880" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:57:40.880" starttime="20161209 16:57:40.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:57:40.880" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:57:40.880" starttime="20161209 16:57:40.880"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:57:41.488" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8cef3810&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:57:41.489" starttime="20161209 16:57:40.881"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:41.489" starttime="20161209 16:57:40.876"></status>
</kw>
<msg timestamp="20161209 16:57:41.489" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:57:41.489" starttime="20161209 16:57:40.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:57:41.495" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:57:41.495" starttime="20161209 16:57:41.494"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:41.495" starttime="20161209 16:57:41.490"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:41.495" starttime="20161209 16:57:37.854"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:57:51.498" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:57:51.499" starttime="20161209 16:57:51.498"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:57:51.516" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:57:54.507" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:57:54.508" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.19 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.668 ms
64 bytes from 9.3.185.72: icmp_seq...</msg>
<status status="PASS" endtime="20161209 16:57:54.508" starttime="20161209 16:57:51.499"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:57:54.514" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.19 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.668 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.702 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.700 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.668/0.815/1.191/0.218 ms</msg>
<status status="PASS" endtime="20161209 16:57:54.514" starttime="20161209 16:57:54.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:57:54.515" starttime="20161209 16:57:54.514"></status>
</kw>
<status status="PASS" endtime="20161209 16:57:54.515" starttime="20161209 16:57:51.497"></status>
</kw>
<msg timestamp="20161209 16:57:54.515" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:57:54.515" starttime="20161209 16:57:51.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:57:54.519" starttime="20161209 16:57:54.516"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:57:54.521" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:57:54.522" starttime="20161209 16:57:54.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:57:54.522" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:57:54.522" starttime="20161209 16:57:54.522"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:57:54.523" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:57:54.523" starttime="20161209 16:57:54.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:57:54.523" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:57:54.523" starttime="20161209 16:57:54.523"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:57:55.131" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8cf4a350&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:57:55.131" starttime="20161209 16:57:54.524"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:55.131" starttime="20161209 16:57:54.520"></status>
</kw>
<msg timestamp="20161209 16:57:55.131" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:57:55.132" starttime="20161209 16:57:54.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:57:55.137" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:57:55.137" starttime="20161209 16:57:55.137"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:55.137" starttime="20161209 16:57:55.132"></status>
</kw>
<status status="FAIL" endtime="20161209 16:57:55.137" starttime="20161209 16:57:51.496"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:58:05.140" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:58:05.141" starttime="20161209 16:58:05.140"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:58:05.148" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:58:08.147" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:58:08.147" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.923 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.716 ms
64 bytes from 9.3.185.72: icmp_se...</msg>
<status status="PASS" endtime="20161209 16:58:08.147" starttime="20161209 16:58:05.141"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:58:08.150" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.923 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.716 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.701 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.657 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.657/0.749/0.923/0.104 ms</msg>
<status status="PASS" endtime="20161209 16:58:08.150" starttime="20161209 16:58:08.149"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:58:08.150" starttime="20161209 16:58:08.150"></status>
</kw>
<status status="PASS" endtime="20161209 16:58:08.151" starttime="20161209 16:58:05.139"></status>
</kw>
<msg timestamp="20161209 16:58:08.151" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:58:08.151" starttime="20161209 16:58:05.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:58:08.154" starttime="20161209 16:58:08.151"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:58:08.155" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:58:08.156" starttime="20161209 16:58:08.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:58:08.157" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:58:08.157" starttime="20161209 16:58:08.156"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:58:08.157" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:58:08.157" starttime="20161209 16:58:08.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:58:08.158" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:58:08.158" starttime="20161209 16:58:08.158"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:58:08.767" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8cf5f390&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:58:08.767" starttime="20161209 16:58:08.159"></status>
</kw>
<status status="FAIL" endtime="20161209 16:58:08.768" starttime="20161209 16:58:08.154"></status>
</kw>
<msg timestamp="20161209 16:58:08.768" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:58:08.768" starttime="20161209 16:58:08.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:58:08.774" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:58:08.774" starttime="20161209 16:58:08.774"></status>
</kw>
<status status="FAIL" endtime="20161209 16:58:08.774" starttime="20161209 16:58:08.768"></status>
</kw>
<status status="FAIL" endtime="20161209 16:58:08.775" starttime="20161209 16:58:05.138"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:58:18.777" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:58:18.777" starttime="20161209 16:58:18.777"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:58:18.784" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:58:21.791" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:58:21.791" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.868 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.736 ms
64 bytes from 9.3.185.72: icmp_se...</msg>
<status status="PASS" endtime="20161209 16:58:21.792" starttime="20161209 16:58:18.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:58:21.804" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.868 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.736 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.713 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.684 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.684/0.750/0.868/0.073 ms</msg>
<status status="PASS" endtime="20161209 16:58:21.805" starttime="20161209 16:58:21.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:58:21.807" starttime="20161209 16:58:21.805"></status>
</kw>
<status status="PASS" endtime="20161209 16:58:21.807" starttime="20161209 16:58:18.776"></status>
</kw>
<msg timestamp="20161209 16:58:21.807" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:58:21.807" starttime="20161209 16:58:18.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:58:21.813" starttime="20161209 16:58:21.808"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:58:21.815" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:58:21.820" starttime="20161209 16:58:21.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:58:21.820" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:58:21.820" starttime="20161209 16:58:21.820"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:58:21.821" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:58:21.821" starttime="20161209 16:58:21.820"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:58:21.821" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:58:21.821" starttime="20161209 16:58:21.821"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:58:22.430" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8cf06d10&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:58:22.431" starttime="20161209 16:58:21.822"></status>
</kw>
<status status="FAIL" endtime="20161209 16:58:22.431" starttime="20161209 16:58:21.814"></status>
</kw>
<msg timestamp="20161209 16:58:22.431" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:58:22.431" starttime="20161209 16:58:21.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:58:22.434" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:58:22.434" starttime="20161209 16:58:22.434"></status>
</kw>
<status status="FAIL" endtime="20161209 16:58:22.434" starttime="20161209 16:58:22.431"></status>
</kw>
<status status="FAIL" endtime="20161209 16:58:22.434" starttime="20161209 16:58:18.775"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:58:32.437" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:58:32.438" starttime="20161209 16:58:32.437"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:58:32.444" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:58:35.524" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:58:35.525" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=9.24 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=54.9 ms
64 bytes from 9.3.185.72: icmp_seq=...</msg>
<status status="PASS" endtime="20161209 16:58:35.525" starttime="20161209 16:58:32.438"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:58:35.530" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=9.24 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=54.9 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=58.6 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=74.3 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 9.246/49.273/74.325/24.233 ms</msg>
<status status="PASS" endtime="20161209 16:58:35.531" starttime="20161209 16:58:35.528"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:58:35.531" starttime="20161209 16:58:35.531"></status>
</kw>
<status status="PASS" endtime="20161209 16:58:35.531" starttime="20161209 16:58:32.436"></status>
</kw>
<msg timestamp="20161209 16:58:35.532" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:58:35.532" starttime="20161209 16:58:32.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:58:35.536" starttime="20161209 16:58:35.532"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:58:35.538" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:58:35.539" starttime="20161209 16:58:35.537"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:58:35.539" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:58:35.539" starttime="20161209 16:58:35.539"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:58:35.540" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:58:35.540" starttime="20161209 16:58:35.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:58:35.541" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:58:35.541" starttime="20161209 16:58:35.540"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:58:36.453" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8cefc310&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:58:36.454" starttime="20161209 16:58:35.541"></status>
</kw>
<status status="FAIL" endtime="20161209 16:58:36.454" starttime="20161209 16:58:35.536"></status>
</kw>
<msg timestamp="20161209 16:58:36.454" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:58:36.454" starttime="20161209 16:58:35.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:58:36.460" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:58:36.460" starttime="20161209 16:58:36.459"></status>
</kw>
<status status="FAIL" endtime="20161209 16:58:36.460" starttime="20161209 16:58:36.455"></status>
</kw>
<status status="FAIL" endtime="20161209 16:58:36.460" starttime="20161209 16:58:32.435"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:58:46.463" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:58:46.464" starttime="20161209 16:58:46.463"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:58:46.471" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:58:49.549" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:58:49.549" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=77.9 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.685 ms
64 bytes from 9.3.185.72: icmp_seq...</msg>
<status status="PASS" endtime="20161209 16:58:49.549" starttime="20161209 16:58:46.464"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:58:49.553" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=77.9 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.685 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.704 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=77.9 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.685/39.335/77.988/38.642 ms</msg>
<status status="PASS" endtime="20161209 16:58:49.553" starttime="20161209 16:58:49.552"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:58:49.554" starttime="20161209 16:58:49.553"></status>
</kw>
<status status="PASS" endtime="20161209 16:58:49.554" starttime="20161209 16:58:46.462"></status>
</kw>
<msg timestamp="20161209 16:58:49.554" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:58:49.554" starttime="20161209 16:58:46.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:58:49.559" starttime="20161209 16:58:49.555"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:58:49.560" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:58:49.561" starttime="20161209 16:58:49.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:58:49.562" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:58:49.562" starttime="20161209 16:58:49.562"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:58:49.562" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:58:49.562" starttime="20161209 16:58:49.562"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:58:49.565" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:58:49.565" starttime="20161209 16:58:49.563"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:58:50.405" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8cf06750&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:58:50.405" starttime="20161209 16:58:49.565"></status>
</kw>
<status status="FAIL" endtime="20161209 16:58:50.405" starttime="20161209 16:58:49.559"></status>
</kw>
<msg timestamp="20161209 16:58:50.405" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:58:50.406" starttime="20161209 16:58:49.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:58:50.409" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:58:50.409" starttime="20161209 16:58:50.408"></status>
</kw>
<status status="FAIL" endtime="20161209 16:58:50.409" starttime="20161209 16:58:50.406"></status>
</kw>
<status status="FAIL" endtime="20161209 16:58:50.409" starttime="20161209 16:58:46.461"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:59:00.413" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:59:00.413" starttime="20161209 16:59:00.412"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:59:00.417" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:59:03.485" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:59:03.485" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.844 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.779 ms
64 bytes from 9.3.185.72: icmp_se...</msg>
<status status="PASS" endtime="20161209 16:59:03.485" starttime="20161209 16:59:00.413"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:59:03.488" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=0.844 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.779 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.737 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=65.9 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.737/17.082/65.968/28.224 ms</msg>
<status status="PASS" endtime="20161209 16:59:03.488" starttime="20161209 16:59:03.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:59:03.489" starttime="20161209 16:59:03.489"></status>
</kw>
<status status="PASS" endtime="20161209 16:59:03.490" starttime="20161209 16:59:00.411"></status>
</kw>
<msg timestamp="20161209 16:59:03.490" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:59:03.490" starttime="20161209 16:59:00.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:59:03.494" starttime="20161209 16:59:03.490"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:59:03.496" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:59:03.497" starttime="20161209 16:59:03.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:59:03.498" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:59:03.498" starttime="20161209 16:59:03.498"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:59:03.499" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:59:03.499" starttime="20161209 16:59:03.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:59:03.500" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:59:03.500" starttime="20161209 16:59:03.499"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:59:04.111" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8cf5f850&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161209 16:59:04.111" starttime="20161209 16:59:03.500"></status>
</kw>
<status status="FAIL" endtime="20161209 16:59:04.112" starttime="20161209 16:59:03.495"></status>
</kw>
<msg timestamp="20161209 16:59:04.112" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:59:04.112" starttime="20161209 16:59:03.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:59:04.118" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:59:04.118" starttime="20161209 16:59:04.117"></status>
</kw>
<status status="FAIL" endtime="20161209 16:59:04.118" starttime="20161209 16:59:04.113"></status>
</kw>
<status status="FAIL" endtime="20161209 16:59:04.118" starttime="20161209 16:59:00.410"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 16:59:14.121" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 16:59:14.121" starttime="20161209 16:59:14.120"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 16:59:14.125" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 16:59:18.138" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 16:59:18.139" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.01 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.740 ms

--- 9.3.185.72 ping statistics --...</msg>
<status status="PASS" endtime="20161209 16:59:18.139" starttime="20161209 16:59:14.121"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 16:59:18.145" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.01 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.740 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 2 received, 50% packet loss, time 3008ms
rtt min/avg/max/mdev = 0.740/0.876/1.012/0.136 ms</msg>
<status status="PASS" endtime="20161209 16:59:18.145" starttime="20161209 16:59:18.142"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 16:59:18.146" starttime="20161209 16:59:18.145"></status>
</kw>
<status status="PASS" endtime="20161209 16:59:18.146" starttime="20161209 16:59:14.120"></status>
</kw>
<msg timestamp="20161209 16:59:18.146" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 16:59:18.146" starttime="20161209 16:59:14.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 16:59:18.151" starttime="20161209 16:59:18.147"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 16:59:18.152" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 16:59:18.153" starttime="20161209 16:59:18.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 16:59:18.153" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 16:59:18.154" starttime="20161209 16:59:18.153"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 16:59:18.154" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 16:59:18.154" starttime="20161209 16:59:18.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 16:59:18.155" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 16:59:18.155" starttime="20161209 16:59:18.154"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 16:59:58.800" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.185.72', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8cf06c90&gt;, 'Connection to 9.3.185.72 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20161209 16:59:58.801" starttime="20161209 16:59:18.155"></status>
</kw>
<status status="FAIL" endtime="20161209 16:59:58.801" starttime="20161209 16:59:18.151"></status>
</kw>
<msg timestamp="20161209 16:59:58.801" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161209 16:59:58.802" starttime="20161209 16:59:18.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161209 16:59:58.807" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161209 16:59:58.807" starttime="20161209 16:59:58.807"></status>
</kw>
<status status="FAIL" endtime="20161209 16:59:58.807" starttime="20161209 16:59:58.802"></status>
</kw>
<status status="FAIL" endtime="20161209 16:59:58.808" starttime="20161209 16:59:14.119"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161209 17:00:08.810" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20161209 17:00:08.810" starttime="20161209 17:00:08.809"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161209 17:00:08.816" level="INFO">Running command 'ping -c 4 9.3.185.72 2&gt;&amp;1'.</msg>
<msg timestamp="20161209 17:00:11.823" level="INFO">${RC} = 0</msg>
<msg timestamp="20161209 17:00:11.824" level="INFO">${output} = PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.64 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.694 ms
64 bytes from 9.3.185.72: icmp_seq...</msg>
<status status="PASS" endtime="20161209 17:00:11.824" starttime="20161209 17:00:08.810"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161209 17:00:11.829" level="INFO">RC: 0
Output:
PING 9.3.185.72 (9.3.185.72) 56(84) bytes of data.
64 bytes from 9.3.185.72: icmp_seq=1 ttl=62 time=1.64 ms
64 bytes from 9.3.185.72: icmp_seq=2 ttl=62 time=0.694 ms
64 bytes from 9.3.185.72: icmp_seq=3 ttl=62 time=0.712 ms
64 bytes from 9.3.185.72: icmp_seq=4 ttl=62 time=0.726 ms

--- 9.3.185.72 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.694/0.943/1.641/0.403 ms</msg>
<status status="PASS" endtime="20161209 17:00:11.829" starttime="20161209 17:00:11.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161209 17:00:11.830" starttime="20161209 17:00:11.829"></status>
</kw>
<status status="PASS" endtime="20161209 17:00:11.830" starttime="20161209 17:00:08.809"></status>
</kw>
<msg timestamp="20161209 17:00:11.831" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161209 17:00:11.831" starttime="20161209 17:00:08.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 17:00:11.834" starttime="20161209 17:00:11.831"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 17:00:11.836" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 17:00:11.837" starttime="20161209 17:00:11.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 17:00:11.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 17:00:11.837" starttime="20161209 17:00:11.837"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 17:00:11.838" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 17:00:11.838" starttime="20161209 17:00:11.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 17:00:11.839" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 17:00:11.839" starttime="20161209 17:00:11.838"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 17:00:51.093" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 17:00:51.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 17:00:51.093" starttime="20161209 17:00:11.839"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 17:00:51.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 17:00:51.094" starttime="20161209 17:00:51.094"></status>
</kw>
<status status="PASS" endtime="20161209 17:00:51.095" starttime="20161209 17:00:11.835"></status>
</kw>
<msg timestamp="20161209 17:00:51.095" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161209 17:00:51.095" starttime="20161209 17:00:11.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 17:00:51.100" starttime="20161209 17:00:51.095"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 17:00:51.102" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161209 17:00:51.102" starttime="20161209 17:00:51.101"></status>
</kw>
<msg timestamp="20161209 17:00:51.102" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161209 17:00:51.102" starttime="20161209 17:00:51.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161209 17:00:51.105" starttime="20161209 17:00:51.105"></status>
</kw>
<status status="PASS" endtime="20161209 17:00:51.105" starttime="20161209 17:00:51.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161209 17:00:51.108" starttime="20161209 17:00:51.106"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 17:00:51.109" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161209 17:00:51.109" starttime="20161209 17:00:51.109"></status>
</kw>
<msg timestamp="20161209 17:00:51.109" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161209 17:00:51.109" starttime="20161209 17:00:51.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161209 17:00:51.115" starttime="20161209 17:00:51.113"></status>
</kw>
<status status="PASS" endtime="20161209 17:00:51.115" starttime="20161209 17:00:51.112"></status>
</kw>
<status status="PASS" endtime="20161209 17:00:51.116" starttime="20161209 17:00:51.109"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 17:00:51.116" level="INFO">Logging into '9.3.185.72:22' as 'root'.</msg>
<msg timestamp="20161209 17:00:53.409" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161209 17:00:53.410" starttime="20161209 17:00:51.116"></status>
</kw>
<status status="PASS" endtime="20161209 17:00:53.410" starttime="20161209 17:00:51.100"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 17:00:53.411" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161209 17:00:54.185" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 17:00:54.186" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20161209 17:00:54.186" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 17:00:54.186" starttime="20161209 17:00:53.410"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 17:00:54.187" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 17:00:54.188" starttime="20161209 17:00:54.187"></status>
</kw>
<status status="PASS" endtime="20161209 17:00:54.188" starttime="20161209 17:00:08.808"></status>
</kw>
<status status="PASS" endtime="20161209 17:00:54.188" starttime="20161209 16:55:34.959"></status>
</kw>
<status status="PASS" endtime="20161209 17:00:54.188" starttime="20161209 16:55:34.958"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1 min</arg>
</arguments>
<msg timestamp="20161209 17:01:54.190" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20161209 17:01:54.190" starttime="20161209 17:00:54.189"></status>
</kw>
<kw name="Validate BMC Version" library="code_update_utils">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161209 17:01:54.200" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161209 17:01:54.200" starttime="20161209 17:01:54.199"></status>
</kw>
<msg timestamp="20161209 17:01:54.200" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161209 17:01:54.200" starttime="20161209 17:01:54.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161209 17:01:54.209" starttime="20161209 17:01:54.209"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:54.210" starttime="20161209 17:01:54.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161209 17:01:54.215" starttime="20161209 17:01:54.210"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161209 17:01:54.216" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161209 17:01:54.216" starttime="20161209 17:01:54.216"></status>
</kw>
<msg timestamp="20161209 17:01:54.217" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161209 17:01:54.217" starttime="20161209 17:01:54.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161209 17:01:54.220" starttime="20161209 17:01:54.220"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:54.220" starttime="20161209 17:01:54.220"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:54.220" starttime="20161209 17:01:54.217"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161209 17:01:54.221" level="INFO">Logging into '9.3.185.72:22' as 'root'.</msg>
<msg timestamp="20161209 17:01:55.767" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161209 17:01:55.768" starttime="20161209 17:01:54.221"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:55.768" starttime="20161209 17:01:54.194"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat /etc/version</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${version}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 17:01:55.769" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161209 17:01:55.816" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 17:01:55.816" level="INFO">${version} = 20161209152749</msg>
<msg timestamp="20161209 17:01:55.816" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 17:01:55.817" starttime="20161209 17:01:55.768"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 17:01:55.817" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 17:01:55.817" starttime="20161209 17:01:55.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${args}' == 'before'</arg>
<arg>Should not Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
<arg>ELSE</arg>
<arg>Should Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<status status="PASS" endtime="20161209 17:01:55.822" starttime="20161209 17:01:55.822"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:55.822" starttime="20161209 17:01:55.818"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:55.822" starttime="20161209 17:01:54.191"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>BMC_READY</arg>
</arguments>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161209 17:01:55.826" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161209 17:01:55.826" starttime="20161209 17:01:55.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161209 17:01:55.827" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161209 17:01:55.827" starttime="20161209 17:01:55.826"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 17:01:55.829" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161209 17:01:55.829" starttime="20161209 17:01:55.828"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161209 17:01:55.831" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161209 17:01:55.831" starttime="20161209 17:01:55.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 17:01:55.832" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 17:01:55.832" starttime="20161209 17:01:55.831"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161209 17:01:55.833" starttime="20161209 17:01:55.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 17:01:55.838" level="INFO">${msg} = URI:https://9.3.185.72/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 17:01:55.838" starttime="20161209 17:01:55.837"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 17:01:55.839" level="INFO">URI:https://9.3.185.72/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161209 17:01:55.839" starttime="20161209 17:01:55.839"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:55.839" starttime="20161209 17:01:55.838"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:55.839" starttime="20161209 17:01:55.837"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:55.839" starttime="20161209 17:01:55.833"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161209 17:01:55.840" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.72, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161209 17:01:55.841" starttime="20161209 17:01:55.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161209 17:01:55.841" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161209 17:01:55.841" starttime="20161209 17:01:55.841"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161209 17:01:55.842" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161209 17:01:55.842" starttime="20161209 17:01:55.842"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161209 17:01:55.843" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161209 17:01:55.843" starttime="20161209 17:01:55.842"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161209 17:01:56.021" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 17:01:56.021" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 17:01:56.021" starttime="20161209 17:01:55.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 17:01:56.022" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 17:01:56.022" starttime="20161209 17:01:56.021"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:56.022" starttime="20161209 17:01:55.840"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161209 17:01:56.258" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161209 17:01:56.258" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 17:01:56.258" starttime="20161209 17:01:56.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161209 17:01:56.262" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 17:01:56.262" starttime="20161209 17:01:56.261"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161209 17:01:56.263" level="INFO">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161209 17:01:56.263" starttime="20161209 17:01:56.262"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:56.263" starttime="20161209 17:01:56.262"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:56.263" starttime="20161209 17:01:56.261"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:56.263" starttime="20161209 17:01:56.258"></status>
</kw>
<msg timestamp="20161209 17:01:56.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 17:01:56.263" starttime="20161209 17:01:55.829"></status>
</kw>
<msg timestamp="20161209 17:01:56.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161209 17:01:56.264" starttime="20161209 17:01:55.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161209 17:01:56.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161209 17:01:56.264" starttime="20161209 17:01:56.264"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161209 17:01:56.265" level="INFO">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161209 17:01:56.265" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161209 17:01:56.265" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_READY'}</msg>
<status status="PASS" endtime="20161209 17:01:56.265" starttime="20161209 17:01:56.265"></status>
</kw>
<msg timestamp="20161209 17:01:56.265" level="INFO">${current} = BMC_READY</msg>
<status status="PASS" endtime="20161209 17:01:56.265" starttime="20161209 17:01:55.824"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<status status="PASS" endtime="20161209 17:01:56.266" starttime="20161209 17:01:56.266"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:56.266" starttime="20161209 17:01:55.824"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:56.266" starttime="20161209 17:01:55.823"></status>
</kw>
<doc>BMC code update process initiation</doc>
<status status="PASS" endtime="20161209 17:01:56.266" critical="yes" starttime="20161209 16:52:59.979"></status>
</test>
<test id="s1-t2" name="Test BMC CPU Mem Performance at Ready State">
<kw name="Check BMC CPU Performance" library="utils">
<doc>Minimal 10% of proc should be free in 3 sample</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 17:01:56.269" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161209 17:01:56.538" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 17:01:56.538" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161209 17:01:56.538" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 17:01:56.538" starttime="20161209 17:01:56.269"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 17:01:56.539" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 17:01:56.539" starttime="20161209 17:01:56.538"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161209 17:01:56.539" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161209 17:01:56.539" starttime="20161209 17:01:56.539"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161209 17:01:56.542" starttime="20161209 17:01:56.539"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:56.542" starttime="20161209 17:01:56.268"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:56.542" starttime="20161209 17:01:56.268"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 17:01:56.543" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161209 17:01:56.829" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 17:01:56.829" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161209 17:01:56.829" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 17:01:56.829" starttime="20161209 17:01:56.543"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 17:01:56.830" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 17:01:56.830" starttime="20161209 17:01:56.830"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161209 17:01:56.831" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161209 17:01:56.831" starttime="20161209 17:01:56.831"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161209 17:01:56.836" starttime="20161209 17:01:56.831"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:56.836" starttime="20161209 17:01:56.542"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:56.836" starttime="20161209 17:01:56.542"></status>
</kw>
<kw type="foritem" name="${var} = 3">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 17:01:56.838" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161209 17:01:57.145" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 17:01:57.145" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161209 17:01:57.145" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 17:01:57.145" starttime="20161209 17:01:56.837"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 17:01:57.146" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 17:01:57.146" starttime="20161209 17:01:57.146"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161209 17:01:57.147" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161209 17:01:57.147" starttime="20161209 17:01:57.147"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161209 17:01:57.153" starttime="20161209 17:01:57.148"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.153" starttime="20161209 17:01:56.836"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.153" starttime="20161209 17:01:56.836"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.153" starttime="20161209 17:01:56.267"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.154" starttime="20161209 17:01:56.267"></status>
</kw>
<kw name="Check BMC Mem Performance" library="utils">
<doc>Minimal 10% of memory should be free</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 17:01:57.156" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161209 17:01:57.281" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 17:01:57.281" level="INFO">${bmc_mem_free_output} = 349520</msg>
<msg timestamp="20161209 17:01:57.281" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 17:01:57.281" starttime="20161209 17:01:57.155"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 17:01:57.282" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 17:01:57.282" starttime="20161209 17:01:57.282"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 17:01:57.283" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161209 17:01:57.409" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 17:01:57.409" level="INFO">${bmc_mem_total_output} = 499008</msg>
<msg timestamp="20161209 17:01:57.409" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 17:01:57.409" starttime="20161209 17:01:57.283"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 17:01:57.410" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 17:01:57.410" starttime="20161209 17:01:57.409"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161209 17:01:57.414" level="INFO">${bmc_mem_percentage} = 34952000</msg>
<status status="PASS" endtime="20161209 17:01:57.414" starttime="20161209 17:01:57.410"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161209 17:01:57.419" level="INFO">${bmc_mem_percentage} = 70</msg>
<status status="PASS" endtime="20161209 17:01:57.419" starttime="20161209 17:01:57.415"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161209 17:01:57.423" starttime="20161209 17:01:57.419"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.423" starttime="20161209 17:01:57.155"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.423" starttime="20161209 17:01:57.154"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 17:01:57.424" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161209 17:01:57.533" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 17:01:57.533" level="INFO">${bmc_mem_free_output} = 349520</msg>
<msg timestamp="20161209 17:01:57.533" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 17:01:57.533" starttime="20161209 17:01:57.424"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 17:01:57.533" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 17:01:57.533" starttime="20161209 17:01:57.533"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 17:01:57.534" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161209 17:01:57.659" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 17:01:57.659" level="INFO">${bmc_mem_total_output} = 499008</msg>
<msg timestamp="20161209 17:01:57.659" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 17:01:57.659" starttime="20161209 17:01:57.534"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 17:01:57.659" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 17:01:57.659" starttime="20161209 17:01:57.659"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161209 17:01:57.662" level="INFO">${bmc_mem_percentage} = 34952000</msg>
<status status="PASS" endtime="20161209 17:01:57.662" starttime="20161209 17:01:57.659"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161209 17:01:57.666" level="INFO">${bmc_mem_percentage} = 70</msg>
<status status="PASS" endtime="20161209 17:01:57.666" starttime="20161209 17:01:57.662"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161209 17:01:57.670" starttime="20161209 17:01:57.666"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.671" starttime="20161209 17:01:57.423"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.671" starttime="20161209 17:01:57.423"></status>
</kw>
<kw type="foritem" name="${var} = 3">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 17:01:57.672" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161209 17:01:57.829" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 17:01:57.830" level="INFO">${bmc_mem_free_output} = 349592</msg>
<msg timestamp="20161209 17:01:57.830" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 17:01:57.830" starttime="20161209 17:01:57.672"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 17:01:57.830" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 17:01:57.831" starttime="20161209 17:01:57.830"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161209 17:01:57.831" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161209 17:01:57.941" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161209 17:01:57.941" level="INFO">${bmc_mem_total_output} = 499008</msg>
<msg timestamp="20161209 17:01:57.941" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161209 17:01:57.941" starttime="20161209 17:01:57.831"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161209 17:01:57.942" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161209 17:01:57.942" starttime="20161209 17:01:57.941"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161209 17:01:57.946" level="INFO">${bmc_mem_percentage} = 34959200</msg>
<status status="PASS" endtime="20161209 17:01:57.946" starttime="20161209 17:01:57.942"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161209 17:01:57.950" level="INFO">${bmc_mem_percentage} = 70</msg>
<status status="PASS" endtime="20161209 17:01:57.950" starttime="20161209 17:01:57.946"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161209 17:01:57.954" starttime="20161209 17:01:57.950"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.954" starttime="20161209 17:01:57.671"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.954" starttime="20161209 17:01:57.671"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.955" starttime="20161209 17:01:57.154"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.955" starttime="20161209 17:01:57.154"></status>
</kw>
<status status="PASS" endtime="20161209 17:01:57.955" critical="yes" starttime="20161209 17:01:56.267"></status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update</doc>
<status status="PASS" endtime="20161209 17:01:57.957" starttime="20161209 16:52:59.508"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="2">Critical Tests</stat>
<stat fail="0" pass="2">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="Update Bmc" pass="2">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
