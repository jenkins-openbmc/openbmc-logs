<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170809 03:21:06.171">
<suite name="Tests" id="s1" source="/tmp/fspcibld/10990/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:21:06.801">Dictionary does not contain key 'host'.</msg>
<status starttime="20170809 03:21:06.800" status="FAIL" endtime="20170809 03:21:06.801"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:06.801">${has_host} = False</msg>
<status starttime="20170809 03:21:06.800" status="PASS" endtime="20170809 03:21:06.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170809 03:21:06.802" status="PASS" endtime="20170809 03:21:06.802"></status>
</kw>
<status starttime="20170809 03:21:06.801" status="PASS" endtime="20170809 03:21:06.802"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:06.803">${port_num} = 22</msg>
<status starttime="20170809 03:21:06.803" status="PASS" endtime="20170809 03:21:06.803"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:06.804">${SSH_PORT} = 22</msg>
<status starttime="20170809 03:21:06.804" status="PASS" endtime="20170809 03:21:06.804"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:06.804">${https_num} = 443</msg>
<status starttime="20170809 03:21:06.804" status="PASS" endtime="20170809 03:21:06.804"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:06.805">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170809 03:21:06.805" status="PASS" endtime="20170809 03:21:06.805"></status>
</kw>
<status starttime="20170809 03:21:06.803" status="PASS" endtime="20170809 03:21:06.805"></status>
</kw>
<status starttime="20170809 03:21:06.802" status="PASS" endtime="20170809 03:21:06.805"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:21:06.806">Dictionary does not contain key 'port'.</msg>
<status starttime="20170809 03:21:06.806" status="FAIL" endtime="20170809 03:21:06.806"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:06.806">${has_port} = False</msg>
<status starttime="20170809 03:21:06.806" status="PASS" endtime="20170809 03:21:06.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170809 03:21:06.808" status="PASS" endtime="20170809 03:21:06.809"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170809 03:21:06.809" status="PASS" endtime="20170809 03:21:06.809"></status>
</kw>
<status starttime="20170809 03:21:06.807" status="PASS" endtime="20170809 03:21:06.809"></status>
</kw>
<status starttime="20170809 03:21:06.807" status="PASS" endtime="20170809 03:21:06.809"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:06.810">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 03:21:08.488">Read output: root@witherspoon:~#</msg>
<status starttime="20170809 03:21:06.809" status="PASS" endtime="20170809 03:21:08.489"></status>
</kw>
<status starttime="20170809 03:21:06.799" status="PASS" endtime="20170809 03:21:08.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:08.491">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170809 03:21:08.588">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 03:21:08.589">${output} = VERSION_ID="v1.99.8-201-gec590ff"</msg>
<msg level="INFO" timestamp="20170809 03:21:08.589">${stderr} = </msg>
<status starttime="20170809 03:21:08.490" status="PASS" endtime="20170809 03:21:08.589"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:08.589">Length is 0</msg>
<status starttime="20170809 03:21:08.589" status="PASS" endtime="20170809 03:21:08.589"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:08.590">VERSION_ID="v1.99.8-201-gec590ff"</msg>
<status starttime="20170809 03:21:08.589" status="PASS" endtime="20170809 03:21:08.590"></status>
</kw>
<status starttime="20170809 03:21:08.490" status="PASS" endtime="20170809 03:21:08.590"></status>
</kw>
<status starttime="20170809 03:21:08.490" status="PASS" endtime="20170809 03:21:08.590"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:08.591">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170809 03:21:08.769">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170809 03:21:08.769">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg level="INFO" timestamp="20170809 03:21:08.769">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status starttime="20170809 03:21:08.591" status="PASS" endtime="20170809 03:21:08.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:08.769">Length is 81</msg>
<msg level="FAIL" timestamp="20170809 03:21:08.769">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status starttime="20170809 03:21:08.769" status="FAIL" endtime="20170809 03:21:08.770"></status>
</kw>
<status starttime="20170809 03:21:08.591" status="FAIL" endtime="20170809 03:21:08.770"></status>
</kw>
<status starttime="20170809 03:21:08.590" status="FAIL" endtime="20170809 03:21:08.770"></status>
</kw>
<status starttime="20170809 03:21:08.590" status="PASS" endtime="20170809 03:21:08.770"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:09.163">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:21:09.163">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 03:21:09.913">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170809 03:21:09.914">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170809 03:21:09.990">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 03:21:10.001">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170809 03:21:10.001">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 03:21:10.001">${rc} = 0</msg>
<status starttime="20170809 03:21:08.771" status="PASS" endtime="20170809 03:21:10.001"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:10.002">Length is 0</msg>
<status starttime="20170809 03:21:10.002" status="PASS" endtime="20170809 03:21:10.002"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:10.002">Length is 11</msg>
<status starttime="20170809 03:21:10.002" status="PASS" endtime="20170809 03:21:10.002"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:10.003">${bmc_model} = Witherspoon</msg>
<status starttime="20170809 03:21:08.771" status="PASS" endtime="20170809 03:21:10.003"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:10.003">BMC Model=Witherspoon</msg>
<status starttime="20170809 03:21:10.003" status="PASS" endtime="20170809 03:21:10.003"></status>
</kw>
<status starttime="20170809 03:21:08.770" status="PASS" endtime="20170809 03:21:10.003"></status>
</kw>
<status starttime="20170809 03:21:08.770" status="PASS" endtime="20170809 03:21:10.003"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:21:10.006">Dictionary does not contain key 'host'.</msg>
<status starttime="20170809 03:21:10.005" status="FAIL" endtime="20170809 03:21:10.006"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:10.006">${has_host} = False</msg>
<status starttime="20170809 03:21:10.005" status="PASS" endtime="20170809 03:21:10.006"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170809 03:21:10.007" status="PASS" endtime="20170809 03:21:10.007"></status>
</kw>
<status starttime="20170809 03:21:10.006" status="PASS" endtime="20170809 03:21:10.007"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:10.010">${port_num} = 22</msg>
<status starttime="20170809 03:21:10.010" status="PASS" endtime="20170809 03:21:10.011"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:10.011">${SSH_PORT} = 22</msg>
<status starttime="20170809 03:21:10.011" status="PASS" endtime="20170809 03:21:10.011"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:10.012">${https_num} = 443</msg>
<status starttime="20170809 03:21:10.011" status="PASS" endtime="20170809 03:21:10.012"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:10.012">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170809 03:21:10.012" status="PASS" endtime="20170809 03:21:10.012"></status>
</kw>
<status starttime="20170809 03:21:10.010" status="PASS" endtime="20170809 03:21:10.012"></status>
</kw>
<status starttime="20170809 03:21:10.007" status="PASS" endtime="20170809 03:21:10.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:21:10.014">Dictionary does not contain key 'port'.</msg>
<status starttime="20170809 03:21:10.013" status="FAIL" endtime="20170809 03:21:10.014"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:10.014">${has_port} = False</msg>
<status starttime="20170809 03:21:10.013" status="PASS" endtime="20170809 03:21:10.014"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170809 03:21:10.015" status="PASS" endtime="20170809 03:21:10.015"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170809 03:21:10.016" status="PASS" endtime="20170809 03:21:10.016"></status>
</kw>
<status starttime="20170809 03:21:10.015" status="PASS" endtime="20170809 03:21:10.016"></status>
</kw>
<status starttime="20170809 03:21:10.014" status="PASS" endtime="20170809 03:21:10.016"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:10.017">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 03:21:11.666">Read output: root@witherspoon:~#</msg>
<status starttime="20170809 03:21:10.017" status="PASS" endtime="20170809 03:21:11.666"></status>
</kw>
<status starttime="20170809 03:21:10.004" status="PASS" endtime="20170809 03:21:11.667"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:11.668">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170809 03:21:11.746">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 03:21:11.746">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170809 03:21:11.746">${stderr} = </msg>
<status starttime="20170809 03:21:11.668" status="PASS" endtime="20170809 03:21:11.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:11.747">Length is 0</msg>
<status starttime="20170809 03:21:11.747" status="PASS" endtime="20170809 03:21:11.747"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:11.747">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170809 03:21:11.667" status="PASS" endtime="20170809 03:21:11.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170809 03:21:11.748" status="PASS" endtime="20170809 03:21:11.748"></status>
</kw>
<status starttime="20170809 03:21:10.004" status="PASS" endtime="20170809 03:21:11.748"></status>
</kw>
<status starttime="20170809 03:21:10.004" status="PASS" endtime="20170809 03:21:11.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170809 03:21:11.748" status="PASS" endtime="20170809 03:21:11.749"></status>
</kw>
<status starttime="20170809 03:21:06.799" status="PASS" endtime="20170809 03:21:11.749"></status>
</kw>
<suite name="Security" id="s1-s1" source="/tmp/fspcibld/10990/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/fspcibld/10990/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:11.833">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:11.833" status="PASS" endtime="20170809 03:21:11.834"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:11.834">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:11.834" status="PASS" endtime="20170809 03:21:11.834"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:11.835">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:11.835" status="PASS" endtime="20170809 03:21:11.835"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:11.836">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:11.835" status="PASS" endtime="20170809 03:21:11.836"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:12.040">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:11.836" status="PASS" endtime="20170809 03:21:12.040"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.040">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:12.040">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:11.836" status="PASS" endtime="20170809 03:21:12.040"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:12.041">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:12.040" status="PASS" endtime="20170809 03:21:12.041"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:12.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:12.041" status="PASS" endtime="20170809 03:21:12.042"></status>
</kw>
<status starttime="20170809 03:21:11.832" status="PASS" endtime="20170809 03:21:12.042"></status>
</kw>
<status starttime="20170809 03:21:11.832" status="PASS" endtime="20170809 03:21:12.042"></status>
</kw>
<status starttime="20170809 03:21:11.831" status="PASS" endtime="20170809 03:21:12.042"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:12.047">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:12.047" status="PASS" endtime="20170809 03:21:12.048"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.048">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:12.048" status="PASS" endtime="20170809 03:21:12.048"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.049">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:12.049" status="PASS" endtime="20170809 03:21:12.049"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.050">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:12.049" status="PASS" endtime="20170809 03:21:12.050"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:12.232">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:12.051" status="PASS" endtime="20170809 03:21:12.232"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.232">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:12.232">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:12.050" status="PASS" endtime="20170809 03:21:12.232"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:12.233">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:12.233" status="PASS" endtime="20170809 03:21:12.233"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:12.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:12.233" status="PASS" endtime="20170809 03:21:12.234"></status>
</kw>
<status starttime="20170809 03:21:12.046" status="PASS" endtime="20170809 03:21:12.234"></status>
</kw>
<status starttime="20170809 03:21:12.046" status="PASS" endtime="20170809 03:21:12.234"></status>
</kw>
<status starttime="20170809 03:21:12.045" status="PASS" endtime="20170809 03:21:12.234"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.235">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:21:12.234" status="PASS" endtime="20170809 03:21:12.235"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.237">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:12.236" status="PASS" endtime="20170809 03:21:12.237"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:12.238">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:12.237" status="PASS" endtime="20170809 03:21:12.238"></status>
</kw>
<status starttime="20170809 03:21:12.237" status="PASS" endtime="20170809 03:21:12.238"></status>
</kw>
<status starttime="20170809 03:21:12.235" status="PASS" endtime="20170809 03:21:12.238"></status>
</kw>
<status starttime="20170809 03:21:12.235" status="PASS" endtime="20170809 03:21:12.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.326">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:21:12.327">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:12.238" status="PASS" endtime="20170809 03:21:12.327"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.329">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:12.328" status="PASS" endtime="20170809 03:21:12.329"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:12.330">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:12.330" status="PASS" endtime="20170809 03:21:12.330"></status>
</kw>
<status starttime="20170809 03:21:12.329" status="PASS" endtime="20170809 03:21:12.330"></status>
</kw>
<status starttime="20170809 03:21:12.327" status="PASS" endtime="20170809 03:21:12.330"></status>
</kw>
<status starttime="20170809 03:21:12.327" status="PASS" endtime="20170809 03:21:12.330"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:12.331">Delete All Sessions</msg>
<status starttime="20170809 03:21:12.330" status="PASS" endtime="20170809 03:21:12.331"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.331">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:12.044" status="PASS" endtime="20170809 03:21:12.331"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:12.331">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:12.331" status="PASS" endtime="20170809 03:21:12.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.332">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:12.332">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:12.332">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status starttime="20170809 03:21:12.332" status="PASS" endtime="20170809 03:21:12.332"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.333">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170809 03:21:12.044" status="PASS" endtime="20170809 03:21:12.333"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.333">${host_state} = Off</msg>
<status starttime="20170809 03:21:12.043" status="PASS" endtime="20170809 03:21:12.333"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:21:12.334">Off != Quiesced</msg>
<status starttime="20170809 03:21:12.334" status="FAIL" endtime="20170809 03:21:12.334"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.334">${status} = False</msg>
<status starttime="20170809 03:21:12.333" status="PASS" endtime="20170809 03:21:12.334"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.334">${status} = False</msg>
<status starttime="20170809 03:21:12.043" status="PASS" endtime="20170809 03:21:12.334"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170809 03:21:12.335" status="PASS" endtime="20170809 03:21:12.335"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170809 03:21:12.335" status="PASS" endtime="20170809 03:21:12.336"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.348">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170809 03:21:12.336" status="PASS" endtime="20170809 03:21:12.348"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.363">${FFDC_DIR_PATH} = </msg>
<status starttime="20170809 03:21:12.349" status="PASS" endtime="20170809 03:21:12.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.366">${cur_time} = 2017-08-09 03:21:12:365489</msg>
<status starttime="20170809 03:21:12.365" status="PASS" endtime="20170809 03:21:12.366"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.367">${cur_time} = 20170809032112365489</msg>
<status starttime="20170809 03:21:12.366" status="PASS" endtime="20170809 03:21:12.367"></status>
</kw>
<status starttime="20170809 03:21:12.365" status="PASS" endtime="20170809 03:21:12.367"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.373">${FFDC_TIME} = 20170809032112365489</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.374">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170809 03:21:12.374" status="PASS" endtime="20170809 03:21:12.374"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.375">${suite_name} = 20170809032112365489_TestsSecurityTestSsl</msg>
<status starttime="20170809 03:21:12.374" status="PASS" endtime="20170809 03:21:12.375"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.375">${test_name} = TestSSLConnection</msg>
<status starttime="20170809 03:21:12.375" status="PASS" endtime="20170809 03:21:12.375"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.376">${test_name} = 20170809032112365489_TestSSLConnection</msg>
<status starttime="20170809 03:21:12.376" status="PASS" endtime="20170809 03:21:12.376"></status>
</kw>
<status starttime="20170809 03:21:12.374" status="PASS" endtime="20170809 03:21:12.376"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.377">${FFDC_DIR_PATH} = /tmp/fspcibld/10990/obmc-robot/logs/20170809032112365489_TestsSecurityTestSsl/20170809032112365489_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170809 03:21:12.384">${FFDC_PREFIX} = 20170809032112365489_</msg>
<status starttime="20170809 03:21:12.364" status="PASS" endtime="20170809 03:21:12.384"></status>
</kw>
<status starttime="20170809 03:21:12.363" status="PASS" endtime="20170809 03:21:12.384"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170809 03:21:12.385" status="PASS" endtime="20170809 03:21:12.385"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:21:12.386">Created directory '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs"&gt;/tmp/fspcibld/10990/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170809 03:21:12.386" status="PASS" endtime="20170809 03:21:12.387"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:21:12.388">File '/tmp/fspcibld/10990/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170809 03:21:12.387" status="FAIL" endtime="20170809 03:21:12.388"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.388">${exist} = False</msg>
<status starttime="20170809 03:21:12.387" status="PASS" endtime="20170809 03:21:12.388"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:21:12.389">Created file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:21:12.389" status="PASS" endtime="20170809 03:21:12.390"></status>
</kw>
<status starttime="20170809 03:21:12.388" status="PASS" endtime="20170809 03:21:12.390"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170809 03:21:12.390" status="PASS" endtime="20170809 03:21:12.390"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.391">${cur_time} = 2017-08-09 03:21:12:390910</msg>
<status starttime="20170809 03:21:12.391" status="PASS" endtime="20170809 03:21:12.391"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.392">${cur_time} = 20170809032112390910</msg>
<status starttime="20170809 03:21:12.391" status="PASS" endtime="20170809 03:21:12.392"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.392">${cur_time} = 20170809032112390910</msg>
<status starttime="20170809 03:21:12.390" status="PASS" endtime="20170809 03:21:12.392"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:21:12.393">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:21:12.392" status="PASS" endtime="20170809 03:21:12.393"></status>
</kw>
<status starttime="20170809 03:21:12.336" status="PASS" endtime="20170809 03:21:12.393"></status>
</kw>
<status starttime="20170809 03:21:12.043" status="PASS" endtime="20170809 03:21:12.393"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170809 03:21:11.831" critical="yes" status="PASS" endtime="20170809 03:21:12.393"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:12.395">Delete All Sessions</msg>
<status starttime="20170809 03:21:12.394" status="PASS" endtime="20170809 03:21:12.395"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170809 03:21:11.751" status="PASS" endtime="20170809 03:21:12.395"></status>
</suite>
<status starttime="20170809 03:21:11.749" status="PASS" endtime="20170809 03:21:12.397"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s2" source="/tmp/fspcibld/10990/obmc-robot/tests/test_basic_poweron.robot">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.436">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:21:12.436" status="PASS" endtime="20170809 03:21:12.436"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.437">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:21:12.436" status="PASS" endtime="20170809 03:21:12.437"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.437">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:21:12.435" status="PASS" endtime="20170809 03:21:12.437"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.439">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:21:12.438" status="PASS" endtime="20170809 03:21:12.439"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.439">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:21:12.439" status="PASS" endtime="20170809 03:21:12.439"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.440">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:21:12.438" status="PASS" endtime="20170809 03:21:12.440"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.440">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170809 03:21:12.440" status="PASS" endtime="20170809 03:21:12.441"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:21:12.441" status="PASS" endtime="20170809 03:21:12.441"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.446">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 03:21:12.450">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 03:21:12.450">${output} = /tmp/fspcibld/10990/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170809 03:21:12.441" status="PASS" endtime="20170809 03:21:12.451"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 03:21:12.453" status="PASS" endtime="20170809 03:21:12.453"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170809 03:21:12.454" status="PASS" endtime="20170809 03:21:12.454"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.455">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 03:21:12.455" status="PASS" endtime="20170809 03:21:12.455"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.455">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 03:21:12.440" status="PASS" endtime="20170809 03:21:12.455"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.456">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170809 03:21:12.456" status="PASS" endtime="20170809 03:21:12.456"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:21:12.456" status="PASS" endtime="20170809 03:21:12.457"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.460">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 03:21:12.470">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 03:21:12.471">${os_con_pid} = </msg>
<status starttime="20170809 03:21:12.457" status="PASS" endtime="20170809 03:21:12.471"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170809 03:21:12.473" status="PASS" endtime="20170809 03:21:12.474"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.474">${cmd_buf} = kill -9 </msg>
<status starttime="20170809 03:21:12.474" status="PASS" endtime="20170809 03:21:12.475"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:21:12.475" status="PASS" endtime="20170809 03:21:12.476"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.477">${rc} = None</msg>
<msg level="INFO" timestamp="20170809 03:21:12.477">${output} = None</msg>
<status starttime="20170809 03:21:12.476" status="PASS" endtime="20170809 03:21:12.477"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 03:21:12.477" status="PASS" endtime="20170809 03:21:12.477"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:21:12.484">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status starttime="20170809 03:21:12.479" status="FAIL" endtime="20170809 03:21:12.484"></status>
</kw>
<status starttime="20170809 03:21:12.478" status="PASS" endtime="20170809 03:21:12.484"></status>
</kw>
<status starttime="20170809 03:21:12.478" status="PASS" endtime="20170809 03:21:12.484"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.485">${output} = </msg>
<status starttime="20170809 03:21:12.485" status="PASS" endtime="20170809 03:21:12.485"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.486">${loc_quiet} = 1</msg>
<status starttime="20170809 03:21:12.485" status="PASS" endtime="20170809 03:21:12.486"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170809 03:21:12.487" status="PASS" endtime="20170809 03:21:12.547"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.548">${rc} = 1</msg>
<msg level="INFO" timestamp="20170809 03:21:12.548">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status starttime="20170809 03:21:12.486" status="PASS" endtime="20170809 03:21:12.548"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.549">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status starttime="20170809 03:21:12.437" status="PASS" endtime="20170809 03:21:12.549"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:21:12.551">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status starttime="20170809 03:21:12.550" status="PASS" endtime="20170809 03:21:12.551"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.552">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170809 03:21:12.551" status="PASS" endtime="20170809 03:21:12.552"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:21:12.552" status="PASS" endtime="20170809 03:21:12.552"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.556">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 03:21:12.559">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 03:21:12.559">${output} = /tmp/fspcibld/10990/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170809 03:21:12.553" status="PASS" endtime="20170809 03:21:12.559"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 03:21:12.562" status="PASS" endtime="20170809 03:21:12.563"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170809 03:21:12.563" status="PASS" endtime="20170809 03:21:12.564"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.564">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 03:21:12.564" status="PASS" endtime="20170809 03:21:12.564"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:12.565">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 03:21:12.551" status="PASS" endtime="20170809 03:21:12.565"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.566">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170809 03:21:12.565" status="PASS" endtime="20170809 03:21:12.566"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:21:12.566" status="PASS" endtime="20170809 03:21:12.566"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.569">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170809 03:21:12.573">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 03:21:12.573">${output} = </msg>
<status starttime="20170809 03:21:12.566" status="PASS" endtime="20170809 03:21:12.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170809 03:21:12.575" status="PASS" endtime="20170809 03:21:12.576"></status>
</kw>
<status starttime="20170809 03:21:12.435" status="PASS" endtime="20170809 03:21:12.576"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:12.577">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.579">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170809 03:21:12.579" status="PASS" endtime="20170809 03:21:12.579"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.581">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170809 03:21:12.580" status="PASS" endtime="20170809 03:21:12.581"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:12.585">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:12.585" status="PASS" endtime="20170809 03:21:12.586"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.587">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:12.586" status="PASS" endtime="20170809 03:21:12.587"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.587">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:12.587" status="PASS" endtime="20170809 03:21:12.587"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:12.588">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:12.587" status="PASS" endtime="20170809 03:21:12.588"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:13.144">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:12.589" status="PASS" endtime="20170809 03:21:13.144"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:13.144">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:13.144">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:12.588" status="PASS" endtime="20170809 03:21:13.144"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:13.145">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:13.145" status="PASS" endtime="20170809 03:21:13.145"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:13.146">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:13.146" status="PASS" endtime="20170809 03:21:13.146"></status>
</kw>
<status starttime="20170809 03:21:12.584" status="PASS" endtime="20170809 03:21:13.146"></status>
</kw>
<status starttime="20170809 03:21:12.583" status="PASS" endtime="20170809 03:21:13.146"></status>
</kw>
<status starttime="20170809 03:21:12.582" status="PASS" endtime="20170809 03:21:13.146"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:13.147">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170809 03:21:13.147" status="PASS" endtime="20170809 03:21:13.147"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:13.148">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:13.147" status="PASS" endtime="20170809 03:21:13.148"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170809 03:21:13.148" status="PASS" endtime="20170809 03:21:13.148"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:13.152">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20170809 03:21:13.150" status="PASS" endtime="20170809 03:21:13.152"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:13.153">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170809 03:21:13.152" status="PASS" endtime="20170809 03:21:13.153"></status>
</kw>
<status starttime="20170809 03:21:13.152" status="PASS" endtime="20170809 03:21:13.153"></status>
</kw>
<status starttime="20170809 03:21:13.148" status="PASS" endtime="20170809 03:21:13.153"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:13.785">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170809 03:21:13.786">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:13.153" status="PASS" endtime="20170809 03:21:13.786"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:13.787">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:13.786" status="PASS" endtime="20170809 03:21:13.787"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:13.788">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:13.788" status="PASS" endtime="20170809 03:21:13.788"></status>
</kw>
<status starttime="20170809 03:21:13.787" status="PASS" endtime="20170809 03:21:13.788"></status>
</kw>
<status starttime="20170809 03:21:13.786" status="PASS" endtime="20170809 03:21:13.788"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:13.789">Delete All Sessions</msg>
<status starttime="20170809 03:21:13.789" status="PASS" endtime="20170809 03:21:13.789"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:13.789">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:12.581" status="PASS" endtime="20170809 03:21:13.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:13.790">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:13.789" status="PASS" endtime="20170809 03:21:13.790"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:13.791">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:13.791">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:13.791">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status starttime="20170809 03:21:13.790" status="PASS" endtime="20170809 03:21:13.791"></status>
</kw>
<status starttime="20170809 03:21:12.579" status="PASS" endtime="20170809 03:21:13.791"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170809 03:21:13.792" status="PASS" endtime="20170809 03:21:13.792"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:13.799">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:13.799" status="PASS" endtime="20170809 03:21:13.800"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:13.800">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:13.800" status="PASS" endtime="20170809 03:21:13.801"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:13.801">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:13.801" status="PASS" endtime="20170809 03:21:13.801"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:13.803">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:13.802" status="PASS" endtime="20170809 03:21:13.803"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:14.991">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:13.804" status="PASS" endtime="20170809 03:21:14.991"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:14.991">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:14.991">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:13.803" status="PASS" endtime="20170809 03:21:14.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:14.992">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:14.991" status="PASS" endtime="20170809 03:21:14.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:14.992">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:14.992" status="PASS" endtime="20170809 03:21:14.993"></status>
</kw>
<status starttime="20170809 03:21:13.798" status="PASS" endtime="20170809 03:21:14.993"></status>
</kw>
<status starttime="20170809 03:21:13.797" status="PASS" endtime="20170809 03:21:14.993"></status>
</kw>
<status starttime="20170809 03:21:13.796" status="PASS" endtime="20170809 03:21:14.993"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:14.993">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:21:14.993" status="PASS" endtime="20170809 03:21:14.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:14.995">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:14.995" status="PASS" endtime="20170809 03:21:14.996"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:14.996">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:14.996" status="PASS" endtime="20170809 03:21:14.997"></status>
</kw>
<status starttime="20170809 03:21:14.996" status="PASS" endtime="20170809 03:21:14.997"></status>
</kw>
<status starttime="20170809 03:21:14.994" status="PASS" endtime="20170809 03:21:14.997"></status>
</kw>
<status starttime="20170809 03:21:14.994" status="PASS" endtime="20170809 03:21:14.997"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:19.633">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:21:19.633">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:14.997" status="PASS" endtime="20170809 03:21:19.633"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:19.635">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:19.635" status="PASS" endtime="20170809 03:21:19.635"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:19.636">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:19.636" status="PASS" endtime="20170809 03:21:19.636"></status>
</kw>
<status starttime="20170809 03:21:19.636" status="PASS" endtime="20170809 03:21:19.637"></status>
</kw>
<status starttime="20170809 03:21:19.634" status="PASS" endtime="20170809 03:21:19.637"></status>
</kw>
<status starttime="20170809 03:21:19.634" status="PASS" endtime="20170809 03:21:19.637"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:19.637">Delete All Sessions</msg>
<status starttime="20170809 03:21:19.637" status="PASS" endtime="20170809 03:21:19.637"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:19.637">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:13.795" status="PASS" endtime="20170809 03:21:19.637"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:19.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:19.638" status="PASS" endtime="20170809 03:21:19.638"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:19.639">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:19.639">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:19.639">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status starttime="20170809 03:21:19.638" status="PASS" endtime="20170809 03:21:19.639"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:19.639">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 03:21:13.795" status="PASS" endtime="20170809 03:21:19.639"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:19.640">${power_state} = Off</msg>
<status starttime="20170809 03:21:13.794" status="PASS" endtime="20170809 03:21:19.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:21:19.640" status="PASS" endtime="20170809 03:21:19.640"></status>
</kw>
<status starttime="20170809 03:21:13.794" status="PASS" endtime="20170809 03:21:19.640"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:19.644">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:19.644" status="PASS" endtime="20170809 03:21:19.645"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:19.645">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:19.645" status="PASS" endtime="20170809 03:21:19.645"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:19.646">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:19.645" status="PASS" endtime="20170809 03:21:19.646"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:19.646">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:19.646" status="PASS" endtime="20170809 03:21:19.646"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:20.026">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:19.647" status="PASS" endtime="20170809 03:21:20.027"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:20.027">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:20.027">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:19.647" status="PASS" endtime="20170809 03:21:20.027"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:20.028">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:20.027" status="PASS" endtime="20170809 03:21:20.028"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:20.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:20.028" status="PASS" endtime="20170809 03:21:20.028"></status>
</kw>
<status starttime="20170809 03:21:19.643" status="PASS" endtime="20170809 03:21:20.029"></status>
</kw>
<status starttime="20170809 03:21:19.643" status="PASS" endtime="20170809 03:21:20.029"></status>
</kw>
<status starttime="20170809 03:21:19.642" status="PASS" endtime="20170809 03:21:20.029"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.029">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:21:20.029" status="PASS" endtime="20170809 03:21:20.029"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.031">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:20.031" status="PASS" endtime="20170809 03:21:20.031"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:20.032">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:20.032" status="PASS" endtime="20170809 03:21:20.032"></status>
</kw>
<status starttime="20170809 03:21:20.032" status="PASS" endtime="20170809 03:21:20.033"></status>
</kw>
<status starttime="20170809 03:21:20.030" status="PASS" endtime="20170809 03:21:20.033"></status>
</kw>
<status starttime="20170809 03:21:20.030" status="PASS" endtime="20170809 03:21:20.033"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.630">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:21:20.631">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:20.033" status="PASS" endtime="20170809 03:21:20.631"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.633">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:20.632" status="PASS" endtime="20170809 03:21:20.633"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:20.634">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:20.634" status="PASS" endtime="20170809 03:21:20.634"></status>
</kw>
<status starttime="20170809 03:21:20.633" status="PASS" endtime="20170809 03:21:20.634"></status>
</kw>
<status starttime="20170809 03:21:20.632" status="PASS" endtime="20170809 03:21:20.634"></status>
</kw>
<status starttime="20170809 03:21:20.631" status="PASS" endtime="20170809 03:21:20.634"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:20.635">Delete All Sessions</msg>
<status starttime="20170809 03:21:20.635" status="PASS" endtime="20170809 03:21:20.635"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:20.635">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:19.641" status="PASS" endtime="20170809 03:21:20.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:20.636">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:20.635" status="PASS" endtime="20170809 03:21:20.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.636">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:20.636">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:20.637">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status starttime="20170809 03:21:20.636" status="PASS" endtime="20170809 03:21:20.637"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:20.637">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170809 03:21:19.641" status="PASS" endtime="20170809 03:21:20.637"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:20.637">${host_state} = Off</msg>
<status starttime="20170809 03:21:19.640" status="PASS" endtime="20170809 03:21:20.637"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:21:20.637" status="PASS" endtime="20170809 03:21:20.638"></status>
</kw>
<status starttime="20170809 03:21:13.793" status="PASS" endtime="20170809 03:21:20.638"></status>
</kw>
<status starttime="20170809 03:21:13.793" status="PASS" endtime="20170809 03:21:20.638"></status>
</kw>
<status starttime="20170809 03:21:12.578" status="PASS" endtime="20170809 03:21:20.638"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.639">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170809 03:21:20.639" status="PASS" endtime="20170809 03:21:20.639"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.640">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170809 03:21:20.640" status="PASS" endtime="20170809 03:21:20.640"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:20.643">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:20.643" status="PASS" endtime="20170809 03:21:20.643"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.644">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:20.643" status="PASS" endtime="20170809 03:21:20.644"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.644">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:20.644" status="PASS" endtime="20170809 03:21:20.644"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.645">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:20.645" status="PASS" endtime="20170809 03:21:20.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:20.966">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:20.646" status="PASS" endtime="20170809 03:21:20.966"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:20.966">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:20.966">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:20.645" status="PASS" endtime="20170809 03:21:20.966"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:20.967">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:20.967" status="PASS" endtime="20170809 03:21:20.967"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:20.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:20.967" status="PASS" endtime="20170809 03:21:20.968"></status>
</kw>
<status starttime="20170809 03:21:20.642" status="PASS" endtime="20170809 03:21:20.968"></status>
</kw>
<status starttime="20170809 03:21:20.642" status="PASS" endtime="20170809 03:21:20.968"></status>
</kw>
<status starttime="20170809 03:21:20.641" status="PASS" endtime="20170809 03:21:20.968"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.969">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170809 03:21:20.969" status="PASS" endtime="20170809 03:21:20.969"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.970">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:20.969" status="PASS" endtime="20170809 03:21:20.970"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170809 03:21:20.970" status="PASS" endtime="20170809 03:21:20.970"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:20.972">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status starttime="20170809 03:21:20.971" status="PASS" endtime="20170809 03:21:20.972"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:20.973">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170809 03:21:20.973" status="PASS" endtime="20170809 03:21:20.973"></status>
</kw>
<status starttime="20170809 03:21:20.972" status="PASS" endtime="20170809 03:21:20.973"></status>
</kw>
<status starttime="20170809 03:21:20.970" status="PASS" endtime="20170809 03:21:20.973"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:21.701">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170809 03:21:21.701">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:20.973" status="PASS" endtime="20170809 03:21:21.701"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:21.703">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:21.702" status="PASS" endtime="20170809 03:21:21.703"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:21.704">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:21.704" status="PASS" endtime="20170809 03:21:21.704"></status>
</kw>
<status starttime="20170809 03:21:21.703" status="PASS" endtime="20170809 03:21:21.704"></status>
</kw>
<status starttime="20170809 03:21:21.702" status="PASS" endtime="20170809 03:21:21.704"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:21.704">Delete All Sessions</msg>
<status starttime="20170809 03:21:21.704" status="PASS" endtime="20170809 03:21:21.705"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:21.705">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:20.640" status="PASS" endtime="20170809 03:21:21.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:21.706">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:21.705" status="PASS" endtime="20170809 03:21:21.706"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:21.706">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:21.706">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:21.706">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status starttime="20170809 03:21:21.706" status="PASS" endtime="20170809 03:21:21.706"></status>
</kw>
<status starttime="20170809 03:21:20.639" status="PASS" endtime="20170809 03:21:21.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170809 03:21:21.707" status="PASS" endtime="20170809 03:21:21.707"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:21.712">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:21.711" status="PASS" endtime="20170809 03:21:21.713"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:21.713">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:21.713" status="PASS" endtime="20170809 03:21:21.713"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:21.714">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:21.713" status="PASS" endtime="20170809 03:21:21.714"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:21.714">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:21.714" status="PASS" endtime="20170809 03:21:21.714"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:23.169">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:21.715" status="PASS" endtime="20170809 03:21:23.169"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:23.169">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:23.169">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:21.715" status="PASS" endtime="20170809 03:21:23.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:23.170">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:23.170" status="PASS" endtime="20170809 03:21:23.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:23.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:23.170" status="PASS" endtime="20170809 03:21:23.171"></status>
</kw>
<status starttime="20170809 03:21:21.711" status="PASS" endtime="20170809 03:21:23.171"></status>
</kw>
<status starttime="20170809 03:21:21.711" status="PASS" endtime="20170809 03:21:23.171"></status>
</kw>
<status starttime="20170809 03:21:21.710" status="PASS" endtime="20170809 03:21:23.171"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:23.172">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:21:23.171" status="PASS" endtime="20170809 03:21:23.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:23.174">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:23.173" status="PASS" endtime="20170809 03:21:23.174"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:23.175">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:23.175" status="PASS" endtime="20170809 03:21:23.175"></status>
</kw>
<status starttime="20170809 03:21:23.174" status="PASS" endtime="20170809 03:21:23.175"></status>
</kw>
<status starttime="20170809 03:21:23.172" status="PASS" endtime="20170809 03:21:23.175"></status>
</kw>
<status starttime="20170809 03:21:23.172" status="PASS" endtime="20170809 03:21:23.175"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:26.550">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:21:26.550">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:23.175" status="PASS" endtime="20170809 03:21:26.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:26.552">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:26.552" status="PASS" endtime="20170809 03:21:26.552"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:26.553">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:26.553" status="PASS" endtime="20170809 03:21:26.553"></status>
</kw>
<status starttime="20170809 03:21:26.552" status="PASS" endtime="20170809 03:21:26.553"></status>
</kw>
<status starttime="20170809 03:21:26.551" status="PASS" endtime="20170809 03:21:26.553"></status>
</kw>
<status starttime="20170809 03:21:26.550" status="PASS" endtime="20170809 03:21:26.553"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:26.554">Delete All Sessions</msg>
<status starttime="20170809 03:21:26.554" status="PASS" endtime="20170809 03:21:26.554"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:26.554">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:21.709" status="PASS" endtime="20170809 03:21:26.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:26.555">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:26.554" status="PASS" endtime="20170809 03:21:26.555"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:26.555">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:26.555">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:26.555">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status starttime="20170809 03:21:26.555" status="PASS" endtime="20170809 03:21:26.556"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:26.556">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 03:21:21.709" status="PASS" endtime="20170809 03:21:26.556"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:26.556">${power_state} = Off</msg>
<status starttime="20170809 03:21:21.708" status="PASS" endtime="20170809 03:21:26.556"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:21:26.557">On != Off</msg>
<status starttime="20170809 03:21:26.556" status="FAIL" endtime="20170809 03:21:26.557"></status>
</kw>
<status starttime="20170809 03:21:21.708" status="FAIL" endtime="20170809 03:21:26.557"></status>
</kw>
<status starttime="20170809 03:21:21.708" status="FAIL" endtime="20170809 03:21:26.557"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:36.563">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:36.563" status="PASS" endtime="20170809 03:21:36.564"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:36.564">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:36.564" status="PASS" endtime="20170809 03:21:36.564"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:36.565">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:36.564" status="PASS" endtime="20170809 03:21:36.565"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:36.565">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:36.565" status="PASS" endtime="20170809 03:21:36.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:37.128">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:36.566" status="PASS" endtime="20170809 03:21:37.128"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:37.129">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:37.129">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:36.566" status="PASS" endtime="20170809 03:21:37.129"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:37.129">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:37.129" status="PASS" endtime="20170809 03:21:37.129"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:37.130">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:37.130" status="PASS" endtime="20170809 03:21:37.130"></status>
</kw>
<status starttime="20170809 03:21:36.562" status="PASS" endtime="20170809 03:21:37.130"></status>
</kw>
<status starttime="20170809 03:21:36.562" status="PASS" endtime="20170809 03:21:37.130"></status>
</kw>
<status starttime="20170809 03:21:36.561" status="PASS" endtime="20170809 03:21:37.130"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:37.131">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:21:37.131" status="PASS" endtime="20170809 03:21:37.131"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:37.133">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:37.132" status="PASS" endtime="20170809 03:21:37.133"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:37.134">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:37.134" status="PASS" endtime="20170809 03:21:37.134"></status>
</kw>
<status starttime="20170809 03:21:37.134" status="PASS" endtime="20170809 03:21:37.135"></status>
</kw>
<status starttime="20170809 03:21:37.132" status="PASS" endtime="20170809 03:21:37.135"></status>
</kw>
<status starttime="20170809 03:21:37.131" status="PASS" endtime="20170809 03:21:37.135"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:37.458">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:21:37.458">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:37.135" status="PASS" endtime="20170809 03:21:37.458"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:37.460">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:37.460" status="PASS" endtime="20170809 03:21:37.460"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:37.461">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:37.461" status="PASS" endtime="20170809 03:21:37.462"></status>
</kw>
<status starttime="20170809 03:21:37.461" status="PASS" endtime="20170809 03:21:37.462"></status>
</kw>
<status starttime="20170809 03:21:37.459" status="PASS" endtime="20170809 03:21:37.462"></status>
</kw>
<status starttime="20170809 03:21:37.459" status="PASS" endtime="20170809 03:21:37.462"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:37.462">Delete All Sessions</msg>
<status starttime="20170809 03:21:37.462" status="PASS" endtime="20170809 03:21:37.462"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:37.462">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:36.560" status="PASS" endtime="20170809 03:21:37.463"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:37.463">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:37.463" status="PASS" endtime="20170809 03:21:37.463"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:37.464">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:37.464">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:37.464">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:21:37.463" status="PASS" endtime="20170809 03:21:37.464"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:37.464">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:21:36.560" status="PASS" endtime="20170809 03:21:37.464"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:37.465">${power_state} = On</msg>
<status starttime="20170809 03:21:36.559" status="PASS" endtime="20170809 03:21:37.465"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:21:37.465" status="PASS" endtime="20170809 03:21:37.465"></status>
</kw>
<status starttime="20170809 03:21:36.559" status="PASS" endtime="20170809 03:21:37.465"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:37.469">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:37.468" status="PASS" endtime="20170809 03:21:37.469"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:37.470">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:37.469" status="PASS" endtime="20170809 03:21:37.470"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:37.470">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:37.470" status="PASS" endtime="20170809 03:21:37.470"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:37.471">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:37.471" status="PASS" endtime="20170809 03:21:37.471"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:37.849">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:37.472" status="PASS" endtime="20170809 03:21:37.849"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:37.849">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:37.849">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:37.471" status="PASS" endtime="20170809 03:21:37.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:37.850">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:37.850" status="PASS" endtime="20170809 03:21:37.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:37.851">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:37.850" status="PASS" endtime="20170809 03:21:37.851"></status>
</kw>
<status starttime="20170809 03:21:37.468" status="PASS" endtime="20170809 03:21:37.851"></status>
</kw>
<status starttime="20170809 03:21:37.467" status="PASS" endtime="20170809 03:21:37.851"></status>
</kw>
<status starttime="20170809 03:21:37.467" status="PASS" endtime="20170809 03:21:37.851"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:37.852">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:21:37.851" status="PASS" endtime="20170809 03:21:37.852"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:37.854">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:37.853" status="PASS" endtime="20170809 03:21:37.854"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:37.855">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:37.855" status="PASS" endtime="20170809 03:21:37.855"></status>
</kw>
<status starttime="20170809 03:21:37.854" status="PASS" endtime="20170809 03:21:37.855"></status>
</kw>
<status starttime="20170809 03:21:37.853" status="PASS" endtime="20170809 03:21:37.855"></status>
</kw>
<status starttime="20170809 03:21:37.852" status="PASS" endtime="20170809 03:21:37.855"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:38.081">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:21:38.081">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:37.855" status="PASS" endtime="20170809 03:21:38.081"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:38.083">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:38.083" status="PASS" endtime="20170809 03:21:38.083"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:38.084">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:38.084" status="PASS" endtime="20170809 03:21:38.084"></status>
</kw>
<status starttime="20170809 03:21:38.083" status="PASS" endtime="20170809 03:21:38.084"></status>
</kw>
<status starttime="20170809 03:21:38.082" status="PASS" endtime="20170809 03:21:38.085"></status>
</kw>
<status starttime="20170809 03:21:38.082" status="PASS" endtime="20170809 03:21:38.085"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:38.085">Delete All Sessions</msg>
<status starttime="20170809 03:21:38.085" status="PASS" endtime="20170809 03:21:38.085"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:38.085">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:37.466" status="PASS" endtime="20170809 03:21:38.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:38.086">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:38.086" status="PASS" endtime="20170809 03:21:38.086"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:38.086">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:38.087">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:38.087">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:21:38.086" status="PASS" endtime="20170809 03:21:38.087"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:38.087">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:21:37.466" status="PASS" endtime="20170809 03:21:38.087"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:38.087">${host_state} = Running</msg>
<status starttime="20170809 03:21:37.465" status="PASS" endtime="20170809 03:21:38.087"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:21:38.088" status="PASS" endtime="20170809 03:21:38.088"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:38.092">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:38.092" status="PASS" endtime="20170809 03:21:38.093"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:38.093">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:38.093" status="PASS" endtime="20170809 03:21:38.093"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:38.094">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:38.093" status="PASS" endtime="20170809 03:21:38.094"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:38.094">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:38.094" status="PASS" endtime="20170809 03:21:38.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:38.349">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:38.095" status="PASS" endtime="20170809 03:21:38.349"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:38.349">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:38.349">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:38.095" status="PASS" endtime="20170809 03:21:38.349"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:38.350">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:38.349" status="PASS" endtime="20170809 03:21:38.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:38.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:38.350" status="PASS" endtime="20170809 03:21:38.351"></status>
</kw>
<status starttime="20170809 03:21:38.091" status="PASS" endtime="20170809 03:21:38.351"></status>
</kw>
<status starttime="20170809 03:21:38.090" status="PASS" endtime="20170809 03:21:38.351"></status>
</kw>
<status starttime="20170809 03:21:38.090" status="PASS" endtime="20170809 03:21:38.351"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:38.351">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:21:38.351" status="PASS" endtime="20170809 03:21:38.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:38.353">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:21:38.353" status="PASS" endtime="20170809 03:21:38.354"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:38.354">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:21:38.354" status="PASS" endtime="20170809 03:21:38.355"></status>
</kw>
<status starttime="20170809 03:21:38.354" status="PASS" endtime="20170809 03:21:38.355"></status>
</kw>
<status starttime="20170809 03:21:38.352" status="PASS" endtime="20170809 03:21:38.355"></status>
</kw>
<status starttime="20170809 03:21:38.352" status="PASS" endtime="20170809 03:21:38.355"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:38.420">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:21:38.420">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:38.355" status="PASS" endtime="20170809 03:21:38.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:38.422">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:38.422" status="PASS" endtime="20170809 03:21:38.422"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:38.427">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:38.423" status="PASS" endtime="20170809 03:21:38.427"></status>
</kw>
<status starttime="20170809 03:21:38.422" status="PASS" endtime="20170809 03:21:38.427"></status>
</kw>
<status starttime="20170809 03:21:38.421" status="PASS" endtime="20170809 03:21:38.428"></status>
</kw>
<status starttime="20170809 03:21:38.421" status="PASS" endtime="20170809 03:21:38.428"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:38.428">Delete All Sessions</msg>
<status starttime="20170809 03:21:38.428" status="PASS" endtime="20170809 03:21:38.428"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:38.428">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:38.089" status="PASS" endtime="20170809 03:21:38.428"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:38.429">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:38.429" status="PASS" endtime="20170809 03:21:38.429"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:38.430">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:38.430">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:38.430">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170809 03:21:38.429" status="PASS" endtime="20170809 03:21:38.430"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:38.430">${state} = Off</msg>
<status starttime="20170809 03:21:38.089" status="PASS" endtime="20170809 03:21:38.430"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:38.430">${boot_progress} = Off</msg>
<status starttime="20170809 03:21:38.088" status="PASS" endtime="20170809 03:21:38.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:21:38.431">Off != FW Progress, Starting OS</msg>
<status starttime="20170809 03:21:38.431" status="FAIL" endtime="20170809 03:21:38.431"></status>
</kw>
<status starttime="20170809 03:21:38.088" status="FAIL" endtime="20170809 03:21:38.431"></status>
</kw>
<status starttime="20170809 03:21:36.558" status="FAIL" endtime="20170809 03:21:38.431"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:48.436">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:48.436" status="PASS" endtime="20170809 03:21:48.437"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.437">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:48.437" status="PASS" endtime="20170809 03:21:48.437"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.438">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:48.438" status="PASS" endtime="20170809 03:21:48.438"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.439">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:48.438" status="PASS" endtime="20170809 03:21:48.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:48.654">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:48.439" status="PASS" endtime="20170809 03:21:48.654"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:48.654">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:48.654">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:48.439" status="PASS" endtime="20170809 03:21:48.654"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:48.655">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:48.654" status="PASS" endtime="20170809 03:21:48.655"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:48.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:48.655" status="PASS" endtime="20170809 03:21:48.656"></status>
</kw>
<status starttime="20170809 03:21:48.436" status="PASS" endtime="20170809 03:21:48.656"></status>
</kw>
<status starttime="20170809 03:21:48.435" status="PASS" endtime="20170809 03:21:48.656"></status>
</kw>
<status starttime="20170809 03:21:48.435" status="PASS" endtime="20170809 03:21:48.656"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.657">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:21:48.656" status="PASS" endtime="20170809 03:21:48.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.659">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:48.658" status="PASS" endtime="20170809 03:21:48.659"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:48.660">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:48.660" status="PASS" endtime="20170809 03:21:48.660"></status>
</kw>
<status starttime="20170809 03:21:48.659" status="PASS" endtime="20170809 03:21:48.660"></status>
</kw>
<status starttime="20170809 03:21:48.658" status="PASS" endtime="20170809 03:21:48.660"></status>
</kw>
<status starttime="20170809 03:21:48.657" status="PASS" endtime="20170809 03:21:48.660"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.731">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:21:48.731">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:48.660" status="PASS" endtime="20170809 03:21:48.731"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.733">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:48.733" status="PASS" endtime="20170809 03:21:48.733"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:48.734">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:48.734" status="PASS" endtime="20170809 03:21:48.734"></status>
</kw>
<status starttime="20170809 03:21:48.733" status="PASS" endtime="20170809 03:21:48.734"></status>
</kw>
<status starttime="20170809 03:21:48.732" status="PASS" endtime="20170809 03:21:48.734"></status>
</kw>
<status starttime="20170809 03:21:48.732" status="PASS" endtime="20170809 03:21:48.734"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:48.735">Delete All Sessions</msg>
<status starttime="20170809 03:21:48.735" status="PASS" endtime="20170809 03:21:48.735"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:48.735">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:48.434" status="PASS" endtime="20170809 03:21:48.735"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:48.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:48.735" status="PASS" endtime="20170809 03:21:48.736"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.736">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:48.736">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:48.737">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:21:48.736" status="PASS" endtime="20170809 03:21:48.737"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:48.737">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:21:48.433" status="PASS" endtime="20170809 03:21:48.737"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:48.737">${power_state} = On</msg>
<status starttime="20170809 03:21:48.433" status="PASS" endtime="20170809 03:21:48.737"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:21:48.737" status="PASS" endtime="20170809 03:21:48.738"></status>
</kw>
<status starttime="20170809 03:21:48.433" status="PASS" endtime="20170809 03:21:48.738"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:48.741">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:48.741" status="PASS" endtime="20170809 03:21:48.742"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.743">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:48.742" status="PASS" endtime="20170809 03:21:48.743"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.743">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:48.743" status="PASS" endtime="20170809 03:21:48.743"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.744">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:48.744" status="PASS" endtime="20170809 03:21:48.744"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:48.942">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:48.745" status="PASS" endtime="20170809 03:21:48.942"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:48.942">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:48.942">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:48.744" status="PASS" endtime="20170809 03:21:48.942"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:48.943">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:48.943" status="PASS" endtime="20170809 03:21:48.943"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:48.944">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:48.943" status="PASS" endtime="20170809 03:21:48.944"></status>
</kw>
<status starttime="20170809 03:21:48.741" status="PASS" endtime="20170809 03:21:48.944"></status>
</kw>
<status starttime="20170809 03:21:48.740" status="PASS" endtime="20170809 03:21:48.944"></status>
</kw>
<status starttime="20170809 03:21:48.740" status="PASS" endtime="20170809 03:21:48.944"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.945">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:21:48.944" status="PASS" endtime="20170809 03:21:48.945"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:48.947">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:48.946" status="PASS" endtime="20170809 03:21:48.947"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:48.948">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:48.947" status="PASS" endtime="20170809 03:21:48.948"></status>
</kw>
<status starttime="20170809 03:21:48.947" status="PASS" endtime="20170809 03:21:48.948"></status>
</kw>
<status starttime="20170809 03:21:48.945" status="PASS" endtime="20170809 03:21:48.948"></status>
</kw>
<status starttime="20170809 03:21:48.945" status="PASS" endtime="20170809 03:21:48.948"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:49.046">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:21:49.046">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:48.948" status="PASS" endtime="20170809 03:21:49.046"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:49.048">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:49.047" status="PASS" endtime="20170809 03:21:49.048"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:49.049">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:49.048" status="PASS" endtime="20170809 03:21:49.049"></status>
</kw>
<status starttime="20170809 03:21:49.048" status="PASS" endtime="20170809 03:21:49.049"></status>
</kw>
<status starttime="20170809 03:21:49.047" status="PASS" endtime="20170809 03:21:49.049"></status>
</kw>
<status starttime="20170809 03:21:49.046" status="PASS" endtime="20170809 03:21:49.049"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:49.049">Delete All Sessions</msg>
<status starttime="20170809 03:21:49.049" status="PASS" endtime="20170809 03:21:49.050"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:49.050">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:48.739" status="PASS" endtime="20170809 03:21:49.050"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:49.050">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:49.050" status="PASS" endtime="20170809 03:21:49.050"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:49.051">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:49.051">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:49.051">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:21:49.051" status="PASS" endtime="20170809 03:21:49.051"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:49.051">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:21:48.738" status="PASS" endtime="20170809 03:21:49.051"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:49.052">${host_state} = Running</msg>
<status starttime="20170809 03:21:48.738" status="PASS" endtime="20170809 03:21:49.052"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:21:49.052" status="PASS" endtime="20170809 03:21:49.052"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:49.058">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:49.057" status="PASS" endtime="20170809 03:21:49.058"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:49.059">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:49.058" status="PASS" endtime="20170809 03:21:49.059"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:49.060">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:49.059" status="PASS" endtime="20170809 03:21:49.060"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:49.061">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:49.060" status="PASS" endtime="20170809 03:21:49.061"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:49.330">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:49.062" status="PASS" endtime="20170809 03:21:49.331"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:49.331">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:49.331">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:49.061" status="PASS" endtime="20170809 03:21:49.331"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:49.332">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:49.331" status="PASS" endtime="20170809 03:21:49.332"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:49.332">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:49.332" status="PASS" endtime="20170809 03:21:49.332"></status>
</kw>
<status starttime="20170809 03:21:49.056" status="PASS" endtime="20170809 03:21:49.332"></status>
</kw>
<status starttime="20170809 03:21:49.056" status="PASS" endtime="20170809 03:21:49.332"></status>
</kw>
<status starttime="20170809 03:21:49.055" status="PASS" endtime="20170809 03:21:49.333"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:49.333">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:21:49.333" status="PASS" endtime="20170809 03:21:49.333"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:49.335">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:21:49.335" status="PASS" endtime="20170809 03:21:49.335"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:49.336">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:21:49.336" status="PASS" endtime="20170809 03:21:49.336"></status>
</kw>
<status starttime="20170809 03:21:49.335" status="PASS" endtime="20170809 03:21:49.336"></status>
</kw>
<status starttime="20170809 03:21:49.334" status="PASS" endtime="20170809 03:21:49.336"></status>
</kw>
<status starttime="20170809 03:21:49.333" status="PASS" endtime="20170809 03:21:49.337"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:49.489">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:21:49.489">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:49.337" status="PASS" endtime="20170809 03:21:49.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:49.491">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:49.491" status="PASS" endtime="20170809 03:21:49.491"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:49.492">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:49.492" status="PASS" endtime="20170809 03:21:49.492"></status>
</kw>
<status starttime="20170809 03:21:49.491" status="PASS" endtime="20170809 03:21:49.492"></status>
</kw>
<status starttime="20170809 03:21:49.490" status="PASS" endtime="20170809 03:21:49.492"></status>
</kw>
<status starttime="20170809 03:21:49.490" status="PASS" endtime="20170809 03:21:49.493"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:49.493">Delete All Sessions</msg>
<status starttime="20170809 03:21:49.493" status="PASS" endtime="20170809 03:21:49.493"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:49.493">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:49.054" status="PASS" endtime="20170809 03:21:49.493"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:49.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:49.493" status="PASS" endtime="20170809 03:21:49.494"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:49.494">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:49.494">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:49.495">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:21:49.494" status="PASS" endtime="20170809 03:21:49.495"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:49.495">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:21:49.053" status="PASS" endtime="20170809 03:21:49.495"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:49.495">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:21:49.053" status="PASS" endtime="20170809 03:21:49.495"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:21:49.496">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:21:49.495" status="FAIL" endtime="20170809 03:21:49.496"></status>
</kw>
<status starttime="20170809 03:21:49.053" status="FAIL" endtime="20170809 03:21:49.496"></status>
</kw>
<status starttime="20170809 03:21:48.432" status="FAIL" endtime="20170809 03:21:49.496"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:59.501">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:59.501" status="PASS" endtime="20170809 03:21:59.501"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.502">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:59.502" status="PASS" endtime="20170809 03:21:59.502"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.503">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:59.502" status="PASS" endtime="20170809 03:21:59.503"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.503">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:59.503" status="PASS" endtime="20170809 03:21:59.503"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:59.710">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:59.504" status="PASS" endtime="20170809 03:21:59.711"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:59.711">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:59.711">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:59.504" status="PASS" endtime="20170809 03:21:59.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:59.711">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:59.711" status="PASS" endtime="20170809 03:21:59.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:59.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:59.712" status="PASS" endtime="20170809 03:21:59.712"></status>
</kw>
<status starttime="20170809 03:21:59.500" status="PASS" endtime="20170809 03:21:59.712"></status>
</kw>
<status starttime="20170809 03:21:59.500" status="PASS" endtime="20170809 03:21:59.712"></status>
</kw>
<status starttime="20170809 03:21:59.499" status="PASS" endtime="20170809 03:21:59.713"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.713">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:21:59.713" status="PASS" endtime="20170809 03:21:59.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.715">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:59.714" status="PASS" endtime="20170809 03:21:59.715"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:59.716">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:59.716" status="PASS" endtime="20170809 03:21:59.716"></status>
</kw>
<status starttime="20170809 03:21:59.715" status="PASS" endtime="20170809 03:21:59.716"></status>
</kw>
<status starttime="20170809 03:21:59.714" status="PASS" endtime="20170809 03:21:59.716"></status>
</kw>
<status starttime="20170809 03:21:59.713" status="PASS" endtime="20170809 03:21:59.717"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.780">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:21:59.780">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:59.717" status="PASS" endtime="20170809 03:21:59.781"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.782">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:59.782" status="PASS" endtime="20170809 03:21:59.782"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:59.783">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:21:59.783" status="PASS" endtime="20170809 03:21:59.783"></status>
</kw>
<status starttime="20170809 03:21:59.782" status="PASS" endtime="20170809 03:21:59.783"></status>
</kw>
<status starttime="20170809 03:21:59.781" status="PASS" endtime="20170809 03:21:59.784"></status>
</kw>
<status starttime="20170809 03:21:59.781" status="PASS" endtime="20170809 03:21:59.784"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:21:59.784">Delete All Sessions</msg>
<status starttime="20170809 03:21:59.784" status="PASS" endtime="20170809 03:21:59.784"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:59.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:59.498" status="PASS" endtime="20170809 03:21:59.784"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:59.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:59.785" status="PASS" endtime="20170809 03:21:59.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.785">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:21:59.785">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:21:59.786">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:21:59.785" status="PASS" endtime="20170809 03:21:59.786"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:59.786">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:21:59.498" status="PASS" endtime="20170809 03:21:59.786"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:59.786">${power_state} = On</msg>
<status starttime="20170809 03:21:59.497" status="PASS" endtime="20170809 03:21:59.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:21:59.786" status="PASS" endtime="20170809 03:21:59.787"></status>
</kw>
<status starttime="20170809 03:21:59.497" status="PASS" endtime="20170809 03:21:59.787"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:59.790">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:21:59.790" status="PASS" endtime="20170809 03:21:59.791"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.792">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:21:59.791" status="PASS" endtime="20170809 03:21:59.792"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.792">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:21:59.792" status="PASS" endtime="20170809 03:21:59.792"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.793">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:21:59.793" status="PASS" endtime="20170809 03:21:59.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:59.993">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:21:59.794" status="PASS" endtime="20170809 03:21:59.993"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:21:59.993">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:21:59.993">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:59.793" status="PASS" endtime="20170809 03:21:59.993"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:59.994">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:59.994" status="PASS" endtime="20170809 03:21:59.994"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:59.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:21:59.994" status="PASS" endtime="20170809 03:21:59.995"></status>
</kw>
<status starttime="20170809 03:21:59.790" status="PASS" endtime="20170809 03:21:59.995"></status>
</kw>
<status starttime="20170809 03:21:59.789" status="PASS" endtime="20170809 03:21:59.995"></status>
</kw>
<status starttime="20170809 03:21:59.789" status="PASS" endtime="20170809 03:21:59.995"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.996">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:21:59.995" status="PASS" endtime="20170809 03:21:59.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:21:59.998">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:59.997" status="PASS" endtime="20170809 03:21:59.998"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:21:59.999">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:21:59.998" status="PASS" endtime="20170809 03:21:59.999"></status>
</kw>
<status starttime="20170809 03:21:59.998" status="PASS" endtime="20170809 03:21:59.999"></status>
</kw>
<status starttime="20170809 03:21:59.996" status="PASS" endtime="20170809 03:21:59.999"></status>
</kw>
<status starttime="20170809 03:21:59.996" status="PASS" endtime="20170809 03:21:59.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:00.089">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:00.089">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:59.999" status="PASS" endtime="20170809 03:22:00.089"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:00.091">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:00.090" status="PASS" endtime="20170809 03:22:00.091"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:00.092">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:00.091" status="PASS" endtime="20170809 03:22:00.092"></status>
</kw>
<status starttime="20170809 03:22:00.091" status="PASS" endtime="20170809 03:22:00.092"></status>
</kw>
<status starttime="20170809 03:22:00.090" status="PASS" endtime="20170809 03:22:00.092"></status>
</kw>
<status starttime="20170809 03:22:00.089" status="PASS" endtime="20170809 03:22:00.092"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:00.093">Delete All Sessions</msg>
<status starttime="20170809 03:22:00.092" status="PASS" endtime="20170809 03:22:00.093"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:00.093">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:21:59.788" status="PASS" endtime="20170809 03:22:00.093"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:00.093">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:00.093" status="PASS" endtime="20170809 03:22:00.093"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:00.094">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:00.094">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:00.094">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:22:00.094" status="PASS" endtime="20170809 03:22:00.094"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:00.095">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:21:59.787" status="PASS" endtime="20170809 03:22:00.095"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:00.095">${host_state} = Running</msg>
<status starttime="20170809 03:21:59.787" status="PASS" endtime="20170809 03:22:00.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:22:00.095" status="PASS" endtime="20170809 03:22:00.095"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:00.100">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:00.099" status="PASS" endtime="20170809 03:22:00.100"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:00.100">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:00.100" status="PASS" endtime="20170809 03:22:00.101"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:00.101">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:00.101" status="PASS" endtime="20170809 03:22:00.101"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:00.102">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:00.101" status="PASS" endtime="20170809 03:22:00.102"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:00.307">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:00.102" status="PASS" endtime="20170809 03:22:00.307"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:00.307">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:00.307">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:00.102" status="PASS" endtime="20170809 03:22:00.307"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:00.307">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:00.307" status="PASS" endtime="20170809 03:22:00.308"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:00.308">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:00.308" status="PASS" endtime="20170809 03:22:00.308"></status>
</kw>
<status starttime="20170809 03:22:00.099" status="PASS" endtime="20170809 03:22:00.308"></status>
</kw>
<status starttime="20170809 03:22:00.098" status="PASS" endtime="20170809 03:22:00.308"></status>
</kw>
<status starttime="20170809 03:22:00.098" status="PASS" endtime="20170809 03:22:00.309"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:00.309">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:22:00.309" status="PASS" endtime="20170809 03:22:00.309"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:00.311">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:22:00.311" status="PASS" endtime="20170809 03:22:00.311"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:00.312">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:22:00.312" status="PASS" endtime="20170809 03:22:00.312"></status>
</kw>
<status starttime="20170809 03:22:00.312" status="PASS" endtime="20170809 03:22:00.312"></status>
</kw>
<status starttime="20170809 03:22:00.310" status="PASS" endtime="20170809 03:22:00.313"></status>
</kw>
<status starttime="20170809 03:22:00.310" status="PASS" endtime="20170809 03:22:00.313"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:00.379">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:00.379">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:00.313" status="PASS" endtime="20170809 03:22:00.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:00.382">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:00.381" status="PASS" endtime="20170809 03:22:00.382"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:00.382">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:00.382" status="PASS" endtime="20170809 03:22:00.383"></status>
</kw>
<status starttime="20170809 03:22:00.382" status="PASS" endtime="20170809 03:22:00.383"></status>
</kw>
<status starttime="20170809 03:22:00.381" status="PASS" endtime="20170809 03:22:00.383"></status>
</kw>
<status starttime="20170809 03:22:00.380" status="PASS" endtime="20170809 03:22:00.383"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:00.383">Delete All Sessions</msg>
<status starttime="20170809 03:22:00.383" status="PASS" endtime="20170809 03:22:00.383"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:00.384">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:00.097" status="PASS" endtime="20170809 03:22:00.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:00.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:00.384" status="PASS" endtime="20170809 03:22:00.384"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:00.385">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:00.385">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:00.385">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:22:00.384" status="PASS" endtime="20170809 03:22:00.385"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:00.385">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:22:00.096" status="PASS" endtime="20170809 03:22:00.385"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:00.385">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:22:00.096" status="PASS" endtime="20170809 03:22:00.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:22:00.386">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:22:00.386" status="FAIL" endtime="20170809 03:22:00.386"></status>
</kw>
<status starttime="20170809 03:22:00.096" status="FAIL" endtime="20170809 03:22:00.386"></status>
</kw>
<status starttime="20170809 03:21:59.497" status="FAIL" endtime="20170809 03:22:00.386"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.392">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:10.392" status="PASS" endtime="20170809 03:22:10.393"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.394">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:10.393" status="PASS" endtime="20170809 03:22:10.394"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.394">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:10.394" status="PASS" endtime="20170809 03:22:10.394"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.395">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:10.395" status="PASS" endtime="20170809 03:22:10.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.598">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:10.396" status="PASS" endtime="20170809 03:22:10.598"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:10.598">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:10.598">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:10.395" status="PASS" endtime="20170809 03:22:10.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.599">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:10.598" status="PASS" endtime="20170809 03:22:10.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.600">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:10.599" status="PASS" endtime="20170809 03:22:10.600"></status>
</kw>
<status starttime="20170809 03:22:10.391" status="PASS" endtime="20170809 03:22:10.600"></status>
</kw>
<status starttime="20170809 03:22:10.390" status="PASS" endtime="20170809 03:22:10.600"></status>
</kw>
<status starttime="20170809 03:22:10.390" status="PASS" endtime="20170809 03:22:10.600"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.601">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:22:10.600" status="PASS" endtime="20170809 03:22:10.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.603">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:10.602" status="PASS" endtime="20170809 03:22:10.603"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.604">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:10.604" status="PASS" endtime="20170809 03:22:10.604"></status>
</kw>
<status starttime="20170809 03:22:10.603" status="PASS" endtime="20170809 03:22:10.604"></status>
</kw>
<status starttime="20170809 03:22:10.601" status="PASS" endtime="20170809 03:22:10.604"></status>
</kw>
<status starttime="20170809 03:22:10.601" status="PASS" endtime="20170809 03:22:10.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.670">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:10.670">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:10.605" status="PASS" endtime="20170809 03:22:10.670"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.672">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:10.671" status="PASS" endtime="20170809 03:22:10.672"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.673">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:10.673" status="PASS" endtime="20170809 03:22:10.673"></status>
</kw>
<status starttime="20170809 03:22:10.672" status="PASS" endtime="20170809 03:22:10.673"></status>
</kw>
<status starttime="20170809 03:22:10.671" status="PASS" endtime="20170809 03:22:10.673"></status>
</kw>
<status starttime="20170809 03:22:10.670" status="PASS" endtime="20170809 03:22:10.673"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:10.674">Delete All Sessions</msg>
<status starttime="20170809 03:22:10.674" status="PASS" endtime="20170809 03:22:10.674"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:10.674">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:10.389" status="PASS" endtime="20170809 03:22:10.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.675">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:10.674" status="PASS" endtime="20170809 03:22:10.675"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.675">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:10.675">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:10.675">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:22:10.675" status="PASS" endtime="20170809 03:22:10.675"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:10.676">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:22:10.389" status="PASS" endtime="20170809 03:22:10.676"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:10.676">${power_state} = On</msg>
<status starttime="20170809 03:22:10.388" status="PASS" endtime="20170809 03:22:10.676"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:22:10.676" status="PASS" endtime="20170809 03:22:10.677"></status>
</kw>
<status starttime="20170809 03:22:10.388" status="PASS" endtime="20170809 03:22:10.677"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.680">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:10.680" status="PASS" endtime="20170809 03:22:10.681"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:10.681" status="PASS" endtime="20170809 03:22:10.682"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.682">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:10.682" status="PASS" endtime="20170809 03:22:10.682"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.683">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:10.682" status="PASS" endtime="20170809 03:22:10.683"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.861">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:10.684" status="PASS" endtime="20170809 03:22:10.861"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:10.861">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:10.861">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:10.683" status="PASS" endtime="20170809 03:22:10.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.862">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:10.862" status="PASS" endtime="20170809 03:22:10.862"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.863">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:10.862" status="PASS" endtime="20170809 03:22:10.863"></status>
</kw>
<status starttime="20170809 03:22:10.679" status="PASS" endtime="20170809 03:22:10.863"></status>
</kw>
<status starttime="20170809 03:22:10.679" status="PASS" endtime="20170809 03:22:10.863"></status>
</kw>
<status starttime="20170809 03:22:10.678" status="PASS" endtime="20170809 03:22:10.863"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.864">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:22:10.863" status="PASS" endtime="20170809 03:22:10.864"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.866">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:10.865" status="PASS" endtime="20170809 03:22:10.866"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.867">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:10.867" status="PASS" endtime="20170809 03:22:10.867"></status>
</kw>
<status starttime="20170809 03:22:10.866" status="PASS" endtime="20170809 03:22:10.867"></status>
</kw>
<status starttime="20170809 03:22:10.865" status="PASS" endtime="20170809 03:22:10.867"></status>
</kw>
<status starttime="20170809 03:22:10.864" status="PASS" endtime="20170809 03:22:10.867"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.969">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:10.969">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:10.868" status="PASS" endtime="20170809 03:22:10.969"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.971">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:10.970" status="PASS" endtime="20170809 03:22:10.971"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.972">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:10.972" status="PASS" endtime="20170809 03:22:10.972"></status>
</kw>
<status starttime="20170809 03:22:10.971" status="PASS" endtime="20170809 03:22:10.972"></status>
</kw>
<status starttime="20170809 03:22:10.970" status="PASS" endtime="20170809 03:22:10.972"></status>
</kw>
<status starttime="20170809 03:22:10.969" status="PASS" endtime="20170809 03:22:10.972"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:10.973">Delete All Sessions</msg>
<status starttime="20170809 03:22:10.973" status="PASS" endtime="20170809 03:22:10.973"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:10.973">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:10.678" status="PASS" endtime="20170809 03:22:10.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.974">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:10.973" status="PASS" endtime="20170809 03:22:10.974"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.974">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:10.974">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:10.974">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:22:10.974" status="PASS" endtime="20170809 03:22:10.974"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:10.975">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:22:10.677" status="PASS" endtime="20170809 03:22:10.975"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:10.975">${host_state} = Running</msg>
<status starttime="20170809 03:22:10.677" status="PASS" endtime="20170809 03:22:10.975"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:22:10.975" status="PASS" endtime="20170809 03:22:10.976"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:10.980">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:10.980" status="PASS" endtime="20170809 03:22:10.981"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.981">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:10.981" status="PASS" endtime="20170809 03:22:10.982"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.982">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:10.982" status="PASS" endtime="20170809 03:22:10.982"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:10.984">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:10.982" status="PASS" endtime="20170809 03:22:10.984"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:11.189">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:10.985" status="PASS" endtime="20170809 03:22:11.189"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:11.189">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:11.189">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:10.984" status="PASS" endtime="20170809 03:22:11.189"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:11.190">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:11.190" status="PASS" endtime="20170809 03:22:11.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:11.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:11.190" status="PASS" endtime="20170809 03:22:11.191"></status>
</kw>
<status starttime="20170809 03:22:10.979" status="PASS" endtime="20170809 03:22:11.191"></status>
</kw>
<status starttime="20170809 03:22:10.979" status="PASS" endtime="20170809 03:22:11.191"></status>
</kw>
<status starttime="20170809 03:22:10.978" status="PASS" endtime="20170809 03:22:11.191"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:11.192">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:22:11.191" status="PASS" endtime="20170809 03:22:11.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:11.195">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:22:11.194" status="PASS" endtime="20170809 03:22:11.195"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:11.203">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:22:11.198" status="PASS" endtime="20170809 03:22:11.203"></status>
</kw>
<status starttime="20170809 03:22:11.195" status="PASS" endtime="20170809 03:22:11.203"></status>
</kw>
<status starttime="20170809 03:22:11.193" status="PASS" endtime="20170809 03:22:11.203"></status>
</kw>
<status starttime="20170809 03:22:11.192" status="PASS" endtime="20170809 03:22:11.203"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:11.290">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:11.290">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:11.204" status="PASS" endtime="20170809 03:22:11.290"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:11.293">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:11.292" status="PASS" endtime="20170809 03:22:11.293"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:11.293">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:11.293" status="PASS" endtime="20170809 03:22:11.294"></status>
</kw>
<status starttime="20170809 03:22:11.293" status="PASS" endtime="20170809 03:22:11.294"></status>
</kw>
<status starttime="20170809 03:22:11.292" status="PASS" endtime="20170809 03:22:11.294"></status>
</kw>
<status starttime="20170809 03:22:11.291" status="PASS" endtime="20170809 03:22:11.294"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:11.294">Delete All Sessions</msg>
<status starttime="20170809 03:22:11.294" status="PASS" endtime="20170809 03:22:11.294"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:11.295">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:10.978" status="PASS" endtime="20170809 03:22:11.295"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:11.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:11.295" status="PASS" endtime="20170809 03:22:11.296"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:11.296">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:11.296">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:11.297">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:22:11.296" status="PASS" endtime="20170809 03:22:11.297"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:11.297">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:22:10.976" status="PASS" endtime="20170809 03:22:11.297"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:11.297">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:22:10.976" status="PASS" endtime="20170809 03:22:11.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:22:11.298">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:22:11.298" status="FAIL" endtime="20170809 03:22:11.298"></status>
</kw>
<status starttime="20170809 03:22:10.976" status="FAIL" endtime="20170809 03:22:11.299"></status>
</kw>
<status starttime="20170809 03:22:10.387" status="FAIL" endtime="20170809 03:22:11.299"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:21.306">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:21.305" status="PASS" endtime="20170809 03:22:21.306"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:21.306">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:21.306" status="PASS" endtime="20170809 03:22:21.307"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:21.307">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:21.307" status="PASS" endtime="20170809 03:22:21.307"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:21.308">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:21.307" status="PASS" endtime="20170809 03:22:21.308"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:21.689">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:21.308" status="PASS" endtime="20170809 03:22:21.689"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:21.689">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:21.689">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:21.308" status="PASS" endtime="20170809 03:22:21.690"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:21.690">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:21.690" status="PASS" endtime="20170809 03:22:21.690"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:21.691">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:21.691" status="PASS" endtime="20170809 03:22:21.691"></status>
</kw>
<status starttime="20170809 03:22:21.305" status="PASS" endtime="20170809 03:22:21.691"></status>
</kw>
<status starttime="20170809 03:22:21.304" status="PASS" endtime="20170809 03:22:21.691"></status>
</kw>
<status starttime="20170809 03:22:21.303" status="PASS" endtime="20170809 03:22:21.691"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:21.692">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:22:21.692" status="PASS" endtime="20170809 03:22:21.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:21.694">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:21.693" status="PASS" endtime="20170809 03:22:21.694"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:21.695">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:21.695" status="PASS" endtime="20170809 03:22:21.695"></status>
</kw>
<status starttime="20170809 03:22:21.694" status="PASS" endtime="20170809 03:22:21.695"></status>
</kw>
<status starttime="20170809 03:22:21.693" status="PASS" endtime="20170809 03:22:21.695"></status>
</kw>
<status starttime="20170809 03:22:21.692" status="PASS" endtime="20170809 03:22:21.695"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.426">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:22.426">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:21.696" status="PASS" endtime="20170809 03:22:22.426"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.428">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:22.427" status="PASS" endtime="20170809 03:22:22.428"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.429">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:22.429" status="PASS" endtime="20170809 03:22:22.429"></status>
</kw>
<status starttime="20170809 03:22:22.428" status="PASS" endtime="20170809 03:22:22.429"></status>
</kw>
<status starttime="20170809 03:22:22.427" status="PASS" endtime="20170809 03:22:22.429"></status>
</kw>
<status starttime="20170809 03:22:22.426" status="PASS" endtime="20170809 03:22:22.429"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:22.430">Delete All Sessions</msg>
<status starttime="20170809 03:22:22.430" status="PASS" endtime="20170809 03:22:22.430"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:22.430">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:21.303" status="PASS" endtime="20170809 03:22:22.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:22.430" status="PASS" endtime="20170809 03:22:22.431"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.431">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:22.431">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:22.431">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:22:22.431" status="PASS" endtime="20170809 03:22:22.431"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:22.432">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:22:21.302" status="PASS" endtime="20170809 03:22:22.432"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:22.432">${power_state} = On</msg>
<status starttime="20170809 03:22:21.302" status="PASS" endtime="20170809 03:22:22.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:22:22.432" status="PASS" endtime="20170809 03:22:22.433"></status>
</kw>
<status starttime="20170809 03:22:21.301" status="PASS" endtime="20170809 03:22:22.433"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.437">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:22.436" status="PASS" endtime="20170809 03:22:22.437"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.437">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:22.437" status="PASS" endtime="20170809 03:22:22.438"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.438">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:22.438" status="PASS" endtime="20170809 03:22:22.438"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.440">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:22.439" status="PASS" endtime="20170809 03:22:22.440"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.641">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:22.441" status="PASS" endtime="20170809 03:22:22.641"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:22.641">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:22.641">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:22.440" status="PASS" endtime="20170809 03:22:22.641"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.642">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:22.642" status="PASS" endtime="20170809 03:22:22.642"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.643">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:22.642" status="PASS" endtime="20170809 03:22:22.643"></status>
</kw>
<status starttime="20170809 03:22:22.436" status="PASS" endtime="20170809 03:22:22.643"></status>
</kw>
<status starttime="20170809 03:22:22.435" status="PASS" endtime="20170809 03:22:22.643"></status>
</kw>
<status starttime="20170809 03:22:22.435" status="PASS" endtime="20170809 03:22:22.643"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.644">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:22:22.643" status="PASS" endtime="20170809 03:22:22.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.646">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:22.645" status="PASS" endtime="20170809 03:22:22.646"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.647">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:22.646" status="PASS" endtime="20170809 03:22:22.647"></status>
</kw>
<status starttime="20170809 03:22:22.646" status="PASS" endtime="20170809 03:22:22.647"></status>
</kw>
<status starttime="20170809 03:22:22.644" status="PASS" endtime="20170809 03:22:22.647"></status>
</kw>
<status starttime="20170809 03:22:22.644" status="PASS" endtime="20170809 03:22:22.647"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.736">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:22.736">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:22.647" status="PASS" endtime="20170809 03:22:22.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.739">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:22.738" status="PASS" endtime="20170809 03:22:22.739"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.740">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:22.739" status="PASS" endtime="20170809 03:22:22.740"></status>
</kw>
<status starttime="20170809 03:22:22.739" status="PASS" endtime="20170809 03:22:22.740"></status>
</kw>
<status starttime="20170809 03:22:22.738" status="PASS" endtime="20170809 03:22:22.740"></status>
</kw>
<status starttime="20170809 03:22:22.737" status="PASS" endtime="20170809 03:22:22.740"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:22.741">Delete All Sessions</msg>
<status starttime="20170809 03:22:22.740" status="PASS" endtime="20170809 03:22:22.741"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:22.741">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:22.434" status="PASS" endtime="20170809 03:22:22.741"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:22.741" status="PASS" endtime="20170809 03:22:22.742"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.742">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:22.742">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:22.742">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:22:22.742" status="PASS" endtime="20170809 03:22:22.742"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:22.743">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:22:22.433" status="PASS" endtime="20170809 03:22:22.743"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:22.743">${host_state} = Running</msg>
<status starttime="20170809 03:22:22.433" status="PASS" endtime="20170809 03:22:22.743"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:22:22.743" status="PASS" endtime="20170809 03:22:22.743"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.747">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:22.747" status="PASS" endtime="20170809 03:22:22.748"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.748">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:22.748" status="PASS" endtime="20170809 03:22:22.748"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.749">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:22.748" status="PASS" endtime="20170809 03:22:22.749"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.749">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:22.749" status="PASS" endtime="20170809 03:22:22.749"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.950">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:22.750" status="PASS" endtime="20170809 03:22:22.951"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:22.951">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:22.951">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:22.750" status="PASS" endtime="20170809 03:22:22.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.952">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:22.951" status="PASS" endtime="20170809 03:22:22.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.952">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:22.952" status="PASS" endtime="20170809 03:22:22.952"></status>
</kw>
<status starttime="20170809 03:22:22.746" status="PASS" endtime="20170809 03:22:22.953"></status>
</kw>
<status starttime="20170809 03:22:22.746" status="PASS" endtime="20170809 03:22:22.953"></status>
</kw>
<status starttime="20170809 03:22:22.745" status="PASS" endtime="20170809 03:22:22.953"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.953">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:22:22.953" status="PASS" endtime="20170809 03:22:22.953"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:22.956">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:22:22.955" status="PASS" endtime="20170809 03:22:22.956"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:22.957">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:22:22.956" status="PASS" endtime="20170809 03:22:22.957"></status>
</kw>
<status starttime="20170809 03:22:22.956" status="PASS" endtime="20170809 03:22:22.957"></status>
</kw>
<status starttime="20170809 03:22:22.954" status="PASS" endtime="20170809 03:22:22.957"></status>
</kw>
<status starttime="20170809 03:22:22.954" status="PASS" endtime="20170809 03:22:22.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:23.049">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:23.050">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:22.957" status="PASS" endtime="20170809 03:22:23.050"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:23.051">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:23.051" status="PASS" endtime="20170809 03:22:23.051"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:23.052">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:23.052" status="PASS" endtime="20170809 03:22:23.052"></status>
</kw>
<status starttime="20170809 03:22:23.052" status="PASS" endtime="20170809 03:22:23.053"></status>
</kw>
<status starttime="20170809 03:22:23.050" status="PASS" endtime="20170809 03:22:23.053"></status>
</kw>
<status starttime="20170809 03:22:23.050" status="PASS" endtime="20170809 03:22:23.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:23.053">Delete All Sessions</msg>
<status starttime="20170809 03:22:23.053" status="PASS" endtime="20170809 03:22:23.053"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:23.053">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:22.745" status="PASS" endtime="20170809 03:22:23.053"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:23.054">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:23.054" status="PASS" endtime="20170809 03:22:23.054"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:23.055">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:23.055">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:23.055">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:22:23.054" status="PASS" endtime="20170809 03:22:23.055"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:23.055">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:22:22.744" status="PASS" endtime="20170809 03:22:23.055"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:23.055">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:22:22.744" status="PASS" endtime="20170809 03:22:23.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:22:23.056">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:22:23.056" status="FAIL" endtime="20170809 03:22:23.057"></status>
</kw>
<status starttime="20170809 03:22:22.744" status="FAIL" endtime="20170809 03:22:23.057"></status>
</kw>
<status starttime="20170809 03:22:21.300" status="FAIL" endtime="20170809 03:22:23.057"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.063">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:33.062" status="PASS" endtime="20170809 03:22:33.063"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.064">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:33.063" status="PASS" endtime="20170809 03:22:33.064"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.064">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:33.064" status="PASS" endtime="20170809 03:22:33.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.065">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:33.064" status="PASS" endtime="20170809 03:22:33.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.256">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:33.066" status="PASS" endtime="20170809 03:22:33.256"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:33.256">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:33.256">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:33.065" status="PASS" endtime="20170809 03:22:33.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.257">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:33.257" status="PASS" endtime="20170809 03:22:33.257"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:33.257" status="PASS" endtime="20170809 03:22:33.258"></status>
</kw>
<status starttime="20170809 03:22:33.061" status="PASS" endtime="20170809 03:22:33.258"></status>
</kw>
<status starttime="20170809 03:22:33.061" status="PASS" endtime="20170809 03:22:33.258"></status>
</kw>
<status starttime="20170809 03:22:33.060" status="PASS" endtime="20170809 03:22:33.258"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.259">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:22:33.258" status="PASS" endtime="20170809 03:22:33.259"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.261">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:33.260" status="PASS" endtime="20170809 03:22:33.261"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.262">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:33.262" status="PASS" endtime="20170809 03:22:33.262"></status>
</kw>
<status starttime="20170809 03:22:33.261" status="PASS" endtime="20170809 03:22:33.262"></status>
</kw>
<status starttime="20170809 03:22:33.260" status="PASS" endtime="20170809 03:22:33.262"></status>
</kw>
<status starttime="20170809 03:22:33.259" status="PASS" endtime="20170809 03:22:33.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.328">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:33.328">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:33.262" status="PASS" endtime="20170809 03:22:33.328"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.330">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:33.329" status="PASS" endtime="20170809 03:22:33.330"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.331">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:33.331" status="PASS" endtime="20170809 03:22:33.331"></status>
</kw>
<status starttime="20170809 03:22:33.330" status="PASS" endtime="20170809 03:22:33.331"></status>
</kw>
<status starttime="20170809 03:22:33.329" status="PASS" endtime="20170809 03:22:33.332"></status>
</kw>
<status starttime="20170809 03:22:33.328" status="PASS" endtime="20170809 03:22:33.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:33.332">Delete All Sessions</msg>
<status starttime="20170809 03:22:33.332" status="PASS" endtime="20170809 03:22:33.332"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:33.332">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:33.059" status="PASS" endtime="20170809 03:22:33.332"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.333">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:33.333" status="PASS" endtime="20170809 03:22:33.333"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.334">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:33.334">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:33.334">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:22:33.333" status="PASS" endtime="20170809 03:22:33.334"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:33.334">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:22:33.059" status="PASS" endtime="20170809 03:22:33.334"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:33.335">${power_state} = On</msg>
<status starttime="20170809 03:22:33.058" status="PASS" endtime="20170809 03:22:33.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:22:33.335" status="PASS" endtime="20170809 03:22:33.335"></status>
</kw>
<status starttime="20170809 03:22:33.058" status="PASS" endtime="20170809 03:22:33.335"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.339">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:33.338" status="PASS" endtime="20170809 03:22:33.339"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.340">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:33.339" status="PASS" endtime="20170809 03:22:33.340"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.340">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:33.340" status="PASS" endtime="20170809 03:22:33.340"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.341">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:33.341" status="PASS" endtime="20170809 03:22:33.341"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.557">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:33.342" status="PASS" endtime="20170809 03:22:33.557"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:33.557">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:33.557">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:33.341" status="PASS" endtime="20170809 03:22:33.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.558">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:33.557" status="PASS" endtime="20170809 03:22:33.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.558">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:33.558" status="PASS" endtime="20170809 03:22:33.558"></status>
</kw>
<status starttime="20170809 03:22:33.338" status="PASS" endtime="20170809 03:22:33.559"></status>
</kw>
<status starttime="20170809 03:22:33.337" status="PASS" endtime="20170809 03:22:33.559"></status>
</kw>
<status starttime="20170809 03:22:33.337" status="PASS" endtime="20170809 03:22:33.559"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.559">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:22:33.559" status="PASS" endtime="20170809 03:22:33.559"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.562">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:33.561" status="PASS" endtime="20170809 03:22:33.562"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.563">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:33.563" status="PASS" endtime="20170809 03:22:33.563"></status>
</kw>
<status starttime="20170809 03:22:33.562" status="PASS" endtime="20170809 03:22:33.563"></status>
</kw>
<status starttime="20170809 03:22:33.560" status="PASS" endtime="20170809 03:22:33.563"></status>
</kw>
<status starttime="20170809 03:22:33.560" status="PASS" endtime="20170809 03:22:33.563"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.710">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:33.710">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:33.563" status="PASS" endtime="20170809 03:22:33.710"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.712">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:33.711" status="PASS" endtime="20170809 03:22:33.712"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.713">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:33.713" status="PASS" endtime="20170809 03:22:33.713"></status>
</kw>
<status starttime="20170809 03:22:33.712" status="PASS" endtime="20170809 03:22:33.713"></status>
</kw>
<status starttime="20170809 03:22:33.711" status="PASS" endtime="20170809 03:22:33.713"></status>
</kw>
<status starttime="20170809 03:22:33.710" status="PASS" endtime="20170809 03:22:33.713"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:33.714">Delete All Sessions</msg>
<status starttime="20170809 03:22:33.713" status="PASS" endtime="20170809 03:22:33.714"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:33.714">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:33.336" status="PASS" endtime="20170809 03:22:33.714"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:33.714" status="PASS" endtime="20170809 03:22:33.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.715">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:33.716">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:33.716">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:22:33.715" status="PASS" endtime="20170809 03:22:33.716"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:33.716">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:22:33.336" status="PASS" endtime="20170809 03:22:33.716"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:33.716">${host_state} = Running</msg>
<status starttime="20170809 03:22:33.335" status="PASS" endtime="20170809 03:22:33.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:22:33.717" status="PASS" endtime="20170809 03:22:33.717"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.721">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:33.720" status="PASS" endtime="20170809 03:22:33.721"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.722">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:33.721" status="PASS" endtime="20170809 03:22:33.722"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.722">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:33.722" status="PASS" endtime="20170809 03:22:33.722"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.723">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:33.723" status="PASS" endtime="20170809 03:22:33.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.926">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:33.724" status="PASS" endtime="20170809 03:22:33.926"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:33.926">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:33.926">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:33.724" status="PASS" endtime="20170809 03:22:33.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.927">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:33.927" status="PASS" endtime="20170809 03:22:33.927"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.928">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:33.927" status="PASS" endtime="20170809 03:22:33.928"></status>
</kw>
<status starttime="20170809 03:22:33.720" status="PASS" endtime="20170809 03:22:33.928"></status>
</kw>
<status starttime="20170809 03:22:33.719" status="PASS" endtime="20170809 03:22:33.928"></status>
</kw>
<status starttime="20170809 03:22:33.719" status="PASS" endtime="20170809 03:22:33.928"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.929">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:22:33.929" status="PASS" endtime="20170809 03:22:33.929"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.931">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:22:33.930" status="PASS" endtime="20170809 03:22:33.931"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:33.932">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:22:33.932" status="PASS" endtime="20170809 03:22:33.932"></status>
</kw>
<status starttime="20170809 03:22:33.931" status="PASS" endtime="20170809 03:22:33.932"></status>
</kw>
<status starttime="20170809 03:22:33.930" status="PASS" endtime="20170809 03:22:33.932"></status>
</kw>
<status starttime="20170809 03:22:33.929" status="PASS" endtime="20170809 03:22:33.932"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:33.998">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:33.998">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:33.933" status="PASS" endtime="20170809 03:22:33.998"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:34.000">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:34.000" status="PASS" endtime="20170809 03:22:34.000"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:34.002">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:34.001" status="PASS" endtime="20170809 03:22:34.002"></status>
</kw>
<status starttime="20170809 03:22:34.000" status="PASS" endtime="20170809 03:22:34.002"></status>
</kw>
<status starttime="20170809 03:22:33.999" status="PASS" endtime="20170809 03:22:34.002"></status>
</kw>
<status starttime="20170809 03:22:33.999" status="PASS" endtime="20170809 03:22:34.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:34.002">Delete All Sessions</msg>
<status starttime="20170809 03:22:34.002" status="PASS" endtime="20170809 03:22:34.002"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:34.003">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:33.718" status="PASS" endtime="20170809 03:22:34.003"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:34.003">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:34.003" status="PASS" endtime="20170809 03:22:34.003"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:34.004">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:34.004">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:34.004">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:22:34.004" status="PASS" endtime="20170809 03:22:34.004"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:34.004">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:22:33.718" status="PASS" endtime="20170809 03:22:34.004"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:34.005">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:22:33.717" status="PASS" endtime="20170809 03:22:34.005"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:22:34.005">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:22:34.005" status="FAIL" endtime="20170809 03:22:34.005"></status>
</kw>
<status starttime="20170809 03:22:33.717" status="FAIL" endtime="20170809 03:22:34.005"></status>
</kw>
<status starttime="20170809 03:22:33.057" status="FAIL" endtime="20170809 03:22:34.006"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.011">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:44.011" status="PASS" endtime="20170809 03:22:44.012"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.013">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:44.012" status="PASS" endtime="20170809 03:22:44.013"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.013">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:44.013" status="PASS" endtime="20170809 03:22:44.013"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.014">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:44.014" status="PASS" endtime="20170809 03:22:44.014"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.215">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:44.015" status="PASS" endtime="20170809 03:22:44.215"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:44.215">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:44.216">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:44.014" status="PASS" endtime="20170809 03:22:44.216"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.216">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:44.216" status="PASS" endtime="20170809 03:22:44.216"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.217">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:44.217" status="PASS" endtime="20170809 03:22:44.217"></status>
</kw>
<status starttime="20170809 03:22:44.010" status="PASS" endtime="20170809 03:22:44.217"></status>
</kw>
<status starttime="20170809 03:22:44.010" status="PASS" endtime="20170809 03:22:44.217"></status>
</kw>
<status starttime="20170809 03:22:44.009" status="PASS" endtime="20170809 03:22:44.217"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.218">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:22:44.218" status="PASS" endtime="20170809 03:22:44.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.220">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:44.219" status="PASS" endtime="20170809 03:22:44.220"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.221">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:44.221" status="PASS" endtime="20170809 03:22:44.221"></status>
</kw>
<status starttime="20170809 03:22:44.220" status="PASS" endtime="20170809 03:22:44.221"></status>
</kw>
<status starttime="20170809 03:22:44.219" status="PASS" endtime="20170809 03:22:44.221"></status>
</kw>
<status starttime="20170809 03:22:44.218" status="PASS" endtime="20170809 03:22:44.221"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.284">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:44.285">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:44.222" status="PASS" endtime="20170809 03:22:44.285"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.286">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:44.286" status="PASS" endtime="20170809 03:22:44.286"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.287">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:44.287" status="PASS" endtime="20170809 03:22:44.287"></status>
</kw>
<status starttime="20170809 03:22:44.287" status="PASS" endtime="20170809 03:22:44.288"></status>
</kw>
<status starttime="20170809 03:22:44.285" status="PASS" endtime="20170809 03:22:44.288"></status>
</kw>
<status starttime="20170809 03:22:44.285" status="PASS" endtime="20170809 03:22:44.288"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:44.288">Delete All Sessions</msg>
<status starttime="20170809 03:22:44.288" status="PASS" endtime="20170809 03:22:44.288"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:44.288">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:44.008" status="PASS" endtime="20170809 03:22:44.289"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.289">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:44.289" status="PASS" endtime="20170809 03:22:44.289"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.290">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:44.290">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:44.290">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:22:44.289" status="PASS" endtime="20170809 03:22:44.290"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:44.290">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:22:44.007" status="PASS" endtime="20170809 03:22:44.290"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:44.291">${power_state} = On</msg>
<status starttime="20170809 03:22:44.007" status="PASS" endtime="20170809 03:22:44.291"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:22:44.291" status="PASS" endtime="20170809 03:22:44.291"></status>
</kw>
<status starttime="20170809 03:22:44.007" status="PASS" endtime="20170809 03:22:44.291"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.295">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:44.294" status="PASS" endtime="20170809 03:22:44.295"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.296">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:44.295" status="PASS" endtime="20170809 03:22:44.296"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.296">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:44.296" status="PASS" endtime="20170809 03:22:44.296"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.297">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:44.297" status="PASS" endtime="20170809 03:22:44.297"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.529">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:44.298" status="PASS" endtime="20170809 03:22:44.530"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:44.530">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:44.530">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:44.297" status="PASS" endtime="20170809 03:22:44.530"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.531">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:44.530" status="PASS" endtime="20170809 03:22:44.531"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.531">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:44.531" status="PASS" endtime="20170809 03:22:44.531"></status>
</kw>
<status starttime="20170809 03:22:44.294" status="PASS" endtime="20170809 03:22:44.531"></status>
</kw>
<status starttime="20170809 03:22:44.293" status="PASS" endtime="20170809 03:22:44.532"></status>
</kw>
<status starttime="20170809 03:22:44.293" status="PASS" endtime="20170809 03:22:44.532"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.532">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:22:44.532" status="PASS" endtime="20170809 03:22:44.532"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.534">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:44.534" status="PASS" endtime="20170809 03:22:44.534"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.535">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:44.535" status="PASS" endtime="20170809 03:22:44.535"></status>
</kw>
<status starttime="20170809 03:22:44.535" status="PASS" endtime="20170809 03:22:44.536"></status>
</kw>
<status starttime="20170809 03:22:44.533" status="PASS" endtime="20170809 03:22:44.536"></status>
</kw>
<status starttime="20170809 03:22:44.533" status="PASS" endtime="20170809 03:22:44.536"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.716">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:44.716">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:44.536" status="PASS" endtime="20170809 03:22:44.716"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.718">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:44.718" status="PASS" endtime="20170809 03:22:44.718"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.719">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:44.719" status="PASS" endtime="20170809 03:22:44.719"></status>
</kw>
<status starttime="20170809 03:22:44.718" status="PASS" endtime="20170809 03:22:44.719"></status>
</kw>
<status starttime="20170809 03:22:44.717" status="PASS" endtime="20170809 03:22:44.719"></status>
</kw>
<status starttime="20170809 03:22:44.717" status="PASS" endtime="20170809 03:22:44.719"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:44.720">Delete All Sessions</msg>
<status starttime="20170809 03:22:44.720" status="PASS" endtime="20170809 03:22:44.720"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:44.721">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:44.292" status="PASS" endtime="20170809 03:22:44.721"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:44.721" status="PASS" endtime="20170809 03:22:44.722"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.722">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:44.722">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:44.722">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:22:44.722" status="PASS" endtime="20170809 03:22:44.722"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:44.723">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:22:44.292" status="PASS" endtime="20170809 03:22:44.723"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:44.723">${host_state} = Running</msg>
<status starttime="20170809 03:22:44.291" status="PASS" endtime="20170809 03:22:44.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:22:44.723" status="PASS" endtime="20170809 03:22:44.723"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.728">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:44.727" status="PASS" endtime="20170809 03:22:44.728"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.729">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:44.728" status="PASS" endtime="20170809 03:22:44.729"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.729">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:44.729" status="PASS" endtime="20170809 03:22:44.729"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.730">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:44.730" status="PASS" endtime="20170809 03:22:44.730"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.917">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:44.731" status="PASS" endtime="20170809 03:22:44.918"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:44.918">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:44.918">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:44.730" status="PASS" endtime="20170809 03:22:44.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.919">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:44.918" status="PASS" endtime="20170809 03:22:44.919"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.919">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:44.919" status="PASS" endtime="20170809 03:22:44.919"></status>
</kw>
<status starttime="20170809 03:22:44.726" status="PASS" endtime="20170809 03:22:44.919"></status>
</kw>
<status starttime="20170809 03:22:44.726" status="PASS" endtime="20170809 03:22:44.920"></status>
</kw>
<status starttime="20170809 03:22:44.725" status="PASS" endtime="20170809 03:22:44.920"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.920">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:22:44.920" status="PASS" endtime="20170809 03:22:44.920"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.922">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:22:44.922" status="PASS" endtime="20170809 03:22:44.922"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:44.923">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:22:44.923" status="PASS" endtime="20170809 03:22:44.924"></status>
</kw>
<status starttime="20170809 03:22:44.923" status="PASS" endtime="20170809 03:22:44.924"></status>
</kw>
<status starttime="20170809 03:22:44.921" status="PASS" endtime="20170809 03:22:44.924"></status>
</kw>
<status starttime="20170809 03:22:44.921" status="PASS" endtime="20170809 03:22:44.924"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:44.998">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:44.998">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:44.924" status="PASS" endtime="20170809 03:22:44.998"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:45.000">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:44.999" status="PASS" endtime="20170809 03:22:45.000"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:45.004">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:45.004" status="PASS" endtime="20170809 03:22:45.005"></status>
</kw>
<status starttime="20170809 03:22:45.001" status="PASS" endtime="20170809 03:22:45.005"></status>
</kw>
<status starttime="20170809 03:22:44.999" status="PASS" endtime="20170809 03:22:45.005"></status>
</kw>
<status starttime="20170809 03:22:44.998" status="PASS" endtime="20170809 03:22:45.005"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:45.005">Delete All Sessions</msg>
<status starttime="20170809 03:22:45.005" status="PASS" endtime="20170809 03:22:45.005"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:45.006">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:44.725" status="PASS" endtime="20170809 03:22:45.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:45.006">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:45.006" status="PASS" endtime="20170809 03:22:45.006"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:45.007">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:45.007">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:45.007">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:22:45.007" status="PASS" endtime="20170809 03:22:45.007"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:45.007">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:22:44.724" status="PASS" endtime="20170809 03:22:45.007"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:45.008">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:22:44.724" status="PASS" endtime="20170809 03:22:45.008"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:22:45.008">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:22:45.008" status="FAIL" endtime="20170809 03:22:45.009"></status>
</kw>
<status starttime="20170809 03:22:44.724" status="FAIL" endtime="20170809 03:22:45.009"></status>
</kw>
<status starttime="20170809 03:22:44.006" status="FAIL" endtime="20170809 03:22:45.009"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.014">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:55.014" status="PASS" endtime="20170809 03:22:55.014"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.015">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:55.015" status="PASS" endtime="20170809 03:22:55.015"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.016">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:55.015" status="PASS" endtime="20170809 03:22:55.016"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.016">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:55.016" status="PASS" endtime="20170809 03:22:55.016"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.212">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:55.017" status="PASS" endtime="20170809 03:22:55.212"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:55.212">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:55.212">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:55.016" status="PASS" endtime="20170809 03:22:55.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.213">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:55.213" status="PASS" endtime="20170809 03:22:55.213"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.214">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:55.213" status="PASS" endtime="20170809 03:22:55.214"></status>
</kw>
<status starttime="20170809 03:22:55.013" status="PASS" endtime="20170809 03:22:55.214"></status>
</kw>
<status starttime="20170809 03:22:55.013" status="PASS" endtime="20170809 03:22:55.214"></status>
</kw>
<status starttime="20170809 03:22:55.012" status="PASS" endtime="20170809 03:22:55.214"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.215">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:22:55.214" status="PASS" endtime="20170809 03:22:55.215"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.217">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:55.216" status="PASS" endtime="20170809 03:22:55.217"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.218">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:55.218" status="PASS" endtime="20170809 03:22:55.218"></status>
</kw>
<status starttime="20170809 03:22:55.217" status="PASS" endtime="20170809 03:22:55.218"></status>
</kw>
<status starttime="20170809 03:22:55.216" status="PASS" endtime="20170809 03:22:55.218"></status>
</kw>
<status starttime="20170809 03:22:55.215" status="PASS" endtime="20170809 03:22:55.218"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.293">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:55.293">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:55.218" status="PASS" endtime="20170809 03:22:55.293"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.295">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:55.294" status="PASS" endtime="20170809 03:22:55.295"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.296">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:55.295" status="PASS" endtime="20170809 03:22:55.296"></status>
</kw>
<status starttime="20170809 03:22:55.295" status="PASS" endtime="20170809 03:22:55.296"></status>
</kw>
<status starttime="20170809 03:22:55.294" status="PASS" endtime="20170809 03:22:55.296"></status>
</kw>
<status starttime="20170809 03:22:55.293" status="PASS" endtime="20170809 03:22:55.296"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:55.297">Delete All Sessions</msg>
<status starttime="20170809 03:22:55.297" status="PASS" endtime="20170809 03:22:55.297"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:55.297">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:55.011" status="PASS" endtime="20170809 03:22:55.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:55.297" status="PASS" endtime="20170809 03:22:55.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.298">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:55.298">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:55.298">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:22:55.298" status="PASS" endtime="20170809 03:22:55.298"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:55.299">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:22:55.011" status="PASS" endtime="20170809 03:22:55.299"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:55.299">${power_state} = On</msg>
<status starttime="20170809 03:22:55.010" status="PASS" endtime="20170809 03:22:55.299"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:22:55.299" status="PASS" endtime="20170809 03:22:55.300"></status>
</kw>
<status starttime="20170809 03:22:55.010" status="PASS" endtime="20170809 03:22:55.300"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.303">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:55.303" status="PASS" endtime="20170809 03:22:55.304"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.305">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:55.304" status="PASS" endtime="20170809 03:22:55.305"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.305">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:55.305" status="PASS" endtime="20170809 03:22:55.305"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.306">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:55.306" status="PASS" endtime="20170809 03:22:55.306"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.510">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:55.307" status="PASS" endtime="20170809 03:22:55.510"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:55.510">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:55.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:55.306" status="PASS" endtime="20170809 03:22:55.510"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.511">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:55.511" status="PASS" endtime="20170809 03:22:55.511"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:55.511" status="PASS" endtime="20170809 03:22:55.512"></status>
</kw>
<status starttime="20170809 03:22:55.303" status="PASS" endtime="20170809 03:22:55.512"></status>
</kw>
<status starttime="20170809 03:22:55.302" status="PASS" endtime="20170809 03:22:55.512"></status>
</kw>
<status starttime="20170809 03:22:55.301" status="PASS" endtime="20170809 03:22:55.512"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.513">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:22:55.512" status="PASS" endtime="20170809 03:22:55.513"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.515">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:55.514" status="PASS" endtime="20170809 03:22:55.515"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.516">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:22:55.516" status="PASS" endtime="20170809 03:22:55.516"></status>
</kw>
<status starttime="20170809 03:22:55.515" status="PASS" endtime="20170809 03:22:55.516"></status>
</kw>
<status starttime="20170809 03:22:55.513" status="PASS" endtime="20170809 03:22:55.516"></status>
</kw>
<status starttime="20170809 03:22:55.513" status="PASS" endtime="20170809 03:22:55.516"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.681">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:55.681">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:55.517" status="PASS" endtime="20170809 03:22:55.681"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.683">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:55.682" status="PASS" endtime="20170809 03:22:55.683"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.684">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:55.683" status="PASS" endtime="20170809 03:22:55.684"></status>
</kw>
<status starttime="20170809 03:22:55.683" status="PASS" endtime="20170809 03:22:55.684"></status>
</kw>
<status starttime="20170809 03:22:55.682" status="PASS" endtime="20170809 03:22:55.684"></status>
</kw>
<status starttime="20170809 03:22:55.681" status="PASS" endtime="20170809 03:22:55.684"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:55.685">Delete All Sessions</msg>
<status starttime="20170809 03:22:55.684" status="PASS" endtime="20170809 03:22:55.685"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:55.685">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:55.301" status="PASS" endtime="20170809 03:22:55.685"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:55.685" status="PASS" endtime="20170809 03:22:55.686"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.686">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:55.686">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:55.686">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:22:55.686" status="PASS" endtime="20170809 03:22:55.686"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:55.687">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:22:55.300" status="PASS" endtime="20170809 03:22:55.687"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:55.687">${host_state} = Running</msg>
<status starttime="20170809 03:22:55.300" status="PASS" endtime="20170809 03:22:55.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:22:55.687" status="PASS" endtime="20170809 03:22:55.687"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.692">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:22:55.692" status="PASS" endtime="20170809 03:22:55.692"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.693">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:22:55.693" status="PASS" endtime="20170809 03:22:55.693"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.694">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:22:55.693" status="PASS" endtime="20170809 03:22:55.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.694">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:22:55.694" status="PASS" endtime="20170809 03:22:55.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.870">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:22:55.695" status="PASS" endtime="20170809 03:22:55.870"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:55.870">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:22:55.870">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:55.695" status="PASS" endtime="20170809 03:22:55.870"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.871">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:55.871" status="PASS" endtime="20170809 03:22:55.871"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:55.872" status="PASS" endtime="20170809 03:22:55.872"></status>
</kw>
<status starttime="20170809 03:22:55.691" status="PASS" endtime="20170809 03:22:55.872"></status>
</kw>
<status starttime="20170809 03:22:55.691" status="PASS" endtime="20170809 03:22:55.872"></status>
</kw>
<status starttime="20170809 03:22:55.690" status="PASS" endtime="20170809 03:22:55.872"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.873">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:22:55.873" status="PASS" endtime="20170809 03:22:55.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.875">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:22:55.874" status="PASS" endtime="20170809 03:22:55.875"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.876">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:22:55.876" status="PASS" endtime="20170809 03:22:55.876"></status>
</kw>
<status starttime="20170809 03:22:55.875" status="PASS" endtime="20170809 03:22:55.876"></status>
</kw>
<status starttime="20170809 03:22:55.874" status="PASS" endtime="20170809 03:22:55.876"></status>
</kw>
<status starttime="20170809 03:22:55.873" status="PASS" endtime="20170809 03:22:55.876"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.942">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:22:55.942">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:55.877" status="PASS" endtime="20170809 03:22:55.942"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.944">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:55.944" status="PASS" endtime="20170809 03:22:55.944"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.945">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:22:55.945" status="PASS" endtime="20170809 03:22:55.945"></status>
</kw>
<status starttime="20170809 03:22:55.944" status="PASS" endtime="20170809 03:22:55.945"></status>
</kw>
<status starttime="20170809 03:22:55.943" status="PASS" endtime="20170809 03:22:55.945"></status>
</kw>
<status starttime="20170809 03:22:55.943" status="PASS" endtime="20170809 03:22:55.945"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:22:55.946">Delete All Sessions</msg>
<status starttime="20170809 03:22:55.946" status="PASS" endtime="20170809 03:22:55.946"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:55.946">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:22:55.689" status="PASS" endtime="20170809 03:22:55.946"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:22:55.947">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:22:55.946" status="PASS" endtime="20170809 03:22:55.947"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:22:55.947">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:22:55.947">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:22:55.947">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:22:55.947" status="PASS" endtime="20170809 03:22:55.947"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:55.948">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:22:55.688" status="PASS" endtime="20170809 03:22:55.948"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:22:55.948">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:22:55.688" status="PASS" endtime="20170809 03:22:55.948"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:22:55.949">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:22:55.948" status="FAIL" endtime="20170809 03:22:55.949"></status>
</kw>
<status starttime="20170809 03:22:55.688" status="FAIL" endtime="20170809 03:22:55.949"></status>
</kw>
<status starttime="20170809 03:22:55.009" status="FAIL" endtime="20170809 03:22:55.949"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:05.954">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:05.954" status="PASS" endtime="20170809 03:23:05.954"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:05.955">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:05.955" status="PASS" endtime="20170809 03:23:05.955"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:05.956">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:05.955" status="PASS" endtime="20170809 03:23:05.956"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:05.956">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:05.956" status="PASS" endtime="20170809 03:23:05.956"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.162">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:05.957" status="PASS" endtime="20170809 03:23:06.163"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:06.163">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:06.163">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:05.957" status="PASS" endtime="20170809 03:23:06.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.164">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:06.163" status="PASS" endtime="20170809 03:23:06.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.164">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:06.164" status="PASS" endtime="20170809 03:23:06.164"></status>
</kw>
<status starttime="20170809 03:23:05.953" status="PASS" endtime="20170809 03:23:06.164"></status>
</kw>
<status starttime="20170809 03:23:05.953" status="PASS" endtime="20170809 03:23:06.165"></status>
</kw>
<status starttime="20170809 03:23:05.952" status="PASS" endtime="20170809 03:23:06.165"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.165">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:23:06.165" status="PASS" endtime="20170809 03:23:06.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.167">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:06.167" status="PASS" endtime="20170809 03:23:06.167"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.168">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:06.168" status="PASS" endtime="20170809 03:23:06.168"></status>
</kw>
<status starttime="20170809 03:23:06.167" status="PASS" endtime="20170809 03:23:06.168"></status>
</kw>
<status starttime="20170809 03:23:06.166" status="PASS" endtime="20170809 03:23:06.169"></status>
</kw>
<status starttime="20170809 03:23:06.166" status="PASS" endtime="20170809 03:23:06.169"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.258">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:06.258">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:06.169" status="PASS" endtime="20170809 03:23:06.259"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.260">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:06.260" status="PASS" endtime="20170809 03:23:06.261"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.261">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:06.261" status="PASS" endtime="20170809 03:23:06.261"></status>
</kw>
<status starttime="20170809 03:23:06.261" status="PASS" endtime="20170809 03:23:06.262"></status>
</kw>
<status starttime="20170809 03:23:06.259" status="PASS" endtime="20170809 03:23:06.262"></status>
</kw>
<status starttime="20170809 03:23:06.259" status="PASS" endtime="20170809 03:23:06.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:06.262">Delete All Sessions</msg>
<status starttime="20170809 03:23:06.262" status="PASS" endtime="20170809 03:23:06.262"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:06.262">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:05.951" status="PASS" endtime="20170809 03:23:06.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.263">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:06.263" status="PASS" endtime="20170809 03:23:06.263"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.264">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:06.264">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:06.264">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:23:06.263" status="PASS" endtime="20170809 03:23:06.264"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:06.264">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:23:05.951" status="PASS" endtime="20170809 03:23:06.264"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:06.264">${power_state} = On</msg>
<status starttime="20170809 03:23:05.951" status="PASS" endtime="20170809 03:23:06.265"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:23:06.265" status="PASS" endtime="20170809 03:23:06.265"></status>
</kw>
<status starttime="20170809 03:23:05.950" status="PASS" endtime="20170809 03:23:06.265"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.269">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:06.268" status="PASS" endtime="20170809 03:23:06.269"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.270">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:06.270" status="PASS" endtime="20170809 03:23:06.270"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.271">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:06.270" status="PASS" endtime="20170809 03:23:06.271"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.271">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:06.271" status="PASS" endtime="20170809 03:23:06.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.524">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:06.272" status="PASS" endtime="20170809 03:23:06.524"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:06.524">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:06.524">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:06.272" status="PASS" endtime="20170809 03:23:06.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.525">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:06.525" status="PASS" endtime="20170809 03:23:06.525"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.526">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:06.525" status="PASS" endtime="20170809 03:23:06.526"></status>
</kw>
<status starttime="20170809 03:23:06.268" status="PASS" endtime="20170809 03:23:06.526"></status>
</kw>
<status starttime="20170809 03:23:06.267" status="PASS" endtime="20170809 03:23:06.526"></status>
</kw>
<status starttime="20170809 03:23:06.267" status="PASS" endtime="20170809 03:23:06.526"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.527">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:23:06.526" status="PASS" endtime="20170809 03:23:06.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.529">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:06.528" status="PASS" endtime="20170809 03:23:06.529"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.530">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:06.529" status="PASS" endtime="20170809 03:23:06.530"></status>
</kw>
<status starttime="20170809 03:23:06.529" status="PASS" endtime="20170809 03:23:06.530"></status>
</kw>
<status starttime="20170809 03:23:06.527" status="PASS" endtime="20170809 03:23:06.530"></status>
</kw>
<status starttime="20170809 03:23:06.527" status="PASS" endtime="20170809 03:23:06.530"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.619">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:06.619">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:06.530" status="PASS" endtime="20170809 03:23:06.619"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.621">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:06.621" status="PASS" endtime="20170809 03:23:06.621"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.622">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:06.622" status="PASS" endtime="20170809 03:23:06.622"></status>
</kw>
<status starttime="20170809 03:23:06.622" status="PASS" endtime="20170809 03:23:06.623"></status>
</kw>
<status starttime="20170809 03:23:06.620" status="PASS" endtime="20170809 03:23:06.623"></status>
</kw>
<status starttime="20170809 03:23:06.619" status="PASS" endtime="20170809 03:23:06.623"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:06.623">Delete All Sessions</msg>
<status starttime="20170809 03:23:06.623" status="PASS" endtime="20170809 03:23:06.623"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:06.623">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:06.266" status="PASS" endtime="20170809 03:23:06.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.624">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:06.624" status="PASS" endtime="20170809 03:23:06.624"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.625">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:06.625">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:06.625">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:23:06.624" status="PASS" endtime="20170809 03:23:06.625"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:06.625">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:23:06.266" status="PASS" endtime="20170809 03:23:06.625"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:06.626">${host_state} = Running</msg>
<status starttime="20170809 03:23:06.265" status="PASS" endtime="20170809 03:23:06.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:23:06.626" status="PASS" endtime="20170809 03:23:06.626"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.630">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:06.630" status="PASS" endtime="20170809 03:23:06.631"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.631">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:06.631" status="PASS" endtime="20170809 03:23:06.631"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.632">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:06.632" status="PASS" endtime="20170809 03:23:06.632"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.633">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:06.632" status="PASS" endtime="20170809 03:23:06.633"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.830">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:06.634" status="PASS" endtime="20170809 03:23:06.831"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:06.831">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:06.831">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:06.633" status="PASS" endtime="20170809 03:23:06.831"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.832">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:06.831" status="PASS" endtime="20170809 03:23:06.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:06.832" status="PASS" endtime="20170809 03:23:06.832"></status>
</kw>
<status starttime="20170809 03:23:06.629" status="PASS" endtime="20170809 03:23:06.832"></status>
</kw>
<status starttime="20170809 03:23:06.629" status="PASS" endtime="20170809 03:23:06.832"></status>
</kw>
<status starttime="20170809 03:23:06.628" status="PASS" endtime="20170809 03:23:06.833"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.833">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:23:06.833" status="PASS" endtime="20170809 03:23:06.833"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.836">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:23:06.835" status="PASS" endtime="20170809 03:23:06.836"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.837">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:23:06.837" status="PASS" endtime="20170809 03:23:06.837"></status>
</kw>
<status starttime="20170809 03:23:06.836" status="PASS" endtime="20170809 03:23:06.838"></status>
</kw>
<status starttime="20170809 03:23:06.834" status="PASS" endtime="20170809 03:23:06.838"></status>
</kw>
<status starttime="20170809 03:23:06.833" status="PASS" endtime="20170809 03:23:06.838"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.919">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:06.920">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:06.838" status="PASS" endtime="20170809 03:23:06.920"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.922">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:06.921" status="PASS" endtime="20170809 03:23:06.922"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.923">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:06.922" status="PASS" endtime="20170809 03:23:06.923"></status>
</kw>
<status starttime="20170809 03:23:06.922" status="PASS" endtime="20170809 03:23:06.923"></status>
</kw>
<status starttime="20170809 03:23:06.921" status="PASS" endtime="20170809 03:23:06.923"></status>
</kw>
<status starttime="20170809 03:23:06.920" status="PASS" endtime="20170809 03:23:06.923"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:06.923">Delete All Sessions</msg>
<status starttime="20170809 03:23:06.923" status="PASS" endtime="20170809 03:23:06.924"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:06.924">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:06.627" status="PASS" endtime="20170809 03:23:06.924"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:06.924">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:06.924" status="PASS" endtime="20170809 03:23:06.924"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:06.925">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:06.925">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:06.925">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:23:06.925" status="PASS" endtime="20170809 03:23:06.925"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:06.925">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:23:06.627" status="PASS" endtime="20170809 03:23:06.926"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:06.926">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:23:06.627" status="PASS" endtime="20170809 03:23:06.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:23:06.926">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:23:06.926" status="FAIL" endtime="20170809 03:23:06.926"></status>
</kw>
<status starttime="20170809 03:23:06.626" status="FAIL" endtime="20170809 03:23:06.927"></status>
</kw>
<status starttime="20170809 03:23:05.950" status="FAIL" endtime="20170809 03:23:06.927"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:16.932">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:16.932" status="PASS" endtime="20170809 03:23:16.932"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:16.933">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:16.933" status="PASS" endtime="20170809 03:23:16.933"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:16.934">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:16.933" status="PASS" endtime="20170809 03:23:16.934"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:16.934">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:16.934" status="PASS" endtime="20170809 03:23:16.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.188">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:16.935" status="PASS" endtime="20170809 03:23:17.189"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:17.189">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:17.189">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:16.935" status="PASS" endtime="20170809 03:23:17.189"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.190">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:17.189" status="PASS" endtime="20170809 03:23:17.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:17.190" status="PASS" endtime="20170809 03:23:17.191"></status>
</kw>
<status starttime="20170809 03:23:16.931" status="PASS" endtime="20170809 03:23:17.191"></status>
</kw>
<status starttime="20170809 03:23:16.931" status="PASS" endtime="20170809 03:23:17.191"></status>
</kw>
<status starttime="20170809 03:23:16.930" status="PASS" endtime="20170809 03:23:17.191"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.191">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:23:17.191" status="PASS" endtime="20170809 03:23:17.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.194">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:17.193" status="PASS" endtime="20170809 03:23:17.194"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.195">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:17.194" status="PASS" endtime="20170809 03:23:17.195"></status>
</kw>
<status starttime="20170809 03:23:17.194" status="PASS" endtime="20170809 03:23:17.195"></status>
</kw>
<status starttime="20170809 03:23:17.192" status="PASS" endtime="20170809 03:23:17.195"></status>
</kw>
<status starttime="20170809 03:23:17.192" status="PASS" endtime="20170809 03:23:17.195"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.257">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:17.258">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:17.195" status="PASS" endtime="20170809 03:23:17.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.260">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:17.259" status="PASS" endtime="20170809 03:23:17.260"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.261">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:17.260" status="PASS" endtime="20170809 03:23:17.261"></status>
</kw>
<status starttime="20170809 03:23:17.260" status="PASS" endtime="20170809 03:23:17.261"></status>
</kw>
<status starttime="20170809 03:23:17.259" status="PASS" endtime="20170809 03:23:17.261"></status>
</kw>
<status starttime="20170809 03:23:17.258" status="PASS" endtime="20170809 03:23:17.261"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:17.261">Delete All Sessions</msg>
<status starttime="20170809 03:23:17.261" status="PASS" endtime="20170809 03:23:17.261"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:17.262">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:16.929" status="PASS" endtime="20170809 03:23:17.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.262">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:17.262" status="PASS" endtime="20170809 03:23:17.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.263">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:17.263">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:17.263">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:23:17.263" status="PASS" endtime="20170809 03:23:17.263"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:17.264">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:23:16.929" status="PASS" endtime="20170809 03:23:17.264"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:17.264">${power_state} = On</msg>
<status starttime="20170809 03:23:16.928" status="PASS" endtime="20170809 03:23:17.264"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:23:17.264" status="PASS" endtime="20170809 03:23:17.265"></status>
</kw>
<status starttime="20170809 03:23:16.928" status="PASS" endtime="20170809 03:23:17.265"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.269">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:17.268" status="PASS" endtime="20170809 03:23:17.269"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.269">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:17.269" status="PASS" endtime="20170809 03:23:17.270"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.270">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:17.270" status="PASS" endtime="20170809 03:23:17.270"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.271">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:17.270" status="PASS" endtime="20170809 03:23:17.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.446">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:17.271" status="PASS" endtime="20170809 03:23:17.446"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:17.446">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:17.446">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:17.271" status="PASS" endtime="20170809 03:23:17.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.447">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:17.447" status="PASS" endtime="20170809 03:23:17.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.448">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:17.447" status="PASS" endtime="20170809 03:23:17.448"></status>
</kw>
<status starttime="20170809 03:23:17.267" status="PASS" endtime="20170809 03:23:17.448"></status>
</kw>
<status starttime="20170809 03:23:17.267" status="PASS" endtime="20170809 03:23:17.448"></status>
</kw>
<status starttime="20170809 03:23:17.266" status="PASS" endtime="20170809 03:23:17.448"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.449">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:23:17.448" status="PASS" endtime="20170809 03:23:17.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.451">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:17.450" status="PASS" endtime="20170809 03:23:17.451"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.453">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:17.452" status="PASS" endtime="20170809 03:23:17.453"></status>
</kw>
<status starttime="20170809 03:23:17.452" status="PASS" endtime="20170809 03:23:17.453"></status>
</kw>
<status starttime="20170809 03:23:17.450" status="PASS" endtime="20170809 03:23:17.453"></status>
</kw>
<status starttime="20170809 03:23:17.449" status="PASS" endtime="20170809 03:23:17.453"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.542">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:17.542">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:17.453" status="PASS" endtime="20170809 03:23:17.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.544">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:17.543" status="PASS" endtime="20170809 03:23:17.544"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.545">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:17.545" status="PASS" endtime="20170809 03:23:17.545"></status>
</kw>
<status starttime="20170809 03:23:17.544" status="PASS" endtime="20170809 03:23:17.545"></status>
</kw>
<status starttime="20170809 03:23:17.543" status="PASS" endtime="20170809 03:23:17.545"></status>
</kw>
<status starttime="20170809 03:23:17.542" status="PASS" endtime="20170809 03:23:17.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:17.546">Delete All Sessions</msg>
<status starttime="20170809 03:23:17.545" status="PASS" endtime="20170809 03:23:17.546"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:17.546">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:17.266" status="PASS" endtime="20170809 03:23:17.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.547">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:17.546" status="PASS" endtime="20170809 03:23:17.547"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.547">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:17.547">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:17.548">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:23:17.547" status="PASS" endtime="20170809 03:23:17.548"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:17.548">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:23:17.265" status="PASS" endtime="20170809 03:23:17.548"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:17.548">${host_state} = Running</msg>
<status starttime="20170809 03:23:17.265" status="PASS" endtime="20170809 03:23:17.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:23:17.548" status="PASS" endtime="20170809 03:23:17.549"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.553">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:17.553" status="PASS" endtime="20170809 03:23:17.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.554">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:17.554" status="PASS" endtime="20170809 03:23:17.554"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.555">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:17.555" status="PASS" endtime="20170809 03:23:17.555"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.556">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:17.555" status="PASS" endtime="20170809 03:23:17.556"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.736">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:17.556" status="PASS" endtime="20170809 03:23:17.736"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:17.736">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:17.736">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:17.556" status="PASS" endtime="20170809 03:23:17.736"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.737">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:17.736" status="PASS" endtime="20170809 03:23:17.737"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:17.737" status="PASS" endtime="20170809 03:23:17.738"></status>
</kw>
<status starttime="20170809 03:23:17.552" status="PASS" endtime="20170809 03:23:17.738"></status>
</kw>
<status starttime="20170809 03:23:17.552" status="PASS" endtime="20170809 03:23:17.738"></status>
</kw>
<status starttime="20170809 03:23:17.551" status="PASS" endtime="20170809 03:23:17.738"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.738">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:23:17.738" status="PASS" endtime="20170809 03:23:17.738"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.743">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:23:17.740" status="PASS" endtime="20170809 03:23:17.744"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.744">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:23:17.744" status="PASS" endtime="20170809 03:23:17.745"></status>
</kw>
<status starttime="20170809 03:23:17.744" status="PASS" endtime="20170809 03:23:17.745"></status>
</kw>
<status starttime="20170809 03:23:17.739" status="PASS" endtime="20170809 03:23:17.745"></status>
</kw>
<status starttime="20170809 03:23:17.739" status="PASS" endtime="20170809 03:23:17.745"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.855">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:17.856">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:17.745" status="PASS" endtime="20170809 03:23:17.856"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.858">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:17.857" status="PASS" endtime="20170809 03:23:17.858"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.859">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:17.858" status="PASS" endtime="20170809 03:23:17.859"></status>
</kw>
<status starttime="20170809 03:23:17.858" status="PASS" endtime="20170809 03:23:17.859"></status>
</kw>
<status starttime="20170809 03:23:17.857" status="PASS" endtime="20170809 03:23:17.859"></status>
</kw>
<status starttime="20170809 03:23:17.856" status="PASS" endtime="20170809 03:23:17.859"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:17.859">Delete All Sessions</msg>
<status starttime="20170809 03:23:17.859" status="PASS" endtime="20170809 03:23:17.860"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:17.860">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:17.550" status="PASS" endtime="20170809 03:23:17.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:17.860">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:17.860" status="PASS" endtime="20170809 03:23:17.861"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:17.861">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:17.861">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:17.861">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:23:17.861" status="PASS" endtime="20170809 03:23:17.861"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:17.862">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:23:17.550" status="PASS" endtime="20170809 03:23:17.862"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:17.862">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:23:17.549" status="PASS" endtime="20170809 03:23:17.862"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:23:17.862">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:23:17.862" status="FAIL" endtime="20170809 03:23:17.862"></status>
</kw>
<status starttime="20170809 03:23:17.549" status="FAIL" endtime="20170809 03:23:17.863"></status>
</kw>
<status starttime="20170809 03:23:16.927" status="FAIL" endtime="20170809 03:23:17.863"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:27.868">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:27.868" status="PASS" endtime="20170809 03:23:27.869"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:27.870">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:27.869" status="PASS" endtime="20170809 03:23:27.870"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:27.871">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:27.870" status="PASS" endtime="20170809 03:23:27.871"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:27.872">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:27.871" status="PASS" endtime="20170809 03:23:27.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.174">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:27.873" status="PASS" endtime="20170809 03:23:28.174"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:28.174">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:28.174">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:27.872" status="PASS" endtime="20170809 03:23:28.174"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.175">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:28.175" status="PASS" endtime="20170809 03:23:28.175"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.176">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:28.176" status="PASS" endtime="20170809 03:23:28.176"></status>
</kw>
<status starttime="20170809 03:23:27.867" status="PASS" endtime="20170809 03:23:28.176"></status>
</kw>
<status starttime="20170809 03:23:27.867" status="PASS" endtime="20170809 03:23:28.176"></status>
</kw>
<status starttime="20170809 03:23:27.866" status="PASS" endtime="20170809 03:23:28.177"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.177">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:23:28.177" status="PASS" endtime="20170809 03:23:28.177"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.179">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:28.179" status="PASS" endtime="20170809 03:23:28.179"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.180">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:28.180" status="PASS" endtime="20170809 03:23:28.181"></status>
</kw>
<status starttime="20170809 03:23:28.180" status="PASS" endtime="20170809 03:23:28.181"></status>
</kw>
<status starttime="20170809 03:23:28.178" status="PASS" endtime="20170809 03:23:28.181"></status>
</kw>
<status starttime="20170809 03:23:28.178" status="PASS" endtime="20170809 03:23:28.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.247">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:28.247">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:28.181" status="PASS" endtime="20170809 03:23:28.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.249">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:28.249" status="PASS" endtime="20170809 03:23:28.249"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.250">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:28.250" status="PASS" endtime="20170809 03:23:28.250"></status>
</kw>
<status starttime="20170809 03:23:28.250" status="PASS" endtime="20170809 03:23:28.251"></status>
</kw>
<status starttime="20170809 03:23:28.248" status="PASS" endtime="20170809 03:23:28.251"></status>
</kw>
<status starttime="20170809 03:23:28.248" status="PASS" endtime="20170809 03:23:28.251"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:28.251">Delete All Sessions</msg>
<status starttime="20170809 03:23:28.251" status="PASS" endtime="20170809 03:23:28.251"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:28.251">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:27.866" status="PASS" endtime="20170809 03:23:28.251"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.252">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:28.252" status="PASS" endtime="20170809 03:23:28.252"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.253">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:28.253">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:28.253">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:23:28.252" status="PASS" endtime="20170809 03:23:28.253"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:28.253">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:23:27.865" status="PASS" endtime="20170809 03:23:28.253"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:28.253">${power_state} = On</msg>
<status starttime="20170809 03:23:27.865" status="PASS" endtime="20170809 03:23:28.253"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:23:28.254" status="PASS" endtime="20170809 03:23:28.254"></status>
</kw>
<status starttime="20170809 03:23:27.864" status="PASS" endtime="20170809 03:23:28.254"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.258">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:28.257" status="PASS" endtime="20170809 03:23:28.258"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.259">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:28.259" status="PASS" endtime="20170809 03:23:28.259"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.260">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:28.259" status="PASS" endtime="20170809 03:23:28.260"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.260">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:28.260" status="PASS" endtime="20170809 03:23:28.260"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.464">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:28.261" status="PASS" endtime="20170809 03:23:28.464"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:28.464">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:28.464">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:28.261" status="PASS" endtime="20170809 03:23:28.464"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.465">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:28.465" status="PASS" endtime="20170809 03:23:28.465"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:28.465" status="PASS" endtime="20170809 03:23:28.466"></status>
</kw>
<status starttime="20170809 03:23:28.257" status="PASS" endtime="20170809 03:23:28.466"></status>
</kw>
<status starttime="20170809 03:23:28.256" status="PASS" endtime="20170809 03:23:28.466"></status>
</kw>
<status starttime="20170809 03:23:28.256" status="PASS" endtime="20170809 03:23:28.466"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.467">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:23:28.466" status="PASS" endtime="20170809 03:23:28.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.469">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:28.468" status="PASS" endtime="20170809 03:23:28.469"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.470">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:28.469" status="PASS" endtime="20170809 03:23:28.470"></status>
</kw>
<status starttime="20170809 03:23:28.469" status="PASS" endtime="20170809 03:23:28.470"></status>
</kw>
<status starttime="20170809 03:23:28.467" status="PASS" endtime="20170809 03:23:28.470"></status>
</kw>
<status starttime="20170809 03:23:28.467" status="PASS" endtime="20170809 03:23:28.470"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.567">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:28.567">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:28.470" status="PASS" endtime="20170809 03:23:28.567"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.569">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:28.568" status="PASS" endtime="20170809 03:23:28.569"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.570">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:28.570" status="PASS" endtime="20170809 03:23:28.570"></status>
</kw>
<status starttime="20170809 03:23:28.569" status="PASS" endtime="20170809 03:23:28.570"></status>
</kw>
<status starttime="20170809 03:23:28.568" status="PASS" endtime="20170809 03:23:28.570"></status>
</kw>
<status starttime="20170809 03:23:28.567" status="PASS" endtime="20170809 03:23:28.571"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:28.571">Delete All Sessions</msg>
<status starttime="20170809 03:23:28.571" status="PASS" endtime="20170809 03:23:28.571"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:28.571">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:28.255" status="PASS" endtime="20170809 03:23:28.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:28.571" status="PASS" endtime="20170809 03:23:28.572"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.572">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:28.572">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:28.573">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:23:28.572" status="PASS" endtime="20170809 03:23:28.573"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:28.573">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:23:28.255" status="PASS" endtime="20170809 03:23:28.573"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:28.573">${host_state} = Running</msg>
<status starttime="20170809 03:23:28.254" status="PASS" endtime="20170809 03:23:28.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:23:28.573" status="PASS" endtime="20170809 03:23:28.574"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.579">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:28.578" status="PASS" endtime="20170809 03:23:28.579"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.580">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:28.579" status="PASS" endtime="20170809 03:23:28.580"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.581">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:28.580" status="PASS" endtime="20170809 03:23:28.581"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.582">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:28.581" status="PASS" endtime="20170809 03:23:28.582"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.760">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:28.583" status="PASS" endtime="20170809 03:23:28.760"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:28.760">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:28.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:28.582" status="PASS" endtime="20170809 03:23:28.760"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.761">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:28.761" status="PASS" endtime="20170809 03:23:28.761"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:28.761" status="PASS" endtime="20170809 03:23:28.762"></status>
</kw>
<status starttime="20170809 03:23:28.577" status="PASS" endtime="20170809 03:23:28.762"></status>
</kw>
<status starttime="20170809 03:23:28.577" status="PASS" endtime="20170809 03:23:28.762"></status>
</kw>
<status starttime="20170809 03:23:28.576" status="PASS" endtime="20170809 03:23:28.762"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.763">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:23:28.762" status="PASS" endtime="20170809 03:23:28.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.765">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:23:28.764" status="PASS" endtime="20170809 03:23:28.765"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.766">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:23:28.766" status="PASS" endtime="20170809 03:23:28.766"></status>
</kw>
<status starttime="20170809 03:23:28.765" status="PASS" endtime="20170809 03:23:28.766"></status>
</kw>
<status starttime="20170809 03:23:28.763" status="PASS" endtime="20170809 03:23:28.766"></status>
</kw>
<status starttime="20170809 03:23:28.763" status="PASS" endtime="20170809 03:23:28.766"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.832">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:28.832">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:28.767" status="PASS" endtime="20170809 03:23:28.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.834">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:28.834" status="PASS" endtime="20170809 03:23:28.834"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.835">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:28.835" status="PASS" endtime="20170809 03:23:28.835"></status>
</kw>
<status starttime="20170809 03:23:28.834" status="PASS" endtime="20170809 03:23:28.835"></status>
</kw>
<status starttime="20170809 03:23:28.833" status="PASS" endtime="20170809 03:23:28.835"></status>
</kw>
<status starttime="20170809 03:23:28.833" status="PASS" endtime="20170809 03:23:28.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:28.836">Delete All Sessions</msg>
<status starttime="20170809 03:23:28.836" status="PASS" endtime="20170809 03:23:28.836"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:28.836">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:28.575" status="PASS" endtime="20170809 03:23:28.836"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:28.837">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:28.836" status="PASS" endtime="20170809 03:23:28.837"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:28.837">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:28.837">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:28.838">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:23:28.837" status="PASS" endtime="20170809 03:23:28.838"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:28.838">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:23:28.575" status="PASS" endtime="20170809 03:23:28.838"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:28.838">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:23:28.574" status="PASS" endtime="20170809 03:23:28.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:23:28.839">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:23:28.838" status="FAIL" endtime="20170809 03:23:28.839"></status>
</kw>
<status starttime="20170809 03:23:28.574" status="FAIL" endtime="20170809 03:23:28.839"></status>
</kw>
<status starttime="20170809 03:23:27.864" status="FAIL" endtime="20170809 03:23:28.839"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:38.846">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:38.845" status="PASS" endtime="20170809 03:23:38.846"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:38.847">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:38.847" status="PASS" endtime="20170809 03:23:38.847"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:38.848">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:38.848" status="PASS" endtime="20170809 03:23:38.848"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:38.849">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:38.849" status="PASS" endtime="20170809 03:23:38.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.025">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:38.850" status="PASS" endtime="20170809 03:23:39.025"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:39.025">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:39.026">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:38.850" status="PASS" endtime="20170809 03:23:39.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.026">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:39.026" status="PASS" endtime="20170809 03:23:39.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:39.027" status="PASS" endtime="20170809 03:23:39.027"></status>
</kw>
<status starttime="20170809 03:23:38.845" status="PASS" endtime="20170809 03:23:39.027"></status>
</kw>
<status starttime="20170809 03:23:38.844" status="PASS" endtime="20170809 03:23:39.027"></status>
</kw>
<status starttime="20170809 03:23:38.843" status="PASS" endtime="20170809 03:23:39.027"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.028">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:23:39.028" status="PASS" endtime="20170809 03:23:39.028"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.030">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:39.029" status="PASS" endtime="20170809 03:23:39.030"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.031">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:39.031" status="PASS" endtime="20170809 03:23:39.031"></status>
</kw>
<status starttime="20170809 03:23:39.030" status="PASS" endtime="20170809 03:23:39.031"></status>
</kw>
<status starttime="20170809 03:23:39.029" status="PASS" endtime="20170809 03:23:39.031"></status>
</kw>
<status starttime="20170809 03:23:39.028" status="PASS" endtime="20170809 03:23:39.031"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.106">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:39.107">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:39.032" status="PASS" endtime="20170809 03:23:39.107"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.109">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:39.108" status="PASS" endtime="20170809 03:23:39.109"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.109">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:39.109" status="PASS" endtime="20170809 03:23:39.110"></status>
</kw>
<status starttime="20170809 03:23:39.109" status="PASS" endtime="20170809 03:23:39.110"></status>
</kw>
<status starttime="20170809 03:23:39.108" status="PASS" endtime="20170809 03:23:39.110"></status>
</kw>
<status starttime="20170809 03:23:39.107" status="PASS" endtime="20170809 03:23:39.110"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:39.110">Delete All Sessions</msg>
<status starttime="20170809 03:23:39.110" status="PASS" endtime="20170809 03:23:39.110"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:39.111">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:38.842" status="PASS" endtime="20170809 03:23:39.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:39.111" status="PASS" endtime="20170809 03:23:39.111"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.112">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:39.112">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:39.112">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:23:39.112" status="PASS" endtime="20170809 03:23:39.112"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:39.112">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:23:38.841" status="PASS" endtime="20170809 03:23:39.112"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:39.113">${power_state} = On</msg>
<status starttime="20170809 03:23:38.841" status="PASS" endtime="20170809 03:23:39.113"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:23:39.113" status="PASS" endtime="20170809 03:23:39.113"></status>
</kw>
<status starttime="20170809 03:23:38.840" status="PASS" endtime="20170809 03:23:39.113"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.117">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:39.116" status="PASS" endtime="20170809 03:23:39.118"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.118">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:39.118" status="PASS" endtime="20170809 03:23:39.118"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.119">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:39.118" status="PASS" endtime="20170809 03:23:39.119"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.120">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:39.119" status="PASS" endtime="20170809 03:23:39.120"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.301">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:39.120" status="PASS" endtime="20170809 03:23:39.301"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:39.301">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:39.301">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:39.120" status="PASS" endtime="20170809 03:23:39.301"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.302">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:39.302" status="PASS" endtime="20170809 03:23:39.302"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.303">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:39.302" status="PASS" endtime="20170809 03:23:39.303"></status>
</kw>
<status starttime="20170809 03:23:39.116" status="PASS" endtime="20170809 03:23:39.303"></status>
</kw>
<status starttime="20170809 03:23:39.116" status="PASS" endtime="20170809 03:23:39.303"></status>
</kw>
<status starttime="20170809 03:23:39.115" status="PASS" endtime="20170809 03:23:39.303"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.304">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:23:39.303" status="PASS" endtime="20170809 03:23:39.304"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.306">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:39.305" status="PASS" endtime="20170809 03:23:39.306"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.307">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:39.306" status="PASS" endtime="20170809 03:23:39.307"></status>
</kw>
<status starttime="20170809 03:23:39.306" status="PASS" endtime="20170809 03:23:39.307"></status>
</kw>
<status starttime="20170809 03:23:39.304" status="PASS" endtime="20170809 03:23:39.307"></status>
</kw>
<status starttime="20170809 03:23:39.304" status="PASS" endtime="20170809 03:23:39.307"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.396">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:39.396">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:39.307" status="PASS" endtime="20170809 03:23:39.396"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.399">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:39.398" status="PASS" endtime="20170809 03:23:39.399"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.400">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:39.400" status="PASS" endtime="20170809 03:23:39.400"></status>
</kw>
<status starttime="20170809 03:23:39.399" status="PASS" endtime="20170809 03:23:39.400"></status>
</kw>
<status starttime="20170809 03:23:39.397" status="PASS" endtime="20170809 03:23:39.400"></status>
</kw>
<status starttime="20170809 03:23:39.397" status="PASS" endtime="20170809 03:23:39.400"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:39.401">Delete All Sessions</msg>
<status starttime="20170809 03:23:39.401" status="PASS" endtime="20170809 03:23:39.401"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:39.401">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:39.114" status="PASS" endtime="20170809 03:23:39.401"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.402">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:39.401" status="PASS" endtime="20170809 03:23:39.402"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.402">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:39.402">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:39.403">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:23:39.402" status="PASS" endtime="20170809 03:23:39.403"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:39.403">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:23:39.114" status="PASS" endtime="20170809 03:23:39.403"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:39.403">${host_state} = Running</msg>
<status starttime="20170809 03:23:39.113" status="PASS" endtime="20170809 03:23:39.403"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:23:39.404" status="PASS" endtime="20170809 03:23:39.404"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.408">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:39.408" status="PASS" endtime="20170809 03:23:39.408"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.409">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:39.409" status="PASS" endtime="20170809 03:23:39.409"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.409">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:39.409" status="PASS" endtime="20170809 03:23:39.410"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.410">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:39.410" status="PASS" endtime="20170809 03:23:39.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.617">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:39.411" status="PASS" endtime="20170809 03:23:39.617"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:39.617">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:39.617">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:39.410" status="PASS" endtime="20170809 03:23:39.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.618">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:39.618" status="PASS" endtime="20170809 03:23:39.618"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.619">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:39.618" status="PASS" endtime="20170809 03:23:39.619"></status>
</kw>
<status starttime="20170809 03:23:39.407" status="PASS" endtime="20170809 03:23:39.619"></status>
</kw>
<status starttime="20170809 03:23:39.407" status="PASS" endtime="20170809 03:23:39.619"></status>
</kw>
<status starttime="20170809 03:23:39.406" status="PASS" endtime="20170809 03:23:39.619"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.620">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:23:39.619" status="PASS" endtime="20170809 03:23:39.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.622">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:23:39.621" status="PASS" endtime="20170809 03:23:39.622"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.623">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:23:39.623" status="PASS" endtime="20170809 03:23:39.623"></status>
</kw>
<status starttime="20170809 03:23:39.622" status="PASS" endtime="20170809 03:23:39.623"></status>
</kw>
<status starttime="20170809 03:23:39.620" status="PASS" endtime="20170809 03:23:39.623"></status>
</kw>
<status starttime="20170809 03:23:39.620" status="PASS" endtime="20170809 03:23:39.623"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.689">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:39.689">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:39.624" status="PASS" endtime="20170809 03:23:39.689"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.691">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:39.690" status="PASS" endtime="20170809 03:23:39.691"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.692">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:39.692" status="PASS" endtime="20170809 03:23:39.692"></status>
</kw>
<status starttime="20170809 03:23:39.691" status="PASS" endtime="20170809 03:23:39.692"></status>
</kw>
<status starttime="20170809 03:23:39.690" status="PASS" endtime="20170809 03:23:39.692"></status>
</kw>
<status starttime="20170809 03:23:39.689" status="PASS" endtime="20170809 03:23:39.692"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:39.693">Delete All Sessions</msg>
<status starttime="20170809 03:23:39.693" status="PASS" endtime="20170809 03:23:39.693"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:39.693">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:39.405" status="PASS" endtime="20170809 03:23:39.693"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:39.694">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:39.693" status="PASS" endtime="20170809 03:23:39.694"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:39.695">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:39.695">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:39.695">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:23:39.694" status="PASS" endtime="20170809 03:23:39.695"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:39.695">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:23:39.405" status="PASS" endtime="20170809 03:23:39.695"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:39.695">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:23:39.404" status="PASS" endtime="20170809 03:23:39.695"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:23:39.696">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:23:39.696" status="FAIL" endtime="20170809 03:23:39.696"></status>
</kw>
<status starttime="20170809 03:23:39.404" status="FAIL" endtime="20170809 03:23:39.696"></status>
</kw>
<status starttime="20170809 03:23:38.840" status="FAIL" endtime="20170809 03:23:39.696"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:49.701">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:49.701" status="PASS" endtime="20170809 03:23:49.702"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:49.702">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:49.702" status="PASS" endtime="20170809 03:23:49.702"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:49.703">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:49.703" status="PASS" endtime="20170809 03:23:49.703"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:49.704">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:49.703" status="PASS" endtime="20170809 03:23:49.704"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:50.245">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:49.704" status="PASS" endtime="20170809 03:23:50.245"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:50.245">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:50.245">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:49.704" status="PASS" endtime="20170809 03:23:50.245"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:50.246">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:50.245" status="PASS" endtime="20170809 03:23:50.246"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:50.246">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:50.246" status="PASS" endtime="20170809 03:23:50.246"></status>
</kw>
<status starttime="20170809 03:23:49.700" status="PASS" endtime="20170809 03:23:50.247"></status>
</kw>
<status starttime="20170809 03:23:49.700" status="PASS" endtime="20170809 03:23:50.247"></status>
</kw>
<status starttime="20170809 03:23:49.699" status="PASS" endtime="20170809 03:23:50.247"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:50.247">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:23:50.247" status="PASS" endtime="20170809 03:23:50.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:50.249">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:50.249" status="PASS" endtime="20170809 03:23:50.250"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:50.250">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:50.250" status="PASS" endtime="20170809 03:23:50.250"></status>
</kw>
<status starttime="20170809 03:23:50.250" status="PASS" endtime="20170809 03:23:50.251"></status>
</kw>
<status starttime="20170809 03:23:50.248" status="PASS" endtime="20170809 03:23:50.251"></status>
</kw>
<status starttime="20170809 03:23:50.248" status="PASS" endtime="20170809 03:23:50.251"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:53.774">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:53.774">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:50.251" status="PASS" endtime="20170809 03:23:53.774"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:53.776">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:53.775" status="PASS" endtime="20170809 03:23:53.776"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:53.777">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:53.777" status="PASS" endtime="20170809 03:23:53.777"></status>
</kw>
<status starttime="20170809 03:23:53.776" status="PASS" endtime="20170809 03:23:53.777"></status>
</kw>
<status starttime="20170809 03:23:53.775" status="PASS" endtime="20170809 03:23:53.777"></status>
</kw>
<status starttime="20170809 03:23:53.774" status="PASS" endtime="20170809 03:23:53.777"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:53.778">Delete All Sessions</msg>
<status starttime="20170809 03:23:53.778" status="PASS" endtime="20170809 03:23:53.778"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:53.778">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:49.699" status="PASS" endtime="20170809 03:23:53.778"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:53.779">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:53.778" status="PASS" endtime="20170809 03:23:53.779"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:53.779">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:53.779">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:53.780">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:23:53.779" status="PASS" endtime="20170809 03:23:53.780"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:53.780">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:23:49.698" status="PASS" endtime="20170809 03:23:53.780"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:53.781">${power_state} = On</msg>
<status starttime="20170809 03:23:49.698" status="PASS" endtime="20170809 03:23:53.781"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:23:53.781" status="PASS" endtime="20170809 03:23:53.781"></status>
</kw>
<status starttime="20170809 03:23:49.697" status="PASS" endtime="20170809 03:23:53.781"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:53.785">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:53.785" status="PASS" endtime="20170809 03:23:53.786"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:53.786">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:53.786" status="PASS" endtime="20170809 03:23:53.786"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:53.787">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:53.787" status="PASS" endtime="20170809 03:23:53.787"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:53.787">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:53.787" status="PASS" endtime="20170809 03:23:53.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:54.175">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:53.788" status="PASS" endtime="20170809 03:23:54.175"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:54.175">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:54.176">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:53.788" status="PASS" endtime="20170809 03:23:54.176"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:54.177">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:54.176" status="PASS" endtime="20170809 03:23:54.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:54.177">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:54.177" status="PASS" endtime="20170809 03:23:54.177"></status>
</kw>
<status starttime="20170809 03:23:53.784" status="PASS" endtime="20170809 03:23:54.177"></status>
</kw>
<status starttime="20170809 03:23:53.784" status="PASS" endtime="20170809 03:23:54.178"></status>
</kw>
<status starttime="20170809 03:23:53.783" status="PASS" endtime="20170809 03:23:54.178"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:54.178">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:23:54.178" status="PASS" endtime="20170809 03:23:54.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:54.180">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:54.180" status="PASS" endtime="20170809 03:23:54.180"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:54.181">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:23:54.181" status="PASS" endtime="20170809 03:23:54.182"></status>
</kw>
<status starttime="20170809 03:23:54.181" status="PASS" endtime="20170809 03:23:54.182"></status>
</kw>
<status starttime="20170809 03:23:54.179" status="PASS" endtime="20170809 03:23:54.182"></status>
</kw>
<status starttime="20170809 03:23:54.179" status="PASS" endtime="20170809 03:23:54.182"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:56.512">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:56.513">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:54.182" status="PASS" endtime="20170809 03:23:56.513"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:56.515">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:56.514" status="PASS" endtime="20170809 03:23:56.515"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:56.516">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:56.515" status="PASS" endtime="20170809 03:23:56.516"></status>
</kw>
<status starttime="20170809 03:23:56.515" status="PASS" endtime="20170809 03:23:56.516"></status>
</kw>
<status starttime="20170809 03:23:56.514" status="PASS" endtime="20170809 03:23:56.517"></status>
</kw>
<status starttime="20170809 03:23:56.513" status="PASS" endtime="20170809 03:23:56.517"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:56.517">Delete All Sessions</msg>
<status starttime="20170809 03:23:56.517" status="PASS" endtime="20170809 03:23:56.517"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:56.517">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:53.782" status="PASS" endtime="20170809 03:23:56.517"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:56.518">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:56.518" status="PASS" endtime="20170809 03:23:56.518"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:56.519">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:56.519">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:56.519">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:23:56.518" status="PASS" endtime="20170809 03:23:56.519"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:56.519">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:23:53.782" status="PASS" endtime="20170809 03:23:56.519"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:56.519">${host_state} = Running</msg>
<status starttime="20170809 03:23:53.782" status="PASS" endtime="20170809 03:23:56.519"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:23:56.520" status="PASS" endtime="20170809 03:23:56.520"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:56.525">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:23:56.524" status="PASS" endtime="20170809 03:23:56.525"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:56.526">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:23:56.525" status="PASS" endtime="20170809 03:23:56.526"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:56.527">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:23:56.526" status="PASS" endtime="20170809 03:23:56.527"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:56.528">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:23:56.527" status="PASS" endtime="20170809 03:23:56.528"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:57.537">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:23:56.528" status="PASS" endtime="20170809 03:23:57.537"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:57.537">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:23:57.537">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:56.528" status="PASS" endtime="20170809 03:23:57.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:57.538">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:57.537" status="PASS" endtime="20170809 03:23:57.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:57.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:57.538" status="PASS" endtime="20170809 03:23:57.539"></status>
</kw>
<status starttime="20170809 03:23:56.523" status="PASS" endtime="20170809 03:23:57.539"></status>
</kw>
<status starttime="20170809 03:23:56.523" status="PASS" endtime="20170809 03:23:57.539"></status>
</kw>
<status starttime="20170809 03:23:56.522" status="PASS" endtime="20170809 03:23:57.539"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:57.539">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:23:57.539" status="PASS" endtime="20170809 03:23:57.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:57.542">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:23:57.541" status="PASS" endtime="20170809 03:23:57.542"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:57.542">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:23:57.542" status="PASS" endtime="20170809 03:23:57.543"></status>
</kw>
<status starttime="20170809 03:23:57.542" status="PASS" endtime="20170809 03:23:57.543"></status>
</kw>
<status starttime="20170809 03:23:57.540" status="PASS" endtime="20170809 03:23:57.543"></status>
</kw>
<status starttime="20170809 03:23:57.540" status="PASS" endtime="20170809 03:23:57.543"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:58.602">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:23:58.603">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:57.543" status="PASS" endtime="20170809 03:23:58.603"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:58.605">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:58.604" status="PASS" endtime="20170809 03:23:58.605"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:58.606">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:23:58.605" status="PASS" endtime="20170809 03:23:58.606"></status>
</kw>
<status starttime="20170809 03:23:58.605" status="PASS" endtime="20170809 03:23:58.606"></status>
</kw>
<status starttime="20170809 03:23:58.604" status="PASS" endtime="20170809 03:23:58.606"></status>
</kw>
<status starttime="20170809 03:23:58.603" status="PASS" endtime="20170809 03:23:58.606"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:23:58.606">Delete All Sessions</msg>
<status starttime="20170809 03:23:58.606" status="PASS" endtime="20170809 03:23:58.606"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:58.607">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:23:56.521" status="PASS" endtime="20170809 03:23:58.607"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:23:58.607">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:23:58.607" status="PASS" endtime="20170809 03:23:58.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:23:58.608">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:23:58.608">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:23:58.608">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:23:58.608" status="PASS" endtime="20170809 03:23:58.608"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:58.608">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:23:56.521" status="PASS" endtime="20170809 03:23:58.609"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:23:58.609">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:23:56.520" status="PASS" endtime="20170809 03:23:58.609"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:23:58.609">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:23:58.609" status="FAIL" endtime="20170809 03:23:58.609"></status>
</kw>
<status starttime="20170809 03:23:56.520" status="FAIL" endtime="20170809 03:23:58.610"></status>
</kw>
<status starttime="20170809 03:23:49.697" status="FAIL" endtime="20170809 03:23:58.610"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:08.615">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:08.615" status="PASS" endtime="20170809 03:24:08.616"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:08.617">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:08.616" status="PASS" endtime="20170809 03:24:08.617"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:08.617">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:08.617" status="PASS" endtime="20170809 03:24:08.617"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:08.618">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:08.617" status="PASS" endtime="20170809 03:24:08.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:09.035">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:08.619" status="PASS" endtime="20170809 03:24:09.035"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:09.035">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:09.035">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:08.618" status="PASS" endtime="20170809 03:24:09.035"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:09.036">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:09.035" status="PASS" endtime="20170809 03:24:09.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:09.036">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:09.036" status="PASS" endtime="20170809 03:24:09.037"></status>
</kw>
<status starttime="20170809 03:24:08.614" status="PASS" endtime="20170809 03:24:09.037"></status>
</kw>
<status starttime="20170809 03:24:08.614" status="PASS" endtime="20170809 03:24:09.037"></status>
</kw>
<status starttime="20170809 03:24:08.613" status="PASS" endtime="20170809 03:24:09.037"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:09.037">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:24:09.037" status="PASS" endtime="20170809 03:24:09.037"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:09.040">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:09.039" status="PASS" endtime="20170809 03:24:09.040"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:09.041">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:09.041" status="PASS" endtime="20170809 03:24:09.041"></status>
</kw>
<status starttime="20170809 03:24:09.040" status="PASS" endtime="20170809 03:24:09.041"></status>
</kw>
<status starttime="20170809 03:24:09.038" status="PASS" endtime="20170809 03:24:09.041"></status>
</kw>
<status starttime="20170809 03:24:09.038" status="PASS" endtime="20170809 03:24:09.041"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:11.075">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:11.076">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:09.041" status="PASS" endtime="20170809 03:24:11.076"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:11.078">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:11.077" status="PASS" endtime="20170809 03:24:11.078"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:11.079">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:11.078" status="PASS" endtime="20170809 03:24:11.079"></status>
</kw>
<status starttime="20170809 03:24:11.078" status="PASS" endtime="20170809 03:24:11.079"></status>
</kw>
<status starttime="20170809 03:24:11.077" status="PASS" endtime="20170809 03:24:11.079"></status>
</kw>
<status starttime="20170809 03:24:11.076" status="PASS" endtime="20170809 03:24:11.079"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:11.080">Delete All Sessions</msg>
<status starttime="20170809 03:24:11.080" status="PASS" endtime="20170809 03:24:11.080"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:11.080">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:08.612" status="PASS" endtime="20170809 03:24:11.080"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:11.081">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:11.080" status="PASS" endtime="20170809 03:24:11.081"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:11.081">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:11.081">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:11.082">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status starttime="20170809 03:24:11.081" status="PASS" endtime="20170809 03:24:11.082"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:11.082">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 03:24:08.612" status="PASS" endtime="20170809 03:24:11.082"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:11.082">${power_state} = Off</msg>
<status starttime="20170809 03:24:08.611" status="PASS" endtime="20170809 03:24:11.082"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:24:11.083">On != Off</msg>
<status starttime="20170809 03:24:11.083" status="FAIL" endtime="20170809 03:24:11.083"></status>
</kw>
<status starttime="20170809 03:24:08.611" status="FAIL" endtime="20170809 03:24:11.084"></status>
</kw>
<status starttime="20170809 03:24:08.610" status="FAIL" endtime="20170809 03:24:11.084"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.089">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:21.089" status="PASS" endtime="20170809 03:24:21.090"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.090">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:21.090" status="PASS" endtime="20170809 03:24:21.090"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.091">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:21.090" status="PASS" endtime="20170809 03:24:21.091"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.092">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:21.091" status="PASS" endtime="20170809 03:24:21.092"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.341">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:21.092" status="PASS" endtime="20170809 03:24:21.341"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:21.341">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:21.341">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:21.092" status="PASS" endtime="20170809 03:24:21.341"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.342">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:21.341" status="PASS" endtime="20170809 03:24:21.342"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.343">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:21.342" status="PASS" endtime="20170809 03:24:21.343"></status>
</kw>
<status starttime="20170809 03:24:21.088" status="PASS" endtime="20170809 03:24:21.343"></status>
</kw>
<status starttime="20170809 03:24:21.088" status="PASS" endtime="20170809 03:24:21.343"></status>
</kw>
<status starttime="20170809 03:24:21.087" status="PASS" endtime="20170809 03:24:21.343"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.343">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:24:21.343" status="PASS" endtime="20170809 03:24:21.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.346">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:21.345" status="PASS" endtime="20170809 03:24:21.346"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.346">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:21.346" status="PASS" endtime="20170809 03:24:21.347"></status>
</kw>
<status starttime="20170809 03:24:21.346" status="PASS" endtime="20170809 03:24:21.347"></status>
</kw>
<status starttime="20170809 03:24:21.344" status="PASS" endtime="20170809 03:24:21.347"></status>
</kw>
<status starttime="20170809 03:24:21.344" status="PASS" endtime="20170809 03:24:21.347"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.422">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:21.422">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:21.347" status="PASS" endtime="20170809 03:24:21.422"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.424">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:21.423" status="PASS" endtime="20170809 03:24:21.424"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.425">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:21.425" status="PASS" endtime="20170809 03:24:21.425"></status>
</kw>
<status starttime="20170809 03:24:21.424" status="PASS" endtime="20170809 03:24:21.425"></status>
</kw>
<status starttime="20170809 03:24:21.423" status="PASS" endtime="20170809 03:24:21.425"></status>
</kw>
<status starttime="20170809 03:24:21.422" status="PASS" endtime="20170809 03:24:21.425"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:21.426">Delete All Sessions</msg>
<status starttime="20170809 03:24:21.426" status="PASS" endtime="20170809 03:24:21.426"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:21.426">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:21.086" status="PASS" endtime="20170809 03:24:21.426"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.427">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:21.426" status="PASS" endtime="20170809 03:24:21.427"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.427">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:21.427">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:21.427">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:24:21.427" status="PASS" endtime="20170809 03:24:21.427"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:21.428">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:24:21.086" status="PASS" endtime="20170809 03:24:21.428"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:21.428">${power_state} = On</msg>
<status starttime="20170809 03:24:21.085" status="PASS" endtime="20170809 03:24:21.428"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:24:21.428" status="PASS" endtime="20170809 03:24:21.429"></status>
</kw>
<status starttime="20170809 03:24:21.085" status="PASS" endtime="20170809 03:24:21.429"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.432">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:21.432" status="PASS" endtime="20170809 03:24:21.433"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.434">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:21.433" status="PASS" endtime="20170809 03:24:21.434"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.434">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:21.434" status="PASS" endtime="20170809 03:24:21.434"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.435">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:21.434" status="PASS" endtime="20170809 03:24:21.435"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.715">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:21.436" status="PASS" endtime="20170809 03:24:21.715"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:21.715">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:21.715">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:21.435" status="PASS" endtime="20170809 03:24:21.715"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.716">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:21.716" status="PASS" endtime="20170809 03:24:21.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.717">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:21.716" status="PASS" endtime="20170809 03:24:21.717"></status>
</kw>
<status starttime="20170809 03:24:21.431" status="PASS" endtime="20170809 03:24:21.717"></status>
</kw>
<status starttime="20170809 03:24:21.431" status="PASS" endtime="20170809 03:24:21.717"></status>
</kw>
<status starttime="20170809 03:24:21.430" status="PASS" endtime="20170809 03:24:21.717"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.718">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:24:21.717" status="PASS" endtime="20170809 03:24:21.718"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.720">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:21.719" status="PASS" endtime="20170809 03:24:21.720"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.721">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:21.721" status="PASS" endtime="20170809 03:24:21.721"></status>
</kw>
<status starttime="20170809 03:24:21.720" status="PASS" endtime="20170809 03:24:21.721"></status>
</kw>
<status starttime="20170809 03:24:21.719" status="PASS" endtime="20170809 03:24:21.721"></status>
</kw>
<status starttime="20170809 03:24:21.718" status="PASS" endtime="20170809 03:24:21.721"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.826">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:21.826">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:21.722" status="PASS" endtime="20170809 03:24:21.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.828">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:21.827" status="PASS" endtime="20170809 03:24:21.828"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.829">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:21.829" status="PASS" endtime="20170809 03:24:21.829"></status>
</kw>
<status starttime="20170809 03:24:21.828" status="PASS" endtime="20170809 03:24:21.829"></status>
</kw>
<status starttime="20170809 03:24:21.827" status="PASS" endtime="20170809 03:24:21.829"></status>
</kw>
<status starttime="20170809 03:24:21.826" status="PASS" endtime="20170809 03:24:21.829"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:21.830">Delete All Sessions</msg>
<status starttime="20170809 03:24:21.829" status="PASS" endtime="20170809 03:24:21.830"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:21.830">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:21.430" status="PASS" endtime="20170809 03:24:21.830"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.831">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:21.830" status="PASS" endtime="20170809 03:24:21.831"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.831">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:21.831">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:21.831">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:24:21.831" status="PASS" endtime="20170809 03:24:21.831"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:21.832">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:24:21.429" status="PASS" endtime="20170809 03:24:21.832"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:21.832">${host_state} = Running</msg>
<status starttime="20170809 03:24:21.429" status="PASS" endtime="20170809 03:24:21.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:24:21.832" status="PASS" endtime="20170809 03:24:21.833"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:21.837">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:21.837" status="PASS" endtime="20170809 03:24:21.837"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.838">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:21.837" status="PASS" endtime="20170809 03:24:21.838"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.838">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:21.838" status="PASS" endtime="20170809 03:24:21.838"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:21.839">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:21.839" status="PASS" endtime="20170809 03:24:21.839"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:22.041">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:21.840" status="PASS" endtime="20170809 03:24:22.041"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:22.042">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:22.042">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:21.839" status="PASS" endtime="20170809 03:24:22.042"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:22.042">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:22.042" status="PASS" endtime="20170809 03:24:22.042"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:22.043">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:22.043" status="PASS" endtime="20170809 03:24:22.043"></status>
</kw>
<status starttime="20170809 03:24:21.836" status="PASS" endtime="20170809 03:24:22.044"></status>
</kw>
<status starttime="20170809 03:24:21.836" status="PASS" endtime="20170809 03:24:22.044"></status>
</kw>
<status starttime="20170809 03:24:21.835" status="PASS" endtime="20170809 03:24:22.044"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:22.044">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:24:22.044" status="PASS" endtime="20170809 03:24:22.044"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:22.046">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:24:22.046" status="PASS" endtime="20170809 03:24:22.047"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:22.047">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:24:22.047" status="PASS" endtime="20170809 03:24:22.047"></status>
</kw>
<status starttime="20170809 03:24:22.047" status="PASS" endtime="20170809 03:24:22.048"></status>
</kw>
<status starttime="20170809 03:24:22.045" status="PASS" endtime="20170809 03:24:22.048"></status>
</kw>
<status starttime="20170809 03:24:22.045" status="PASS" endtime="20170809 03:24:22.048"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:22.114">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:22.114">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:22.048" status="PASS" endtime="20170809 03:24:22.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:22.116">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:22.115" status="PASS" endtime="20170809 03:24:22.116"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:22.117">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:22.116" status="PASS" endtime="20170809 03:24:22.117"></status>
</kw>
<status starttime="20170809 03:24:22.116" status="PASS" endtime="20170809 03:24:22.117"></status>
</kw>
<status starttime="20170809 03:24:22.115" status="PASS" endtime="20170809 03:24:22.117"></status>
</kw>
<status starttime="20170809 03:24:22.114" status="PASS" endtime="20170809 03:24:22.117"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:22.117">Delete All Sessions</msg>
<status starttime="20170809 03:24:22.117" status="PASS" endtime="20170809 03:24:22.117"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:22.118">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:21.834" status="PASS" endtime="20170809 03:24:22.118"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:22.118">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:22.118" status="PASS" endtime="20170809 03:24:22.118"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:22.119">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:22.119">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:22.119">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170809 03:24:22.119" status="PASS" endtime="20170809 03:24:22.119"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:22.119">${state} = Off</msg>
<status starttime="20170809 03:24:21.833" status="PASS" endtime="20170809 03:24:22.119"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:22.120">${boot_progress} = Off</msg>
<status starttime="20170809 03:24:21.833" status="PASS" endtime="20170809 03:24:22.120"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:24:22.120">Off != FW Progress, Starting OS</msg>
<status starttime="20170809 03:24:22.120" status="FAIL" endtime="20170809 03:24:22.120"></status>
</kw>
<status starttime="20170809 03:24:21.833" status="FAIL" endtime="20170809 03:24:22.120"></status>
</kw>
<status starttime="20170809 03:24:21.084" status="FAIL" endtime="20170809 03:24:22.121"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.126">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:32.125" status="PASS" endtime="20170809 03:24:32.126"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:32.126" status="PASS" endtime="20170809 03:24:32.127"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.127">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:32.127" status="PASS" endtime="20170809 03:24:32.127"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:32.128" status="PASS" endtime="20170809 03:24:32.128"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.455">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:32.129" status="PASS" endtime="20170809 03:24:32.455"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:32.455">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:32.456">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:32.128" status="PASS" endtime="20170809 03:24:32.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.456">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:32.456" status="PASS" endtime="20170809 03:24:32.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.457">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:32.457" status="PASS" endtime="20170809 03:24:32.457"></status>
</kw>
<status starttime="20170809 03:24:32.125" status="PASS" endtime="20170809 03:24:32.457"></status>
</kw>
<status starttime="20170809 03:24:32.124" status="PASS" endtime="20170809 03:24:32.457"></status>
</kw>
<status starttime="20170809 03:24:32.124" status="PASS" endtime="20170809 03:24:32.457"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.458">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:24:32.458" status="PASS" endtime="20170809 03:24:32.458"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.460">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:32.459" status="PASS" endtime="20170809 03:24:32.460"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.461">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:32.461" status="PASS" endtime="20170809 03:24:32.461"></status>
</kw>
<status starttime="20170809 03:24:32.460" status="PASS" endtime="20170809 03:24:32.461"></status>
</kw>
<status starttime="20170809 03:24:32.459" status="PASS" endtime="20170809 03:24:32.461"></status>
</kw>
<status starttime="20170809 03:24:32.458" status="PASS" endtime="20170809 03:24:32.461"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.525">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:32.525">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:32.462" status="PASS" endtime="20170809 03:24:32.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.527">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:32.526" status="PASS" endtime="20170809 03:24:32.527"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.528">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:32.527" status="PASS" endtime="20170809 03:24:32.528"></status>
</kw>
<status starttime="20170809 03:24:32.527" status="PASS" endtime="20170809 03:24:32.528"></status>
</kw>
<status starttime="20170809 03:24:32.526" status="PASS" endtime="20170809 03:24:32.528"></status>
</kw>
<status starttime="20170809 03:24:32.525" status="PASS" endtime="20170809 03:24:32.528"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:32.528">Delete All Sessions</msg>
<status starttime="20170809 03:24:32.528" status="PASS" endtime="20170809 03:24:32.528"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:32.529">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:32.123" status="PASS" endtime="20170809 03:24:32.529"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:32.529" status="PASS" endtime="20170809 03:24:32.529"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.530">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:32.530">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:32.530">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:24:32.530" status="PASS" endtime="20170809 03:24:32.530"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:32.530">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:24:32.122" status="PASS" endtime="20170809 03:24:32.530"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:32.531">${power_state} = On</msg>
<status starttime="20170809 03:24:32.122" status="PASS" endtime="20170809 03:24:32.531"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:24:32.531" status="PASS" endtime="20170809 03:24:32.531"></status>
</kw>
<status starttime="20170809 03:24:32.122" status="PASS" endtime="20170809 03:24:32.531"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.535">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:32.535" status="PASS" endtime="20170809 03:24:32.536"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.536">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:32.536" status="PASS" endtime="20170809 03:24:32.536"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.537">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:32.537" status="PASS" endtime="20170809 03:24:32.537"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.538">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:32.537" status="PASS" endtime="20170809 03:24:32.538"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.727">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:32.538" status="PASS" endtime="20170809 03:24:32.727"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:32.727">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:32.727">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:32.538" status="PASS" endtime="20170809 03:24:32.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.728">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:32.727" status="PASS" endtime="20170809 03:24:32.728"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:32.728" status="PASS" endtime="20170809 03:24:32.728"></status>
</kw>
<status starttime="20170809 03:24:32.534" status="PASS" endtime="20170809 03:24:32.729"></status>
</kw>
<status starttime="20170809 03:24:32.534" status="PASS" endtime="20170809 03:24:32.729"></status>
</kw>
<status starttime="20170809 03:24:32.533" status="PASS" endtime="20170809 03:24:32.729"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.729">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:24:32.729" status="PASS" endtime="20170809 03:24:32.729"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.731">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:32.731" status="PASS" endtime="20170809 03:24:32.731"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.732">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:32.732" status="PASS" endtime="20170809 03:24:32.733"></status>
</kw>
<status starttime="20170809 03:24:32.732" status="PASS" endtime="20170809 03:24:32.733"></status>
</kw>
<status starttime="20170809 03:24:32.730" status="PASS" endtime="20170809 03:24:32.733"></status>
</kw>
<status starttime="20170809 03:24:32.730" status="PASS" endtime="20170809 03:24:32.733"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.823">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:32.823">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:32.733" status="PASS" endtime="20170809 03:24:32.823"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.825">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:32.824" status="PASS" endtime="20170809 03:24:32.825"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.826">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:32.826" status="PASS" endtime="20170809 03:24:32.826"></status>
</kw>
<status starttime="20170809 03:24:32.825" status="PASS" endtime="20170809 03:24:32.826"></status>
</kw>
<status starttime="20170809 03:24:32.824" status="PASS" endtime="20170809 03:24:32.826"></status>
</kw>
<status starttime="20170809 03:24:32.823" status="PASS" endtime="20170809 03:24:32.826"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:32.827">Delete All Sessions</msg>
<status starttime="20170809 03:24:32.827" status="PASS" endtime="20170809 03:24:32.827"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:32.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:32.533" status="PASS" endtime="20170809 03:24:32.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:32.827" status="PASS" endtime="20170809 03:24:32.828"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.828">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:32.828">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:32.828">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:24:32.828" status="PASS" endtime="20170809 03:24:32.828"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:32.829">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:24:32.532" status="PASS" endtime="20170809 03:24:32.829"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:32.829">${host_state} = Running</msg>
<status starttime="20170809 03:24:32.532" status="PASS" endtime="20170809 03:24:32.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:24:32.829" status="PASS" endtime="20170809 03:24:32.830"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:32.834">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:32.834" status="PASS" endtime="20170809 03:24:32.834"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.835">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:32.835" status="PASS" endtime="20170809 03:24:32.835"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.836">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:32.835" status="PASS" endtime="20170809 03:24:32.836"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:32.836">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:32.836" status="PASS" endtime="20170809 03:24:32.836"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:33.073">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:32.837" status="PASS" endtime="20170809 03:24:33.073"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:33.074">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:33.074">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:32.836" status="PASS" endtime="20170809 03:24:33.074"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:33.075">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:33.074" status="PASS" endtime="20170809 03:24:33.075"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:33.076">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:33.075" status="PASS" endtime="20170809 03:24:33.076"></status>
</kw>
<status starttime="20170809 03:24:32.833" status="PASS" endtime="20170809 03:24:33.076"></status>
</kw>
<status starttime="20170809 03:24:32.833" status="PASS" endtime="20170809 03:24:33.076"></status>
</kw>
<status starttime="20170809 03:24:32.832" status="PASS" endtime="20170809 03:24:33.076"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:33.077">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:24:33.077" status="PASS" endtime="20170809 03:24:33.077"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:33.080">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:24:33.079" status="PASS" endtime="20170809 03:24:33.080"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:33.082">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:24:33.081" status="PASS" endtime="20170809 03:24:33.082"></status>
</kw>
<status starttime="20170809 03:24:33.081" status="PASS" endtime="20170809 03:24:33.082"></status>
</kw>
<status starttime="20170809 03:24:33.078" status="PASS" endtime="20170809 03:24:33.082"></status>
</kw>
<status starttime="20170809 03:24:33.078" status="PASS" endtime="20170809 03:24:33.082"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:33.180">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:33.181">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:33.082" status="PASS" endtime="20170809 03:24:33.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:33.183">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:33.182" status="PASS" endtime="20170809 03:24:33.183"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:33.184">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:33.184" status="PASS" endtime="20170809 03:24:33.185"></status>
</kw>
<status starttime="20170809 03:24:33.183" status="PASS" endtime="20170809 03:24:33.185"></status>
</kw>
<status starttime="20170809 03:24:33.181" status="PASS" endtime="20170809 03:24:33.185"></status>
</kw>
<status starttime="20170809 03:24:33.181" status="PASS" endtime="20170809 03:24:33.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:33.185">Delete All Sessions</msg>
<status starttime="20170809 03:24:33.185" status="PASS" endtime="20170809 03:24:33.185"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:33.185">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:32.831" status="PASS" endtime="20170809 03:24:33.186"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:33.186">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:33.186" status="PASS" endtime="20170809 03:24:33.186"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:33.187">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:33.187">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:33.187">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:24:33.186" status="PASS" endtime="20170809 03:24:33.187"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:33.187">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:24:32.830" status="PASS" endtime="20170809 03:24:33.187"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:33.188">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:24:32.830" status="PASS" endtime="20170809 03:24:33.188"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:24:33.188">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:24:33.188" status="FAIL" endtime="20170809 03:24:33.188"></status>
</kw>
<status starttime="20170809 03:24:32.830" status="FAIL" endtime="20170809 03:24:33.188"></status>
</kw>
<status starttime="20170809 03:24:32.121" status="FAIL" endtime="20170809 03:24:33.189"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.194">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:43.193" status="PASS" endtime="20170809 03:24:43.194"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.195">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:43.194" status="PASS" endtime="20170809 03:24:43.195"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.195">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:43.195" status="PASS" endtime="20170809 03:24:43.196"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.196">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:43.196" status="PASS" endtime="20170809 03:24:43.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.389">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:43.197" status="PASS" endtime="20170809 03:24:43.389"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:43.389">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:43.390">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:43.196" status="PASS" endtime="20170809 03:24:43.390"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.390">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:43.390" status="PASS" endtime="20170809 03:24:43.390"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:43.391" status="PASS" endtime="20170809 03:24:43.391"></status>
</kw>
<status starttime="20170809 03:24:43.193" status="PASS" endtime="20170809 03:24:43.391"></status>
</kw>
<status starttime="20170809 03:24:43.192" status="PASS" endtime="20170809 03:24:43.391"></status>
</kw>
<status starttime="20170809 03:24:43.192" status="PASS" endtime="20170809 03:24:43.391"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.392">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:24:43.392" status="PASS" endtime="20170809 03:24:43.392"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.394">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:43.393" status="PASS" endtime="20170809 03:24:43.394"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.395">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:43.395" status="PASS" endtime="20170809 03:24:43.395"></status>
</kw>
<status starttime="20170809 03:24:43.394" status="PASS" endtime="20170809 03:24:43.396"></status>
</kw>
<status starttime="20170809 03:24:43.393" status="PASS" endtime="20170809 03:24:43.396"></status>
</kw>
<status starttime="20170809 03:24:43.392" status="PASS" endtime="20170809 03:24:43.396"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.459">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:43.459">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:43.396" status="PASS" endtime="20170809 03:24:43.459"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.461">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:43.461" status="PASS" endtime="20170809 03:24:43.461"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.462">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:43.462" status="PASS" endtime="20170809 03:24:43.462"></status>
</kw>
<status starttime="20170809 03:24:43.462" status="PASS" endtime="20170809 03:24:43.463"></status>
</kw>
<status starttime="20170809 03:24:43.460" status="PASS" endtime="20170809 03:24:43.463"></status>
</kw>
<status starttime="20170809 03:24:43.460" status="PASS" endtime="20170809 03:24:43.463"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:43.463">Delete All Sessions</msg>
<status starttime="20170809 03:24:43.463" status="PASS" endtime="20170809 03:24:43.463"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:43.463">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:43.191" status="PASS" endtime="20170809 03:24:43.463"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.464">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:43.464" status="PASS" endtime="20170809 03:24:43.464"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.465">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:43.465">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:43.465">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:24:43.464" status="PASS" endtime="20170809 03:24:43.465"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:43.465">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:24:43.190" status="PASS" endtime="20170809 03:24:43.465"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:43.465">${power_state} = On</msg>
<status starttime="20170809 03:24:43.190" status="PASS" endtime="20170809 03:24:43.465"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:24:43.466" status="PASS" endtime="20170809 03:24:43.466"></status>
</kw>
<status starttime="20170809 03:24:43.190" status="PASS" endtime="20170809 03:24:43.466"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.470">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:43.469" status="PASS" endtime="20170809 03:24:43.473"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.474">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:43.473" status="PASS" endtime="20170809 03:24:43.474"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.475">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:43.474" status="PASS" endtime="20170809 03:24:43.475"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.475">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:43.475" status="PASS" endtime="20170809 03:24:43.475"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.829">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:43.476" status="PASS" endtime="20170809 03:24:43.829"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:43.829">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:43.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:43.476" status="PASS" endtime="20170809 03:24:43.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.830">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:43.829" status="PASS" endtime="20170809 03:24:43.830"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:43.830" status="PASS" endtime="20170809 03:24:43.831"></status>
</kw>
<status starttime="20170809 03:24:43.469" status="PASS" endtime="20170809 03:24:43.831"></status>
</kw>
<status starttime="20170809 03:24:43.468" status="PASS" endtime="20170809 03:24:43.831"></status>
</kw>
<status starttime="20170809 03:24:43.468" status="PASS" endtime="20170809 03:24:43.831"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.832">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:24:43.831" status="PASS" endtime="20170809 03:24:43.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.834">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:43.833" status="PASS" endtime="20170809 03:24:43.834"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.835">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:43.835" status="PASS" endtime="20170809 03:24:43.836"></status>
</kw>
<status starttime="20170809 03:24:43.834" status="PASS" endtime="20170809 03:24:43.836"></status>
</kw>
<status starttime="20170809 03:24:43.833" status="PASS" endtime="20170809 03:24:43.836"></status>
</kw>
<status starttime="20170809 03:24:43.832" status="PASS" endtime="20170809 03:24:43.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.941">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:43.941">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:43.836" status="PASS" endtime="20170809 03:24:43.941"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.943">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:43.943" status="PASS" endtime="20170809 03:24:43.943"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.944">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:43.944" status="PASS" endtime="20170809 03:24:43.944"></status>
</kw>
<status starttime="20170809 03:24:43.943" status="PASS" endtime="20170809 03:24:43.944"></status>
</kw>
<status starttime="20170809 03:24:43.942" status="PASS" endtime="20170809 03:24:43.944"></status>
</kw>
<status starttime="20170809 03:24:43.941" status="PASS" endtime="20170809 03:24:43.945"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:43.945">Delete All Sessions</msg>
<status starttime="20170809 03:24:43.945" status="PASS" endtime="20170809 03:24:43.945"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:43.945">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:43.467" status="PASS" endtime="20170809 03:24:43.945"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.946">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:43.946" status="PASS" endtime="20170809 03:24:43.946"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.947">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:43.947">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:43.947">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:24:43.946" status="PASS" endtime="20170809 03:24:43.947"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:43.947">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:24:43.467" status="PASS" endtime="20170809 03:24:43.947"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:43.947">${host_state} = Running</msg>
<status starttime="20170809 03:24:43.466" status="PASS" endtime="20170809 03:24:43.947"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:24:43.948" status="PASS" endtime="20170809 03:24:43.948"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:43.952">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:43.952" status="PASS" endtime="20170809 03:24:43.953"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.953">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:43.953" status="PASS" endtime="20170809 03:24:43.953"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.954">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:43.953" status="PASS" endtime="20170809 03:24:43.954"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:43.954">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:43.954" status="PASS" endtime="20170809 03:24:43.954"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:44.158">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:43.955" status="PASS" endtime="20170809 03:24:44.158"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:44.159">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:44.159">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:43.955" status="PASS" endtime="20170809 03:24:44.159"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:44.159">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:44.159" status="PASS" endtime="20170809 03:24:44.159"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:44.160">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:44.160" status="PASS" endtime="20170809 03:24:44.160"></status>
</kw>
<status starttime="20170809 03:24:43.951" status="PASS" endtime="20170809 03:24:44.160"></status>
</kw>
<status starttime="20170809 03:24:43.951" status="PASS" endtime="20170809 03:24:44.160"></status>
</kw>
<status starttime="20170809 03:24:43.950" status="PASS" endtime="20170809 03:24:44.160"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:44.161">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:24:44.161" status="PASS" endtime="20170809 03:24:44.161"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:44.163">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:24:44.163" status="PASS" endtime="20170809 03:24:44.163"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:44.165">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:24:44.164" status="PASS" endtime="20170809 03:24:44.165"></status>
</kw>
<status starttime="20170809 03:24:44.163" status="PASS" endtime="20170809 03:24:44.165"></status>
</kw>
<status starttime="20170809 03:24:44.162" status="PASS" endtime="20170809 03:24:44.165"></status>
</kw>
<status starttime="20170809 03:24:44.161" status="PASS" endtime="20170809 03:24:44.165"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:44.231">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:44.231">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:44.165" status="PASS" endtime="20170809 03:24:44.231"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:44.233">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:44.232" status="PASS" endtime="20170809 03:24:44.233"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:44.234">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:44.234" status="PASS" endtime="20170809 03:24:44.234"></status>
</kw>
<status starttime="20170809 03:24:44.233" status="PASS" endtime="20170809 03:24:44.234"></status>
</kw>
<status starttime="20170809 03:24:44.232" status="PASS" endtime="20170809 03:24:44.234"></status>
</kw>
<status starttime="20170809 03:24:44.231" status="PASS" endtime="20170809 03:24:44.235"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:44.235">Delete All Sessions</msg>
<status starttime="20170809 03:24:44.235" status="PASS" endtime="20170809 03:24:44.235"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:44.235">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:43.950" status="PASS" endtime="20170809 03:24:44.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:44.236">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:44.236" status="PASS" endtime="20170809 03:24:44.236"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:44.237">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:44.237">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:44.237">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:24:44.236" status="PASS" endtime="20170809 03:24:44.237"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:44.237">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:24:43.949" status="PASS" endtime="20170809 03:24:44.237"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:44.238">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:24:43.948" status="PASS" endtime="20170809 03:24:44.238"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:24:44.239">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:24:44.238" status="FAIL" endtime="20170809 03:24:44.239"></status>
</kw>
<status starttime="20170809 03:24:43.948" status="FAIL" endtime="20170809 03:24:44.239"></status>
</kw>
<status starttime="20170809 03:24:43.189" status="FAIL" endtime="20170809 03:24:44.239"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:54.244">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:54.244" status="PASS" endtime="20170809 03:24:54.245"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.246">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:54.245" status="PASS" endtime="20170809 03:24:54.246"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.246">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:54.246" status="PASS" endtime="20170809 03:24:54.246"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.247">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:54.246" status="PASS" endtime="20170809 03:24:54.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:54.466">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:54.248" status="PASS" endtime="20170809 03:24:54.466"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:54.466">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:54.466">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:54.247" status="PASS" endtime="20170809 03:24:54.466"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:54.467">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:54.467" status="PASS" endtime="20170809 03:24:54.467"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:54.468">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:54.467" status="PASS" endtime="20170809 03:24:54.468"></status>
</kw>
<status starttime="20170809 03:24:54.244" status="PASS" endtime="20170809 03:24:54.468"></status>
</kw>
<status starttime="20170809 03:24:54.243" status="PASS" endtime="20170809 03:24:54.468"></status>
</kw>
<status starttime="20170809 03:24:54.243" status="PASS" endtime="20170809 03:24:54.468"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.469">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:24:54.468" status="PASS" endtime="20170809 03:24:54.469"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.471">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:54.470" status="PASS" endtime="20170809 03:24:54.471"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:54.472">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:54.471" status="PASS" endtime="20170809 03:24:54.472"></status>
</kw>
<status starttime="20170809 03:24:54.471" status="PASS" endtime="20170809 03:24:54.472"></status>
</kw>
<status starttime="20170809 03:24:54.469" status="PASS" endtime="20170809 03:24:54.472"></status>
</kw>
<status starttime="20170809 03:24:54.469" status="PASS" endtime="20170809 03:24:54.472"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.551">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:54.551">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:54.472" status="PASS" endtime="20170809 03:24:54.551"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.553">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:54.552" status="PASS" endtime="20170809 03:24:54.553"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:54.554">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:54.554" status="PASS" endtime="20170809 03:24:54.555"></status>
</kw>
<status starttime="20170809 03:24:54.553" status="PASS" endtime="20170809 03:24:54.555"></status>
</kw>
<status starttime="20170809 03:24:54.552" status="PASS" endtime="20170809 03:24:54.555"></status>
</kw>
<status starttime="20170809 03:24:54.551" status="PASS" endtime="20170809 03:24:54.555"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:54.555">Delete All Sessions</msg>
<status starttime="20170809 03:24:54.555" status="PASS" endtime="20170809 03:24:54.555"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:54.556">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:54.242" status="PASS" endtime="20170809 03:24:54.556"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:54.556">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:54.556" status="PASS" endtime="20170809 03:24:54.556"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.557">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:54.557">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:54.557">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:24:54.556" status="PASS" endtime="20170809 03:24:54.557"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:54.557">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:24:54.241" status="PASS" endtime="20170809 03:24:54.557"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:54.558">${power_state} = On</msg>
<status starttime="20170809 03:24:54.241" status="PASS" endtime="20170809 03:24:54.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:24:54.558" status="PASS" endtime="20170809 03:24:54.558"></status>
</kw>
<status starttime="20170809 03:24:54.241" status="PASS" endtime="20170809 03:24:54.558"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:54.562">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:54.561" status="PASS" endtime="20170809 03:24:54.563"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.563">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:54.563" status="PASS" endtime="20170809 03:24:54.563"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.564">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:54.563" status="PASS" endtime="20170809 03:24:54.564"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.564">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:54.564" status="PASS" endtime="20170809 03:24:54.564"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:54.960">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:54.565" status="PASS" endtime="20170809 03:24:54.960"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:54.960">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:54.960">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:54.565" status="PASS" endtime="20170809 03:24:54.960"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:54.961">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:54.961" status="PASS" endtime="20170809 03:24:54.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:54.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:54.961" status="PASS" endtime="20170809 03:24:54.962"></status>
</kw>
<status starttime="20170809 03:24:54.561" status="PASS" endtime="20170809 03:24:54.962"></status>
</kw>
<status starttime="20170809 03:24:54.560" status="PASS" endtime="20170809 03:24:54.962"></status>
</kw>
<status starttime="20170809 03:24:54.560" status="PASS" endtime="20170809 03:24:54.962"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.963">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:24:54.963" status="PASS" endtime="20170809 03:24:54.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:54.965">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:54.964" status="PASS" endtime="20170809 03:24:54.965"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:54.966">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:24:54.966" status="PASS" endtime="20170809 03:24:54.966"></status>
</kw>
<status starttime="20170809 03:24:54.965" status="PASS" endtime="20170809 03:24:54.966"></status>
</kw>
<status starttime="20170809 03:24:54.964" status="PASS" endtime="20170809 03:24:54.966"></status>
</kw>
<status starttime="20170809 03:24:54.963" status="PASS" endtime="20170809 03:24:54.966"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:55.086">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:55.086">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:54.967" status="PASS" endtime="20170809 03:24:55.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:55.088">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:55.087" status="PASS" endtime="20170809 03:24:55.088"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:55.089">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:55.088" status="PASS" endtime="20170809 03:24:55.089"></status>
</kw>
<status starttime="20170809 03:24:55.088" status="PASS" endtime="20170809 03:24:55.089"></status>
</kw>
<status starttime="20170809 03:24:55.087" status="PASS" endtime="20170809 03:24:55.089"></status>
</kw>
<status starttime="20170809 03:24:55.086" status="PASS" endtime="20170809 03:24:55.089"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:55.089">Delete All Sessions</msg>
<status starttime="20170809 03:24:55.089" status="PASS" endtime="20170809 03:24:55.090"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:55.090">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:54.559" status="PASS" endtime="20170809 03:24:55.090"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:55.090">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:55.090" status="PASS" endtime="20170809 03:24:55.090"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:55.091">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:55.091">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:55.091">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:24:55.091" status="PASS" endtime="20170809 03:24:55.091"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:55.091">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:24:54.559" status="PASS" endtime="20170809 03:24:55.091"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:55.092">${host_state} = Running</msg>
<status starttime="20170809 03:24:54.558" status="PASS" endtime="20170809 03:24:55.092"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:24:55.092" status="PASS" endtime="20170809 03:24:55.092"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:55.097">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:24:55.096" status="PASS" endtime="20170809 03:24:55.097"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:55.098">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:24:55.097" status="PASS" endtime="20170809 03:24:55.098"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:55.098">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:24:55.098" status="PASS" endtime="20170809 03:24:55.098"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:55.099">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:24:55.099" status="PASS" endtime="20170809 03:24:55.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:55.349">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:24:55.100" status="PASS" endtime="20170809 03:24:55.349"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:55.350">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:24:55.350">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:55.099" status="PASS" endtime="20170809 03:24:55.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:55.350">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:55.350" status="PASS" endtime="20170809 03:24:55.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:55.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:55.351" status="PASS" endtime="20170809 03:24:55.351"></status>
</kw>
<status starttime="20170809 03:24:55.096" status="PASS" endtime="20170809 03:24:55.351"></status>
</kw>
<status starttime="20170809 03:24:55.096" status="PASS" endtime="20170809 03:24:55.351"></status>
</kw>
<status starttime="20170809 03:24:55.095" status="PASS" endtime="20170809 03:24:55.351"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:55.352">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:24:55.352" status="PASS" endtime="20170809 03:24:55.352"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:55.354">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:24:55.354" status="PASS" endtime="20170809 03:24:55.354"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:55.356">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:24:55.355" status="PASS" endtime="20170809 03:24:55.356"></status>
</kw>
<status starttime="20170809 03:24:55.354" status="PASS" endtime="20170809 03:24:55.356"></status>
</kw>
<status starttime="20170809 03:24:55.353" status="PASS" endtime="20170809 03:24:55.356"></status>
</kw>
<status starttime="20170809 03:24:55.352" status="PASS" endtime="20170809 03:24:55.356"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:55.437">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:24:55.438">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:55.356" status="PASS" endtime="20170809 03:24:55.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:55.440">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:55.439" status="PASS" endtime="20170809 03:24:55.440"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:55.441">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:24:55.440" status="PASS" endtime="20170809 03:24:55.441"></status>
</kw>
<status starttime="20170809 03:24:55.440" status="PASS" endtime="20170809 03:24:55.441"></status>
</kw>
<status starttime="20170809 03:24:55.439" status="PASS" endtime="20170809 03:24:55.441"></status>
</kw>
<status starttime="20170809 03:24:55.438" status="PASS" endtime="20170809 03:24:55.441"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:24:55.441">Delete All Sessions</msg>
<status starttime="20170809 03:24:55.441" status="PASS" endtime="20170809 03:24:55.442"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:55.442">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:24:55.094" status="PASS" endtime="20170809 03:24:55.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:24:55.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:24:55.442" status="PASS" endtime="20170809 03:24:55.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:24:55.444">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:24:55.444">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:24:55.444">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:24:55.443" status="PASS" endtime="20170809 03:24:55.444"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:55.444">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:24:55.094" status="PASS" endtime="20170809 03:24:55.445"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:24:55.445">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:24:55.093" status="PASS" endtime="20170809 03:24:55.445"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:24:55.446">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:24:55.445" status="FAIL" endtime="20170809 03:24:55.446"></status>
</kw>
<status starttime="20170809 03:24:55.093" status="FAIL" endtime="20170809 03:24:55.446"></status>
</kw>
<status starttime="20170809 03:24:54.240" status="FAIL" endtime="20170809 03:24:55.446"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:05.451">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:05.451" status="PASS" endtime="20170809 03:25:05.452"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:05.452">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:05.452" status="PASS" endtime="20170809 03:25:05.452"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:05.453">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:05.453" status="PASS" endtime="20170809 03:25:05.453"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:05.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:05.453" status="PASS" endtime="20170809 03:25:05.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:05.707">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:05.454" status="PASS" endtime="20170809 03:25:05.707"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:05.708">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:05.708">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:05.454" status="PASS" endtime="20170809 03:25:05.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:05.708">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:05.708" status="PASS" endtime="20170809 03:25:05.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:05.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:05.709" status="PASS" endtime="20170809 03:25:05.709"></status>
</kw>
<status starttime="20170809 03:25:05.450" status="PASS" endtime="20170809 03:25:05.709"></status>
</kw>
<status starttime="20170809 03:25:05.450" status="PASS" endtime="20170809 03:25:05.709"></status>
</kw>
<status starttime="20170809 03:25:05.449" status="PASS" endtime="20170809 03:25:05.710"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:05.710">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:25:05.710" status="PASS" endtime="20170809 03:25:05.710"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:05.712">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:05.712" status="PASS" endtime="20170809 03:25:05.712"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:05.713">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:05.713" status="PASS" endtime="20170809 03:25:05.713"></status>
</kw>
<status starttime="20170809 03:25:05.713" status="PASS" endtime="20170809 03:25:05.714"></status>
</kw>
<status starttime="20170809 03:25:05.711" status="PASS" endtime="20170809 03:25:05.714"></status>
</kw>
<status starttime="20170809 03:25:05.711" status="PASS" endtime="20170809 03:25:05.714"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:05.792">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:05.793">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:05.714" status="PASS" endtime="20170809 03:25:05.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:05.794">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:05.794" status="PASS" endtime="20170809 03:25:05.795"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:05.796">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:05.795" status="PASS" endtime="20170809 03:25:05.796"></status>
</kw>
<status starttime="20170809 03:25:05.795" status="PASS" endtime="20170809 03:25:05.796"></status>
</kw>
<status starttime="20170809 03:25:05.793" status="PASS" endtime="20170809 03:25:05.796"></status>
</kw>
<status starttime="20170809 03:25:05.793" status="PASS" endtime="20170809 03:25:05.796"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:05.796">Delete All Sessions</msg>
<status starttime="20170809 03:25:05.796" status="PASS" endtime="20170809 03:25:05.796"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:05.797">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:05.449" status="PASS" endtime="20170809 03:25:05.797"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:05.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:05.797" status="PASS" endtime="20170809 03:25:05.797"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:05.798">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:05.798">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:05.798">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:25:05.798" status="PASS" endtime="20170809 03:25:05.798"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:05.798">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:25:05.448" status="PASS" endtime="20170809 03:25:05.798"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:05.799">${power_state} = On</msg>
<status starttime="20170809 03:25:05.448" status="PASS" endtime="20170809 03:25:05.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:25:05.799" status="PASS" endtime="20170809 03:25:05.799"></status>
</kw>
<status starttime="20170809 03:25:05.447" status="PASS" endtime="20170809 03:25:05.799"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:05.803">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:05.803" status="PASS" endtime="20170809 03:25:05.804"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:05.804">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:05.804" status="PASS" endtime="20170809 03:25:05.804"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:05.805">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:05.805" status="PASS" endtime="20170809 03:25:05.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:05.806">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:05.805" status="PASS" endtime="20170809 03:25:05.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.083">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:05.806" status="PASS" endtime="20170809 03:25:06.083"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:06.083">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:06.083">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:05.806" status="PASS" endtime="20170809 03:25:06.083"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.084">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:06.084" status="PASS" endtime="20170809 03:25:06.084"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.085">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:06.084" status="PASS" endtime="20170809 03:25:06.085"></status>
</kw>
<status starttime="20170809 03:25:05.802" status="PASS" endtime="20170809 03:25:06.085"></status>
</kw>
<status starttime="20170809 03:25:05.802" status="PASS" endtime="20170809 03:25:06.085"></status>
</kw>
<status starttime="20170809 03:25:05.801" status="PASS" endtime="20170809 03:25:06.085"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.086">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:25:06.085" status="PASS" endtime="20170809 03:25:06.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.088">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:06.087" status="PASS" endtime="20170809 03:25:06.088"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.089">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:06.088" status="PASS" endtime="20170809 03:25:06.089"></status>
</kw>
<status starttime="20170809 03:25:06.088" status="PASS" endtime="20170809 03:25:06.089"></status>
</kw>
<status starttime="20170809 03:25:06.086" status="PASS" endtime="20170809 03:25:06.089"></status>
</kw>
<status starttime="20170809 03:25:06.086" status="PASS" endtime="20170809 03:25:06.089"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.194">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:06.194">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:06.089" status="PASS" endtime="20170809 03:25:06.194"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.196">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:06.196" status="PASS" endtime="20170809 03:25:06.196"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.197">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:06.197" status="PASS" endtime="20170809 03:25:06.197"></status>
</kw>
<status starttime="20170809 03:25:06.196" status="PASS" endtime="20170809 03:25:06.197"></status>
</kw>
<status starttime="20170809 03:25:06.195" status="PASS" endtime="20170809 03:25:06.197"></status>
</kw>
<status starttime="20170809 03:25:06.194" status="PASS" endtime="20170809 03:25:06.198"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:06.198">Delete All Sessions</msg>
<status starttime="20170809 03:25:06.198" status="PASS" endtime="20170809 03:25:06.198"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:06.198">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:05.800" status="PASS" endtime="20170809 03:25:06.198"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:06.198" status="PASS" endtime="20170809 03:25:06.199"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.199">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:06.199">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:06.200">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:25:06.199" status="PASS" endtime="20170809 03:25:06.200"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:06.200">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:25:05.800" status="PASS" endtime="20170809 03:25:06.200"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:06.200">${host_state} = Running</msg>
<status starttime="20170809 03:25:05.800" status="PASS" endtime="20170809 03:25:06.200"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:25:06.200" status="PASS" endtime="20170809 03:25:06.201"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.205">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:06.205" status="PASS" endtime="20170809 03:25:06.205"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.206">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:06.206" status="PASS" endtime="20170809 03:25:06.206"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.207">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:06.206" status="PASS" endtime="20170809 03:25:06.207"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.207">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:06.207" status="PASS" endtime="20170809 03:25:06.207"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.386">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:06.208" status="PASS" endtime="20170809 03:25:06.386"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:06.386">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:06.386">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:06.208" status="PASS" endtime="20170809 03:25:06.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.387">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:06.386" status="PASS" endtime="20170809 03:25:06.387"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:06.387" status="PASS" endtime="20170809 03:25:06.387"></status>
</kw>
<status starttime="20170809 03:25:06.204" status="PASS" endtime="20170809 03:25:06.387"></status>
</kw>
<status starttime="20170809 03:25:06.204" status="PASS" endtime="20170809 03:25:06.388"></status>
</kw>
<status starttime="20170809 03:25:06.203" status="PASS" endtime="20170809 03:25:06.388"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.388">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:25:06.388" status="PASS" endtime="20170809 03:25:06.388"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.390">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:25:06.390" status="PASS" endtime="20170809 03:25:06.390"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.392">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:25:06.391" status="PASS" endtime="20170809 03:25:06.392"></status>
</kw>
<status starttime="20170809 03:25:06.391" status="PASS" endtime="20170809 03:25:06.392"></status>
</kw>
<status starttime="20170809 03:25:06.389" status="PASS" endtime="20170809 03:25:06.392"></status>
</kw>
<status starttime="20170809 03:25:06.389" status="PASS" endtime="20170809 03:25:06.392"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.466">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:06.467">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:06.392" status="PASS" endtime="20170809 03:25:06.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.468">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:06.468" status="PASS" endtime="20170809 03:25:06.468"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.469">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:06.469" status="PASS" endtime="20170809 03:25:06.469"></status>
</kw>
<status starttime="20170809 03:25:06.469" status="PASS" endtime="20170809 03:25:06.470"></status>
</kw>
<status starttime="20170809 03:25:06.467" status="PASS" endtime="20170809 03:25:06.470"></status>
</kw>
<status starttime="20170809 03:25:06.467" status="PASS" endtime="20170809 03:25:06.470"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:06.470">Delete All Sessions</msg>
<status starttime="20170809 03:25:06.470" status="PASS" endtime="20170809 03:25:06.470"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:06.471">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:06.203" status="PASS" endtime="20170809 03:25:06.471"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:06.472">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:06.471" status="PASS" endtime="20170809 03:25:06.472"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:06.472">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:06.473">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:06.473">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:25:06.472" status="PASS" endtime="20170809 03:25:06.473"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:06.473">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:25:06.202" status="PASS" endtime="20170809 03:25:06.473"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:06.473">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:25:06.201" status="PASS" endtime="20170809 03:25:06.473"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:25:06.474">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:25:06.474" status="FAIL" endtime="20170809 03:25:06.474"></status>
</kw>
<status starttime="20170809 03:25:06.201" status="FAIL" endtime="20170809 03:25:06.474"></status>
</kw>
<status starttime="20170809 03:25:05.447" status="FAIL" endtime="20170809 03:25:06.474"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:16.479">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:16.479" status="PASS" endtime="20170809 03:25:16.480"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:16.480">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:16.480" status="PASS" endtime="20170809 03:25:16.481"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:16.481">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:16.481" status="PASS" endtime="20170809 03:25:16.481"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:16.482">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:16.481" status="PASS" endtime="20170809 03:25:16.482"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:16.705">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:16.483" status="PASS" endtime="20170809 03:25:16.706"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:16.706">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:16.706">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:16.482" status="PASS" endtime="20170809 03:25:16.706"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:16.706">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:16.706" status="PASS" endtime="20170809 03:25:16.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:16.707">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:16.707" status="PASS" endtime="20170809 03:25:16.707"></status>
</kw>
<status starttime="20170809 03:25:16.479" status="PASS" endtime="20170809 03:25:16.707"></status>
</kw>
<status starttime="20170809 03:25:16.478" status="PASS" endtime="20170809 03:25:16.708"></status>
</kw>
<status starttime="20170809 03:25:16.477" status="PASS" endtime="20170809 03:25:16.708"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:16.708">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:25:16.708" status="PASS" endtime="20170809 03:25:16.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:16.710">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:16.710" status="PASS" endtime="20170809 03:25:16.710"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:16.711">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:16.711" status="PASS" endtime="20170809 03:25:16.711"></status>
</kw>
<status starttime="20170809 03:25:16.711" status="PASS" endtime="20170809 03:25:16.712"></status>
</kw>
<status starttime="20170809 03:25:16.709" status="PASS" endtime="20170809 03:25:16.712"></status>
</kw>
<status starttime="20170809 03:25:16.709" status="PASS" endtime="20170809 03:25:16.712"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:16.823">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:16.823">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:16.712" status="PASS" endtime="20170809 03:25:16.823"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:16.825">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:16.824" status="PASS" endtime="20170809 03:25:16.825"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:16.826">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:16.826" status="PASS" endtime="20170809 03:25:16.826"></status>
</kw>
<status starttime="20170809 03:25:16.825" status="PASS" endtime="20170809 03:25:16.826"></status>
</kw>
<status starttime="20170809 03:25:16.824" status="PASS" endtime="20170809 03:25:16.826"></status>
</kw>
<status starttime="20170809 03:25:16.823" status="PASS" endtime="20170809 03:25:16.826"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:16.827">Delete All Sessions</msg>
<status starttime="20170809 03:25:16.826" status="PASS" endtime="20170809 03:25:16.827"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:16.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:16.477" status="PASS" endtime="20170809 03:25:16.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:16.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:16.827" status="PASS" endtime="20170809 03:25:16.828"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:16.828">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:16.828">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:16.828">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:25:16.828" status="PASS" endtime="20170809 03:25:16.828"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:16.829">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:25:16.476" status="PASS" endtime="20170809 03:25:16.829"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:16.829">${power_state} = On</msg>
<status starttime="20170809 03:25:16.476" status="PASS" endtime="20170809 03:25:16.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:25:16.829" status="PASS" endtime="20170809 03:25:16.830"></status>
</kw>
<status starttime="20170809 03:25:16.476" status="PASS" endtime="20170809 03:25:16.830"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:16.836">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:16.836" status="PASS" endtime="20170809 03:25:16.837"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:16.837">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:16.837" status="PASS" endtime="20170809 03:25:16.837"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:16.838">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:16.838" status="PASS" endtime="20170809 03:25:16.838"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:16.839">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:16.838" status="PASS" endtime="20170809 03:25:16.839"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.051">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:16.840" status="PASS" endtime="20170809 03:25:17.051"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:17.052">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:17.052">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:16.839" status="PASS" endtime="20170809 03:25:17.052"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.052">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:17.052" status="PASS" endtime="20170809 03:25:17.052"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.053">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:17.053" status="PASS" endtime="20170809 03:25:17.053"></status>
</kw>
<status starttime="20170809 03:25:16.832" status="PASS" endtime="20170809 03:25:17.053"></status>
</kw>
<status starttime="20170809 03:25:16.832" status="PASS" endtime="20170809 03:25:17.053"></status>
</kw>
<status starttime="20170809 03:25:16.831" status="PASS" endtime="20170809 03:25:17.053"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.054">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:25:17.054" status="PASS" endtime="20170809 03:25:17.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.056">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:17.055" status="PASS" endtime="20170809 03:25:17.056"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.057">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:17.057" status="PASS" endtime="20170809 03:25:17.057"></status>
</kw>
<status starttime="20170809 03:25:17.056" status="PASS" endtime="20170809 03:25:17.057"></status>
</kw>
<status starttime="20170809 03:25:17.055" status="PASS" endtime="20170809 03:25:17.057"></status>
</kw>
<status starttime="20170809 03:25:17.054" status="PASS" endtime="20170809 03:25:17.057"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.160">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:17.160">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:17.058" status="PASS" endtime="20170809 03:25:17.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.162">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:17.162" status="PASS" endtime="20170809 03:25:17.162"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.163">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:17.163" status="PASS" endtime="20170809 03:25:17.163"></status>
</kw>
<status starttime="20170809 03:25:17.162" status="PASS" endtime="20170809 03:25:17.164"></status>
</kw>
<status starttime="20170809 03:25:17.161" status="PASS" endtime="20170809 03:25:17.164"></status>
</kw>
<status starttime="20170809 03:25:17.161" status="PASS" endtime="20170809 03:25:17.164"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:17.164">Delete All Sessions</msg>
<status starttime="20170809 03:25:17.164" status="PASS" endtime="20170809 03:25:17.164"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:17.164">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:16.831" status="PASS" endtime="20170809 03:25:17.165"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.165">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:17.165" status="PASS" endtime="20170809 03:25:17.165"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.166">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:17.166">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:17.166">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:25:17.165" status="PASS" endtime="20170809 03:25:17.166"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:17.166">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:25:16.830" status="PASS" endtime="20170809 03:25:17.166"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:17.167">${host_state} = Running</msg>
<status starttime="20170809 03:25:16.830" status="PASS" endtime="20170809 03:25:17.167"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:25:17.167" status="PASS" endtime="20170809 03:25:17.167"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.172">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:17.171" status="PASS" endtime="20170809 03:25:17.172"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.173">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:17.172" status="PASS" endtime="20170809 03:25:17.173"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.173">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:17.173" status="PASS" endtime="20170809 03:25:17.173"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.174">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:17.173" status="PASS" endtime="20170809 03:25:17.174"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.378">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:17.175" status="PASS" endtime="20170809 03:25:17.378"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:17.378">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:17.378">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:17.174" status="PASS" endtime="20170809 03:25:17.378"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.379">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:17.379" status="PASS" endtime="20170809 03:25:17.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.380">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:17.379" status="PASS" endtime="20170809 03:25:17.380"></status>
</kw>
<status starttime="20170809 03:25:17.171" status="PASS" endtime="20170809 03:25:17.380"></status>
</kw>
<status starttime="20170809 03:25:17.170" status="PASS" endtime="20170809 03:25:17.381"></status>
</kw>
<status starttime="20170809 03:25:17.170" status="PASS" endtime="20170809 03:25:17.381"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.381">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:25:17.381" status="PASS" endtime="20170809 03:25:17.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.383">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:25:17.383" status="PASS" endtime="20170809 03:25:17.383"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.384">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:25:17.384" status="PASS" endtime="20170809 03:25:17.384"></status>
</kw>
<status starttime="20170809 03:25:17.384" status="PASS" endtime="20170809 03:25:17.385"></status>
</kw>
<status starttime="20170809 03:25:17.382" status="PASS" endtime="20170809 03:25:17.385"></status>
</kw>
<status starttime="20170809 03:25:17.382" status="PASS" endtime="20170809 03:25:17.385"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.467">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:17.467">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:17.385" status="PASS" endtime="20170809 03:25:17.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.469">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:17.469" status="PASS" endtime="20170809 03:25:17.469"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.470">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:17.470" status="PASS" endtime="20170809 03:25:17.471"></status>
</kw>
<status starttime="20170809 03:25:17.469" status="PASS" endtime="20170809 03:25:17.471"></status>
</kw>
<status starttime="20170809 03:25:17.468" status="PASS" endtime="20170809 03:25:17.471"></status>
</kw>
<status starttime="20170809 03:25:17.468" status="PASS" endtime="20170809 03:25:17.471"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:17.471">Delete All Sessions</msg>
<status starttime="20170809 03:25:17.471" status="PASS" endtime="20170809 03:25:17.471"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:17.471">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:17.169" status="PASS" endtime="20170809 03:25:17.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:17.472">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:17.472" status="PASS" endtime="20170809 03:25:17.472"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:17.473">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:17.473">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:17.473">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:25:17.473" status="PASS" endtime="20170809 03:25:17.473"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:17.473">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:25:17.168" status="PASS" endtime="20170809 03:25:17.473"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:17.474">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:25:17.168" status="PASS" endtime="20170809 03:25:17.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:25:17.474">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:25:17.474" status="FAIL" endtime="20170809 03:25:17.474"></status>
</kw>
<status starttime="20170809 03:25:17.167" status="FAIL" endtime="20170809 03:25:17.474"></status>
</kw>
<status starttime="20170809 03:25:16.475" status="FAIL" endtime="20170809 03:25:17.475"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:27.481">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:27.480" status="PASS" endtime="20170809 03:25:27.481"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:27.482">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:27.481" status="PASS" endtime="20170809 03:25:27.482"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:27.482">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:27.482" status="PASS" endtime="20170809 03:25:27.482"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:27.483">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:27.483" status="PASS" endtime="20170809 03:25:27.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:27.735">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:27.484" status="PASS" endtime="20170809 03:25:27.735"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:27.735">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:27.735">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:27.483" status="PASS" endtime="20170809 03:25:27.735"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:27.736">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:27.736" status="PASS" endtime="20170809 03:25:27.736"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:27.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:27.736" status="PASS" endtime="20170809 03:25:27.737"></status>
</kw>
<status starttime="20170809 03:25:27.479" status="PASS" endtime="20170809 03:25:27.737"></status>
</kw>
<status starttime="20170809 03:25:27.479" status="PASS" endtime="20170809 03:25:27.737"></status>
</kw>
<status starttime="20170809 03:25:27.478" status="PASS" endtime="20170809 03:25:27.737"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:27.738">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:25:27.737" status="PASS" endtime="20170809 03:25:27.738"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:27.740">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:27.739" status="PASS" endtime="20170809 03:25:27.740"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:27.741">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:27.740" status="PASS" endtime="20170809 03:25:27.741"></status>
</kw>
<status starttime="20170809 03:25:27.740" status="PASS" endtime="20170809 03:25:27.741"></status>
</kw>
<status starttime="20170809 03:25:27.738" status="PASS" endtime="20170809 03:25:27.741"></status>
</kw>
<status starttime="20170809 03:25:27.738" status="PASS" endtime="20170809 03:25:27.741"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:27.814">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:27.814">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:27.741" status="PASS" endtime="20170809 03:25:27.814"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:27.816">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:27.815" status="PASS" endtime="20170809 03:25:27.816"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:27.818">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:27.817" status="PASS" endtime="20170809 03:25:27.818"></status>
</kw>
<status starttime="20170809 03:25:27.816" status="PASS" endtime="20170809 03:25:27.818"></status>
</kw>
<status starttime="20170809 03:25:27.815" status="PASS" endtime="20170809 03:25:27.818"></status>
</kw>
<status starttime="20170809 03:25:27.814" status="PASS" endtime="20170809 03:25:27.818"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:27.818">Delete All Sessions</msg>
<status starttime="20170809 03:25:27.818" status="PASS" endtime="20170809 03:25:27.819"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:27.819">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:27.478" status="PASS" endtime="20170809 03:25:27.819"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:27.819">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:27.819" status="PASS" endtime="20170809 03:25:27.819"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:27.820">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:27.820">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:27.820">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:25:27.820" status="PASS" endtime="20170809 03:25:27.820"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:27.820">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:25:27.477" status="PASS" endtime="20170809 03:25:27.821"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:27.821">${power_state} = On</msg>
<status starttime="20170809 03:25:27.477" status="PASS" endtime="20170809 03:25:27.821"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:25:27.821" status="PASS" endtime="20170809 03:25:27.821"></status>
</kw>
<status starttime="20170809 03:25:27.476" status="PASS" endtime="20170809 03:25:27.821"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:27.825">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:27.825" status="PASS" endtime="20170809 03:25:27.825"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:27.826">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:27.826" status="PASS" endtime="20170809 03:25:27.826"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:27.827">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:27.826" status="PASS" endtime="20170809 03:25:27.827"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:27.827">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:27.827" status="PASS" endtime="20170809 03:25:27.827"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.009">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:27.828" status="PASS" endtime="20170809 03:25:28.009"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:28.009">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:28.009">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:27.828" status="PASS" endtime="20170809 03:25:28.009"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.010">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:28.010" status="PASS" endtime="20170809 03:25:28.010"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.011">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:28.010" status="PASS" endtime="20170809 03:25:28.011"></status>
</kw>
<status starttime="20170809 03:25:27.824" status="PASS" endtime="20170809 03:25:28.011"></status>
</kw>
<status starttime="20170809 03:25:27.824" status="PASS" endtime="20170809 03:25:28.011"></status>
</kw>
<status starttime="20170809 03:25:27.823" status="PASS" endtime="20170809 03:25:28.011"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.012">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:25:28.011" status="PASS" endtime="20170809 03:25:28.012"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.015">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:28.014" status="PASS" endtime="20170809 03:25:28.015"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.016">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:28.015" status="PASS" endtime="20170809 03:25:28.016"></status>
</kw>
<status starttime="20170809 03:25:28.015" status="PASS" endtime="20170809 03:25:28.016"></status>
</kw>
<status starttime="20170809 03:25:28.013" status="PASS" endtime="20170809 03:25:28.016"></status>
</kw>
<status starttime="20170809 03:25:28.012" status="PASS" endtime="20170809 03:25:28.016"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.105">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:28.106">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:28.016" status="PASS" endtime="20170809 03:25:28.106"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.107">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:28.107" status="PASS" endtime="20170809 03:25:28.108"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.108">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:28.108" status="PASS" endtime="20170809 03:25:28.109"></status>
</kw>
<status starttime="20170809 03:25:28.108" status="PASS" endtime="20170809 03:25:28.109"></status>
</kw>
<status starttime="20170809 03:25:28.106" status="PASS" endtime="20170809 03:25:28.109"></status>
</kw>
<status starttime="20170809 03:25:28.106" status="PASS" endtime="20170809 03:25:28.109"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:28.109">Delete All Sessions</msg>
<status starttime="20170809 03:25:28.109" status="PASS" endtime="20170809 03:25:28.109"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:28.109">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:27.823" status="PASS" endtime="20170809 03:25:28.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.110">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:28.110" status="PASS" endtime="20170809 03:25:28.110"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.111">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:28.111">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:28.111">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:25:28.110" status="PASS" endtime="20170809 03:25:28.111"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:28.111">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:25:27.822" status="PASS" endtime="20170809 03:25:28.111"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:28.111">${host_state} = Running</msg>
<status starttime="20170809 03:25:27.822" status="PASS" endtime="20170809 03:25:28.112"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:25:28.112" status="PASS" endtime="20170809 03:25:28.112"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.116">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:28.116" status="PASS" endtime="20170809 03:25:28.117"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.117">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:28.117" status="PASS" endtime="20170809 03:25:28.117"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.118">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:28.118" status="PASS" endtime="20170809 03:25:28.118"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.119">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:28.118" status="PASS" endtime="20170809 03:25:28.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.295">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:28.119" status="PASS" endtime="20170809 03:25:28.295"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:28.295">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:28.295">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:28.119" status="PASS" endtime="20170809 03:25:28.295"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.296">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:28.296" status="PASS" endtime="20170809 03:25:28.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.297">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:28.296" status="PASS" endtime="20170809 03:25:28.297"></status>
</kw>
<status starttime="20170809 03:25:28.116" status="PASS" endtime="20170809 03:25:28.297"></status>
</kw>
<status starttime="20170809 03:25:28.115" status="PASS" endtime="20170809 03:25:28.297"></status>
</kw>
<status starttime="20170809 03:25:28.114" status="PASS" endtime="20170809 03:25:28.297"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.298">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:25:28.297" status="PASS" endtime="20170809 03:25:28.298"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.300">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:25:28.299" status="PASS" endtime="20170809 03:25:28.300"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.301">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:25:28.300" status="PASS" endtime="20170809 03:25:28.301"></status>
</kw>
<status starttime="20170809 03:25:28.300" status="PASS" endtime="20170809 03:25:28.301"></status>
</kw>
<status starttime="20170809 03:25:28.298" status="PASS" endtime="20170809 03:25:28.301"></status>
</kw>
<status starttime="20170809 03:25:28.298" status="PASS" endtime="20170809 03:25:28.301"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.398">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:28.398">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:28.301" status="PASS" endtime="20170809 03:25:28.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.400">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:28.399" status="PASS" endtime="20170809 03:25:28.400"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.401">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:28.400" status="PASS" endtime="20170809 03:25:28.401"></status>
</kw>
<status starttime="20170809 03:25:28.400" status="PASS" endtime="20170809 03:25:28.401"></status>
</kw>
<status starttime="20170809 03:25:28.399" status="PASS" endtime="20170809 03:25:28.401"></status>
</kw>
<status starttime="20170809 03:25:28.398" status="PASS" endtime="20170809 03:25:28.401"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:28.402">Delete All Sessions</msg>
<status starttime="20170809 03:25:28.402" status="PASS" endtime="20170809 03:25:28.402"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:28.402">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:28.114" status="PASS" endtime="20170809 03:25:28.402"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:28.403">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:28.403" status="PASS" endtime="20170809 03:25:28.403"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:28.404">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:28.404">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:28.404">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:25:28.404" status="PASS" endtime="20170809 03:25:28.404"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:28.405">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:25:28.113" status="PASS" endtime="20170809 03:25:28.405"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:28.405">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:25:28.113" status="PASS" endtime="20170809 03:25:28.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:25:28.406">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:25:28.405" status="FAIL" endtime="20170809 03:25:28.406"></status>
</kw>
<status starttime="20170809 03:25:28.113" status="FAIL" endtime="20170809 03:25:28.406"></status>
</kw>
<status starttime="20170809 03:25:27.475" status="FAIL" endtime="20170809 03:25:28.407"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:38.413">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:38.412" status="PASS" endtime="20170809 03:25:38.413"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.414">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:38.413" status="PASS" endtime="20170809 03:25:38.414"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.414">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:38.414" status="PASS" endtime="20170809 03:25:38.414"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.415">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:38.415" status="PASS" endtime="20170809 03:25:38.415"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:38.596">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:38.416" status="PASS" endtime="20170809 03:25:38.596"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:38.596">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:38.596">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:38.415" status="PASS" endtime="20170809 03:25:38.596"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:38.597">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:38.596" status="PASS" endtime="20170809 03:25:38.597"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:38.598">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:38.597" status="PASS" endtime="20170809 03:25:38.598"></status>
</kw>
<status starttime="20170809 03:25:38.412" status="PASS" endtime="20170809 03:25:38.598"></status>
</kw>
<status starttime="20170809 03:25:38.411" status="PASS" endtime="20170809 03:25:38.598"></status>
</kw>
<status starttime="20170809 03:25:38.410" status="PASS" endtime="20170809 03:25:38.598"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.599">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:25:38.598" status="PASS" endtime="20170809 03:25:38.599"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.601">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:38.600" status="PASS" endtime="20170809 03:25:38.601"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:38.602">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:38.601" status="PASS" endtime="20170809 03:25:38.602"></status>
</kw>
<status starttime="20170809 03:25:38.601" status="PASS" endtime="20170809 03:25:38.602"></status>
</kw>
<status starttime="20170809 03:25:38.599" status="PASS" endtime="20170809 03:25:38.602"></status>
</kw>
<status starttime="20170809 03:25:38.599" status="PASS" endtime="20170809 03:25:38.602"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.739">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:38.739">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:38.602" status="PASS" endtime="20170809 03:25:38.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.742">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:38.741" status="PASS" endtime="20170809 03:25:38.742"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:38.742">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:38.742" status="PASS" endtime="20170809 03:25:38.743"></status>
</kw>
<status starttime="20170809 03:25:38.742" status="PASS" endtime="20170809 03:25:38.743"></status>
</kw>
<status starttime="20170809 03:25:38.740" status="PASS" endtime="20170809 03:25:38.743"></status>
</kw>
<status starttime="20170809 03:25:38.740" status="PASS" endtime="20170809 03:25:38.743"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:38.743">Delete All Sessions</msg>
<status starttime="20170809 03:25:38.743" status="PASS" endtime="20170809 03:25:38.743"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:38.744">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:38.409" status="PASS" endtime="20170809 03:25:38.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:38.744">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:38.744" status="PASS" endtime="20170809 03:25:38.744"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.745">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:38.745">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:38.745">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:25:38.745" status="PASS" endtime="20170809 03:25:38.745"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:38.745">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:25:38.409" status="PASS" endtime="20170809 03:25:38.745"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:38.746">${power_state} = On</msg>
<status starttime="20170809 03:25:38.408" status="PASS" endtime="20170809 03:25:38.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:25:38.746" status="PASS" endtime="20170809 03:25:38.746"></status>
</kw>
<status starttime="20170809 03:25:38.408" status="PASS" endtime="20170809 03:25:38.746"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:38.750">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:38.750" status="PASS" endtime="20170809 03:25:38.750"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.751">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:38.751" status="PASS" endtime="20170809 03:25:38.751"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.751">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:38.751" status="PASS" endtime="20170809 03:25:38.751"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.752">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:38.752" status="PASS" endtime="20170809 03:25:38.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:38.971">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:38.753" status="PASS" endtime="20170809 03:25:38.971"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:38.971">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:38.972">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:38.752" status="PASS" endtime="20170809 03:25:38.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:38.972">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:38.972" status="PASS" endtime="20170809 03:25:38.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:38.973">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:38.973" status="PASS" endtime="20170809 03:25:38.973"></status>
</kw>
<status starttime="20170809 03:25:38.749" status="PASS" endtime="20170809 03:25:38.973"></status>
</kw>
<status starttime="20170809 03:25:38.749" status="PASS" endtime="20170809 03:25:38.973"></status>
</kw>
<status starttime="20170809 03:25:38.748" status="PASS" endtime="20170809 03:25:38.974"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.974">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:25:38.974" status="PASS" endtime="20170809 03:25:38.974"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:38.977">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:38.976" status="PASS" endtime="20170809 03:25:38.977"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:38.978">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:38.977" status="PASS" endtime="20170809 03:25:38.978"></status>
</kw>
<status starttime="20170809 03:25:38.977" status="PASS" endtime="20170809 03:25:38.978"></status>
</kw>
<status starttime="20170809 03:25:38.975" status="PASS" endtime="20170809 03:25:38.978"></status>
</kw>
<status starttime="20170809 03:25:38.974" status="PASS" endtime="20170809 03:25:38.978"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:39.067">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:39.067">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:38.978" status="PASS" endtime="20170809 03:25:39.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:39.069">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:39.069" status="PASS" endtime="20170809 03:25:39.069"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:39.071">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:39.070" status="PASS" endtime="20170809 03:25:39.071"></status>
</kw>
<status starttime="20170809 03:25:39.070" status="PASS" endtime="20170809 03:25:39.071"></status>
</kw>
<status starttime="20170809 03:25:39.068" status="PASS" endtime="20170809 03:25:39.071"></status>
</kw>
<status starttime="20170809 03:25:39.067" status="PASS" endtime="20170809 03:25:39.071"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:39.072">Delete All Sessions</msg>
<status starttime="20170809 03:25:39.071" status="PASS" endtime="20170809 03:25:39.072"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:39.072">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:38.747" status="PASS" endtime="20170809 03:25:39.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:39.072">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:39.072" status="PASS" endtime="20170809 03:25:39.073"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:39.073">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:39.073">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:39.073">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:25:39.073" status="PASS" endtime="20170809 03:25:39.073"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:39.074">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:25:38.747" status="PASS" endtime="20170809 03:25:39.074"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:39.074">${host_state} = Running</msg>
<status starttime="20170809 03:25:38.747" status="PASS" endtime="20170809 03:25:39.074"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:25:39.074" status="PASS" endtime="20170809 03:25:39.075"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:39.079">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:39.078" status="PASS" endtime="20170809 03:25:39.079"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:39.080">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:39.079" status="PASS" endtime="20170809 03:25:39.080"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:39.080">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:39.080" status="PASS" endtime="20170809 03:25:39.080"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:39.081">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:39.081" status="PASS" endtime="20170809 03:25:39.081"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:39.275">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:39.082" status="PASS" endtime="20170809 03:25:39.275"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:39.276">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:39.276">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:39.081" status="PASS" endtime="20170809 03:25:39.276"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:39.276">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:39.276" status="PASS" endtime="20170809 03:25:39.277"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:39.277">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:39.277" status="PASS" endtime="20170809 03:25:39.277"></status>
</kw>
<status starttime="20170809 03:25:39.078" status="PASS" endtime="20170809 03:25:39.277"></status>
</kw>
<status starttime="20170809 03:25:39.077" status="PASS" endtime="20170809 03:25:39.277"></status>
</kw>
<status starttime="20170809 03:25:39.077" status="PASS" endtime="20170809 03:25:39.278"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:39.278">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:25:39.278" status="PASS" endtime="20170809 03:25:39.278"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:39.280">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:25:39.280" status="PASS" endtime="20170809 03:25:39.280"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:39.281">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:25:39.281" status="PASS" endtime="20170809 03:25:39.281"></status>
</kw>
<status starttime="20170809 03:25:39.280" status="PASS" endtime="20170809 03:25:39.281"></status>
</kw>
<status starttime="20170809 03:25:39.279" status="PASS" endtime="20170809 03:25:39.282"></status>
</kw>
<status starttime="20170809 03:25:39.278" status="PASS" endtime="20170809 03:25:39.282"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:39.363">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:39.363">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:39.282" status="PASS" endtime="20170809 03:25:39.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:39.365">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:39.364" status="PASS" endtime="20170809 03:25:39.365"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:39.366">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:39.366" status="PASS" endtime="20170809 03:25:39.366"></status>
</kw>
<status starttime="20170809 03:25:39.365" status="PASS" endtime="20170809 03:25:39.366"></status>
</kw>
<status starttime="20170809 03:25:39.364" status="PASS" endtime="20170809 03:25:39.366"></status>
</kw>
<status starttime="20170809 03:25:39.363" status="PASS" endtime="20170809 03:25:39.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:39.367">Delete All Sessions</msg>
<status starttime="20170809 03:25:39.366" status="PASS" endtime="20170809 03:25:39.367"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:39.367">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:39.076" status="PASS" endtime="20170809 03:25:39.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:39.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:39.367" status="PASS" endtime="20170809 03:25:39.368"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:39.368">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:39.368">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:39.368">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:25:39.368" status="PASS" endtime="20170809 03:25:39.368"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:39.369">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:25:39.075" status="PASS" endtime="20170809 03:25:39.369"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:39.369">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:25:39.075" status="PASS" endtime="20170809 03:25:39.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:25:39.370">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:25:39.369" status="FAIL" endtime="20170809 03:25:39.370"></status>
</kw>
<status starttime="20170809 03:25:39.075" status="FAIL" endtime="20170809 03:25:39.370"></status>
</kw>
<status starttime="20170809 03:25:38.407" status="FAIL" endtime="20170809 03:25:39.370"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.376">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:49.375" status="PASS" endtime="20170809 03:25:49.376"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.377">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:49.376" status="PASS" endtime="20170809 03:25:49.377"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.377">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:49.377" status="PASS" endtime="20170809 03:25:49.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:49.377" status="PASS" endtime="20170809 03:25:49.378"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.557">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:49.379" status="PASS" endtime="20170809 03:25:49.557"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:49.557">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:49.558">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:49.378" status="PASS" endtime="20170809 03:25:49.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.558">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:49.558" status="PASS" endtime="20170809 03:25:49.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.559">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:49.559" status="PASS" endtime="20170809 03:25:49.559"></status>
</kw>
<status starttime="20170809 03:25:49.375" status="PASS" endtime="20170809 03:25:49.559"></status>
</kw>
<status starttime="20170809 03:25:49.374" status="PASS" endtime="20170809 03:25:49.559"></status>
</kw>
<status starttime="20170809 03:25:49.373" status="PASS" endtime="20170809 03:25:49.559"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.560">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:25:49.560" status="PASS" endtime="20170809 03:25:49.560"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.562">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:49.561" status="PASS" endtime="20170809 03:25:49.562"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.563">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:49.563" status="PASS" endtime="20170809 03:25:49.563"></status>
</kw>
<status starttime="20170809 03:25:49.562" status="PASS" endtime="20170809 03:25:49.563"></status>
</kw>
<status starttime="20170809 03:25:49.561" status="PASS" endtime="20170809 03:25:49.564"></status>
</kw>
<status starttime="20170809 03:25:49.560" status="PASS" endtime="20170809 03:25:49.564"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.627">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:49.627">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:49.564" status="PASS" endtime="20170809 03:25:49.627"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.632">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:49.629" status="PASS" endtime="20170809 03:25:49.632"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.633">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:49.633" status="PASS" endtime="20170809 03:25:49.633"></status>
</kw>
<status starttime="20170809 03:25:49.632" status="PASS" endtime="20170809 03:25:49.633"></status>
</kw>
<status starttime="20170809 03:25:49.628" status="PASS" endtime="20170809 03:25:49.634"></status>
</kw>
<status starttime="20170809 03:25:49.628" status="PASS" endtime="20170809 03:25:49.634"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:49.634">Delete All Sessions</msg>
<status starttime="20170809 03:25:49.634" status="PASS" endtime="20170809 03:25:49.634"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:49.635">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:49.372" status="PASS" endtime="20170809 03:25:49.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.636">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:49.635" status="PASS" endtime="20170809 03:25:49.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.636">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:49.637">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:49.637">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:25:49.636" status="PASS" endtime="20170809 03:25:49.637"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:49.637">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:25:49.372" status="PASS" endtime="20170809 03:25:49.637"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:49.638">${power_state} = On</msg>
<status starttime="20170809 03:25:49.371" status="PASS" endtime="20170809 03:25:49.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:25:49.638" status="PASS" endtime="20170809 03:25:49.639"></status>
</kw>
<status starttime="20170809 03:25:49.371" status="PASS" endtime="20170809 03:25:49.639"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.644">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:49.643" status="PASS" endtime="20170809 03:25:49.644"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.645">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:49.644" status="PASS" endtime="20170809 03:25:49.645"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.645">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:49.645" status="PASS" endtime="20170809 03:25:49.645"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.646">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:49.646" status="PASS" endtime="20170809 03:25:49.646"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.835">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:49.647" status="PASS" endtime="20170809 03:25:49.835"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:49.835">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:49.835">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:49.647" status="PASS" endtime="20170809 03:25:49.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.836">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:49.836" status="PASS" endtime="20170809 03:25:49.836"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.837">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:49.836" status="PASS" endtime="20170809 03:25:49.837"></status>
</kw>
<status starttime="20170809 03:25:49.643" status="PASS" endtime="20170809 03:25:49.837"></status>
</kw>
<status starttime="20170809 03:25:49.642" status="PASS" endtime="20170809 03:25:49.837"></status>
</kw>
<status starttime="20170809 03:25:49.641" status="PASS" endtime="20170809 03:25:49.837"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.838">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:25:49.837" status="PASS" endtime="20170809 03:25:49.838"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.840">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:49.839" status="PASS" endtime="20170809 03:25:49.840"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.841">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:25:49.841" status="PASS" endtime="20170809 03:25:49.841"></status>
</kw>
<status starttime="20170809 03:25:49.841" status="PASS" endtime="20170809 03:25:49.842"></status>
</kw>
<status starttime="20170809 03:25:49.839" status="PASS" endtime="20170809 03:25:49.842"></status>
</kw>
<status starttime="20170809 03:25:49.838" status="PASS" endtime="20170809 03:25:49.842"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.970">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:49.971">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:49.842" status="PASS" endtime="20170809 03:25:49.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.973">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:49.972" status="PASS" endtime="20170809 03:25:49.973"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.974">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:49.973" status="PASS" endtime="20170809 03:25:49.974"></status>
</kw>
<status starttime="20170809 03:25:49.973" status="PASS" endtime="20170809 03:25:49.974"></status>
</kw>
<status starttime="20170809 03:25:49.972" status="PASS" endtime="20170809 03:25:49.974"></status>
</kw>
<status starttime="20170809 03:25:49.971" status="PASS" endtime="20170809 03:25:49.974"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:49.974">Delete All Sessions</msg>
<status starttime="20170809 03:25:49.974" status="PASS" endtime="20170809 03:25:49.974"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:49.975">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:49.640" status="PASS" endtime="20170809 03:25:49.975"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:49.975" status="PASS" endtime="20170809 03:25:49.975"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.976">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:49.976">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:49.976">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:25:49.976" status="PASS" endtime="20170809 03:25:49.976"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:49.976">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:25:49.640" status="PASS" endtime="20170809 03:25:49.976"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:49.977">${host_state} = Running</msg>
<status starttime="20170809 03:25:49.639" status="PASS" endtime="20170809 03:25:49.977"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:25:49.977" status="PASS" endtime="20170809 03:25:49.977"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:49.981">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:25:49.981" status="PASS" endtime="20170809 03:25:49.982"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.982">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:25:49.982" status="PASS" endtime="20170809 03:25:49.982"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.983">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:25:49.982" status="PASS" endtime="20170809 03:25:49.983"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:49.983">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:25:49.983" status="PASS" endtime="20170809 03:25:49.984"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:50.194">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:25:49.984" status="PASS" endtime="20170809 03:25:50.194"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:50.194">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:25:50.194">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:49.984" status="PASS" endtime="20170809 03:25:50.194"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:50.195">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:50.195" status="PASS" endtime="20170809 03:25:50.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:50.196">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:50.196" status="PASS" endtime="20170809 03:25:50.196"></status>
</kw>
<status starttime="20170809 03:25:49.980" status="PASS" endtime="20170809 03:25:50.196"></status>
</kw>
<status starttime="20170809 03:25:49.980" status="PASS" endtime="20170809 03:25:50.196"></status>
</kw>
<status starttime="20170809 03:25:49.979" status="PASS" endtime="20170809 03:25:50.197"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:50.197">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:25:50.197" status="PASS" endtime="20170809 03:25:50.197"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:50.199">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:25:50.198" status="PASS" endtime="20170809 03:25:50.199"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:50.200">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:25:50.200" status="PASS" endtime="20170809 03:25:50.200"></status>
</kw>
<status starttime="20170809 03:25:50.199" status="PASS" endtime="20170809 03:25:50.200"></status>
</kw>
<status starttime="20170809 03:25:50.198" status="PASS" endtime="20170809 03:25:50.201"></status>
</kw>
<status starttime="20170809 03:25:50.197" status="PASS" endtime="20170809 03:25:50.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:50.330">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:25:50.330">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:50.201" status="PASS" endtime="20170809 03:25:50.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:50.332">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:50.332" status="PASS" endtime="20170809 03:25:50.332"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:50.333">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:25:50.333" status="PASS" endtime="20170809 03:25:50.333"></status>
</kw>
<status starttime="20170809 03:25:50.332" status="PASS" endtime="20170809 03:25:50.333"></status>
</kw>
<status starttime="20170809 03:25:50.331" status="PASS" endtime="20170809 03:25:50.333"></status>
</kw>
<status starttime="20170809 03:25:50.331" status="PASS" endtime="20170809 03:25:50.334"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:25:50.334">Delete All Sessions</msg>
<status starttime="20170809 03:25:50.334" status="PASS" endtime="20170809 03:25:50.334"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:50.334">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:25:49.979" status="PASS" endtime="20170809 03:25:50.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:25:50.335">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:25:50.335" status="PASS" endtime="20170809 03:25:50.335"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:25:50.336">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:25:50.336">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:25:50.336">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:25:50.335" status="PASS" endtime="20170809 03:25:50.336"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:50.336">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:25:49.978" status="PASS" endtime="20170809 03:25:50.336"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:25:50.336">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:25:49.978" status="PASS" endtime="20170809 03:25:50.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:25:50.337">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:25:50.337" status="FAIL" endtime="20170809 03:25:50.337"></status>
</kw>
<status starttime="20170809 03:25:49.977" status="FAIL" endtime="20170809 03:25:50.337"></status>
</kw>
<status starttime="20170809 03:25:49.370" status="FAIL" endtime="20170809 03:25:50.337"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.343">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:00.343" status="PASS" endtime="20170809 03:26:00.343"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.344">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:00.344" status="PASS" endtime="20170809 03:26:00.344"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.345">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:00.344" status="PASS" endtime="20170809 03:26:00.345"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.345">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:00.345" status="PASS" endtime="20170809 03:26:00.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.540">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:00.346" status="PASS" endtime="20170809 03:26:00.540"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:00.540">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:00.540">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:00.346" status="PASS" endtime="20170809 03:26:00.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.541">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:00.541" status="PASS" endtime="20170809 03:26:00.541"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:00.541" status="PASS" endtime="20170809 03:26:00.542"></status>
</kw>
<status starttime="20170809 03:26:00.342" status="PASS" endtime="20170809 03:26:00.542"></status>
</kw>
<status starttime="20170809 03:26:00.341" status="PASS" endtime="20170809 03:26:00.542"></status>
</kw>
<status starttime="20170809 03:26:00.340" status="PASS" endtime="20170809 03:26:00.542"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.543">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:26:00.542" status="PASS" endtime="20170809 03:26:00.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.545">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:00.544" status="PASS" endtime="20170809 03:26:00.545"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.546">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:00.546" status="PASS" endtime="20170809 03:26:00.546"></status>
</kw>
<status starttime="20170809 03:26:00.545" status="PASS" endtime="20170809 03:26:00.546"></status>
</kw>
<status starttime="20170809 03:26:00.544" status="PASS" endtime="20170809 03:26:00.546"></status>
</kw>
<status starttime="20170809 03:26:00.543" status="PASS" endtime="20170809 03:26:00.546"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.640">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:00.641">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:00.546" status="PASS" endtime="20170809 03:26:00.641"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.643">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:00.642" status="PASS" endtime="20170809 03:26:00.643"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.644">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:00.644" status="PASS" endtime="20170809 03:26:00.644"></status>
</kw>
<status starttime="20170809 03:26:00.643" status="PASS" endtime="20170809 03:26:00.644"></status>
</kw>
<status starttime="20170809 03:26:00.642" status="PASS" endtime="20170809 03:26:00.645"></status>
</kw>
<status starttime="20170809 03:26:00.641" status="PASS" endtime="20170809 03:26:00.645"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:00.645">Delete All Sessions</msg>
<status starttime="20170809 03:26:00.645" status="PASS" endtime="20170809 03:26:00.645"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:00.645">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:00.340" status="PASS" endtime="20170809 03:26:00.645"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.646">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:00.646" status="PASS" endtime="20170809 03:26:00.646"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.647">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:00.647">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:00.647">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:26:00.646" status="PASS" endtime="20170809 03:26:00.647"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:00.647">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:26:00.339" status="PASS" endtime="20170809 03:26:00.647"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:00.647">${power_state} = On</msg>
<status starttime="20170809 03:26:00.339" status="PASS" endtime="20170809 03:26:00.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:26:00.648" status="PASS" endtime="20170809 03:26:00.648"></status>
</kw>
<status starttime="20170809 03:26:00.338" status="PASS" endtime="20170809 03:26:00.648"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.652">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:00.651" status="PASS" endtime="20170809 03:26:00.652"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.652">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:00.652" status="PASS" endtime="20170809 03:26:00.653"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.653">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:00.653" status="PASS" endtime="20170809 03:26:00.653"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.654">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:00.653" status="PASS" endtime="20170809 03:26:00.654"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.853">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:00.655" status="PASS" endtime="20170809 03:26:00.853"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:00.853">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:00.854">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:00.654" status="PASS" endtime="20170809 03:26:00.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.854">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:00.854" status="PASS" endtime="20170809 03:26:00.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.855">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:00.855" status="PASS" endtime="20170809 03:26:00.855"></status>
</kw>
<status starttime="20170809 03:26:00.651" status="PASS" endtime="20170809 03:26:00.855"></status>
</kw>
<status starttime="20170809 03:26:00.650" status="PASS" endtime="20170809 03:26:00.855"></status>
</kw>
<status starttime="20170809 03:26:00.650" status="PASS" endtime="20170809 03:26:00.856"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.856">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:26:00.856" status="PASS" endtime="20170809 03:26:00.856"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.859">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:00.858" status="PASS" endtime="20170809 03:26:00.859"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.860">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:00.860" status="PASS" endtime="20170809 03:26:00.860"></status>
</kw>
<status starttime="20170809 03:26:00.859" status="PASS" endtime="20170809 03:26:00.861"></status>
</kw>
<status starttime="20170809 03:26:00.857" status="PASS" endtime="20170809 03:26:00.861"></status>
</kw>
<status starttime="20170809 03:26:00.857" status="PASS" endtime="20170809 03:26:00.861"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.950">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:00.950">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:00.861" status="PASS" endtime="20170809 03:26:00.950"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.952">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:00.951" status="PASS" endtime="20170809 03:26:00.952"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.953">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:00.953" status="PASS" endtime="20170809 03:26:00.953"></status>
</kw>
<status starttime="20170809 03:26:00.952" status="PASS" endtime="20170809 03:26:00.953"></status>
</kw>
<status starttime="20170809 03:26:00.951" status="PASS" endtime="20170809 03:26:00.953"></status>
</kw>
<status starttime="20170809 03:26:00.950" status="PASS" endtime="20170809 03:26:00.953"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:00.954">Delete All Sessions</msg>
<status starttime="20170809 03:26:00.954" status="PASS" endtime="20170809 03:26:00.954"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:00.954">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:00.649" status="PASS" endtime="20170809 03:26:00.954"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.955">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:00.954" status="PASS" endtime="20170809 03:26:00.955"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.955">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:00.955">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:00.955">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:26:00.955" status="PASS" endtime="20170809 03:26:00.955"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:00.956">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:26:00.649" status="PASS" endtime="20170809 03:26:00.956"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:00.956">${host_state} = Running</msg>
<status starttime="20170809 03:26:00.648" status="PASS" endtime="20170809 03:26:00.956"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:26:00.956" status="PASS" endtime="20170809 03:26:00.957"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:00.962">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:00.962" status="PASS" endtime="20170809 03:26:00.963"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.963">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:00.963" status="PASS" endtime="20170809 03:26:00.963"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.964">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:00.964" status="PASS" endtime="20170809 03:26:00.964"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:00.965">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:00.964" status="PASS" endtime="20170809 03:26:00.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:01.232">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:00.965" status="PASS" endtime="20170809 03:26:01.233"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:01.233">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:01.233">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:00.965" status="PASS" endtime="20170809 03:26:01.233"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:01.234">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:01.233" status="PASS" endtime="20170809 03:26:01.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:01.235">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:01.234" status="PASS" endtime="20170809 03:26:01.235"></status>
</kw>
<status starttime="20170809 03:26:00.961" status="PASS" endtime="20170809 03:26:01.235"></status>
</kw>
<status starttime="20170809 03:26:00.960" status="PASS" endtime="20170809 03:26:01.235"></status>
</kw>
<status starttime="20170809 03:26:00.959" status="PASS" endtime="20170809 03:26:01.236"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:01.236">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:26:01.236" status="PASS" endtime="20170809 03:26:01.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:01.239">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:26:01.238" status="PASS" endtime="20170809 03:26:01.239"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:01.241">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:26:01.240" status="PASS" endtime="20170809 03:26:01.241"></status>
</kw>
<status starttime="20170809 03:26:01.240" status="PASS" endtime="20170809 03:26:01.241"></status>
</kw>
<status starttime="20170809 03:26:01.237" status="PASS" endtime="20170809 03:26:01.241"></status>
</kw>
<status starttime="20170809 03:26:01.237" status="PASS" endtime="20170809 03:26:01.241"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:01.306">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:01.307">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:01.241" status="PASS" endtime="20170809 03:26:01.307"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:01.309">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:01.308" status="PASS" endtime="20170809 03:26:01.309"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:01.310">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:01.309" status="PASS" endtime="20170809 03:26:01.310"></status>
</kw>
<status starttime="20170809 03:26:01.309" status="PASS" endtime="20170809 03:26:01.310"></status>
</kw>
<status starttime="20170809 03:26:01.308" status="PASS" endtime="20170809 03:26:01.310"></status>
</kw>
<status starttime="20170809 03:26:01.307" status="PASS" endtime="20170809 03:26:01.310"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:01.311">Delete All Sessions</msg>
<status starttime="20170809 03:26:01.311" status="PASS" endtime="20170809 03:26:01.311"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:01.311">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:00.958" status="PASS" endtime="20170809 03:26:01.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:01.312">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:01.311" status="PASS" endtime="20170809 03:26:01.312"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:01.312">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:01.312">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:01.312">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:26:01.312" status="PASS" endtime="20170809 03:26:01.312"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:01.313">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:26:00.957" status="PASS" endtime="20170809 03:26:01.313"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:01.313">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:26:00.957" status="PASS" endtime="20170809 03:26:01.313"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:26:01.314">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:26:01.313" status="FAIL" endtime="20170809 03:26:01.314"></status>
</kw>
<status starttime="20170809 03:26:00.957" status="FAIL" endtime="20170809 03:26:01.314"></status>
</kw>
<status starttime="20170809 03:26:00.338" status="FAIL" endtime="20170809 03:26:01.314"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.320">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:11.319" status="PASS" endtime="20170809 03:26:11.320"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.321">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:11.320" status="PASS" endtime="20170809 03:26:11.321"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.321">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:11.321" status="PASS" endtime="20170809 03:26:11.321"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.322">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:11.322" status="PASS" endtime="20170809 03:26:11.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.511">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:11.323" status="PASS" endtime="20170809 03:26:11.511"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:11.511">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:11.511">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:11.322" status="PASS" endtime="20170809 03:26:11.511"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.512">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:11.511" status="PASS" endtime="20170809 03:26:11.512"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:11.512" status="PASS" endtime="20170809 03:26:11.513"></status>
</kw>
<status starttime="20170809 03:26:11.319" status="PASS" endtime="20170809 03:26:11.513"></status>
</kw>
<status starttime="20170809 03:26:11.318" status="PASS" endtime="20170809 03:26:11.513"></status>
</kw>
<status starttime="20170809 03:26:11.317" status="PASS" endtime="20170809 03:26:11.513"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.514">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:26:11.514" status="PASS" endtime="20170809 03:26:11.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.517">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:11.516" status="PASS" endtime="20170809 03:26:11.517"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.519">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:11.518" status="PASS" endtime="20170809 03:26:11.519"></status>
</kw>
<status starttime="20170809 03:26:11.518" status="PASS" endtime="20170809 03:26:11.519"></status>
</kw>
<status starttime="20170809 03:26:11.515" status="PASS" endtime="20170809 03:26:11.519"></status>
</kw>
<status starttime="20170809 03:26:11.515" status="PASS" endtime="20170809 03:26:11.519"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.582">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:11.582">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:11.519" status="PASS" endtime="20170809 03:26:11.582"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.584">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:11.584" status="PASS" endtime="20170809 03:26:11.585"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.585">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:11.585" status="PASS" endtime="20170809 03:26:11.586"></status>
</kw>
<status starttime="20170809 03:26:11.585" status="PASS" endtime="20170809 03:26:11.586"></status>
</kw>
<status starttime="20170809 03:26:11.583" status="PASS" endtime="20170809 03:26:11.586"></status>
</kw>
<status starttime="20170809 03:26:11.583" status="PASS" endtime="20170809 03:26:11.586"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:11.586">Delete All Sessions</msg>
<status starttime="20170809 03:26:11.586" status="PASS" endtime="20170809 03:26:11.586"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:11.586">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:11.316" status="PASS" endtime="20170809 03:26:11.586"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.587">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:11.587" status="PASS" endtime="20170809 03:26:11.587"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.588">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:11.588">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:11.588">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:26:11.587" status="PASS" endtime="20170809 03:26:11.588"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:11.588">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:26:11.316" status="PASS" endtime="20170809 03:26:11.588"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:11.588">${power_state} = On</msg>
<status starttime="20170809 03:26:11.315" status="PASS" endtime="20170809 03:26:11.588"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:26:11.589" status="PASS" endtime="20170809 03:26:11.589"></status>
</kw>
<status starttime="20170809 03:26:11.315" status="PASS" endtime="20170809 03:26:11.589"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.593">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:11.592" status="PASS" endtime="20170809 03:26:11.593"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.594">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:11.593" status="PASS" endtime="20170809 03:26:11.594"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.594">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:11.594" status="PASS" endtime="20170809 03:26:11.594"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.595">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:11.595" status="PASS" endtime="20170809 03:26:11.595"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.782">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:11.596" status="PASS" endtime="20170809 03:26:11.782"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:11.782">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:11.782">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:11.595" status="PASS" endtime="20170809 03:26:11.782"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.783">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:11.783" status="PASS" endtime="20170809 03:26:11.783"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.784">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:11.784" status="PASS" endtime="20170809 03:26:11.784"></status>
</kw>
<status starttime="20170809 03:26:11.592" status="PASS" endtime="20170809 03:26:11.784"></status>
</kw>
<status starttime="20170809 03:26:11.591" status="PASS" endtime="20170809 03:26:11.784"></status>
</kw>
<status starttime="20170809 03:26:11.591" status="PASS" endtime="20170809 03:26:11.784"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.785">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:26:11.785" status="PASS" endtime="20170809 03:26:11.785"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.787">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:11.786" status="PASS" endtime="20170809 03:26:11.787"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.788">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:11.788" status="PASS" endtime="20170809 03:26:11.789"></status>
</kw>
<status starttime="20170809 03:26:11.788" status="PASS" endtime="20170809 03:26:11.789"></status>
</kw>
<status starttime="20170809 03:26:11.786" status="PASS" endtime="20170809 03:26:11.789"></status>
</kw>
<status starttime="20170809 03:26:11.785" status="PASS" endtime="20170809 03:26:11.789"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.878">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:11.878">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:11.789" status="PASS" endtime="20170809 03:26:11.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.880">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:11.880" status="PASS" endtime="20170809 03:26:11.880"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.881">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:11.881" status="PASS" endtime="20170809 03:26:11.881"></status>
</kw>
<status starttime="20170809 03:26:11.880" status="PASS" endtime="20170809 03:26:11.881"></status>
</kw>
<status starttime="20170809 03:26:11.879" status="PASS" endtime="20170809 03:26:11.881"></status>
</kw>
<status starttime="20170809 03:26:11.879" status="PASS" endtime="20170809 03:26:11.881"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:11.882">Delete All Sessions</msg>
<status starttime="20170809 03:26:11.882" status="PASS" endtime="20170809 03:26:11.882"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:11.882">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:11.590" status="PASS" endtime="20170809 03:26:11.882"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.883">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:11.882" status="PASS" endtime="20170809 03:26:11.883"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.883">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:11.883">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:11.884">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:26:11.883" status="PASS" endtime="20170809 03:26:11.884"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:11.884">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:26:11.590" status="PASS" endtime="20170809 03:26:11.884"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:11.884">${host_state} = Running</msg>
<status starttime="20170809 03:26:11.589" status="PASS" endtime="20170809 03:26:11.884"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:26:11.885" status="PASS" endtime="20170809 03:26:11.885"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:11.889">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:11.888" status="PASS" endtime="20170809 03:26:11.889"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.890">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:11.889" status="PASS" endtime="20170809 03:26:11.890"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.890">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:11.890" status="PASS" endtime="20170809 03:26:11.890"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:11.891">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:11.890" status="PASS" endtime="20170809 03:26:11.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:12.221">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:11.891" status="PASS" endtime="20170809 03:26:12.221"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:12.221">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:12.221">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:11.891" status="PASS" endtime="20170809 03:26:12.221"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:12.222">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:12.222" status="PASS" endtime="20170809 03:26:12.222"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:12.223">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:12.222" status="PASS" endtime="20170809 03:26:12.223"></status>
</kw>
<status starttime="20170809 03:26:11.888" status="PASS" endtime="20170809 03:26:12.223"></status>
</kw>
<status starttime="20170809 03:26:11.887" status="PASS" endtime="20170809 03:26:12.223"></status>
</kw>
<status starttime="20170809 03:26:11.887" status="PASS" endtime="20170809 03:26:12.223"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:12.224">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:26:12.224" status="PASS" endtime="20170809 03:26:12.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:12.226">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:26:12.225" status="PASS" endtime="20170809 03:26:12.226"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:12.227">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:26:12.227" status="PASS" endtime="20170809 03:26:12.227"></status>
</kw>
<status starttime="20170809 03:26:12.226" status="PASS" endtime="20170809 03:26:12.227"></status>
</kw>
<status starttime="20170809 03:26:12.225" status="PASS" endtime="20170809 03:26:12.227"></status>
</kw>
<status starttime="20170809 03:26:12.224" status="PASS" endtime="20170809 03:26:12.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:12.307">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:12.307">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:12.228" status="PASS" endtime="20170809 03:26:12.307"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:12.309">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:12.308" status="PASS" endtime="20170809 03:26:12.309"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:12.310">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:12.310" status="PASS" endtime="20170809 03:26:12.310"></status>
</kw>
<status starttime="20170809 03:26:12.309" status="PASS" endtime="20170809 03:26:12.310"></status>
</kw>
<status starttime="20170809 03:26:12.308" status="PASS" endtime="20170809 03:26:12.310"></status>
</kw>
<status starttime="20170809 03:26:12.307" status="PASS" endtime="20170809 03:26:12.310"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:12.311">Delete All Sessions</msg>
<status starttime="20170809 03:26:12.311" status="PASS" endtime="20170809 03:26:12.311"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:12.311">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:11.886" status="PASS" endtime="20170809 03:26:12.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:12.312">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:12.311" status="PASS" endtime="20170809 03:26:12.312"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:12.312">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:12.312">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:12.312">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:26:12.312" status="PASS" endtime="20170809 03:26:12.313"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:12.313">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:26:11.886" status="PASS" endtime="20170809 03:26:12.313"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:12.313">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:26:11.885" status="PASS" endtime="20170809 03:26:12.313"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:26:12.314">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:26:12.313" status="FAIL" endtime="20170809 03:26:12.314"></status>
</kw>
<status starttime="20170809 03:26:11.885" status="FAIL" endtime="20170809 03:26:12.314"></status>
</kw>
<status starttime="20170809 03:26:11.315" status="FAIL" endtime="20170809 03:26:12.314"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:22.320">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:22.320" status="PASS" endtime="20170809 03:26:22.320"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.321">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:22.321" status="PASS" endtime="20170809 03:26:22.321"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.321">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:22.321" status="PASS" endtime="20170809 03:26:22.321"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.322">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:22.322" status="PASS" endtime="20170809 03:26:22.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:22.547">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:22.323" status="PASS" endtime="20170809 03:26:22.547"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:22.547">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:22.547">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:22.322" status="PASS" endtime="20170809 03:26:22.547"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:22.548">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:22.547" status="PASS" endtime="20170809 03:26:22.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:22.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:22.548" status="PASS" endtime="20170809 03:26:22.549"></status>
</kw>
<status starttime="20170809 03:26:22.319" status="PASS" endtime="20170809 03:26:22.549"></status>
</kw>
<status starttime="20170809 03:26:22.319" status="PASS" endtime="20170809 03:26:22.550"></status>
</kw>
<status starttime="20170809 03:26:22.317" status="PASS" endtime="20170809 03:26:22.550"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.551">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:26:22.551" status="PASS" endtime="20170809 03:26:22.551"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.555">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:22.554" status="PASS" endtime="20170809 03:26:22.555"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:22.555">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:22.555" status="PASS" endtime="20170809 03:26:22.556"></status>
</kw>
<status starttime="20170809 03:26:22.555" status="PASS" endtime="20170809 03:26:22.556"></status>
</kw>
<status starttime="20170809 03:26:22.552" status="PASS" endtime="20170809 03:26:22.556"></status>
</kw>
<status starttime="20170809 03:26:22.551" status="PASS" endtime="20170809 03:26:22.556"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.714">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:22.715">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:22.556" status="PASS" endtime="20170809 03:26:22.715"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.721">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:22.720" status="PASS" endtime="20170809 03:26:22.721"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:22.722">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:22.722" status="PASS" endtime="20170809 03:26:22.722"></status>
</kw>
<status starttime="20170809 03:26:22.721" status="PASS" endtime="20170809 03:26:22.722"></status>
</kw>
<status starttime="20170809 03:26:22.715" status="PASS" endtime="20170809 03:26:22.722"></status>
</kw>
<status starttime="20170809 03:26:22.715" status="PASS" endtime="20170809 03:26:22.722"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:22.723">Delete All Sessions</msg>
<status starttime="20170809 03:26:22.722" status="PASS" endtime="20170809 03:26:22.723"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:22.723">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:22.317" status="PASS" endtime="20170809 03:26:22.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:22.723">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:22.723" status="PASS" endtime="20170809 03:26:22.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.724">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:22.724">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:22.724">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:26:22.724" status="PASS" endtime="20170809 03:26:22.726"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:22.726">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:26:22.316" status="PASS" endtime="20170809 03:26:22.726"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:22.726">${power_state} = On</msg>
<status starttime="20170809 03:26:22.316" status="PASS" endtime="20170809 03:26:22.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:26:22.727" status="PASS" endtime="20170809 03:26:22.727"></status>
</kw>
<status starttime="20170809 03:26:22.315" status="PASS" endtime="20170809 03:26:22.727"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:22.732">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:22.732" status="PASS" endtime="20170809 03:26:22.732"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.733">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:22.733" status="PASS" endtime="20170809 03:26:22.733"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.734">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:22.734" status="PASS" endtime="20170809 03:26:22.734"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.735">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:22.735" status="PASS" endtime="20170809 03:26:22.735"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:22.961">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:22.738" status="PASS" endtime="20170809 03:26:22.961"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:22.961">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:22.961">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:22.737" status="PASS" endtime="20170809 03:26:22.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:22.962">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:22.961" status="PASS" endtime="20170809 03:26:22.962"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:22.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:22.962" status="PASS" endtime="20170809 03:26:22.962"></status>
</kw>
<status starttime="20170809 03:26:22.730" status="PASS" endtime="20170809 03:26:22.963"></status>
</kw>
<status starttime="20170809 03:26:22.729" status="PASS" endtime="20170809 03:26:22.963"></status>
</kw>
<status starttime="20170809 03:26:22.729" status="PASS" endtime="20170809 03:26:22.963"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.963">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:26:22.963" status="PASS" endtime="20170809 03:26:22.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:22.966">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:22.965" status="PASS" endtime="20170809 03:26:22.966"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:22.967">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:22.967" status="PASS" endtime="20170809 03:26:22.967"></status>
</kw>
<status starttime="20170809 03:26:22.966" status="PASS" endtime="20170809 03:26:22.967"></status>
</kw>
<status starttime="20170809 03:26:22.964" status="PASS" endtime="20170809 03:26:22.967"></status>
</kw>
<status starttime="20170809 03:26:22.964" status="PASS" endtime="20170809 03:26:22.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:23.101">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:23.102">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:22.967" status="PASS" endtime="20170809 03:26:23.102"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:23.104">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:23.103" status="PASS" endtime="20170809 03:26:23.104"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:23.105">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:23.104" status="PASS" endtime="20170809 03:26:23.105"></status>
</kw>
<status starttime="20170809 03:26:23.104" status="PASS" endtime="20170809 03:26:23.105"></status>
</kw>
<status starttime="20170809 03:26:23.103" status="PASS" endtime="20170809 03:26:23.105"></status>
</kw>
<status starttime="20170809 03:26:23.102" status="PASS" endtime="20170809 03:26:23.105"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:23.105">Delete All Sessions</msg>
<status starttime="20170809 03:26:23.105" status="PASS" endtime="20170809 03:26:23.105"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:23.106">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:22.728" status="PASS" endtime="20170809 03:26:23.106"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:23.107">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:23.106" status="PASS" endtime="20170809 03:26:23.107"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:23.107">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:23.107">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:23.108">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:26:23.107" status="PASS" endtime="20170809 03:26:23.108"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:23.108">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:26:22.728" status="PASS" endtime="20170809 03:26:23.108"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:23.108">${host_state} = Running</msg>
<status starttime="20170809 03:26:22.727" status="PASS" endtime="20170809 03:26:23.108"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:26:23.109" status="PASS" endtime="20170809 03:26:23.109"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:23.114">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:23.113" status="PASS" endtime="20170809 03:26:23.114"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:23.115">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:23.114" status="PASS" endtime="20170809 03:26:23.115"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:23.115">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:23.115" status="PASS" endtime="20170809 03:26:23.115"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:23.116">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:23.116" status="PASS" endtime="20170809 03:26:23.116"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:23.307">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:23.117" status="PASS" endtime="20170809 03:26:23.307"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:23.307">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:23.307">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:23.116" status="PASS" endtime="20170809 03:26:23.307"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:23.308">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:23.308" status="PASS" endtime="20170809 03:26:23.308"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:23.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:23.308" status="PASS" endtime="20170809 03:26:23.309"></status>
</kw>
<status starttime="20170809 03:26:23.113" status="PASS" endtime="20170809 03:26:23.309"></status>
</kw>
<status starttime="20170809 03:26:23.112" status="PASS" endtime="20170809 03:26:23.309"></status>
</kw>
<status starttime="20170809 03:26:23.112" status="PASS" endtime="20170809 03:26:23.309"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:23.310">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:26:23.309" status="PASS" endtime="20170809 03:26:23.310"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:23.313">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:26:23.313" status="PASS" endtime="20170809 03:26:23.313"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:23.314">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:26:23.314" status="PASS" endtime="20170809 03:26:23.314"></status>
</kw>
<status starttime="20170809 03:26:23.314" status="PASS" endtime="20170809 03:26:23.315"></status>
</kw>
<status starttime="20170809 03:26:23.312" status="PASS" endtime="20170809 03:26:23.315"></status>
</kw>
<status starttime="20170809 03:26:23.311" status="PASS" endtime="20170809 03:26:23.315"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:23.380">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:23.381">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:23.315" status="PASS" endtime="20170809 03:26:23.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:23.382">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:23.382" status="PASS" endtime="20170809 03:26:23.383"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:23.383">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:23.383" status="PASS" endtime="20170809 03:26:23.384"></status>
</kw>
<status starttime="20170809 03:26:23.383" status="PASS" endtime="20170809 03:26:23.384"></status>
</kw>
<status starttime="20170809 03:26:23.381" status="PASS" endtime="20170809 03:26:23.384"></status>
</kw>
<status starttime="20170809 03:26:23.381" status="PASS" endtime="20170809 03:26:23.384"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:23.384">Delete All Sessions</msg>
<status starttime="20170809 03:26:23.384" status="PASS" endtime="20170809 03:26:23.384"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:23.385">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:23.111" status="PASS" endtime="20170809 03:26:23.385"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:23.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:23.385" status="PASS" endtime="20170809 03:26:23.385"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:23.386">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:23.386">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:23.386">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:26:23.385" status="PASS" endtime="20170809 03:26:23.386"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:23.386">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:26:23.111" status="PASS" endtime="20170809 03:26:23.386"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:23.386">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:26:23.109" status="PASS" endtime="20170809 03:26:23.387"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:26:23.387">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:26:23.387" status="FAIL" endtime="20170809 03:26:23.387"></status>
</kw>
<status starttime="20170809 03:26:23.109" status="FAIL" endtime="20170809 03:26:23.387"></status>
</kw>
<status starttime="20170809 03:26:22.315" status="FAIL" endtime="20170809 03:26:23.388"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:33.393">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:33.393" status="PASS" endtime="20170809 03:26:33.394"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:33.394">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:33.394" status="PASS" endtime="20170809 03:26:33.395"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:33.395">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:33.395" status="PASS" endtime="20170809 03:26:33.395"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:33.396">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:33.396" status="PASS" endtime="20170809 03:26:33.396"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:33.839">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:33.397" status="PASS" endtime="20170809 03:26:33.839"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:33.839">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:33.839">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:33.396" status="PASS" endtime="20170809 03:26:33.839"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:33.840">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:33.839" status="PASS" endtime="20170809 03:26:33.840"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:33.840">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:33.840" status="PASS" endtime="20170809 03:26:33.840"></status>
</kw>
<status starttime="20170809 03:26:33.392" status="PASS" endtime="20170809 03:26:33.841"></status>
</kw>
<status starttime="20170809 03:26:33.391" status="PASS" endtime="20170809 03:26:33.841"></status>
</kw>
<status starttime="20170809 03:26:33.391" status="PASS" endtime="20170809 03:26:33.841"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:33.841">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:26:33.841" status="PASS" endtime="20170809 03:26:33.841"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:33.843">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:33.843" status="PASS" endtime="20170809 03:26:33.843"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:33.844">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:33.844" status="PASS" endtime="20170809 03:26:33.845"></status>
</kw>
<status starttime="20170809 03:26:33.844" status="PASS" endtime="20170809 03:26:33.845"></status>
</kw>
<status starttime="20170809 03:26:33.842" status="PASS" endtime="20170809 03:26:33.845"></status>
</kw>
<status starttime="20170809 03:26:33.842" status="PASS" endtime="20170809 03:26:33.845"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:37.260">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:37.260">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:33.845" status="PASS" endtime="20170809 03:26:37.260"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:37.263">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:37.262" status="PASS" endtime="20170809 03:26:37.263"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:37.264">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:37.263" status="PASS" endtime="20170809 03:26:37.264"></status>
</kw>
<status starttime="20170809 03:26:37.263" status="PASS" endtime="20170809 03:26:37.264"></status>
</kw>
<status starttime="20170809 03:26:37.261" status="PASS" endtime="20170809 03:26:37.264"></status>
</kw>
<status starttime="20170809 03:26:37.261" status="PASS" endtime="20170809 03:26:37.264"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:37.265">Delete All Sessions</msg>
<status starttime="20170809 03:26:37.265" status="PASS" endtime="20170809 03:26:37.265"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:37.265">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:33.390" status="PASS" endtime="20170809 03:26:37.265"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:37.266">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:37.265" status="PASS" endtime="20170809 03:26:37.266"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:37.266">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:37.266">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:37.266">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:26:37.266" status="PASS" endtime="20170809 03:26:37.266"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:37.267">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:26:33.389" status="PASS" endtime="20170809 03:26:37.267"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:37.267">${power_state} = On</msg>
<status starttime="20170809 03:26:33.389" status="PASS" endtime="20170809 03:26:37.267"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:26:37.267" status="PASS" endtime="20170809 03:26:37.268"></status>
</kw>
<status starttime="20170809 03:26:33.389" status="PASS" endtime="20170809 03:26:37.268"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:37.271">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:37.271" status="PASS" endtime="20170809 03:26:37.272"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:37.272">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:37.272" status="PASS" endtime="20170809 03:26:37.272"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:37.273">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:37.272" status="PASS" endtime="20170809 03:26:37.273"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:37.273">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:37.273" status="PASS" endtime="20170809 03:26:37.273"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:38.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:37.274" status="PASS" endtime="20170809 03:26:38.049"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:38.049">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:38.049">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:37.274" status="PASS" endtime="20170809 03:26:38.049"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:38.050">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:38.050" status="PASS" endtime="20170809 03:26:38.050"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:38.051">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:38.050" status="PASS" endtime="20170809 03:26:38.051"></status>
</kw>
<status starttime="20170809 03:26:37.270" status="PASS" endtime="20170809 03:26:38.051"></status>
</kw>
<status starttime="20170809 03:26:37.270" status="PASS" endtime="20170809 03:26:38.051"></status>
</kw>
<status starttime="20170809 03:26:37.269" status="PASS" endtime="20170809 03:26:38.051"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:38.052">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:26:38.051" status="PASS" endtime="20170809 03:26:38.052"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:38.054">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:38.053" status="PASS" endtime="20170809 03:26:38.054"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:38.055">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:38.055" status="PASS" endtime="20170809 03:26:38.056"></status>
</kw>
<status starttime="20170809 03:26:38.054" status="PASS" endtime="20170809 03:26:38.056"></status>
</kw>
<status starttime="20170809 03:26:38.053" status="PASS" endtime="20170809 03:26:38.056"></status>
</kw>
<status starttime="20170809 03:26:38.052" status="PASS" endtime="20170809 03:26:38.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:39.351">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:39.351">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:38.056" status="PASS" endtime="20170809 03:26:39.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:39.353">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:39.352" status="PASS" endtime="20170809 03:26:39.353"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:39.354">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:39.354" status="PASS" endtime="20170809 03:26:39.354"></status>
</kw>
<status starttime="20170809 03:26:39.353" status="PASS" endtime="20170809 03:26:39.354"></status>
</kw>
<status starttime="20170809 03:26:39.352" status="PASS" endtime="20170809 03:26:39.354"></status>
</kw>
<status starttime="20170809 03:26:39.351" status="PASS" endtime="20170809 03:26:39.354"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:39.355">Delete All Sessions</msg>
<status starttime="20170809 03:26:39.354" status="PASS" endtime="20170809 03:26:39.355"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:39.355">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:37.269" status="PASS" endtime="20170809 03:26:39.355"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:39.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:39.355" status="PASS" endtime="20170809 03:26:39.356"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:39.356">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:39.356">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:39.356">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:26:39.356" status="PASS" endtime="20170809 03:26:39.356"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:39.357">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:26:37.268" status="PASS" endtime="20170809 03:26:39.357"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:39.357">${host_state} = Running</msg>
<status starttime="20170809 03:26:37.268" status="PASS" endtime="20170809 03:26:39.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:26:39.357" status="PASS" endtime="20170809 03:26:39.358"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:39.363">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:39.363" status="PASS" endtime="20170809 03:26:39.364"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:39.364">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:39.364" status="PASS" endtime="20170809 03:26:39.364"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:39.365">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:39.365" status="PASS" endtime="20170809 03:26:39.365"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:39.366">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:39.365" status="PASS" endtime="20170809 03:26:39.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:39.550">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:39.366" status="PASS" endtime="20170809 03:26:39.550"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:39.550">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:39.550">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:39.366" status="PASS" endtime="20170809 03:26:39.550"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:39.551">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:39.551" status="PASS" endtime="20170809 03:26:39.551"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:39.552">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:39.551" status="PASS" endtime="20170809 03:26:39.552"></status>
</kw>
<status starttime="20170809 03:26:39.362" status="PASS" endtime="20170809 03:26:39.552"></status>
</kw>
<status starttime="20170809 03:26:39.361" status="PASS" endtime="20170809 03:26:39.552"></status>
</kw>
<status starttime="20170809 03:26:39.361" status="PASS" endtime="20170809 03:26:39.552"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:39.553">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:26:39.552" status="PASS" endtime="20170809 03:26:39.553"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:39.555">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:26:39.554" status="PASS" endtime="20170809 03:26:39.555"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:39.556">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:26:39.555" status="PASS" endtime="20170809 03:26:39.556"></status>
</kw>
<status starttime="20170809 03:26:39.555" status="PASS" endtime="20170809 03:26:39.556"></status>
</kw>
<status starttime="20170809 03:26:39.553" status="PASS" endtime="20170809 03:26:39.556"></status>
</kw>
<status starttime="20170809 03:26:39.553" status="PASS" endtime="20170809 03:26:39.556"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:39.715">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:39.715">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:39.556" status="PASS" endtime="20170809 03:26:39.715"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:39.717">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:39.716" status="PASS" endtime="20170809 03:26:39.717"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:39.718">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:39.717" status="PASS" endtime="20170809 03:26:39.718"></status>
</kw>
<status starttime="20170809 03:26:39.717" status="PASS" endtime="20170809 03:26:39.718"></status>
</kw>
<status starttime="20170809 03:26:39.716" status="PASS" endtime="20170809 03:26:39.718"></status>
</kw>
<status starttime="20170809 03:26:39.715" status="PASS" endtime="20170809 03:26:39.718"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:39.719">Delete All Sessions</msg>
<status starttime="20170809 03:26:39.718" status="PASS" endtime="20170809 03:26:39.719"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:39.719">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:39.360" status="PASS" endtime="20170809 03:26:39.719"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:39.719">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:39.719" status="PASS" endtime="20170809 03:26:39.720"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:39.720">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:39.720">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:39.720">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:26:39.720" status="PASS" endtime="20170809 03:26:39.720"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:39.721">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:26:39.359" status="PASS" endtime="20170809 03:26:39.721"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:39.721">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:26:39.358" status="PASS" endtime="20170809 03:26:39.721"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:26:39.722">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:26:39.721" status="FAIL" endtime="20170809 03:26:39.722"></status>
</kw>
<status starttime="20170809 03:26:39.358" status="FAIL" endtime="20170809 03:26:39.722"></status>
</kw>
<status starttime="20170809 03:26:33.388" status="FAIL" endtime="20170809 03:26:39.722"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:49.730">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:26:49.729" status="PASS" endtime="20170809 03:26:49.730"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:49.731">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:26:49.731" status="PASS" endtime="20170809 03:26:49.731"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:49.732">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:26:49.731" status="PASS" endtime="20170809 03:26:49.732"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:49.733">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:26:49.732" status="PASS" endtime="20170809 03:26:49.733"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:50.463">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:26:49.734" status="PASS" endtime="20170809 03:26:50.463"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:50.464">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:26:50.464">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:49.733" status="PASS" endtime="20170809 03:26:50.464"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:50.464">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:50.464" status="PASS" endtime="20170809 03:26:50.465"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:50.465">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:50.465" status="PASS" endtime="20170809 03:26:50.465"></status>
</kw>
<status starttime="20170809 03:26:49.728" status="PASS" endtime="20170809 03:26:50.466"></status>
</kw>
<status starttime="20170809 03:26:49.727" status="PASS" endtime="20170809 03:26:50.466"></status>
</kw>
<status starttime="20170809 03:26:49.726" status="PASS" endtime="20170809 03:26:50.466"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:50.466">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:26:50.466" status="PASS" endtime="20170809 03:26:50.466"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:50.468">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:50.468" status="PASS" endtime="20170809 03:26:50.468"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:50.469">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:26:50.469" status="PASS" endtime="20170809 03:26:50.469"></status>
</kw>
<status starttime="20170809 03:26:50.469" status="PASS" endtime="20170809 03:26:50.470"></status>
</kw>
<status starttime="20170809 03:26:50.467" status="PASS" endtime="20170809 03:26:50.470"></status>
</kw>
<status starttime="20170809 03:26:50.467" status="PASS" endtime="20170809 03:26:50.470"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:51.057">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:26:51.057">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:50.470" status="PASS" endtime="20170809 03:26:51.057"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:51.060">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:51.059" status="PASS" endtime="20170809 03:26:51.060"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:51.061">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:26:51.060" status="PASS" endtime="20170809 03:26:51.061"></status>
</kw>
<status starttime="20170809 03:26:51.060" status="PASS" endtime="20170809 03:26:51.061"></status>
</kw>
<status starttime="20170809 03:26:51.058" status="PASS" endtime="20170809 03:26:51.061"></status>
</kw>
<status starttime="20170809 03:26:51.058" status="PASS" endtime="20170809 03:26:51.061"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:26:51.061">Delete All Sessions</msg>
<status starttime="20170809 03:26:51.061" status="PASS" endtime="20170809 03:26:51.062"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:51.062">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:26:49.725" status="PASS" endtime="20170809 03:26:51.062"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:26:51.062">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:26:51.062" status="PASS" endtime="20170809 03:26:51.062"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:26:51.063">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:26:51.063">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:26:51.063">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status starttime="20170809 03:26:51.063" status="PASS" endtime="20170809 03:26:51.063"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:51.063">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 03:26:49.725" status="PASS" endtime="20170809 03:26:51.063"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:26:51.064">${power_state} = Off</msg>
<status starttime="20170809 03:26:49.724" status="PASS" endtime="20170809 03:26:51.064"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:26:51.064">On != Off</msg>
<status starttime="20170809 03:26:51.064" status="FAIL" endtime="20170809 03:26:51.064"></status>
</kw>
<status starttime="20170809 03:26:49.723" status="FAIL" endtime="20170809 03:26:51.065"></status>
</kw>
<status starttime="20170809 03:26:49.723" status="FAIL" endtime="20170809 03:26:51.065"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.070">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:01.070" status="PASS" endtime="20170809 03:27:01.070"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.071">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:01.071" status="PASS" endtime="20170809 03:27:01.071"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.072">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:01.071" status="PASS" endtime="20170809 03:27:01.072"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.072">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:01.072" status="PASS" endtime="20170809 03:27:01.072"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.459">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:01.073" status="PASS" endtime="20170809 03:27:01.459"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:01.459">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:01.459">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:01.073" status="PASS" endtime="20170809 03:27:01.459"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.460">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:01.459" status="PASS" endtime="20170809 03:27:01.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:01.460" status="PASS" endtime="20170809 03:27:01.460"></status>
</kw>
<status starttime="20170809 03:27:01.069" status="PASS" endtime="20170809 03:27:01.461"></status>
</kw>
<status starttime="20170809 03:27:01.069" status="PASS" endtime="20170809 03:27:01.461"></status>
</kw>
<status starttime="20170809 03:27:01.068" status="PASS" endtime="20170809 03:27:01.461"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.461">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:27:01.461" status="PASS" endtime="20170809 03:27:01.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.463">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:01.463" status="PASS" endtime="20170809 03:27:01.464"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.464">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:01.464" status="PASS" endtime="20170809 03:27:01.465"></status>
</kw>
<status starttime="20170809 03:27:01.464" status="PASS" endtime="20170809 03:27:01.465"></status>
</kw>
<status starttime="20170809 03:27:01.462" status="PASS" endtime="20170809 03:27:01.465"></status>
</kw>
<status starttime="20170809 03:27:01.462" status="PASS" endtime="20170809 03:27:01.465"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.529">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:01.530">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:01.465" status="PASS" endtime="20170809 03:27:01.530"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.531">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:01.531" status="PASS" endtime="20170809 03:27:01.531"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.532">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:01.532" status="PASS" endtime="20170809 03:27:01.532"></status>
</kw>
<status starttime="20170809 03:27:01.532" status="PASS" endtime="20170809 03:27:01.533"></status>
</kw>
<status starttime="20170809 03:27:01.530" status="PASS" endtime="20170809 03:27:01.533"></status>
</kw>
<status starttime="20170809 03:27:01.530" status="PASS" endtime="20170809 03:27:01.533"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:01.533">Delete All Sessions</msg>
<status starttime="20170809 03:27:01.533" status="PASS" endtime="20170809 03:27:01.533"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:01.533">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:01.067" status="PASS" endtime="20170809 03:27:01.533"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.534">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:01.534" status="PASS" endtime="20170809 03:27:01.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.535">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:01.535">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:01.535">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:27:01.534" status="PASS" endtime="20170809 03:27:01.535"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:01.535">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:27:01.067" status="PASS" endtime="20170809 03:27:01.535"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:01.536">${power_state} = On</msg>
<status starttime="20170809 03:27:01.066" status="PASS" endtime="20170809 03:27:01.536"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:27:01.536" status="PASS" endtime="20170809 03:27:01.536"></status>
</kw>
<status starttime="20170809 03:27:01.066" status="PASS" endtime="20170809 03:27:01.536"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.540">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:01.539" status="PASS" endtime="20170809 03:27:01.540"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.541">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:01.541" status="PASS" endtime="20170809 03:27:01.541"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.542">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:01.541" status="PASS" endtime="20170809 03:27:01.542"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.542">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:01.542" status="PASS" endtime="20170809 03:27:01.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.752">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:01.543" status="PASS" endtime="20170809 03:27:01.752"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:01.752">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:01.752">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:01.543" status="PASS" endtime="20170809 03:27:01.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.753">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:01.753" status="PASS" endtime="20170809 03:27:01.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:01.754" status="PASS" endtime="20170809 03:27:01.754"></status>
</kw>
<status starttime="20170809 03:27:01.539" status="PASS" endtime="20170809 03:27:01.754"></status>
</kw>
<status starttime="20170809 03:27:01.538" status="PASS" endtime="20170809 03:27:01.754"></status>
</kw>
<status starttime="20170809 03:27:01.538" status="PASS" endtime="20170809 03:27:01.754"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.755">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:27:01.755" status="PASS" endtime="20170809 03:27:01.755"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.757">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:01.756" status="PASS" endtime="20170809 03:27:01.757"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.758">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:01.758" status="PASS" endtime="20170809 03:27:01.758"></status>
</kw>
<status starttime="20170809 03:27:01.757" status="PASS" endtime="20170809 03:27:01.758"></status>
</kw>
<status starttime="20170809 03:27:01.756" status="PASS" endtime="20170809 03:27:01.758"></status>
</kw>
<status starttime="20170809 03:27:01.755" status="PASS" endtime="20170809 03:27:01.758"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.924">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:01.924">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:01.759" status="PASS" endtime="20170809 03:27:01.924"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.926">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:01.925" status="PASS" endtime="20170809 03:27:01.926"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.927">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:01.927" status="PASS" endtime="20170809 03:27:01.927"></status>
</kw>
<status starttime="20170809 03:27:01.926" status="PASS" endtime="20170809 03:27:01.927"></status>
</kw>
<status starttime="20170809 03:27:01.925" status="PASS" endtime="20170809 03:27:01.927"></status>
</kw>
<status starttime="20170809 03:27:01.924" status="PASS" endtime="20170809 03:27:01.927"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:01.928">Delete All Sessions</msg>
<status starttime="20170809 03:27:01.927" status="PASS" endtime="20170809 03:27:01.928"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:01.928">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:01.537" status="PASS" endtime="20170809 03:27:01.928"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.928">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:01.928" status="PASS" endtime="20170809 03:27:01.929"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.929">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:01.929">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:01.929">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:27:01.929" status="PASS" endtime="20170809 03:27:01.929"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:01.930">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:27:01.537" status="PASS" endtime="20170809 03:27:01.930"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:01.930">${host_state} = Running</msg>
<status starttime="20170809 03:27:01.536" status="PASS" endtime="20170809 03:27:01.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:27:01.930" status="PASS" endtime="20170809 03:27:01.931"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:01.935">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:01.935" status="PASS" endtime="20170809 03:27:01.936"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:01.936" status="PASS" endtime="20170809 03:27:01.936"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.937">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:01.936" status="PASS" endtime="20170809 03:27:01.937"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:01.937">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:01.937" status="PASS" endtime="20170809 03:27:01.937"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:02.137">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:01.938" status="PASS" endtime="20170809 03:27:02.137"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:02.137">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:02.137">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:01.938" status="PASS" endtime="20170809 03:27:02.137"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:02.138">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:02.138" status="PASS" endtime="20170809 03:27:02.138"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:02.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:02.138" status="PASS" endtime="20170809 03:27:02.139"></status>
</kw>
<status starttime="20170809 03:27:01.934" status="PASS" endtime="20170809 03:27:02.139"></status>
</kw>
<status starttime="20170809 03:27:01.933" status="PASS" endtime="20170809 03:27:02.139"></status>
</kw>
<status starttime="20170809 03:27:01.933" status="PASS" endtime="20170809 03:27:02.139"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:02.140">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:27:02.139" status="PASS" endtime="20170809 03:27:02.140"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:02.142">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:27:02.141" status="PASS" endtime="20170809 03:27:02.142"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:02.143">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:27:02.143" status="PASS" endtime="20170809 03:27:02.143"></status>
</kw>
<status starttime="20170809 03:27:02.142" status="PASS" endtime="20170809 03:27:02.143"></status>
</kw>
<status starttime="20170809 03:27:02.141" status="PASS" endtime="20170809 03:27:02.143"></status>
</kw>
<status starttime="20170809 03:27:02.140" status="PASS" endtime="20170809 03:27:02.143"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:02.215">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:02.215">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:02.143" status="PASS" endtime="20170809 03:27:02.215"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:02.217">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:02.217" status="PASS" endtime="20170809 03:27:02.217"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:02.218">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:02.218" status="PASS" endtime="20170809 03:27:02.218"></status>
</kw>
<status starttime="20170809 03:27:02.218" status="PASS" endtime="20170809 03:27:02.219"></status>
</kw>
<status starttime="20170809 03:27:02.216" status="PASS" endtime="20170809 03:27:02.219"></status>
</kw>
<status starttime="20170809 03:27:02.216" status="PASS" endtime="20170809 03:27:02.219"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:02.219">Delete All Sessions</msg>
<status starttime="20170809 03:27:02.219" status="PASS" endtime="20170809 03:27:02.219"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:02.220">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:01.932" status="PASS" endtime="20170809 03:27:02.220"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:02.221">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:02.220" status="PASS" endtime="20170809 03:27:02.221"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:02.221">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:02.222">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:02.222">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170809 03:27:02.221" status="PASS" endtime="20170809 03:27:02.222"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:02.222">${state} = Off</msg>
<status starttime="20170809 03:27:01.931" status="PASS" endtime="20170809 03:27:02.222"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:02.223">${boot_progress} = Off</msg>
<status starttime="20170809 03:27:01.931" status="PASS" endtime="20170809 03:27:02.223"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:27:02.224">Off != FW Progress, Starting OS</msg>
<status starttime="20170809 03:27:02.223" status="FAIL" endtime="20170809 03:27:02.224"></status>
</kw>
<status starttime="20170809 03:27:01.931" status="FAIL" endtime="20170809 03:27:02.224"></status>
</kw>
<status starttime="20170809 03:27:01.065" status="FAIL" endtime="20170809 03:27:02.224"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:12.230">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:12.230" status="PASS" endtime="20170809 03:27:12.230"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:12.231">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:12.231" status="PASS" endtime="20170809 03:27:12.231"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:12.232">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:12.231" status="PASS" endtime="20170809 03:27:12.232"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:12.232">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:12.232" status="PASS" endtime="20170809 03:27:12.232"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:12.817">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:12.233" status="PASS" endtime="20170809 03:27:12.818"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:12.818">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:12.818">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:12.233" status="PASS" endtime="20170809 03:27:12.818"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:12.819">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:12.818" status="PASS" endtime="20170809 03:27:12.819"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:12.819">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:12.819" status="PASS" endtime="20170809 03:27:12.819"></status>
</kw>
<status starttime="20170809 03:27:12.229" status="PASS" endtime="20170809 03:27:12.819"></status>
</kw>
<status starttime="20170809 03:27:12.229" status="PASS" endtime="20170809 03:27:12.820"></status>
</kw>
<status starttime="20170809 03:27:12.228" status="PASS" endtime="20170809 03:27:12.820"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:12.820">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:27:12.820" status="PASS" endtime="20170809 03:27:12.820"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:12.822">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:12.822" status="PASS" endtime="20170809 03:27:12.822"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:12.823">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:12.823" status="PASS" endtime="20170809 03:27:12.823"></status>
</kw>
<status starttime="20170809 03:27:12.823" status="PASS" endtime="20170809 03:27:12.824"></status>
</kw>
<status starttime="20170809 03:27:12.821" status="PASS" endtime="20170809 03:27:12.824"></status>
</kw>
<status starttime="20170809 03:27:12.821" status="PASS" endtime="20170809 03:27:12.824"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:12.997">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:12.997">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:12.824" status="PASS" endtime="20170809 03:27:12.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:12.999">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:12.998" status="PASS" endtime="20170809 03:27:12.999"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.000">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:13.000" status="PASS" endtime="20170809 03:27:13.000"></status>
</kw>
<status starttime="20170809 03:27:12.999" status="PASS" endtime="20170809 03:27:13.000"></status>
</kw>
<status starttime="20170809 03:27:12.998" status="PASS" endtime="20170809 03:27:13.000"></status>
</kw>
<status starttime="20170809 03:27:12.997" status="PASS" endtime="20170809 03:27:13.000"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:13.001">Delete All Sessions</msg>
<status starttime="20170809 03:27:13.001" status="PASS" endtime="20170809 03:27:13.001"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:13.001">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:12.227" status="PASS" endtime="20170809 03:27:13.001"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.002">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:13.001" status="PASS" endtime="20170809 03:27:13.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.002">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:13.002">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:13.002">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:27:13.002" status="PASS" endtime="20170809 03:27:13.002"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:13.003">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:27:12.227" status="PASS" endtime="20170809 03:27:13.003"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:13.003">${power_state} = On</msg>
<status starttime="20170809 03:27:12.226" status="PASS" endtime="20170809 03:27:13.003"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:27:13.003" status="PASS" endtime="20170809 03:27:13.004"></status>
</kw>
<status starttime="20170809 03:27:12.226" status="PASS" endtime="20170809 03:27:13.004"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.008">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:13.008" status="PASS" endtime="20170809 03:27:13.009"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.010">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:13.010" status="PASS" endtime="20170809 03:27:13.010"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.011">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:13.011" status="PASS" endtime="20170809 03:27:13.011"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.012">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:13.012" status="PASS" endtime="20170809 03:27:13.012"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.189">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:13.013" status="PASS" endtime="20170809 03:27:13.189"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:13.190">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:13.190">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:13.013" status="PASS" endtime="20170809 03:27:13.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.190">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:13.190" status="PASS" endtime="20170809 03:27:13.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:13.191" status="PASS" endtime="20170809 03:27:13.191"></status>
</kw>
<status starttime="20170809 03:27:13.007" status="PASS" endtime="20170809 03:27:13.191"></status>
</kw>
<status starttime="20170809 03:27:13.007" status="PASS" endtime="20170809 03:27:13.191"></status>
</kw>
<status starttime="20170809 03:27:13.005" status="PASS" endtime="20170809 03:27:13.191"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.192">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:27:13.192" status="PASS" endtime="20170809 03:27:13.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.194">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:13.194" status="PASS" endtime="20170809 03:27:13.194"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.195">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:13.195" status="PASS" endtime="20170809 03:27:13.195"></status>
</kw>
<status starttime="20170809 03:27:13.194" status="PASS" endtime="20170809 03:27:13.196"></status>
</kw>
<status starttime="20170809 03:27:13.193" status="PASS" endtime="20170809 03:27:13.196"></status>
</kw>
<status starttime="20170809 03:27:13.192" status="PASS" endtime="20170809 03:27:13.196"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.285">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:13.285">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:13.196" status="PASS" endtime="20170809 03:27:13.285"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.287">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:13.287" status="PASS" endtime="20170809 03:27:13.287"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.288">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:13.288" status="PASS" endtime="20170809 03:27:13.288"></status>
</kw>
<status starttime="20170809 03:27:13.287" status="PASS" endtime="20170809 03:27:13.288"></status>
</kw>
<status starttime="20170809 03:27:13.286" status="PASS" endtime="20170809 03:27:13.288"></status>
</kw>
<status starttime="20170809 03:27:13.286" status="PASS" endtime="20170809 03:27:13.288"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:13.289">Delete All Sessions</msg>
<status starttime="20170809 03:27:13.289" status="PASS" endtime="20170809 03:27:13.289"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:13.289">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:13.005" status="PASS" endtime="20170809 03:27:13.289"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.290">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:13.289" status="PASS" endtime="20170809 03:27:13.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.290">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:13.290">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:13.291">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:27:13.290" status="PASS" endtime="20170809 03:27:13.291"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:13.291">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:27:13.004" status="PASS" endtime="20170809 03:27:13.291"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:13.291">${host_state} = Running</msg>
<status starttime="20170809 03:27:13.004" status="PASS" endtime="20170809 03:27:13.291"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:27:13.291" status="PASS" endtime="20170809 03:27:13.292"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.296">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:13.296" status="PASS" endtime="20170809 03:27:13.296"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.297">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:13.297" status="PASS" endtime="20170809 03:27:13.297"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.297">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:13.297" status="PASS" endtime="20170809 03:27:13.298"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.298">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:13.298" status="PASS" endtime="20170809 03:27:13.298"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.511">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:13.299" status="PASS" endtime="20170809 03:27:13.512"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:13.512">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:13.512">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:13.299" status="PASS" endtime="20170809 03:27:13.512"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.513">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:13.512" status="PASS" endtime="20170809 03:27:13.513"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:13.513" status="PASS" endtime="20170809 03:27:13.513"></status>
</kw>
<status starttime="20170809 03:27:13.295" status="PASS" endtime="20170809 03:27:13.513"></status>
</kw>
<status starttime="20170809 03:27:13.295" status="PASS" endtime="20170809 03:27:13.514"></status>
</kw>
<status starttime="20170809 03:27:13.294" status="PASS" endtime="20170809 03:27:13.514"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.514">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:27:13.514" status="PASS" endtime="20170809 03:27:13.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.518">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:27:13.517" status="PASS" endtime="20170809 03:27:13.518"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.519">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:27:13.519" status="PASS" endtime="20170809 03:27:13.519"></status>
</kw>
<status starttime="20170809 03:27:13.518" status="PASS" endtime="20170809 03:27:13.519"></status>
</kw>
<status starttime="20170809 03:27:13.516" status="PASS" endtime="20170809 03:27:13.519"></status>
</kw>
<status starttime="20170809 03:27:13.515" status="PASS" endtime="20170809 03:27:13.519"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.586">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:13.586">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:13.520" status="PASS" endtime="20170809 03:27:13.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.588">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:13.587" status="PASS" endtime="20170809 03:27:13.588"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.589">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:13.588" status="PASS" endtime="20170809 03:27:13.589"></status>
</kw>
<status starttime="20170809 03:27:13.588" status="PASS" endtime="20170809 03:27:13.589"></status>
</kw>
<status starttime="20170809 03:27:13.587" status="PASS" endtime="20170809 03:27:13.589"></status>
</kw>
<status starttime="20170809 03:27:13.586" status="PASS" endtime="20170809 03:27:13.589"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:13.589">Delete All Sessions</msg>
<status starttime="20170809 03:27:13.589" status="PASS" endtime="20170809 03:27:13.590"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:13.590">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:13.293" status="PASS" endtime="20170809 03:27:13.590"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:13.590">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:13.590" status="PASS" endtime="20170809 03:27:13.591"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:13.591">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:13.591">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:13.591">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:27:13.591" status="PASS" endtime="20170809 03:27:13.591"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:13.591">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:27:13.293" status="PASS" endtime="20170809 03:27:13.592"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:13.592">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:27:13.292" status="PASS" endtime="20170809 03:27:13.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:27:13.593">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:27:13.592" status="FAIL" endtime="20170809 03:27:13.593"></status>
</kw>
<status starttime="20170809 03:27:13.292" status="FAIL" endtime="20170809 03:27:13.593"></status>
</kw>
<status starttime="20170809 03:27:12.225" status="FAIL" endtime="20170809 03:27:13.593"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:23.598">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:23.598" status="PASS" endtime="20170809 03:27:23.599"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:23.599">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:23.599" status="PASS" endtime="20170809 03:27:23.599"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:23.600">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:23.600" status="PASS" endtime="20170809 03:27:23.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:23.601">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:23.601" status="PASS" endtime="20170809 03:27:23.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:23.791">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:23.602" status="PASS" endtime="20170809 03:27:23.791"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:23.791">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:23.791">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:23.601" status="PASS" endtime="20170809 03:27:23.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:23.792">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:23.792" status="PASS" endtime="20170809 03:27:23.792"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:23.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:23.792" status="PASS" endtime="20170809 03:27:23.793"></status>
</kw>
<status starttime="20170809 03:27:23.598" status="PASS" endtime="20170809 03:27:23.793"></status>
</kw>
<status starttime="20170809 03:27:23.597" status="PASS" endtime="20170809 03:27:23.793"></status>
</kw>
<status starttime="20170809 03:27:23.596" status="PASS" endtime="20170809 03:27:23.793"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:23.794">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:27:23.793" status="PASS" endtime="20170809 03:27:23.794"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:23.796">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:23.795" status="PASS" endtime="20170809 03:27:23.796"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:23.797">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:23.797" status="PASS" endtime="20170809 03:27:23.798"></status>
</kw>
<status starttime="20170809 03:27:23.797" status="PASS" endtime="20170809 03:27:23.798"></status>
</kw>
<status starttime="20170809 03:27:23.795" status="PASS" endtime="20170809 03:27:23.798"></status>
</kw>
<status starttime="20170809 03:27:23.794" status="PASS" endtime="20170809 03:27:23.798"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:23.876">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:23.876">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:23.798" status="PASS" endtime="20170809 03:27:23.876"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:23.878">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:23.877" status="PASS" endtime="20170809 03:27:23.878"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:23.879">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:23.879" status="PASS" endtime="20170809 03:27:23.879"></status>
</kw>
<status starttime="20170809 03:27:23.878" status="PASS" endtime="20170809 03:27:23.879"></status>
</kw>
<status starttime="20170809 03:27:23.877" status="PASS" endtime="20170809 03:27:23.879"></status>
</kw>
<status starttime="20170809 03:27:23.876" status="PASS" endtime="20170809 03:27:23.879"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:23.880">Delete All Sessions</msg>
<status starttime="20170809 03:27:23.880" status="PASS" endtime="20170809 03:27:23.880"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:23.880">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:23.595" status="PASS" endtime="20170809 03:27:23.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:23.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:23.880" status="PASS" endtime="20170809 03:27:23.881"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:23.881">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:23.881">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:23.881">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:27:23.881" status="PASS" endtime="20170809 03:27:23.882"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:23.882">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:27:23.595" status="PASS" endtime="20170809 03:27:23.882"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:23.882">${power_state} = On</msg>
<status starttime="20170809 03:27:23.594" status="PASS" endtime="20170809 03:27:23.882"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:27:23.882" status="PASS" endtime="20170809 03:27:23.883"></status>
</kw>
<status starttime="20170809 03:27:23.594" status="PASS" endtime="20170809 03:27:23.883"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:23.886">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:23.886" status="PASS" endtime="20170809 03:27:23.887"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:23.888">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:23.887" status="PASS" endtime="20170809 03:27:23.888"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:23.888">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:23.888" status="PASS" endtime="20170809 03:27:23.888"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:23.889">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:23.889" status="PASS" endtime="20170809 03:27:23.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.198">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:23.890" status="PASS" endtime="20170809 03:27:24.198"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:24.198">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:24.198">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:23.889" status="PASS" endtime="20170809 03:27:24.198"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.199">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:24.198" status="PASS" endtime="20170809 03:27:24.199"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:24.199" status="PASS" endtime="20170809 03:27:24.199"></status>
</kw>
<status starttime="20170809 03:27:23.885" status="PASS" endtime="20170809 03:27:24.199"></status>
</kw>
<status starttime="20170809 03:27:23.885" status="PASS" endtime="20170809 03:27:24.200"></status>
</kw>
<status starttime="20170809 03:27:23.884" status="PASS" endtime="20170809 03:27:24.200"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.201">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:27:24.200" status="PASS" endtime="20170809 03:27:24.201"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.204">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:24.203" status="PASS" endtime="20170809 03:27:24.205"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.206">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:24.205" status="PASS" endtime="20170809 03:27:24.206"></status>
</kw>
<status starttime="20170809 03:27:24.205" status="PASS" endtime="20170809 03:27:24.206"></status>
</kw>
<status starttime="20170809 03:27:24.202" status="PASS" endtime="20170809 03:27:24.206"></status>
</kw>
<status starttime="20170809 03:27:24.201" status="PASS" endtime="20170809 03:27:24.206"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.295">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:24.295">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:24.207" status="PASS" endtime="20170809 03:27:24.295"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.297">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:24.296" status="PASS" endtime="20170809 03:27:24.297"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.298">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:24.298" status="PASS" endtime="20170809 03:27:24.298"></status>
</kw>
<status starttime="20170809 03:27:24.297" status="PASS" endtime="20170809 03:27:24.298"></status>
</kw>
<status starttime="20170809 03:27:24.296" status="PASS" endtime="20170809 03:27:24.298"></status>
</kw>
<status starttime="20170809 03:27:24.295" status="PASS" endtime="20170809 03:27:24.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:24.299">Delete All Sessions</msg>
<status starttime="20170809 03:27:24.299" status="PASS" endtime="20170809 03:27:24.299"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:24.299">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:23.884" status="PASS" endtime="20170809 03:27:24.299"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.300">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:24.299" status="PASS" endtime="20170809 03:27:24.300"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.300">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:24.300">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:24.300">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:27:24.300" status="PASS" endtime="20170809 03:27:24.301"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:24.301">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:27:23.883" status="PASS" endtime="20170809 03:27:24.301"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:24.301">${host_state} = Running</msg>
<status starttime="20170809 03:27:23.883" status="PASS" endtime="20170809 03:27:24.301"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:27:24.301" status="PASS" endtime="20170809 03:27:24.302"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.306">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:24.306" status="PASS" endtime="20170809 03:27:24.307"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.307">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:24.307" status="PASS" endtime="20170809 03:27:24.307"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.308">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:24.308" status="PASS" endtime="20170809 03:27:24.308"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.309">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:24.308" status="PASS" endtime="20170809 03:27:24.309"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.496">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:24.309" status="PASS" endtime="20170809 03:27:24.497"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:24.497">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:24.497">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:24.309" status="PASS" endtime="20170809 03:27:24.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.498">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:24.497" status="PASS" endtime="20170809 03:27:24.498"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:24.498" status="PASS" endtime="20170809 03:27:24.498"></status>
</kw>
<status starttime="20170809 03:27:24.305" status="PASS" endtime="20170809 03:27:24.498"></status>
</kw>
<status starttime="20170809 03:27:24.305" status="PASS" endtime="20170809 03:27:24.498"></status>
</kw>
<status starttime="20170809 03:27:24.304" status="PASS" endtime="20170809 03:27:24.499"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.499">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:27:24.499" status="PASS" endtime="20170809 03:27:24.499"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.501">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:27:24.501" status="PASS" endtime="20170809 03:27:24.501"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.502">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:27:24.502" status="PASS" endtime="20170809 03:27:24.502"></status>
</kw>
<status starttime="20170809 03:27:24.502" status="PASS" endtime="20170809 03:27:24.503"></status>
</kw>
<status starttime="20170809 03:27:24.500" status="PASS" endtime="20170809 03:27:24.503"></status>
</kw>
<status starttime="20170809 03:27:24.500" status="PASS" endtime="20170809 03:27:24.503"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.570">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:24.570">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:24.503" status="PASS" endtime="20170809 03:27:24.570"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.572">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:24.572" status="PASS" endtime="20170809 03:27:24.572"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.574">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:24.573" status="PASS" endtime="20170809 03:27:24.574"></status>
</kw>
<status starttime="20170809 03:27:24.572" status="PASS" endtime="20170809 03:27:24.574"></status>
</kw>
<status starttime="20170809 03:27:24.571" status="PASS" endtime="20170809 03:27:24.574"></status>
</kw>
<status starttime="20170809 03:27:24.571" status="PASS" endtime="20170809 03:27:24.574"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:24.574">Delete All Sessions</msg>
<status starttime="20170809 03:27:24.574" status="PASS" endtime="20170809 03:27:24.575"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:24.575">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:24.303" status="PASS" endtime="20170809 03:27:24.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:24.575">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:24.575" status="PASS" endtime="20170809 03:27:24.576"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:24.576">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:24.576">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:24.576">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:27:24.576" status="PASS" endtime="20170809 03:27:24.576"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:24.577">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:27:24.302" status="PASS" endtime="20170809 03:27:24.577"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:24.577">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:27:24.302" status="PASS" endtime="20170809 03:27:24.577"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:27:24.578">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:27:24.577" status="FAIL" endtime="20170809 03:27:24.578"></status>
</kw>
<status starttime="20170809 03:27:24.302" status="FAIL" endtime="20170809 03:27:24.578"></status>
</kw>
<status starttime="20170809 03:27:23.594" status="FAIL" endtime="20170809 03:27:24.578"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:34.583">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:34.583" status="PASS" endtime="20170809 03:27:34.583"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:34.584">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:34.584" status="PASS" endtime="20170809 03:27:34.584"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:34.585">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:34.584" status="PASS" endtime="20170809 03:27:34.585"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:34.585">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:34.585" status="PASS" endtime="20170809 03:27:34.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:34.801">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:34.586" status="PASS" endtime="20170809 03:27:34.802"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:34.802">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:34.802">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:34.586" status="PASS" endtime="20170809 03:27:34.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:34.803">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:34.802" status="PASS" endtime="20170809 03:27:34.803"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:34.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:34.803" status="PASS" endtime="20170809 03:27:34.803"></status>
</kw>
<status starttime="20170809 03:27:34.582" status="PASS" endtime="20170809 03:27:34.804"></status>
</kw>
<status starttime="20170809 03:27:34.582" status="PASS" endtime="20170809 03:27:34.804"></status>
</kw>
<status starttime="20170809 03:27:34.581" status="PASS" endtime="20170809 03:27:34.804"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:34.804">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:27:34.804" status="PASS" endtime="20170809 03:27:34.804"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:34.807">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:34.806" status="PASS" endtime="20170809 03:27:34.807"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:34.808">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:34.807" status="PASS" endtime="20170809 03:27:34.808"></status>
</kw>
<status starttime="20170809 03:27:34.807" status="PASS" endtime="20170809 03:27:34.808"></status>
</kw>
<status starttime="20170809 03:27:34.805" status="PASS" endtime="20170809 03:27:34.808"></status>
</kw>
<status starttime="20170809 03:27:34.805" status="PASS" endtime="20170809 03:27:34.808"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:34.896">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:34.896">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:34.808" status="PASS" endtime="20170809 03:27:34.896"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:34.898">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:34.898" status="PASS" endtime="20170809 03:27:34.898"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:34.899">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:34.899" status="PASS" endtime="20170809 03:27:34.899"></status>
</kw>
<status starttime="20170809 03:27:34.899" status="PASS" endtime="20170809 03:27:34.899"></status>
</kw>
<status starttime="20170809 03:27:34.897" status="PASS" endtime="20170809 03:27:34.900"></status>
</kw>
<status starttime="20170809 03:27:34.897" status="PASS" endtime="20170809 03:27:34.900"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:34.900">Delete All Sessions</msg>
<status starttime="20170809 03:27:34.900" status="PASS" endtime="20170809 03:27:34.900"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:34.900">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:34.580" status="PASS" endtime="20170809 03:27:34.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:34.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:34.901" status="PASS" endtime="20170809 03:27:34.901"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:34.902">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:34.902">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:34.902">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:27:34.901" status="PASS" endtime="20170809 03:27:34.902"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:34.902">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:27:34.580" status="PASS" endtime="20170809 03:27:34.902"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:34.902">${power_state} = On</msg>
<status starttime="20170809 03:27:34.579" status="PASS" endtime="20170809 03:27:34.902"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:27:34.903" status="PASS" endtime="20170809 03:27:34.903"></status>
</kw>
<status starttime="20170809 03:27:34.579" status="PASS" endtime="20170809 03:27:34.903"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:34.907">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:34.906" status="PASS" endtime="20170809 03:27:34.907"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:34.908">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:34.908" status="PASS" endtime="20170809 03:27:34.908"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:34.909">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:34.908" status="PASS" endtime="20170809 03:27:34.909"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:34.909">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:34.909" status="PASS" endtime="20170809 03:27:34.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.161">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:34.910" status="PASS" endtime="20170809 03:27:35.161"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:35.161">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:35.161">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:34.909" status="PASS" endtime="20170809 03:27:35.161"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.162">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:35.161" status="PASS" endtime="20170809 03:27:35.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.162">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:35.162" status="PASS" endtime="20170809 03:27:35.163"></status>
</kw>
<status starttime="20170809 03:27:34.906" status="PASS" endtime="20170809 03:27:35.163"></status>
</kw>
<status starttime="20170809 03:27:34.905" status="PASS" endtime="20170809 03:27:35.163"></status>
</kw>
<status starttime="20170809 03:27:34.905" status="PASS" endtime="20170809 03:27:35.163"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.163">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:27:35.163" status="PASS" endtime="20170809 03:27:35.163"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.166">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:35.165" status="PASS" endtime="20170809 03:27:35.166"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.167">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:35.167" status="PASS" endtime="20170809 03:27:35.167"></status>
</kw>
<status starttime="20170809 03:27:35.166" status="PASS" endtime="20170809 03:27:35.167"></status>
</kw>
<status starttime="20170809 03:27:35.165" status="PASS" endtime="20170809 03:27:35.167"></status>
</kw>
<status starttime="20170809 03:27:35.164" status="PASS" endtime="20170809 03:27:35.167"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.320">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:35.321">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:35.168" status="PASS" endtime="20170809 03:27:35.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.323">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:35.322" status="PASS" endtime="20170809 03:27:35.323"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.323">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:35.323" status="PASS" endtime="20170809 03:27:35.324"></status>
</kw>
<status starttime="20170809 03:27:35.323" status="PASS" endtime="20170809 03:27:35.324"></status>
</kw>
<status starttime="20170809 03:27:35.322" status="PASS" endtime="20170809 03:27:35.324"></status>
</kw>
<status starttime="20170809 03:27:35.321" status="PASS" endtime="20170809 03:27:35.324"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:35.324">Delete All Sessions</msg>
<status starttime="20170809 03:27:35.324" status="PASS" endtime="20170809 03:27:35.324"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:35.325">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:34.904" status="PASS" endtime="20170809 03:27:35.325"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.325">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:35.325" status="PASS" endtime="20170809 03:27:35.325"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.326">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:35.326">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:35.326">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:27:35.325" status="PASS" endtime="20170809 03:27:35.326"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:35.326">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:27:34.904" status="PASS" endtime="20170809 03:27:35.326"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:35.327">${host_state} = Running</msg>
<status starttime="20170809 03:27:34.903" status="PASS" endtime="20170809 03:27:35.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:27:35.327" status="PASS" endtime="20170809 03:27:35.327"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.331">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:35.331" status="PASS" endtime="20170809 03:27:35.332"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.332">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:35.332" status="PASS" endtime="20170809 03:27:35.332"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.333">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:35.333" status="PASS" endtime="20170809 03:27:35.333"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.334">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:35.333" status="PASS" endtime="20170809 03:27:35.334"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.526">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:35.334" status="PASS" endtime="20170809 03:27:35.526"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:35.526">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:35.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:35.334" status="PASS" endtime="20170809 03:27:35.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.527">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:35.527" status="PASS" endtime="20170809 03:27:35.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:35.527" status="PASS" endtime="20170809 03:27:35.528"></status>
</kw>
<status starttime="20170809 03:27:35.331" status="PASS" endtime="20170809 03:27:35.528"></status>
</kw>
<status starttime="20170809 03:27:35.330" status="PASS" endtime="20170809 03:27:35.528"></status>
</kw>
<status starttime="20170809 03:27:35.330" status="PASS" endtime="20170809 03:27:35.528"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.529">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:27:35.528" status="PASS" endtime="20170809 03:27:35.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.531">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:27:35.530" status="PASS" endtime="20170809 03:27:35.531"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.535">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:27:35.532" status="PASS" endtime="20170809 03:27:35.535"></status>
</kw>
<status starttime="20170809 03:27:35.531" status="PASS" endtime="20170809 03:27:35.535"></status>
</kw>
<status starttime="20170809 03:27:35.529" status="PASS" endtime="20170809 03:27:35.535"></status>
</kw>
<status starttime="20170809 03:27:35.529" status="PASS" endtime="20170809 03:27:35.535"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.621">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:35.622">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:35.535" status="PASS" endtime="20170809 03:27:35.622"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.623">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:35.623" status="PASS" endtime="20170809 03:27:35.624"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.624">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:35.624" status="PASS" endtime="20170809 03:27:35.625"></status>
</kw>
<status starttime="20170809 03:27:35.624" status="PASS" endtime="20170809 03:27:35.625"></status>
</kw>
<status starttime="20170809 03:27:35.622" status="PASS" endtime="20170809 03:27:35.625"></status>
</kw>
<status starttime="20170809 03:27:35.622" status="PASS" endtime="20170809 03:27:35.625"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:35.625">Delete All Sessions</msg>
<status starttime="20170809 03:27:35.625" status="PASS" endtime="20170809 03:27:35.625"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:35.625">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:35.329" status="PASS" endtime="20170809 03:27:35.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:35.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:35.626" status="PASS" endtime="20170809 03:27:35.626"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:35.627">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:35.627">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:35.627">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:27:35.626" status="PASS" endtime="20170809 03:27:35.627"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:35.627">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:27:35.328" status="PASS" endtime="20170809 03:27:35.627"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:35.627">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:27:35.328" status="PASS" endtime="20170809 03:27:35.628"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:27:35.628">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:27:35.628" status="FAIL" endtime="20170809 03:27:35.628"></status>
</kw>
<status starttime="20170809 03:27:35.327" status="FAIL" endtime="20170809 03:27:35.628"></status>
</kw>
<status starttime="20170809 03:27:34.578" status="FAIL" endtime="20170809 03:27:35.629"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:45.634">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:45.633" status="PASS" endtime="20170809 03:27:45.634"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:45.635">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:45.634" status="PASS" endtime="20170809 03:27:45.635"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:45.635">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:45.635" status="PASS" endtime="20170809 03:27:45.635"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:45.636">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:45.635" status="PASS" endtime="20170809 03:27:45.636"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:45.859">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:45.637" status="PASS" endtime="20170809 03:27:45.859"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:45.859">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:45.859">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:45.636" status="PASS" endtime="20170809 03:27:45.859"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:45.860">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:45.860" status="PASS" endtime="20170809 03:27:45.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:45.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:45.861" status="PASS" endtime="20170809 03:27:45.861"></status>
</kw>
<status starttime="20170809 03:27:45.633" status="PASS" endtime="20170809 03:27:45.861"></status>
</kw>
<status starttime="20170809 03:27:45.632" status="PASS" endtime="20170809 03:27:45.862"></status>
</kw>
<status starttime="20170809 03:27:45.632" status="PASS" endtime="20170809 03:27:45.862"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:45.863">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:27:45.862" status="PASS" endtime="20170809 03:27:45.863"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:45.866">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:45.865" status="PASS" endtime="20170809 03:27:45.866"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:45.867">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:45.867" status="PASS" endtime="20170809 03:27:45.867"></status>
</kw>
<status starttime="20170809 03:27:45.866" status="PASS" endtime="20170809 03:27:45.868"></status>
</kw>
<status starttime="20170809 03:27:45.864" status="PASS" endtime="20170809 03:27:45.868"></status>
</kw>
<status starttime="20170809 03:27:45.863" status="PASS" endtime="20170809 03:27:45.868"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:45.958">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:45.958">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:45.868" status="PASS" endtime="20170809 03:27:45.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:45.960">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:45.959" status="PASS" endtime="20170809 03:27:45.960"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:45.961">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:45.961" status="PASS" endtime="20170809 03:27:45.961"></status>
</kw>
<status starttime="20170809 03:27:45.960" status="PASS" endtime="20170809 03:27:45.961"></status>
</kw>
<status starttime="20170809 03:27:45.959" status="PASS" endtime="20170809 03:27:45.961"></status>
</kw>
<status starttime="20170809 03:27:45.958" status="PASS" endtime="20170809 03:27:45.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:45.962">Delete All Sessions</msg>
<status starttime="20170809 03:27:45.962" status="PASS" endtime="20170809 03:27:45.962"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:45.962">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:45.631" status="PASS" endtime="20170809 03:27:45.962"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:45.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:45.962" status="PASS" endtime="20170809 03:27:45.963"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:45.963">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:45.963">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:45.963">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:27:45.963" status="PASS" endtime="20170809 03:27:45.964"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:45.964">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:27:45.630" status="PASS" endtime="20170809 03:27:45.964"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:45.964">${power_state} = On</msg>
<status starttime="20170809 03:27:45.630" status="PASS" endtime="20170809 03:27:45.964"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:27:45.964" status="PASS" endtime="20170809 03:27:45.965"></status>
</kw>
<status starttime="20170809 03:27:45.630" status="PASS" endtime="20170809 03:27:45.965"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:45.969">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:45.968" status="PASS" endtime="20170809 03:27:45.969"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:45.970">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:45.970" status="PASS" endtime="20170809 03:27:45.970"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:45.971">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:45.970" status="PASS" endtime="20170809 03:27:45.971"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:45.971">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:45.971" status="PASS" endtime="20170809 03:27:45.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.327">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:45.972" status="PASS" endtime="20170809 03:27:46.327"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:46.328">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:46.328">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:45.972" status="PASS" endtime="20170809 03:27:46.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.328">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:46.328" status="PASS" endtime="20170809 03:27:46.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.329">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:46.329" status="PASS" endtime="20170809 03:27:46.329"></status>
</kw>
<status starttime="20170809 03:27:45.968" status="PASS" endtime="20170809 03:27:46.329"></status>
</kw>
<status starttime="20170809 03:27:45.967" status="PASS" endtime="20170809 03:27:46.329"></status>
</kw>
<status starttime="20170809 03:27:45.966" status="PASS" endtime="20170809 03:27:46.329"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.330">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:27:46.330" status="PASS" endtime="20170809 03:27:46.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.332">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:46.332" status="PASS" endtime="20170809 03:27:46.332"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.333">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:46.333" status="PASS" endtime="20170809 03:27:46.333"></status>
</kw>
<status starttime="20170809 03:27:46.333" status="PASS" endtime="20170809 03:27:46.334"></status>
</kw>
<status starttime="20170809 03:27:46.331" status="PASS" endtime="20170809 03:27:46.334"></status>
</kw>
<status starttime="20170809 03:27:46.331" status="PASS" endtime="20170809 03:27:46.334"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.424">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:46.424">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:46.334" status="PASS" endtime="20170809 03:27:46.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.426">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:46.425" status="PASS" endtime="20170809 03:27:46.426"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.427">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:46.426" status="PASS" endtime="20170809 03:27:46.427"></status>
</kw>
<status starttime="20170809 03:27:46.426" status="PASS" endtime="20170809 03:27:46.427"></status>
</kw>
<status starttime="20170809 03:27:46.425" status="PASS" endtime="20170809 03:27:46.427"></status>
</kw>
<status starttime="20170809 03:27:46.424" status="PASS" endtime="20170809 03:27:46.427"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:46.427">Delete All Sessions</msg>
<status starttime="20170809 03:27:46.427" status="PASS" endtime="20170809 03:27:46.428"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:46.428">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:45.966" status="PASS" endtime="20170809 03:27:46.428"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.428">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:46.428" status="PASS" endtime="20170809 03:27:46.429"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.429">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:46.429">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:46.429">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:27:46.429" status="PASS" endtime="20170809 03:27:46.429"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:46.430">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:27:45.965" status="PASS" endtime="20170809 03:27:46.430"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:46.430">${host_state} = Running</msg>
<status starttime="20170809 03:27:45.965" status="PASS" endtime="20170809 03:27:46.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:27:46.430" status="PASS" endtime="20170809 03:27:46.430"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.435">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:46.434" status="PASS" endtime="20170809 03:27:46.435"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.436">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:46.435" status="PASS" endtime="20170809 03:27:46.436"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.436">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:46.436" status="PASS" endtime="20170809 03:27:46.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.437">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:46.437" status="PASS" endtime="20170809 03:27:46.437"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.634">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:46.438" status="PASS" endtime="20170809 03:27:46.634"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:46.634">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:46.634">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:46.437" status="PASS" endtime="20170809 03:27:46.634"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.635">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:46.634" status="PASS" endtime="20170809 03:27:46.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.635">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:46.635" status="PASS" endtime="20170809 03:27:46.636"></status>
</kw>
<status starttime="20170809 03:27:46.434" status="PASS" endtime="20170809 03:27:46.636"></status>
</kw>
<status starttime="20170809 03:27:46.433" status="PASS" endtime="20170809 03:27:46.636"></status>
</kw>
<status starttime="20170809 03:27:46.433" status="PASS" endtime="20170809 03:27:46.636"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.636">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:27:46.636" status="PASS" endtime="20170809 03:27:46.637"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.639">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:27:46.638" status="PASS" endtime="20170809 03:27:46.639"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.640">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:27:46.640" status="PASS" endtime="20170809 03:27:46.640"></status>
</kw>
<status starttime="20170809 03:27:46.639" status="PASS" endtime="20170809 03:27:46.640"></status>
</kw>
<status starttime="20170809 03:27:46.637" status="PASS" endtime="20170809 03:27:46.640"></status>
</kw>
<status starttime="20170809 03:27:46.637" status="PASS" endtime="20170809 03:27:46.640"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.713">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:46.713">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:46.641" status="PASS" endtime="20170809 03:27:46.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.715">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:46.715" status="PASS" endtime="20170809 03:27:46.715"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.716">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:46.716" status="PASS" endtime="20170809 03:27:46.716"></status>
</kw>
<status starttime="20170809 03:27:46.716" status="PASS" endtime="20170809 03:27:46.717"></status>
</kw>
<status starttime="20170809 03:27:46.714" status="PASS" endtime="20170809 03:27:46.717"></status>
</kw>
<status starttime="20170809 03:27:46.714" status="PASS" endtime="20170809 03:27:46.717"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:46.717">Delete All Sessions</msg>
<status starttime="20170809 03:27:46.717" status="PASS" endtime="20170809 03:27:46.717"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:46.717">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:46.432" status="PASS" endtime="20170809 03:27:46.718"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:46.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:46.718" status="PASS" endtime="20170809 03:27:46.718"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:46.719">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:46.719">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:46.719">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:27:46.719" status="PASS" endtime="20170809 03:27:46.719"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:46.719">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:27:46.432" status="PASS" endtime="20170809 03:27:46.719"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:46.720">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:27:46.431" status="PASS" endtime="20170809 03:27:46.720"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:27:46.720">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:27:46.720" status="FAIL" endtime="20170809 03:27:46.720"></status>
</kw>
<status starttime="20170809 03:27:46.431" status="FAIL" endtime="20170809 03:27:46.721"></status>
</kw>
<status starttime="20170809 03:27:45.629" status="FAIL" endtime="20170809 03:27:46.721"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:56.726">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:56.725" status="PASS" endtime="20170809 03:27:56.726"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:56.727">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:56.726" status="PASS" endtime="20170809 03:27:56.727"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:56.727">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:56.727" status="PASS" endtime="20170809 03:27:56.727"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:56.728">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:56.728" status="PASS" endtime="20170809 03:27:56.728"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:56.925">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:56.729" status="PASS" endtime="20170809 03:27:56.925"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:56.925">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:56.925">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:56.728" status="PASS" endtime="20170809 03:27:56.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:56.926">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:56.926" status="PASS" endtime="20170809 03:27:56.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:56.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:56.926" status="PASS" endtime="20170809 03:27:56.927"></status>
</kw>
<status starttime="20170809 03:27:56.725" status="PASS" endtime="20170809 03:27:56.927"></status>
</kw>
<status starttime="20170809 03:27:56.725" status="PASS" endtime="20170809 03:27:56.927"></status>
</kw>
<status starttime="20170809 03:27:56.724" status="PASS" endtime="20170809 03:27:56.927"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:56.928">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:27:56.927" status="PASS" endtime="20170809 03:27:56.928"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:56.930">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:56.929" status="PASS" endtime="20170809 03:27:56.930"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:56.931">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:56.930" status="PASS" endtime="20170809 03:27:56.931"></status>
</kw>
<status starttime="20170809 03:27:56.930" status="PASS" endtime="20170809 03:27:56.931"></status>
</kw>
<status starttime="20170809 03:27:56.928" status="PASS" endtime="20170809 03:27:56.931"></status>
</kw>
<status starttime="20170809 03:27:56.928" status="PASS" endtime="20170809 03:27:56.931"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.003">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:57.003">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:56.931" status="PASS" endtime="20170809 03:27:57.003"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.005">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:57.005" status="PASS" endtime="20170809 03:27:57.005"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.006">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:57.006" status="PASS" endtime="20170809 03:27:57.006"></status>
</kw>
<status starttime="20170809 03:27:57.005" status="PASS" endtime="20170809 03:27:57.006"></status>
</kw>
<status starttime="20170809 03:27:57.004" status="PASS" endtime="20170809 03:27:57.007"></status>
</kw>
<status starttime="20170809 03:27:57.003" status="PASS" endtime="20170809 03:27:57.007"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:57.007">Delete All Sessions</msg>
<status starttime="20170809 03:27:57.007" status="PASS" endtime="20170809 03:27:57.007"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:57.007">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:56.723" status="PASS" endtime="20170809 03:27:57.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:57.008" status="PASS" endtime="20170809 03:27:57.008"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.009">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:57.009">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:57.009">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:27:57.008" status="PASS" endtime="20170809 03:27:57.009"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:57.009">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:27:56.723" status="PASS" endtime="20170809 03:27:57.009"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:57.009">${power_state} = On</msg>
<status starttime="20170809 03:27:56.722" status="PASS" endtime="20170809 03:27:57.009"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:27:57.010" status="PASS" endtime="20170809 03:27:57.010"></status>
</kw>
<status starttime="20170809 03:27:56.722" status="PASS" endtime="20170809 03:27:57.010"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.014">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:57.013" status="PASS" endtime="20170809 03:27:57.015"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.015">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:57.015" status="PASS" endtime="20170809 03:27:57.015"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.016">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:57.015" status="PASS" endtime="20170809 03:27:57.016"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.016">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:57.016" status="PASS" endtime="20170809 03:27:57.016"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.326">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:57.017" status="PASS" endtime="20170809 03:27:57.326"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:57.326">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:57.326">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:57.017" status="PASS" endtime="20170809 03:27:57.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.327">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:57.327" status="PASS" endtime="20170809 03:27:57.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:57.328" status="PASS" endtime="20170809 03:27:57.328"></status>
</kw>
<status starttime="20170809 03:27:57.013" status="PASS" endtime="20170809 03:27:57.328"></status>
</kw>
<status starttime="20170809 03:27:57.012" status="PASS" endtime="20170809 03:27:57.328"></status>
</kw>
<status starttime="20170809 03:27:57.012" status="PASS" endtime="20170809 03:27:57.328"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.329">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:27:57.329" status="PASS" endtime="20170809 03:27:57.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.331">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:57.330" status="PASS" endtime="20170809 03:27:57.331"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.332">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:27:57.332" status="PASS" endtime="20170809 03:27:57.332"></status>
</kw>
<status starttime="20170809 03:27:57.331" status="PASS" endtime="20170809 03:27:57.332"></status>
</kw>
<status starttime="20170809 03:27:57.330" status="PASS" endtime="20170809 03:27:57.332"></status>
</kw>
<status starttime="20170809 03:27:57.329" status="PASS" endtime="20170809 03:27:57.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.427">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:57.427">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:57.333" status="PASS" endtime="20170809 03:27:57.427"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.429">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:57.428" status="PASS" endtime="20170809 03:27:57.429"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.430">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:57.429" status="PASS" endtime="20170809 03:27:57.430"></status>
</kw>
<status starttime="20170809 03:27:57.429" status="PASS" endtime="20170809 03:27:57.430"></status>
</kw>
<status starttime="20170809 03:27:57.428" status="PASS" endtime="20170809 03:27:57.430"></status>
</kw>
<status starttime="20170809 03:27:57.427" status="PASS" endtime="20170809 03:27:57.430"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:57.431">Delete All Sessions</msg>
<status starttime="20170809 03:27:57.430" status="PASS" endtime="20170809 03:27:57.431"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:57.431">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:57.011" status="PASS" endtime="20170809 03:27:57.431"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:57.431" status="PASS" endtime="20170809 03:27:57.432"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.432">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:57.432">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:57.432">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:27:57.432" status="PASS" endtime="20170809 03:27:57.432"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:57.433">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:27:57.011" status="PASS" endtime="20170809 03:27:57.433"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:57.433">${host_state} = Running</msg>
<status starttime="20170809 03:27:57.010" status="PASS" endtime="20170809 03:27:57.433"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:27:57.433" status="PASS" endtime="20170809 03:27:57.433"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.438">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:27:57.437" status="PASS" endtime="20170809 03:27:57.438"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.439">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:27:57.438" status="PASS" endtime="20170809 03:27:57.439"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.439">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:27:57.439" status="PASS" endtime="20170809 03:27:57.439"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.440">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:27:57.440" status="PASS" endtime="20170809 03:27:57.440"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.635">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:27:57.441" status="PASS" endtime="20170809 03:27:57.635"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:57.635">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:27:57.635">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:57.440" status="PASS" endtime="20170809 03:27:57.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.636">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:57.635" status="PASS" endtime="20170809 03:27:57.636"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.636">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:57.636" status="PASS" endtime="20170809 03:27:57.637"></status>
</kw>
<status starttime="20170809 03:27:57.437" status="PASS" endtime="20170809 03:27:57.637"></status>
</kw>
<status starttime="20170809 03:27:57.436" status="PASS" endtime="20170809 03:27:57.637"></status>
</kw>
<status starttime="20170809 03:27:57.436" status="PASS" endtime="20170809 03:27:57.637"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.638">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:27:57.637" status="PASS" endtime="20170809 03:27:57.638"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.640">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:27:57.639" status="PASS" endtime="20170809 03:27:57.640"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.641">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:27:57.641" status="PASS" endtime="20170809 03:27:57.641"></status>
</kw>
<status starttime="20170809 03:27:57.640" status="PASS" endtime="20170809 03:27:57.641"></status>
</kw>
<status starttime="20170809 03:27:57.638" status="PASS" endtime="20170809 03:27:57.641"></status>
</kw>
<status starttime="20170809 03:27:57.638" status="PASS" endtime="20170809 03:27:57.641"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.708">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:27:57.708">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:57.642" status="PASS" endtime="20170809 03:27:57.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.710">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:57.709" status="PASS" endtime="20170809 03:27:57.710"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.711">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:27:57.711" status="PASS" endtime="20170809 03:27:57.711"></status>
</kw>
<status starttime="20170809 03:27:57.710" status="PASS" endtime="20170809 03:27:57.711"></status>
</kw>
<status starttime="20170809 03:27:57.709" status="PASS" endtime="20170809 03:27:57.711"></status>
</kw>
<status starttime="20170809 03:27:57.708" status="PASS" endtime="20170809 03:27:57.711"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:27:57.712">Delete All Sessions</msg>
<status starttime="20170809 03:27:57.712" status="PASS" endtime="20170809 03:27:57.712"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:57.712">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:27:57.435" status="PASS" endtime="20170809 03:27:57.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:27:57.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:27:57.712" status="PASS" endtime="20170809 03:27:57.713"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:27:57.713">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:27:57.713">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:27:57.713">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:27:57.713" status="PASS" endtime="20170809 03:27:57.713"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:57.714">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:27:57.435" status="PASS" endtime="20170809 03:27:57.714"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:27:57.714">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:27:57.434" status="PASS" endtime="20170809 03:27:57.714"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:27:57.715">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:27:57.714" status="FAIL" endtime="20170809 03:27:57.715"></status>
</kw>
<status starttime="20170809 03:27:57.434" status="FAIL" endtime="20170809 03:27:57.715"></status>
</kw>
<status starttime="20170809 03:27:56.721" status="FAIL" endtime="20170809 03:27:57.715"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:07.720">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:07.720" status="PASS" endtime="20170809 03:28:07.720"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:07.721">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:07.721" status="PASS" endtime="20170809 03:28:07.721"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:07.722">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:07.721" status="PASS" endtime="20170809 03:28:07.722"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:07.722">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:07.722" status="PASS" endtime="20170809 03:28:07.722"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:07.929">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:07.723" status="PASS" endtime="20170809 03:28:07.929"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:07.929">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:07.929">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:07.723" status="PASS" endtime="20170809 03:28:07.929"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:07.930">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:07.929" status="PASS" endtime="20170809 03:28:07.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:07.930">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:07.930" status="PASS" endtime="20170809 03:28:07.930"></status>
</kw>
<status starttime="20170809 03:28:07.719" status="PASS" endtime="20170809 03:28:07.931"></status>
</kw>
<status starttime="20170809 03:28:07.719" status="PASS" endtime="20170809 03:28:07.931"></status>
</kw>
<status starttime="20170809 03:28:07.718" status="PASS" endtime="20170809 03:28:07.931"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:07.931">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:28:07.931" status="PASS" endtime="20170809 03:28:07.931"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:07.933">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:07.933" status="PASS" endtime="20170809 03:28:07.933"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:07.934">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:07.934" status="PASS" endtime="20170809 03:28:07.935"></status>
</kw>
<status starttime="20170809 03:28:07.934" status="PASS" endtime="20170809 03:28:07.935"></status>
</kw>
<status starttime="20170809 03:28:07.932" status="PASS" endtime="20170809 03:28:07.935"></status>
</kw>
<status starttime="20170809 03:28:07.932" status="PASS" endtime="20170809 03:28:07.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.014">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:08.014">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:07.935" status="PASS" endtime="20170809 03:28:08.014"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.016">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:08.016" status="PASS" endtime="20170809 03:28:08.016"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.017">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:08.017" status="PASS" endtime="20170809 03:28:08.017"></status>
</kw>
<status starttime="20170809 03:28:08.016" status="PASS" endtime="20170809 03:28:08.017"></status>
</kw>
<status starttime="20170809 03:28:08.015" status="PASS" endtime="20170809 03:28:08.017"></status>
</kw>
<status starttime="20170809 03:28:08.015" status="PASS" endtime="20170809 03:28:08.017"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:08.018">Delete All Sessions</msg>
<status starttime="20170809 03:28:08.018" status="PASS" endtime="20170809 03:28:08.018"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:08.018">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:07.717" status="PASS" endtime="20170809 03:28:08.018"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.019">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:08.019" status="PASS" endtime="20170809 03:28:08.019"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.019">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:08.020">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:08.020">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:28:08.019" status="PASS" endtime="20170809 03:28:08.020"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:08.020">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:28:07.717" status="PASS" endtime="20170809 03:28:08.020"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:08.020">${power_state} = On</msg>
<status starttime="20170809 03:28:07.716" status="PASS" endtime="20170809 03:28:08.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:28:08.021" status="PASS" endtime="20170809 03:28:08.021"></status>
</kw>
<status starttime="20170809 03:28:07.716" status="PASS" endtime="20170809 03:28:08.021"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.025">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:08.024" status="PASS" endtime="20170809 03:28:08.025"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:08.025" status="PASS" endtime="20170809 03:28:08.026"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.026">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:08.026" status="PASS" endtime="20170809 03:28:08.026"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.027">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:08.027" status="PASS" endtime="20170809 03:28:08.027"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.275">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:08.028" status="PASS" endtime="20170809 03:28:08.275"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:08.275">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:08.275">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:08.027" status="PASS" endtime="20170809 03:28:08.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.276">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:08.276" status="PASS" endtime="20170809 03:28:08.276"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.277">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:08.277" status="PASS" endtime="20170809 03:28:08.277"></status>
</kw>
<status starttime="20170809 03:28:08.024" status="PASS" endtime="20170809 03:28:08.277"></status>
</kw>
<status starttime="20170809 03:28:08.023" status="PASS" endtime="20170809 03:28:08.277"></status>
</kw>
<status starttime="20170809 03:28:08.023" status="PASS" endtime="20170809 03:28:08.277"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.278">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:28:08.278" status="PASS" endtime="20170809 03:28:08.278"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.280">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:08.280" status="PASS" endtime="20170809 03:28:08.280"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.281">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:08.281" status="PASS" endtime="20170809 03:28:08.281"></status>
</kw>
<status starttime="20170809 03:28:08.280" status="PASS" endtime="20170809 03:28:08.281"></status>
</kw>
<status starttime="20170809 03:28:08.279" status="PASS" endtime="20170809 03:28:08.281"></status>
</kw>
<status starttime="20170809 03:28:08.278" status="PASS" endtime="20170809 03:28:08.282"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.384">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:08.385">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:08.282" status="PASS" endtime="20170809 03:28:08.385"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.387">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:08.386" status="PASS" endtime="20170809 03:28:08.387"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.388">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:08.387" status="PASS" endtime="20170809 03:28:08.388"></status>
</kw>
<status starttime="20170809 03:28:08.387" status="PASS" endtime="20170809 03:28:08.388"></status>
</kw>
<status starttime="20170809 03:28:08.386" status="PASS" endtime="20170809 03:28:08.388"></status>
</kw>
<status starttime="20170809 03:28:08.385" status="PASS" endtime="20170809 03:28:08.389"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:08.389">Delete All Sessions</msg>
<status starttime="20170809 03:28:08.389" status="PASS" endtime="20170809 03:28:08.389"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:08.389">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:08.022" status="PASS" endtime="20170809 03:28:08.389"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.390">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:08.390" status="PASS" endtime="20170809 03:28:08.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.391">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:08.391">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:08.391">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:28:08.390" status="PASS" endtime="20170809 03:28:08.391"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:08.391">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:28:08.021" status="PASS" endtime="20170809 03:28:08.391"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:08.391">${host_state} = Running</msg>
<status starttime="20170809 03:28:08.021" status="PASS" endtime="20170809 03:28:08.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:28:08.392" status="PASS" endtime="20170809 03:28:08.392"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.396">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:08.396" status="PASS" endtime="20170809 03:28:08.397"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.398">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:08.397" status="PASS" endtime="20170809 03:28:08.398"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.399">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:08.398" status="PASS" endtime="20170809 03:28:08.399"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.400">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:08.399" status="PASS" endtime="20170809 03:28:08.400"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.604">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:08.401" status="PASS" endtime="20170809 03:28:08.604"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:08.604">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:08.604">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:08.400" status="PASS" endtime="20170809 03:28:08.604"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.605">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:08.605" status="PASS" endtime="20170809 03:28:08.605"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:08.605" status="PASS" endtime="20170809 03:28:08.606"></status>
</kw>
<status starttime="20170809 03:28:08.396" status="PASS" endtime="20170809 03:28:08.606"></status>
</kw>
<status starttime="20170809 03:28:08.395" status="PASS" endtime="20170809 03:28:08.606"></status>
</kw>
<status starttime="20170809 03:28:08.394" status="PASS" endtime="20170809 03:28:08.606"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.607">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:28:08.606" status="PASS" endtime="20170809 03:28:08.607"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.612">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:28:08.608" status="PASS" endtime="20170809 03:28:08.612"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.614">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:28:08.613" status="PASS" endtime="20170809 03:28:08.614"></status>
</kw>
<status starttime="20170809 03:28:08.613" status="PASS" endtime="20170809 03:28:08.614"></status>
</kw>
<status starttime="20170809 03:28:08.608" status="PASS" endtime="20170809 03:28:08.614"></status>
</kw>
<status starttime="20170809 03:28:08.607" status="PASS" endtime="20170809 03:28:08.614"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.709">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:08.709">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:08.615" status="PASS" endtime="20170809 03:28:08.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.711">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:08.711" status="PASS" endtime="20170809 03:28:08.711"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.712">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:08.712" status="PASS" endtime="20170809 03:28:08.712"></status>
</kw>
<status starttime="20170809 03:28:08.711" status="PASS" endtime="20170809 03:28:08.712"></status>
</kw>
<status starttime="20170809 03:28:08.710" status="PASS" endtime="20170809 03:28:08.712"></status>
</kw>
<status starttime="20170809 03:28:08.710" status="PASS" endtime="20170809 03:28:08.713"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:08.713">Delete All Sessions</msg>
<status starttime="20170809 03:28:08.713" status="PASS" endtime="20170809 03:28:08.713"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:08.713">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:08.394" status="PASS" endtime="20170809 03:28:08.713"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:08.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:08.714" status="PASS" endtime="20170809 03:28:08.714"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:08.715">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:08.715">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:08.715">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:28:08.714" status="PASS" endtime="20170809 03:28:08.715"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:08.715">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:28:08.393" status="PASS" endtime="20170809 03:28:08.716"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:08.716">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:28:08.392" status="PASS" endtime="20170809 03:28:08.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:28:08.717">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:28:08.716" status="FAIL" endtime="20170809 03:28:08.717"></status>
</kw>
<status starttime="20170809 03:28:08.392" status="FAIL" endtime="20170809 03:28:08.717"></status>
</kw>
<status starttime="20170809 03:28:07.715" status="FAIL" endtime="20170809 03:28:08.717"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:18.722">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:18.722" status="PASS" endtime="20170809 03:28:18.723"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:18.723">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:18.723" status="PASS" endtime="20170809 03:28:18.724"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:18.724">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:18.724" status="PASS" endtime="20170809 03:28:18.724"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:18.725">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:18.724" status="PASS" endtime="20170809 03:28:18.725"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.035">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:18.725" status="PASS" endtime="20170809 03:28:19.035"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:19.035">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:19.035">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:18.725" status="PASS" endtime="20170809 03:28:19.035"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.036">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:19.035" status="PASS" endtime="20170809 03:28:19.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.036">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:19.036" status="PASS" endtime="20170809 03:28:19.036"></status>
</kw>
<status starttime="20170809 03:28:18.722" status="PASS" endtime="20170809 03:28:19.037"></status>
</kw>
<status starttime="20170809 03:28:18.721" status="PASS" endtime="20170809 03:28:19.037"></status>
</kw>
<status starttime="20170809 03:28:18.721" status="PASS" endtime="20170809 03:28:19.037"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.037">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:28:19.037" status="PASS" endtime="20170809 03:28:19.037"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.039">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:19.039" status="PASS" endtime="20170809 03:28:19.040"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.040">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:19.040" status="PASS" endtime="20170809 03:28:19.041"></status>
</kw>
<status starttime="20170809 03:28:19.040" status="PASS" endtime="20170809 03:28:19.041"></status>
</kw>
<status starttime="20170809 03:28:19.038" status="PASS" endtime="20170809 03:28:19.041"></status>
</kw>
<status starttime="20170809 03:28:19.038" status="PASS" endtime="20170809 03:28:19.041"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.104">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:19.104">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:19.041" status="PASS" endtime="20170809 03:28:19.104"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.106">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:19.106" status="PASS" endtime="20170809 03:28:19.106"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.107">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:19.107" status="PASS" endtime="20170809 03:28:19.107"></status>
</kw>
<status starttime="20170809 03:28:19.106" status="PASS" endtime="20170809 03:28:19.107"></status>
</kw>
<status starttime="20170809 03:28:19.105" status="PASS" endtime="20170809 03:28:19.108"></status>
</kw>
<status starttime="20170809 03:28:19.105" status="PASS" endtime="20170809 03:28:19.108"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:19.108">Delete All Sessions</msg>
<status starttime="20170809 03:28:19.108" status="PASS" endtime="20170809 03:28:19.108"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:19.108">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:18.720" status="PASS" endtime="20170809 03:28:19.108"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.109">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:19.109" status="PASS" endtime="20170809 03:28:19.109"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.110">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:19.110">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:19.110">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:28:19.109" status="PASS" endtime="20170809 03:28:19.110"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:19.110">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:28:18.719" status="PASS" endtime="20170809 03:28:19.110"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:19.111">${power_state} = On</msg>
<status starttime="20170809 03:28:18.719" status="PASS" endtime="20170809 03:28:19.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:28:19.111" status="PASS" endtime="20170809 03:28:19.111"></status>
</kw>
<status starttime="20170809 03:28:18.719" status="PASS" endtime="20170809 03:28:19.111"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.115">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:19.115" status="PASS" endtime="20170809 03:28:19.116"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.117">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:19.116" status="PASS" endtime="20170809 03:28:19.117"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.118">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:19.117" status="PASS" endtime="20170809 03:28:19.118"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.119">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:19.118" status="PASS" endtime="20170809 03:28:19.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.315">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:19.120" status="PASS" endtime="20170809 03:28:19.315"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:19.315">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:19.316">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:19.120" status="PASS" endtime="20170809 03:28:19.316"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.316">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:19.316" status="PASS" endtime="20170809 03:28:19.316"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.317">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:19.317" status="PASS" endtime="20170809 03:28:19.317"></status>
</kw>
<status starttime="20170809 03:28:19.114" status="PASS" endtime="20170809 03:28:19.317"></status>
</kw>
<status starttime="20170809 03:28:19.113" status="PASS" endtime="20170809 03:28:19.317"></status>
</kw>
<status starttime="20170809 03:28:19.113" status="PASS" endtime="20170809 03:28:19.317"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.318">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:28:19.318" status="PASS" endtime="20170809 03:28:19.318"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.320">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:19.319" status="PASS" endtime="20170809 03:28:19.320"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.321">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:19.321" status="PASS" endtime="20170809 03:28:19.321"></status>
</kw>
<status starttime="20170809 03:28:19.320" status="PASS" endtime="20170809 03:28:19.321"></status>
</kw>
<status starttime="20170809 03:28:19.319" status="PASS" endtime="20170809 03:28:19.322"></status>
</kw>
<status starttime="20170809 03:28:19.318" status="PASS" endtime="20170809 03:28:19.322"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.412">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:19.412">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:19.322" status="PASS" endtime="20170809 03:28:19.412"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.414">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:19.414" status="PASS" endtime="20170809 03:28:19.414"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.415">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:19.415" status="PASS" endtime="20170809 03:28:19.415"></status>
</kw>
<status starttime="20170809 03:28:19.414" status="PASS" endtime="20170809 03:28:19.415"></status>
</kw>
<status starttime="20170809 03:28:19.413" status="PASS" endtime="20170809 03:28:19.416"></status>
</kw>
<status starttime="20170809 03:28:19.413" status="PASS" endtime="20170809 03:28:19.416"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:19.416">Delete All Sessions</msg>
<status starttime="20170809 03:28:19.416" status="PASS" endtime="20170809 03:28:19.416"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:19.416">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:19.112" status="PASS" endtime="20170809 03:28:19.416"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.417">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:19.417" status="PASS" endtime="20170809 03:28:19.417"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.418">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:19.418">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:19.418">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:28:19.417" status="PASS" endtime="20170809 03:28:19.418"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:19.418">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:28:19.112" status="PASS" endtime="20170809 03:28:19.418"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:19.418">${host_state} = Running</msg>
<status starttime="20170809 03:28:19.111" status="PASS" endtime="20170809 03:28:19.418"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:28:19.419" status="PASS" endtime="20170809 03:28:19.419"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.423">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:19.423" status="PASS" endtime="20170809 03:28:19.424"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.425">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:19.424" status="PASS" endtime="20170809 03:28:19.425"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.425">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:19.425" status="PASS" endtime="20170809 03:28:19.426"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.426">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:19.426" status="PASS" endtime="20170809 03:28:19.427"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.605">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:19.427" status="PASS" endtime="20170809 03:28:19.606"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:19.606">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:19.606">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:19.427" status="PASS" endtime="20170809 03:28:19.606"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.606">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:19.606" status="PASS" endtime="20170809 03:28:19.607"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.607">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:19.607" status="PASS" endtime="20170809 03:28:19.607"></status>
</kw>
<status starttime="20170809 03:28:19.422" status="PASS" endtime="20170809 03:28:19.607"></status>
</kw>
<status starttime="20170809 03:28:19.422" status="PASS" endtime="20170809 03:28:19.607"></status>
</kw>
<status starttime="20170809 03:28:19.421" status="PASS" endtime="20170809 03:28:19.608"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.608">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:28:19.608" status="PASS" endtime="20170809 03:28:19.608"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.611">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:28:19.610" status="PASS" endtime="20170809 03:28:19.611"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.612">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:28:19.611" status="PASS" endtime="20170809 03:28:19.612"></status>
</kw>
<status starttime="20170809 03:28:19.611" status="PASS" endtime="20170809 03:28:19.612"></status>
</kw>
<status starttime="20170809 03:28:19.609" status="PASS" endtime="20170809 03:28:19.612"></status>
</kw>
<status starttime="20170809 03:28:19.609" status="PASS" endtime="20170809 03:28:19.612"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.693">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:19.693">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:19.612" status="PASS" endtime="20170809 03:28:19.693"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.695">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:19.694" status="PASS" endtime="20170809 03:28:19.695"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.696">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:19.696" status="PASS" endtime="20170809 03:28:19.696"></status>
</kw>
<status starttime="20170809 03:28:19.695" status="PASS" endtime="20170809 03:28:19.696"></status>
</kw>
<status starttime="20170809 03:28:19.694" status="PASS" endtime="20170809 03:28:19.696"></status>
</kw>
<status starttime="20170809 03:28:19.694" status="PASS" endtime="20170809 03:28:19.696"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:19.697">Delete All Sessions</msg>
<status starttime="20170809 03:28:19.697" status="PASS" endtime="20170809 03:28:19.697"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:19.697">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:19.421" status="PASS" endtime="20170809 03:28:19.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:19.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:19.697" status="PASS" endtime="20170809 03:28:19.698"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:19.698">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:19.698">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:19.699">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:28:19.698" status="PASS" endtime="20170809 03:28:19.699"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:19.699">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:28:19.420" status="PASS" endtime="20170809 03:28:19.699"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:19.699">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:28:19.419" status="PASS" endtime="20170809 03:28:19.699"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:28:19.700">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:28:19.699" status="FAIL" endtime="20170809 03:28:19.700"></status>
</kw>
<status starttime="20170809 03:28:19.419" status="FAIL" endtime="20170809 03:28:19.700"></status>
</kw>
<status starttime="20170809 03:28:18.718" status="FAIL" endtime="20170809 03:28:19.700"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:29.705">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:29.705" status="PASS" endtime="20170809 03:28:29.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:29.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:29.706" status="PASS" endtime="20170809 03:28:29.706"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:29.707">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:29.706" status="PASS" endtime="20170809 03:28:29.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:29.707">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:29.707" status="PASS" endtime="20170809 03:28:29.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:29.966">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:29.708" status="PASS" endtime="20170809 03:28:29.966"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:29.967">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:29.967">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:29.708" status="PASS" endtime="20170809 03:28:29.967"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:29.967">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:29.967" status="PASS" endtime="20170809 03:28:29.967"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:29.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:29.968" status="PASS" endtime="20170809 03:28:29.968"></status>
</kw>
<status starttime="20170809 03:28:29.704" status="PASS" endtime="20170809 03:28:29.968"></status>
</kw>
<status starttime="20170809 03:28:29.704" status="PASS" endtime="20170809 03:28:29.968"></status>
</kw>
<status starttime="20170809 03:28:29.703" status="PASS" endtime="20170809 03:28:29.968"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:29.969">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:28:29.969" status="PASS" endtime="20170809 03:28:29.969"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:29.971">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:29.971" status="PASS" endtime="20170809 03:28:29.971"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:29.972">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:29.972" status="PASS" endtime="20170809 03:28:29.972"></status>
</kw>
<status starttime="20170809 03:28:29.971" status="PASS" endtime="20170809 03:28:29.972"></status>
</kw>
<status starttime="20170809 03:28:29.970" status="PASS" endtime="20170809 03:28:29.973"></status>
</kw>
<status starttime="20170809 03:28:29.969" status="PASS" endtime="20170809 03:28:29.973"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.053">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:30.053">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:29.973" status="PASS" endtime="20170809 03:28:30.053"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.055">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:30.055" status="PASS" endtime="20170809 03:28:30.055"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.056">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:30.056" status="PASS" endtime="20170809 03:28:30.056"></status>
</kw>
<status starttime="20170809 03:28:30.055" status="PASS" endtime="20170809 03:28:30.056"></status>
</kw>
<status starttime="20170809 03:28:30.054" status="PASS" endtime="20170809 03:28:30.056"></status>
</kw>
<status starttime="20170809 03:28:30.054" status="PASS" endtime="20170809 03:28:30.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:30.057">Delete All Sessions</msg>
<status starttime="20170809 03:28:30.057" status="PASS" endtime="20170809 03:28:30.057"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:30.057">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:29.703" status="PASS" endtime="20170809 03:28:30.057"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:30.057" status="PASS" endtime="20170809 03:28:30.058"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.058">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:30.058">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:30.058">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:28:30.058" status="PASS" endtime="20170809 03:28:30.059"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:30.059">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:28:29.702" status="PASS" endtime="20170809 03:28:30.059"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:30.059">${power_state} = On</msg>
<status starttime="20170809 03:28:29.702" status="PASS" endtime="20170809 03:28:30.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:28:30.059" status="PASS" endtime="20170809 03:28:30.060"></status>
</kw>
<status starttime="20170809 03:28:29.701" status="PASS" endtime="20170809 03:28:30.060"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.064">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:30.063" status="PASS" endtime="20170809 03:28:30.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.065">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:30.065" status="PASS" endtime="20170809 03:28:30.065"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.066">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:30.065" status="PASS" endtime="20170809 03:28:30.066"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.066">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:30.066" status="PASS" endtime="20170809 03:28:30.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.269">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:30.067" status="PASS" endtime="20170809 03:28:30.269"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:30.269">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:30.269">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:30.067" status="PASS" endtime="20170809 03:28:30.269"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.270">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:30.269" status="PASS" endtime="20170809 03:28:30.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.270">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:30.270" status="PASS" endtime="20170809 03:28:30.271"></status>
</kw>
<status starttime="20170809 03:28:30.063" status="PASS" endtime="20170809 03:28:30.271"></status>
</kw>
<status starttime="20170809 03:28:30.062" status="PASS" endtime="20170809 03:28:30.271"></status>
</kw>
<status starttime="20170809 03:28:30.062" status="PASS" endtime="20170809 03:28:30.271"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.271">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:28:30.271" status="PASS" endtime="20170809 03:28:30.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.274">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:30.273" status="PASS" endtime="20170809 03:28:30.274"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.274">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:30.274" status="PASS" endtime="20170809 03:28:30.275"></status>
</kw>
<status starttime="20170809 03:28:30.274" status="PASS" endtime="20170809 03:28:30.275"></status>
</kw>
<status starttime="20170809 03:28:30.272" status="PASS" endtime="20170809 03:28:30.275"></status>
</kw>
<status starttime="20170809 03:28:30.272" status="PASS" endtime="20170809 03:28:30.275"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.379">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:30.379">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:30.275" status="PASS" endtime="20170809 03:28:30.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.381">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:30.381" status="PASS" endtime="20170809 03:28:30.381"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.382">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:30.382" status="PASS" endtime="20170809 03:28:30.382"></status>
</kw>
<status starttime="20170809 03:28:30.382" status="PASS" endtime="20170809 03:28:30.383"></status>
</kw>
<status starttime="20170809 03:28:30.380" status="PASS" endtime="20170809 03:28:30.383"></status>
</kw>
<status starttime="20170809 03:28:30.379" status="PASS" endtime="20170809 03:28:30.383"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:30.383">Delete All Sessions</msg>
<status starttime="20170809 03:28:30.383" status="PASS" endtime="20170809 03:28:30.383"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:30.384">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:30.061" status="PASS" endtime="20170809 03:28:30.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:30.384" status="PASS" endtime="20170809 03:28:30.384"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.385">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:30.385">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:30.385">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:28:30.385" status="PASS" endtime="20170809 03:28:30.385"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:30.385">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:28:30.060" status="PASS" endtime="20170809 03:28:30.385"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:30.386">${host_state} = Running</msg>
<status starttime="20170809 03:28:30.060" status="PASS" endtime="20170809 03:28:30.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:28:30.386" status="PASS" endtime="20170809 03:28:30.386"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.390">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:30.390" status="PASS" endtime="20170809 03:28:30.391"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.391">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:30.391" status="PASS" endtime="20170809 03:28:30.392"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.392">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:30.392" status="PASS" endtime="20170809 03:28:30.392"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.393">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:30.392" status="PASS" endtime="20170809 03:28:30.393"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.573">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:30.393" status="PASS" endtime="20170809 03:28:30.573"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:30.573">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:30.573">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:30.393" status="PASS" endtime="20170809 03:28:30.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.574">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:30.574" status="PASS" endtime="20170809 03:28:30.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.575">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:30.575" status="PASS" endtime="20170809 03:28:30.575"></status>
</kw>
<status starttime="20170809 03:28:30.390" status="PASS" endtime="20170809 03:28:30.575"></status>
</kw>
<status starttime="20170809 03:28:30.389" status="PASS" endtime="20170809 03:28:30.575"></status>
</kw>
<status starttime="20170809 03:28:30.389" status="PASS" endtime="20170809 03:28:30.575"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.576">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:28:30.576" status="PASS" endtime="20170809 03:28:30.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.579">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:28:30.578" status="PASS" endtime="20170809 03:28:30.579"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.580">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:28:30.580" status="PASS" endtime="20170809 03:28:30.580"></status>
</kw>
<status starttime="20170809 03:28:30.580" status="PASS" endtime="20170809 03:28:30.581"></status>
</kw>
<status starttime="20170809 03:28:30.578" status="PASS" endtime="20170809 03:28:30.581"></status>
</kw>
<status starttime="20170809 03:28:30.577" status="PASS" endtime="20170809 03:28:30.581"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.648">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:30.648">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:30.581" status="PASS" endtime="20170809 03:28:30.648"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.650">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:30.650" status="PASS" endtime="20170809 03:28:30.650"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.651">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:30.651" status="PASS" endtime="20170809 03:28:30.651"></status>
</kw>
<status starttime="20170809 03:28:30.650" status="PASS" endtime="20170809 03:28:30.651"></status>
</kw>
<status starttime="20170809 03:28:30.649" status="PASS" endtime="20170809 03:28:30.651"></status>
</kw>
<status starttime="20170809 03:28:30.649" status="PASS" endtime="20170809 03:28:30.652"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:30.652">Delete All Sessions</msg>
<status starttime="20170809 03:28:30.652" status="PASS" endtime="20170809 03:28:30.652"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:30.652">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:30.388" status="PASS" endtime="20170809 03:28:30.652"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:30.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:30.653" status="PASS" endtime="20170809 03:28:30.653"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:30.654">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:30.654">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:30.654">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:28:30.653" status="PASS" endtime="20170809 03:28:30.654"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:30.654">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:28:30.387" status="PASS" endtime="20170809 03:28:30.654"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:30.654">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:28:30.387" status="PASS" endtime="20170809 03:28:30.654"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:28:30.655">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:28:30.655" status="FAIL" endtime="20170809 03:28:30.655"></status>
</kw>
<status starttime="20170809 03:28:30.386" status="FAIL" endtime="20170809 03:28:30.655"></status>
</kw>
<status starttime="20170809 03:28:29.701" status="FAIL" endtime="20170809 03:28:30.655"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:40.660">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:40.660" status="PASS" endtime="20170809 03:28:40.661"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:40.661">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:40.661" status="PASS" endtime="20170809 03:28:40.661"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:40.662">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:40.662" status="PASS" endtime="20170809 03:28:40.662"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:40.663">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:40.662" status="PASS" endtime="20170809 03:28:40.663"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:40.839">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:40.663" status="PASS" endtime="20170809 03:28:40.839"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:40.839">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:40.839">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:40.663" status="PASS" endtime="20170809 03:28:40.839"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:40.840">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:40.840" status="PASS" endtime="20170809 03:28:40.840"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:40.841">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:40.840" status="PASS" endtime="20170809 03:28:40.841"></status>
</kw>
<status starttime="20170809 03:28:40.660" status="PASS" endtime="20170809 03:28:40.841"></status>
</kw>
<status starttime="20170809 03:28:40.659" status="PASS" endtime="20170809 03:28:40.841"></status>
</kw>
<status starttime="20170809 03:28:40.658" status="PASS" endtime="20170809 03:28:40.841"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:40.842">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:28:40.841" status="PASS" endtime="20170809 03:28:40.842"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:40.844">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:40.843" status="PASS" endtime="20170809 03:28:40.844"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:40.845">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:40.844" status="PASS" endtime="20170809 03:28:40.845"></status>
</kw>
<status starttime="20170809 03:28:40.844" status="PASS" endtime="20170809 03:28:40.845"></status>
</kw>
<status starttime="20170809 03:28:40.842" status="PASS" endtime="20170809 03:28:40.845"></status>
</kw>
<status starttime="20170809 03:28:40.842" status="PASS" endtime="20170809 03:28:40.845"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:40.909">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:40.909">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:40.845" status="PASS" endtime="20170809 03:28:40.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:40.911">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:40.911" status="PASS" endtime="20170809 03:28:40.911"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:40.912">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:40.912" status="PASS" endtime="20170809 03:28:40.912"></status>
</kw>
<status starttime="20170809 03:28:40.911" status="PASS" endtime="20170809 03:28:40.912"></status>
</kw>
<status starttime="20170809 03:28:40.910" status="PASS" endtime="20170809 03:28:40.912"></status>
</kw>
<status starttime="20170809 03:28:40.910" status="PASS" endtime="20170809 03:28:40.913"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:40.913">Delete All Sessions</msg>
<status starttime="20170809 03:28:40.913" status="PASS" endtime="20170809 03:28:40.913"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:40.913">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:40.658" status="PASS" endtime="20170809 03:28:40.913"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:40.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:40.913" status="PASS" endtime="20170809 03:28:40.914"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:40.914">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:40.914">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:40.915">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:28:40.914" status="PASS" endtime="20170809 03:28:40.915"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:40.915">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:28:40.657" status="PASS" endtime="20170809 03:28:40.915"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:40.915">${power_state} = On</msg>
<status starttime="20170809 03:28:40.657" status="PASS" endtime="20170809 03:28:40.915"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:28:40.915" status="PASS" endtime="20170809 03:28:40.916"></status>
</kw>
<status starttime="20170809 03:28:40.656" status="PASS" endtime="20170809 03:28:40.916"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:40.920">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:40.920" status="PASS" endtime="20170809 03:28:40.920"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:40.921">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:40.920" status="PASS" endtime="20170809 03:28:40.921"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:40.921">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:40.921" status="PASS" endtime="20170809 03:28:40.921"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:40.922">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:40.922" status="PASS" endtime="20170809 03:28:40.922"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.109">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:40.923" status="PASS" endtime="20170809 03:28:41.109"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:41.109">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:41.109">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:40.922" status="PASS" endtime="20170809 03:28:41.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.110">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:41.110" status="PASS" endtime="20170809 03:28:41.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:41.111" status="PASS" endtime="20170809 03:28:41.111"></status>
</kw>
<status starttime="20170809 03:28:40.918" status="PASS" endtime="20170809 03:28:41.111"></status>
</kw>
<status starttime="20170809 03:28:40.918" status="PASS" endtime="20170809 03:28:41.111"></status>
</kw>
<status starttime="20170809 03:28:40.918" status="PASS" endtime="20170809 03:28:41.111"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.112">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:28:41.112" status="PASS" endtime="20170809 03:28:41.112"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.114">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:41.113" status="PASS" endtime="20170809 03:28:41.114"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.115">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:41.115" status="PASS" endtime="20170809 03:28:41.115"></status>
</kw>
<status starttime="20170809 03:28:41.114" status="PASS" endtime="20170809 03:28:41.115"></status>
</kw>
<status starttime="20170809 03:28:41.113" status="PASS" endtime="20170809 03:28:41.115"></status>
</kw>
<status starttime="20170809 03:28:41.112" status="PASS" endtime="20170809 03:28:41.116"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.205">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:41.205">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:41.116" status="PASS" endtime="20170809 03:28:41.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.207">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:41.207" status="PASS" endtime="20170809 03:28:41.207"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.208">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:41.208" status="PASS" endtime="20170809 03:28:41.208"></status>
</kw>
<status starttime="20170809 03:28:41.207" status="PASS" endtime="20170809 03:28:41.208"></status>
</kw>
<status starttime="20170809 03:28:41.206" status="PASS" endtime="20170809 03:28:41.209"></status>
</kw>
<status starttime="20170809 03:28:41.206" status="PASS" endtime="20170809 03:28:41.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:41.209">Delete All Sessions</msg>
<status starttime="20170809 03:28:41.209" status="PASS" endtime="20170809 03:28:41.209"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:41.209">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:40.917" status="PASS" endtime="20170809 03:28:41.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.210">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:41.210" status="PASS" endtime="20170809 03:28:41.210"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.211">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:41.211">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:41.211">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:28:41.210" status="PASS" endtime="20170809 03:28:41.211"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:41.211">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:28:40.916" status="PASS" endtime="20170809 03:28:41.211"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:41.211">${host_state} = Running</msg>
<status starttime="20170809 03:28:40.916" status="PASS" endtime="20170809 03:28:41.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:28:41.212" status="PASS" endtime="20170809 03:28:41.212"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.216">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:41.216" status="PASS" endtime="20170809 03:28:41.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.217">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:41.217" status="PASS" endtime="20170809 03:28:41.217"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.218">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:41.217" status="PASS" endtime="20170809 03:28:41.218"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.218">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:41.218" status="PASS" endtime="20170809 03:28:41.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.407">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:41.219" status="PASS" endtime="20170809 03:28:41.407"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:41.407">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:41.407">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:41.219" status="PASS" endtime="20170809 03:28:41.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.408">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:41.408" status="PASS" endtime="20170809 03:28:41.408"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.409">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:41.408" status="PASS" endtime="20170809 03:28:41.409"></status>
</kw>
<status starttime="20170809 03:28:41.215" status="PASS" endtime="20170809 03:28:41.409"></status>
</kw>
<status starttime="20170809 03:28:41.215" status="PASS" endtime="20170809 03:28:41.409"></status>
</kw>
<status starttime="20170809 03:28:41.214" status="PASS" endtime="20170809 03:28:41.409"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.410">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:28:41.409" status="PASS" endtime="20170809 03:28:41.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.416">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:28:41.415" status="PASS" endtime="20170809 03:28:41.416"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.417">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:28:41.417" status="PASS" endtime="20170809 03:28:41.417"></status>
</kw>
<status starttime="20170809 03:28:41.416" status="PASS" endtime="20170809 03:28:41.417"></status>
</kw>
<status starttime="20170809 03:28:41.410" status="PASS" endtime="20170809 03:28:41.417"></status>
</kw>
<status starttime="20170809 03:28:41.410" status="PASS" endtime="20170809 03:28:41.417"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.518">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:41.518">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:41.418" status="PASS" endtime="20170809 03:28:41.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.521">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:41.520" status="PASS" endtime="20170809 03:28:41.521"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.521">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:41.521" status="PASS" endtime="20170809 03:28:41.522"></status>
</kw>
<status starttime="20170809 03:28:41.521" status="PASS" endtime="20170809 03:28:41.522"></status>
</kw>
<status starttime="20170809 03:28:41.520" status="PASS" endtime="20170809 03:28:41.522"></status>
</kw>
<status starttime="20170809 03:28:41.519" status="PASS" endtime="20170809 03:28:41.522"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:41.522">Delete All Sessions</msg>
<status starttime="20170809 03:28:41.522" status="PASS" endtime="20170809 03:28:41.522"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:41.523">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:41.214" status="PASS" endtime="20170809 03:28:41.523"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:41.523">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:41.523" status="PASS" endtime="20170809 03:28:41.523"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:41.524">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:41.524">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:41.524">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:28:41.523" status="PASS" endtime="20170809 03:28:41.524"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:41.524">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:28:41.213" status="PASS" endtime="20170809 03:28:41.524"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:41.524">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:28:41.213" status="PASS" endtime="20170809 03:28:41.525"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:28:41.525">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:28:41.525" status="FAIL" endtime="20170809 03:28:41.525"></status>
</kw>
<status starttime="20170809 03:28:41.212" status="FAIL" endtime="20170809 03:28:41.525"></status>
</kw>
<status starttime="20170809 03:28:40.656" status="FAIL" endtime="20170809 03:28:41.526"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:51.530">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:51.530" status="PASS" endtime="20170809 03:28:51.531"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:51.531">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:51.531" status="PASS" endtime="20170809 03:28:51.532"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:51.532">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:51.532" status="PASS" endtime="20170809 03:28:51.532"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:51.533">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:51.532" status="PASS" endtime="20170809 03:28:51.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:51.724">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:51.534" status="PASS" endtime="20170809 03:28:51.724"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:51.724">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:51.725">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:51.533" status="PASS" endtime="20170809 03:28:51.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:51.725">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:51.725" status="PASS" endtime="20170809 03:28:51.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:51.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:51.725" status="PASS" endtime="20170809 03:28:51.726"></status>
</kw>
<status starttime="20170809 03:28:51.530" status="PASS" endtime="20170809 03:28:51.726"></status>
</kw>
<status starttime="20170809 03:28:51.529" status="PASS" endtime="20170809 03:28:51.726"></status>
</kw>
<status starttime="20170809 03:28:51.529" status="PASS" endtime="20170809 03:28:51.726"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:51.727">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:28:51.726" status="PASS" endtime="20170809 03:28:51.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:51.729">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:51.728" status="PASS" endtime="20170809 03:28:51.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:51.730">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:51.730" status="PASS" endtime="20170809 03:28:51.730"></status>
</kw>
<status starttime="20170809 03:28:51.729" status="PASS" endtime="20170809 03:28:51.730"></status>
</kw>
<status starttime="20170809 03:28:51.728" status="PASS" endtime="20170809 03:28:51.730"></status>
</kw>
<status starttime="20170809 03:28:51.727" status="PASS" endtime="20170809 03:28:51.730"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:51.825">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:51.826">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:51.730" status="PASS" endtime="20170809 03:28:51.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:51.827">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:51.827" status="PASS" endtime="20170809 03:28:51.827"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:51.828">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:51.828" status="PASS" endtime="20170809 03:28:51.828"></status>
</kw>
<status starttime="20170809 03:28:51.827" status="PASS" endtime="20170809 03:28:51.828"></status>
</kw>
<status starttime="20170809 03:28:51.826" status="PASS" endtime="20170809 03:28:51.829"></status>
</kw>
<status starttime="20170809 03:28:51.826" status="PASS" endtime="20170809 03:28:51.829"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:51.829">Delete All Sessions</msg>
<status starttime="20170809 03:28:51.829" status="PASS" endtime="20170809 03:28:51.829"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:51.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:51.528" status="PASS" endtime="20170809 03:28:51.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:51.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:51.830" status="PASS" endtime="20170809 03:28:51.830"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:51.830">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:51.831">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:51.831">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:28:51.830" status="PASS" endtime="20170809 03:28:51.831"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:51.831">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:28:51.527" status="PASS" endtime="20170809 03:28:51.831"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:51.831">${power_state} = On</msg>
<status starttime="20170809 03:28:51.527" status="PASS" endtime="20170809 03:28:51.831"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:28:51.832" status="PASS" endtime="20170809 03:28:51.832"></status>
</kw>
<status starttime="20170809 03:28:51.527" status="PASS" endtime="20170809 03:28:51.832"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:51.836">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:51.836" status="PASS" endtime="20170809 03:28:51.836"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:51.837">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:51.836" status="PASS" endtime="20170809 03:28:51.837"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:51.837">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:51.837" status="PASS" endtime="20170809 03:28:51.837"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:51.838">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:51.838" status="PASS" endtime="20170809 03:28:51.838"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.041">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:51.839" status="PASS" endtime="20170809 03:28:52.041"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:52.041">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:52.041">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:51.838" status="PASS" endtime="20170809 03:28:52.042"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.042">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:52.042" status="PASS" endtime="20170809 03:28:52.042"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.043">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:52.042" status="PASS" endtime="20170809 03:28:52.043"></status>
</kw>
<status starttime="20170809 03:28:51.835" status="PASS" endtime="20170809 03:28:52.043"></status>
</kw>
<status starttime="20170809 03:28:51.834" status="PASS" endtime="20170809 03:28:52.043"></status>
</kw>
<status starttime="20170809 03:28:51.834" status="PASS" endtime="20170809 03:28:52.043"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.044">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:28:52.043" status="PASS" endtime="20170809 03:28:52.044"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.046">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:52.045" status="PASS" endtime="20170809 03:28:52.046"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.047">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:28:52.046" status="PASS" endtime="20170809 03:28:52.047"></status>
</kw>
<status starttime="20170809 03:28:52.046" status="PASS" endtime="20170809 03:28:52.047"></status>
</kw>
<status starttime="20170809 03:28:52.044" status="PASS" endtime="20170809 03:28:52.047"></status>
</kw>
<status starttime="20170809 03:28:52.044" status="PASS" endtime="20170809 03:28:52.047"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.135">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:52.136">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:52.047" status="PASS" endtime="20170809 03:28:52.136"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.137">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:52.137" status="PASS" endtime="20170809 03:28:52.137"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.138">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:52.138" status="PASS" endtime="20170809 03:28:52.139"></status>
</kw>
<status starttime="20170809 03:28:52.137" status="PASS" endtime="20170809 03:28:52.139"></status>
</kw>
<status starttime="20170809 03:28:52.136" status="PASS" endtime="20170809 03:28:52.139"></status>
</kw>
<status starttime="20170809 03:28:52.136" status="PASS" endtime="20170809 03:28:52.139"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:52.139">Delete All Sessions</msg>
<status starttime="20170809 03:28:52.139" status="PASS" endtime="20170809 03:28:52.139"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:52.140">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:51.833" status="PASS" endtime="20170809 03:28:52.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:52.140" status="PASS" endtime="20170809 03:28:52.140"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.141">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:52.141">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:52.141">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:28:52.140" status="PASS" endtime="20170809 03:28:52.141"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:52.141">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:28:51.833" status="PASS" endtime="20170809 03:28:52.141"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:52.142">${host_state} = Running</msg>
<status starttime="20170809 03:28:51.832" status="PASS" endtime="20170809 03:28:52.142"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:28:52.142" status="PASS" endtime="20170809 03:28:52.142"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.146">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:28:52.146" status="PASS" endtime="20170809 03:28:52.146"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.147">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:28:52.146" status="PASS" endtime="20170809 03:28:52.147"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.147">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:28:52.147" status="PASS" endtime="20170809 03:28:52.147"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.148">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:28:52.148" status="PASS" endtime="20170809 03:28:52.148"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.327">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:28:52.149" status="PASS" endtime="20170809 03:28:52.327"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:52.327">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:28:52.327">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:52.148" status="PASS" endtime="20170809 03:28:52.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.328">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:52.328" status="PASS" endtime="20170809 03:28:52.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.329">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:52.328" status="PASS" endtime="20170809 03:28:52.329"></status>
</kw>
<status starttime="20170809 03:28:52.145" status="PASS" endtime="20170809 03:28:52.329"></status>
</kw>
<status starttime="20170809 03:28:52.145" status="PASS" endtime="20170809 03:28:52.329"></status>
</kw>
<status starttime="20170809 03:28:52.144" status="PASS" endtime="20170809 03:28:52.329"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.330">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:28:52.329" status="PASS" endtime="20170809 03:28:52.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.332">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:28:52.331" status="PASS" endtime="20170809 03:28:52.332"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.333">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:28:52.332" status="PASS" endtime="20170809 03:28:52.333"></status>
</kw>
<status starttime="20170809 03:28:52.332" status="PASS" endtime="20170809 03:28:52.333"></status>
</kw>
<status starttime="20170809 03:28:52.330" status="PASS" endtime="20170809 03:28:52.333"></status>
</kw>
<status starttime="20170809 03:28:52.330" status="PASS" endtime="20170809 03:28:52.333"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.408">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:28:52.408">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:52.333" status="PASS" endtime="20170809 03:28:52.408"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.410">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:52.409" status="PASS" endtime="20170809 03:28:52.410"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.411">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:28:52.411" status="PASS" endtime="20170809 03:28:52.411"></status>
</kw>
<status starttime="20170809 03:28:52.410" status="PASS" endtime="20170809 03:28:52.411"></status>
</kw>
<status starttime="20170809 03:28:52.409" status="PASS" endtime="20170809 03:28:52.411"></status>
</kw>
<status starttime="20170809 03:28:52.408" status="PASS" endtime="20170809 03:28:52.411"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:28:52.412">Delete All Sessions</msg>
<status starttime="20170809 03:28:52.411" status="PASS" endtime="20170809 03:28:52.412"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:52.412">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:28:52.143" status="PASS" endtime="20170809 03:28:52.412"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:28:52.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:28:52.412" status="PASS" endtime="20170809 03:28:52.413"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:28:52.413">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:28:52.413">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:28:52.413">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:28:52.413" status="PASS" endtime="20170809 03:28:52.413"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:52.414">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:28:52.143" status="PASS" endtime="20170809 03:28:52.414"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:28:52.414">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:28:52.143" status="PASS" endtime="20170809 03:28:52.414"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:28:52.414">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:28:52.414" status="FAIL" endtime="20170809 03:28:52.415"></status>
</kw>
<status starttime="20170809 03:28:52.142" status="FAIL" endtime="20170809 03:28:52.415"></status>
</kw>
<status starttime="20170809 03:28:51.526" status="FAIL" endtime="20170809 03:28:52.415"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.420">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:02.420" status="PASS" endtime="20170809 03:29:02.421"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.421">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:02.421" status="PASS" endtime="20170809 03:29:02.421"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.422">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:02.421" status="PASS" endtime="20170809 03:29:02.422"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.422">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:02.422" status="PASS" endtime="20170809 03:29:02.423"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.603">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:02.423" status="PASS" endtime="20170809 03:29:02.603"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:02.603">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:02.603">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:02.423" status="PASS" endtime="20170809 03:29:02.603"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.604">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:02.603" status="PASS" endtime="20170809 03:29:02.604"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:02.604" status="PASS" endtime="20170809 03:29:02.605"></status>
</kw>
<status starttime="20170809 03:29:02.419" status="PASS" endtime="20170809 03:29:02.605"></status>
</kw>
<status starttime="20170809 03:29:02.419" status="PASS" endtime="20170809 03:29:02.605"></status>
</kw>
<status starttime="20170809 03:29:02.418" status="PASS" endtime="20170809 03:29:02.605"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.606">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:29:02.605" status="PASS" endtime="20170809 03:29:02.606"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.608">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:02.607" status="PASS" endtime="20170809 03:29:02.609"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.609">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:02.609" status="PASS" endtime="20170809 03:29:02.610"></status>
</kw>
<status starttime="20170809 03:29:02.609" status="PASS" endtime="20170809 03:29:02.610"></status>
</kw>
<status starttime="20170809 03:29:02.606" status="PASS" endtime="20170809 03:29:02.610"></status>
</kw>
<status starttime="20170809 03:29:02.606" status="PASS" endtime="20170809 03:29:02.610"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.673">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:02.673">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:02.610" status="PASS" endtime="20170809 03:29:02.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.675">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:02.674" status="PASS" endtime="20170809 03:29:02.675"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.676">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:02.675" status="PASS" endtime="20170809 03:29:02.676"></status>
</kw>
<status starttime="20170809 03:29:02.675" status="PASS" endtime="20170809 03:29:02.676"></status>
</kw>
<status starttime="20170809 03:29:02.674" status="PASS" endtime="20170809 03:29:02.676"></status>
</kw>
<status starttime="20170809 03:29:02.673" status="PASS" endtime="20170809 03:29:02.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:02.676">Delete All Sessions</msg>
<status starttime="20170809 03:29:02.676" status="PASS" endtime="20170809 03:29:02.677"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:02.677">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:02.417" status="PASS" endtime="20170809 03:29:02.677"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:02.677" status="PASS" endtime="20170809 03:29:02.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.678">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:02.678">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:02.678">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:29:02.678" status="PASS" endtime="20170809 03:29:02.678"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:02.678">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:29:02.417" status="PASS" endtime="20170809 03:29:02.678"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:02.679">${power_state} = On</msg>
<status starttime="20170809 03:29:02.416" status="PASS" endtime="20170809 03:29:02.679"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:29:02.679" status="PASS" endtime="20170809 03:29:02.679"></status>
</kw>
<status starttime="20170809 03:29:02.416" status="PASS" endtime="20170809 03:29:02.679"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.683">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:02.683" status="PASS" endtime="20170809 03:29:02.684"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.684">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:02.684" status="PASS" endtime="20170809 03:29:02.685"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.685">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:02.685" status="PASS" endtime="20170809 03:29:02.685"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.686">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:02.686" status="PASS" endtime="20170809 03:29:02.686"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.867">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:02.687" status="PASS" endtime="20170809 03:29:02.867"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:02.867">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:02.867">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:02.686" status="PASS" endtime="20170809 03:29:02.867"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.868">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:02.867" status="PASS" endtime="20170809 03:29:02.868"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:02.868" status="PASS" endtime="20170809 03:29:02.869"></status>
</kw>
<status starttime="20170809 03:29:02.682" status="PASS" endtime="20170809 03:29:02.869"></status>
</kw>
<status starttime="20170809 03:29:02.682" status="PASS" endtime="20170809 03:29:02.869"></status>
</kw>
<status starttime="20170809 03:29:02.681" status="PASS" endtime="20170809 03:29:02.869"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.869">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:29:02.869" status="PASS" endtime="20170809 03:29:02.869"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.872">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:02.871" status="PASS" endtime="20170809 03:29:02.872"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.873">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:02.872" status="PASS" endtime="20170809 03:29:02.873"></status>
</kw>
<status starttime="20170809 03:29:02.872" status="PASS" endtime="20170809 03:29:02.873"></status>
</kw>
<status starttime="20170809 03:29:02.870" status="PASS" endtime="20170809 03:29:02.873"></status>
</kw>
<status starttime="20170809 03:29:02.870" status="PASS" endtime="20170809 03:29:02.873"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.962">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:02.962">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:02.873" status="PASS" endtime="20170809 03:29:02.962"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.964">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:02.964" status="PASS" endtime="20170809 03:29:02.964"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.965">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:02.965" status="PASS" endtime="20170809 03:29:02.965"></status>
</kw>
<status starttime="20170809 03:29:02.964" status="PASS" endtime="20170809 03:29:02.965"></status>
</kw>
<status starttime="20170809 03:29:02.963" status="PASS" endtime="20170809 03:29:02.965"></status>
</kw>
<status starttime="20170809 03:29:02.963" status="PASS" endtime="20170809 03:29:02.965"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:02.966">Delete All Sessions</msg>
<status starttime="20170809 03:29:02.966" status="PASS" endtime="20170809 03:29:02.966"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:02.966">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:02.681" status="PASS" endtime="20170809 03:29:02.966"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:02.966" status="PASS" endtime="20170809 03:29:02.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.967">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:02.967">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:02.967">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:29:02.967" status="PASS" endtime="20170809 03:29:02.967"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:02.968">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:29:02.680" status="PASS" endtime="20170809 03:29:02.968"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:02.968">${host_state} = Running</msg>
<status starttime="20170809 03:29:02.680" status="PASS" endtime="20170809 03:29:02.968"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:29:02.968" status="PASS" endtime="20170809 03:29:02.969"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:02.972">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:02.972" status="PASS" endtime="20170809 03:29:02.973"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.973">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:02.973" status="PASS" endtime="20170809 03:29:02.973"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.974">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:02.974" status="PASS" endtime="20170809 03:29:02.974"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:02.975">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:02.974" status="PASS" endtime="20170809 03:29:02.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:03.180">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:02.975" status="PASS" endtime="20170809 03:29:03.181"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:03.181">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:03.181">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:02.975" status="PASS" endtime="20170809 03:29:03.181"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:03.181">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:03.181" status="PASS" endtime="20170809 03:29:03.181"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:03.182">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:03.182" status="PASS" endtime="20170809 03:29:03.182"></status>
</kw>
<status starttime="20170809 03:29:02.972" status="PASS" endtime="20170809 03:29:03.182"></status>
</kw>
<status starttime="20170809 03:29:02.971" status="PASS" endtime="20170809 03:29:03.182"></status>
</kw>
<status starttime="20170809 03:29:02.971" status="PASS" endtime="20170809 03:29:03.182"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:03.183">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:29:03.183" status="PASS" endtime="20170809 03:29:03.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:03.185">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:29:03.184" status="PASS" endtime="20170809 03:29:03.185"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:03.186">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:29:03.186" status="PASS" endtime="20170809 03:29:03.186"></status>
</kw>
<status starttime="20170809 03:29:03.185" status="PASS" endtime="20170809 03:29:03.186"></status>
</kw>
<status starttime="20170809 03:29:03.184" status="PASS" endtime="20170809 03:29:03.186"></status>
</kw>
<status starttime="20170809 03:29:03.183" status="PASS" endtime="20170809 03:29:03.186"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:03.252">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:03.252">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:03.187" status="PASS" endtime="20170809 03:29:03.252"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:03.254">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:03.254" status="PASS" endtime="20170809 03:29:03.254"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:03.255">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:03.255" status="PASS" endtime="20170809 03:29:03.255"></status>
</kw>
<status starttime="20170809 03:29:03.254" status="PASS" endtime="20170809 03:29:03.255"></status>
</kw>
<status starttime="20170809 03:29:03.253" status="PASS" endtime="20170809 03:29:03.255"></status>
</kw>
<status starttime="20170809 03:29:03.253" status="PASS" endtime="20170809 03:29:03.255"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:03.256">Delete All Sessions</msg>
<status starttime="20170809 03:29:03.256" status="PASS" endtime="20170809 03:29:03.256"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:03.256">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:02.970" status="PASS" endtime="20170809 03:29:03.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:03.257">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:03.256" status="PASS" endtime="20170809 03:29:03.257"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:03.257">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:03.257">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:03.257">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:29:03.257" status="PASS" endtime="20170809 03:29:03.257"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:03.258">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:29:02.969" status="PASS" endtime="20170809 03:29:03.258"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:03.258">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:29:02.969" status="PASS" endtime="20170809 03:29:03.258"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:29:03.259">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:29:03.258" status="FAIL" endtime="20170809 03:29:03.259"></status>
</kw>
<status starttime="20170809 03:29:02.969" status="FAIL" endtime="20170809 03:29:03.259"></status>
</kw>
<status starttime="20170809 03:29:02.415" status="FAIL" endtime="20170809 03:29:03.259"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:13.264">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:13.264" status="PASS" endtime="20170809 03:29:13.265"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:13.265">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:13.265" status="PASS" endtime="20170809 03:29:13.265"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:13.266">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:13.265" status="PASS" endtime="20170809 03:29:13.266"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:13.266">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:13.266" status="PASS" endtime="20170809 03:29:13.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:13.625">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:13.267" status="PASS" endtime="20170809 03:29:13.625"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:13.625">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:13.626">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:13.267" status="PASS" endtime="20170809 03:29:13.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:13.626">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:13.626" status="PASS" endtime="20170809 03:29:13.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:13.627">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:13.626" status="PASS" endtime="20170809 03:29:13.627"></status>
</kw>
<status starttime="20170809 03:29:13.263" status="PASS" endtime="20170809 03:29:13.627"></status>
</kw>
<status starttime="20170809 03:29:13.262" status="PASS" endtime="20170809 03:29:13.627"></status>
</kw>
<status starttime="20170809 03:29:13.262" status="PASS" endtime="20170809 03:29:13.627"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:13.628">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:29:13.627" status="PASS" endtime="20170809 03:29:13.628"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:13.630">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:13.629" status="PASS" endtime="20170809 03:29:13.630"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:13.631">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:13.631" status="PASS" endtime="20170809 03:29:13.631"></status>
</kw>
<status starttime="20170809 03:29:13.630" status="PASS" endtime="20170809 03:29:13.631"></status>
</kw>
<status starttime="20170809 03:29:13.629" status="PASS" endtime="20170809 03:29:13.631"></status>
</kw>
<status starttime="20170809 03:29:13.628" status="PASS" endtime="20170809 03:29:13.631"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:17.277">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:17.277">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:13.631" status="PASS" endtime="20170809 03:29:17.277"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:17.279">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:17.278" status="PASS" endtime="20170809 03:29:17.279"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:17.280">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:17.280" status="PASS" endtime="20170809 03:29:17.280"></status>
</kw>
<status starttime="20170809 03:29:17.279" status="PASS" endtime="20170809 03:29:17.280"></status>
</kw>
<status starttime="20170809 03:29:17.278" status="PASS" endtime="20170809 03:29:17.280"></status>
</kw>
<status starttime="20170809 03:29:17.277" status="PASS" endtime="20170809 03:29:17.280"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:17.281">Delete All Sessions</msg>
<status starttime="20170809 03:29:17.281" status="PASS" endtime="20170809 03:29:17.281"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:17.281">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:13.261" status="PASS" endtime="20170809 03:29:17.281"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:17.282">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:17.281" status="PASS" endtime="20170809 03:29:17.282"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:17.282">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:17.282">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:17.283">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:29:17.282" status="PASS" endtime="20170809 03:29:17.283"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:17.283">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:29:13.261" status="PASS" endtime="20170809 03:29:17.283"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:17.283">${power_state} = On</msg>
<status starttime="20170809 03:29:13.260" status="PASS" endtime="20170809 03:29:17.283"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:29:17.283" status="PASS" endtime="20170809 03:29:17.284"></status>
</kw>
<status starttime="20170809 03:29:13.260" status="PASS" endtime="20170809 03:29:17.284"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:17.287">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:17.287" status="PASS" endtime="20170809 03:29:17.288"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:17.288">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:17.288" status="PASS" endtime="20170809 03:29:17.288"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:17.289">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:17.289" status="PASS" endtime="20170809 03:29:17.289"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:17.290">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:17.289" status="PASS" endtime="20170809 03:29:17.290"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:18.746">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:17.290" status="PASS" endtime="20170809 03:29:18.746"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:18.746">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:18.746">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:17.290" status="PASS" endtime="20170809 03:29:18.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:18.747">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:18.746" status="PASS" endtime="20170809 03:29:18.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:18.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:18.747" status="PASS" endtime="20170809 03:29:18.747"></status>
</kw>
<status starttime="20170809 03:29:17.286" status="PASS" endtime="20170809 03:29:18.747"></status>
</kw>
<status starttime="20170809 03:29:17.286" status="PASS" endtime="20170809 03:29:18.748"></status>
</kw>
<status starttime="20170809 03:29:17.286" status="PASS" endtime="20170809 03:29:18.748"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:18.748">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:29:18.748" status="PASS" endtime="20170809 03:29:18.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:18.751">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:18.750" status="PASS" endtime="20170809 03:29:18.751"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:18.752">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:18.751" status="PASS" endtime="20170809 03:29:18.752"></status>
</kw>
<status starttime="20170809 03:29:18.751" status="PASS" endtime="20170809 03:29:18.752"></status>
</kw>
<status starttime="20170809 03:29:18.749" status="PASS" endtime="20170809 03:29:18.752"></status>
</kw>
<status starttime="20170809 03:29:18.749" status="PASS" endtime="20170809 03:29:18.752"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:19.436">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:19.436">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:18.752" status="PASS" endtime="20170809 03:29:19.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:19.438">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:19.437" status="PASS" endtime="20170809 03:29:19.438"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:19.438">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:19.438" status="PASS" endtime="20170809 03:29:19.439"></status>
</kw>
<status starttime="20170809 03:29:19.438" status="PASS" endtime="20170809 03:29:19.439"></status>
</kw>
<status starttime="20170809 03:29:19.437" status="PASS" endtime="20170809 03:29:19.439"></status>
</kw>
<status starttime="20170809 03:29:19.436" status="PASS" endtime="20170809 03:29:19.439"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:19.439">Delete All Sessions</msg>
<status starttime="20170809 03:29:19.439" status="PASS" endtime="20170809 03:29:19.439"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:19.439">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:17.285" status="PASS" endtime="20170809 03:29:19.440"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:19.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:19.440" status="PASS" endtime="20170809 03:29:19.440"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:19.441">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:19.441">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:19.441">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:29:19.440" status="PASS" endtime="20170809 03:29:19.441"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:19.441">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:29:17.284" status="PASS" endtime="20170809 03:29:19.441"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:19.442">${host_state} = Running</msg>
<status starttime="20170809 03:29:17.284" status="PASS" endtime="20170809 03:29:19.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:29:19.442" status="PASS" endtime="20170809 03:29:19.442"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:19.446">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:19.446" status="PASS" endtime="20170809 03:29:19.446"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:19.447">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:19.447" status="PASS" endtime="20170809 03:29:19.447"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:19.447">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:19.447" status="PASS" endtime="20170809 03:29:19.448"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:19.451">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:19.448" status="PASS" endtime="20170809 03:29:19.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:19.869">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:19.452" status="PASS" endtime="20170809 03:29:19.869"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:19.869">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:19.869">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:19.451" status="PASS" endtime="20170809 03:29:19.869"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:19.869">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:19.869" status="PASS" endtime="20170809 03:29:19.869"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:19.870">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:19.870" status="PASS" endtime="20170809 03:29:19.870"></status>
</kw>
<status starttime="20170809 03:29:19.445" status="PASS" endtime="20170809 03:29:19.870"></status>
</kw>
<status starttime="20170809 03:29:19.445" status="PASS" endtime="20170809 03:29:19.870"></status>
</kw>
<status starttime="20170809 03:29:19.444" status="PASS" endtime="20170809 03:29:19.870"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:19.871">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:29:19.871" status="PASS" endtime="20170809 03:29:19.871"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:19.873">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:29:19.872" status="PASS" endtime="20170809 03:29:19.873"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:19.874">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:29:19.874" status="PASS" endtime="20170809 03:29:19.874"></status>
</kw>
<status starttime="20170809 03:29:19.873" status="PASS" endtime="20170809 03:29:19.874"></status>
</kw>
<status starttime="20170809 03:29:19.872" status="PASS" endtime="20170809 03:29:19.874"></status>
</kw>
<status starttime="20170809 03:29:19.871" status="PASS" endtime="20170809 03:29:19.874"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:19.949">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:19.949">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:19.875" status="PASS" endtime="20170809 03:29:19.949"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:19.951">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:19.951" status="PASS" endtime="20170809 03:29:19.951"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:19.952">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:19.952" status="PASS" endtime="20170809 03:29:19.952"></status>
</kw>
<status starttime="20170809 03:29:19.951" status="PASS" endtime="20170809 03:29:19.952"></status>
</kw>
<status starttime="20170809 03:29:19.950" status="PASS" endtime="20170809 03:29:19.952"></status>
</kw>
<status starttime="20170809 03:29:19.950" status="PASS" endtime="20170809 03:29:19.952"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:19.953">Delete All Sessions</msg>
<status starttime="20170809 03:29:19.953" status="PASS" endtime="20170809 03:29:19.953"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:19.953">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:19.443" status="PASS" endtime="20170809 03:29:19.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:19.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:19.953" status="PASS" endtime="20170809 03:29:19.954"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:19.954">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:19.954">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:19.954">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170809 03:29:19.954" status="PASS" endtime="20170809 03:29:19.954"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:19.955">${state} = Off</msg>
<status starttime="20170809 03:29:19.443" status="PASS" endtime="20170809 03:29:19.955"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:19.955">${boot_progress} = Off</msg>
<status starttime="20170809 03:29:19.443" status="PASS" endtime="20170809 03:29:19.955"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:29:19.956">Off != FW Progress, Starting OS</msg>
<status starttime="20170809 03:29:19.955" status="FAIL" endtime="20170809 03:29:19.956"></status>
</kw>
<status starttime="20170809 03:29:19.442" status="FAIL" endtime="20170809 03:29:19.956"></status>
</kw>
<status starttime="20170809 03:29:13.259" status="FAIL" endtime="20170809 03:29:19.956"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:29.961">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:29.961" status="PASS" endtime="20170809 03:29:29.962"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:29.962">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:29.962" status="PASS" endtime="20170809 03:29:29.962"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:29.963">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:29.963" status="PASS" endtime="20170809 03:29:29.963"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:29.964">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:29.963" status="PASS" endtime="20170809 03:29:29.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:30.336">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:29.964" status="PASS" endtime="20170809 03:29:30.336"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:30.336">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:30.336">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:29.964" status="PASS" endtime="20170809 03:29:30.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:30.337">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:30.336" status="PASS" endtime="20170809 03:29:30.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:30.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:30.337" status="PASS" endtime="20170809 03:29:30.338"></status>
</kw>
<status starttime="20170809 03:29:29.960" status="PASS" endtime="20170809 03:29:30.338"></status>
</kw>
<status starttime="20170809 03:29:29.960" status="PASS" endtime="20170809 03:29:30.338"></status>
</kw>
<status starttime="20170809 03:29:29.959" status="PASS" endtime="20170809 03:29:30.338"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:30.338">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:29:30.338" status="PASS" endtime="20170809 03:29:30.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:30.341">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:30.340" status="PASS" endtime="20170809 03:29:30.341"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:30.341">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:30.341" status="PASS" endtime="20170809 03:29:30.342"></status>
</kw>
<status starttime="20170809 03:29:30.341" status="PASS" endtime="20170809 03:29:30.342"></status>
</kw>
<status starttime="20170809 03:29:30.339" status="PASS" endtime="20170809 03:29:30.342"></status>
</kw>
<status starttime="20170809 03:29:30.339" status="PASS" endtime="20170809 03:29:30.342"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:30.914">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:30.915">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:30.342" status="PASS" endtime="20170809 03:29:30.915"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:30.917">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:30.916" status="PASS" endtime="20170809 03:29:30.917"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:30.918">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:30.917" status="PASS" endtime="20170809 03:29:30.918"></status>
</kw>
<status starttime="20170809 03:29:30.917" status="PASS" endtime="20170809 03:29:30.918"></status>
</kw>
<status starttime="20170809 03:29:30.915" status="PASS" endtime="20170809 03:29:30.918"></status>
</kw>
<status starttime="20170809 03:29:30.915" status="PASS" endtime="20170809 03:29:30.918"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:30.918">Delete All Sessions</msg>
<status starttime="20170809 03:29:30.918" status="PASS" endtime="20170809 03:29:30.919"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:30.919">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:29.958" status="PASS" endtime="20170809 03:29:30.919"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:30.919">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:30.919" status="PASS" endtime="20170809 03:29:30.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:30.920">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:30.920">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:30.920">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status starttime="20170809 03:29:30.920" status="PASS" endtime="20170809 03:29:30.920"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:30.920">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 03:29:29.958" status="PASS" endtime="20170809 03:29:30.920"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:30.921">${power_state} = Off</msg>
<status starttime="20170809 03:29:29.957" status="PASS" endtime="20170809 03:29:30.921"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:29:30.922">On != Off</msg>
<status starttime="20170809 03:29:30.921" status="FAIL" endtime="20170809 03:29:30.922"></status>
</kw>
<status starttime="20170809 03:29:29.957" status="FAIL" endtime="20170809 03:29:30.922"></status>
</kw>
<status starttime="20170809 03:29:29.956" status="FAIL" endtime="20170809 03:29:30.923"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:40.928">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:40.927" status="PASS" endtime="20170809 03:29:40.928"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:40.929">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:40.928" status="PASS" endtime="20170809 03:29:40.929"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:40.929">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:40.929" status="PASS" endtime="20170809 03:29:40.929"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:40.930">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:40.930" status="PASS" endtime="20170809 03:29:40.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:41.260">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:40.931" status="PASS" endtime="20170809 03:29:41.260"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:41.260">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:41.261">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:40.930" status="PASS" endtime="20170809 03:29:41.261"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:41.261">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:41.261" status="PASS" endtime="20170809 03:29:41.261"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:41.262">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:41.262" status="PASS" endtime="20170809 03:29:41.262"></status>
</kw>
<status starttime="20170809 03:29:40.927" status="PASS" endtime="20170809 03:29:41.263"></status>
</kw>
<status starttime="20170809 03:29:40.926" status="PASS" endtime="20170809 03:29:41.263"></status>
</kw>
<status starttime="20170809 03:29:40.926" status="PASS" endtime="20170809 03:29:41.263"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:41.263">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:29:41.263" status="PASS" endtime="20170809 03:29:41.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:41.265">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:41.265" status="PASS" endtime="20170809 03:29:41.265"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:41.266">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:41.266" status="PASS" endtime="20170809 03:29:41.267"></status>
</kw>
<status starttime="20170809 03:29:41.266" status="PASS" endtime="20170809 03:29:41.267"></status>
</kw>
<status starttime="20170809 03:29:41.264" status="PASS" endtime="20170809 03:29:41.267"></status>
</kw>
<status starttime="20170809 03:29:41.264" status="PASS" endtime="20170809 03:29:41.267"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:41.818">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:41.818">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:41.267" status="PASS" endtime="20170809 03:29:41.818"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:41.820">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:41.820" status="PASS" endtime="20170809 03:29:41.820"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:41.821">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:41.821" status="PASS" endtime="20170809 03:29:41.821"></status>
</kw>
<status starttime="20170809 03:29:41.820" status="PASS" endtime="20170809 03:29:41.821"></status>
</kw>
<status starttime="20170809 03:29:41.819" status="PASS" endtime="20170809 03:29:41.821"></status>
</kw>
<status starttime="20170809 03:29:41.819" status="PASS" endtime="20170809 03:29:41.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:41.822">Delete All Sessions</msg>
<status starttime="20170809 03:29:41.822" status="PASS" endtime="20170809 03:29:41.822"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:41.822">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:40.925" status="PASS" endtime="20170809 03:29:41.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:41.823">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:41.823" status="PASS" endtime="20170809 03:29:41.823"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:41.823">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:41.823">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:41.824">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:29:41.823" status="PASS" endtime="20170809 03:29:41.824"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:41.824">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:29:40.924" status="PASS" endtime="20170809 03:29:41.824"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:41.824">${power_state} = On</msg>
<status starttime="20170809 03:29:40.924" status="PASS" endtime="20170809 03:29:41.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:29:41.825" status="PASS" endtime="20170809 03:29:41.825"></status>
</kw>
<status starttime="20170809 03:29:40.924" status="PASS" endtime="20170809 03:29:41.825"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:41.828">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:41.828" status="PASS" endtime="20170809 03:29:41.829"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:41.830">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:41.829" status="PASS" endtime="20170809 03:29:41.830"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:41.830">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:41.830" status="PASS" endtime="20170809 03:29:41.830"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:41.831">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:41.831" status="PASS" endtime="20170809 03:29:41.831"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.018">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:41.832" status="PASS" endtime="20170809 03:29:42.019"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:42.019">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:42.019">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:41.831" status="PASS" endtime="20170809 03:29:42.019"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.019">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:42.019" status="PASS" endtime="20170809 03:29:42.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.020">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:42.020" status="PASS" endtime="20170809 03:29:42.020"></status>
</kw>
<status starttime="20170809 03:29:41.828" status="PASS" endtime="20170809 03:29:42.020"></status>
</kw>
<status starttime="20170809 03:29:41.827" status="PASS" endtime="20170809 03:29:42.020"></status>
</kw>
<status starttime="20170809 03:29:41.827" status="PASS" endtime="20170809 03:29:42.021"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.021">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:29:42.021" status="PASS" endtime="20170809 03:29:42.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.023">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:42.023" status="PASS" endtime="20170809 03:29:42.024"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.024">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:42.024" status="PASS" endtime="20170809 03:29:42.025"></status>
</kw>
<status starttime="20170809 03:29:42.024" status="PASS" endtime="20170809 03:29:42.025"></status>
</kw>
<status starttime="20170809 03:29:42.022" status="PASS" endtime="20170809 03:29:42.025"></status>
</kw>
<status starttime="20170809 03:29:42.022" status="PASS" endtime="20170809 03:29:42.025"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.125">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:42.125">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:42.025" status="PASS" endtime="20170809 03:29:42.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.127">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:42.127" status="PASS" endtime="20170809 03:29:42.127"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.128">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:42.128" status="PASS" endtime="20170809 03:29:42.128"></status>
</kw>
<status starttime="20170809 03:29:42.127" status="PASS" endtime="20170809 03:29:42.128"></status>
</kw>
<status starttime="20170809 03:29:42.126" status="PASS" endtime="20170809 03:29:42.128"></status>
</kw>
<status starttime="20170809 03:29:42.126" status="PASS" endtime="20170809 03:29:42.129"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:42.129">Delete All Sessions</msg>
<status starttime="20170809 03:29:42.129" status="PASS" endtime="20170809 03:29:42.129"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:42.129">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:41.826" status="PASS" endtime="20170809 03:29:42.129"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.130">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:42.129" status="PASS" endtime="20170809 03:29:42.130"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.130">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:42.131">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:42.131">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:29:42.130" status="PASS" endtime="20170809 03:29:42.131"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:42.131">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:29:41.825" status="PASS" endtime="20170809 03:29:42.131"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:42.131">${host_state} = Running</msg>
<status starttime="20170809 03:29:41.825" status="PASS" endtime="20170809 03:29:42.131"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:29:42.132" status="PASS" endtime="20170809 03:29:42.132"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.136">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:42.136" status="PASS" endtime="20170809 03:29:42.137"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.137">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:42.137" status="PASS" endtime="20170809 03:29:42.137"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.138">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:42.138" status="PASS" endtime="20170809 03:29:42.138"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.139">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:42.139" status="PASS" endtime="20170809 03:29:42.139"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.347">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:42.140" status="PASS" endtime="20170809 03:29:42.347"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:42.347">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:42.347">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:42.140" status="PASS" endtime="20170809 03:29:42.347"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.348">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:42.347" status="PASS" endtime="20170809 03:29:42.348"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.348">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:42.348" status="PASS" endtime="20170809 03:29:42.348"></status>
</kw>
<status starttime="20170809 03:29:42.135" status="PASS" endtime="20170809 03:29:42.348"></status>
</kw>
<status starttime="20170809 03:29:42.135" status="PASS" endtime="20170809 03:29:42.349"></status>
</kw>
<status starttime="20170809 03:29:42.134" status="PASS" endtime="20170809 03:29:42.349"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.349">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:29:42.349" status="PASS" endtime="20170809 03:29:42.349"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.351">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:29:42.351" status="PASS" endtime="20170809 03:29:42.351"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.352">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:29:42.352" status="PASS" endtime="20170809 03:29:42.353"></status>
</kw>
<status starttime="20170809 03:29:42.352" status="PASS" endtime="20170809 03:29:42.353"></status>
</kw>
<status starttime="20170809 03:29:42.350" status="PASS" endtime="20170809 03:29:42.353"></status>
</kw>
<status starttime="20170809 03:29:42.350" status="PASS" endtime="20170809 03:29:42.353"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.450">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:42.450">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:42.353" status="PASS" endtime="20170809 03:29:42.450"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.452">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:42.452" status="PASS" endtime="20170809 03:29:42.452"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.453">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:42.453" status="PASS" endtime="20170809 03:29:42.453"></status>
</kw>
<status starttime="20170809 03:29:42.453" status="PASS" endtime="20170809 03:29:42.454"></status>
</kw>
<status starttime="20170809 03:29:42.451" status="PASS" endtime="20170809 03:29:42.454"></status>
</kw>
<status starttime="20170809 03:29:42.451" status="PASS" endtime="20170809 03:29:42.454"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:42.454">Delete All Sessions</msg>
<status starttime="20170809 03:29:42.454" status="PASS" endtime="20170809 03:29:42.454"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:42.455">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:42.133" status="PASS" endtime="20170809 03:29:42.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:42.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:42.455" status="PASS" endtime="20170809 03:29:42.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:42.456">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:42.456">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:42.456">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170809 03:29:42.456" status="PASS" endtime="20170809 03:29:42.456"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:42.456">${state} = Off</msg>
<status starttime="20170809 03:29:42.133" status="PASS" endtime="20170809 03:29:42.456"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:42.457">${boot_progress} = Off</msg>
<status starttime="20170809 03:29:42.132" status="PASS" endtime="20170809 03:29:42.457"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:29:42.457">Off != FW Progress, Starting OS</msg>
<status starttime="20170809 03:29:42.457" status="FAIL" endtime="20170809 03:29:42.457"></status>
</kw>
<status starttime="20170809 03:29:42.132" status="FAIL" endtime="20170809 03:29:42.457"></status>
</kw>
<status starttime="20170809 03:29:40.923" status="FAIL" endtime="20170809 03:29:42.458"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:52.463">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:52.462" status="PASS" endtime="20170809 03:29:52.463"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:52.464">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:52.463" status="PASS" endtime="20170809 03:29:52.464"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:52.464">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:52.464" status="PASS" endtime="20170809 03:29:52.464"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:52.465">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:52.465" status="PASS" endtime="20170809 03:29:52.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:52.980">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:52.466" status="PASS" endtime="20170809 03:29:52.981"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:52.981">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:52.981">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:52.465" status="PASS" endtime="20170809 03:29:52.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:52.981">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:52.981" status="PASS" endtime="20170809 03:29:52.982"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:52.982">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:52.982" status="PASS" endtime="20170809 03:29:52.982"></status>
</kw>
<status starttime="20170809 03:29:52.462" status="PASS" endtime="20170809 03:29:52.982"></status>
</kw>
<status starttime="20170809 03:29:52.461" status="PASS" endtime="20170809 03:29:52.982"></status>
</kw>
<status starttime="20170809 03:29:52.461" status="PASS" endtime="20170809 03:29:52.983"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:52.983">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:29:52.983" status="PASS" endtime="20170809 03:29:52.983"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:52.985">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:52.985" status="PASS" endtime="20170809 03:29:52.985"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:52.986">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:52.986" status="PASS" endtime="20170809 03:29:52.986"></status>
</kw>
<status starttime="20170809 03:29:52.985" status="PASS" endtime="20170809 03:29:52.986"></status>
</kw>
<status starttime="20170809 03:29:52.984" status="PASS" endtime="20170809 03:29:52.987"></status>
</kw>
<status starttime="20170809 03:29:52.983" status="PASS" endtime="20170809 03:29:52.987"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.134">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:53.134">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:52.987" status="PASS" endtime="20170809 03:29:53.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.136">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:53.136" status="PASS" endtime="20170809 03:29:53.136"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.137">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:53.137" status="PASS" endtime="20170809 03:29:53.137"></status>
</kw>
<status starttime="20170809 03:29:53.136" status="PASS" endtime="20170809 03:29:53.137"></status>
</kw>
<status starttime="20170809 03:29:53.135" status="PASS" endtime="20170809 03:29:53.138"></status>
</kw>
<status starttime="20170809 03:29:53.135" status="PASS" endtime="20170809 03:29:53.138"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:53.138">Delete All Sessions</msg>
<status starttime="20170809 03:29:53.138" status="PASS" endtime="20170809 03:29:53.138"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:53.138">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:52.460" status="PASS" endtime="20170809 03:29:53.138"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:53.139" status="PASS" endtime="20170809 03:29:53.139"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.140">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:53.140">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:53.140">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:29:53.139" status="PASS" endtime="20170809 03:29:53.140"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:53.140">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:29:52.459" status="PASS" endtime="20170809 03:29:53.140"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:53.140">${power_state} = On</msg>
<status starttime="20170809 03:29:52.459" status="PASS" endtime="20170809 03:29:53.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:29:53.141" status="PASS" endtime="20170809 03:29:53.141"></status>
</kw>
<status starttime="20170809 03:29:52.459" status="PASS" endtime="20170809 03:29:53.141"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.145">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:53.144" status="PASS" endtime="20170809 03:29:53.146"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.146">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:53.146" status="PASS" endtime="20170809 03:29:53.146"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.147">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:53.146" status="PASS" endtime="20170809 03:29:53.147"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.147">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:53.147" status="PASS" endtime="20170809 03:29:53.147"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.456">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:53.148" status="PASS" endtime="20170809 03:29:53.456"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:53.456">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:53.457">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:53.148" status="PASS" endtime="20170809 03:29:53.457"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.458">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:53.457" status="PASS" endtime="20170809 03:29:53.458"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.459">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:53.458" status="PASS" endtime="20170809 03:29:53.459"></status>
</kw>
<status starttime="20170809 03:29:53.144" status="PASS" endtime="20170809 03:29:53.459"></status>
</kw>
<status starttime="20170809 03:29:53.143" status="PASS" endtime="20170809 03:29:53.459"></status>
</kw>
<status starttime="20170809 03:29:53.143" status="PASS" endtime="20170809 03:29:53.459"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.460">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:29:53.460" status="PASS" endtime="20170809 03:29:53.460"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.463">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:53.462" status="PASS" endtime="20170809 03:29:53.463"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.464">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:29:53.463" status="PASS" endtime="20170809 03:29:53.464"></status>
</kw>
<status starttime="20170809 03:29:53.463" status="PASS" endtime="20170809 03:29:53.464"></status>
</kw>
<status starttime="20170809 03:29:53.461" status="PASS" endtime="20170809 03:29:53.464"></status>
</kw>
<status starttime="20170809 03:29:53.461" status="PASS" endtime="20170809 03:29:53.464"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.595">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:53.595">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:53.464" status="PASS" endtime="20170809 03:29:53.595"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.597">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:53.597" status="PASS" endtime="20170809 03:29:53.597"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.598">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:53.598" status="PASS" endtime="20170809 03:29:53.598"></status>
</kw>
<status starttime="20170809 03:29:53.597" status="PASS" endtime="20170809 03:29:53.598"></status>
</kw>
<status starttime="20170809 03:29:53.596" status="PASS" endtime="20170809 03:29:53.598"></status>
</kw>
<status starttime="20170809 03:29:53.596" status="PASS" endtime="20170809 03:29:53.599"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:53.599">Delete All Sessions</msg>
<status starttime="20170809 03:29:53.599" status="PASS" endtime="20170809 03:29:53.599"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:53.599">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:53.142" status="PASS" endtime="20170809 03:29:53.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.600">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:53.599" status="PASS" endtime="20170809 03:29:53.600"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.600">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:53.600">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:53.601">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:29:53.600" status="PASS" endtime="20170809 03:29:53.601"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:53.601">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:29:53.142" status="PASS" endtime="20170809 03:29:53.601"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:53.601">${host_state} = Running</msg>
<status starttime="20170809 03:29:53.141" status="PASS" endtime="20170809 03:29:53.601"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:29:53.601" status="PASS" endtime="20170809 03:29:53.602"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.606">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:29:53.606" status="PASS" endtime="20170809 03:29:53.607"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.607">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:29:53.607" status="PASS" endtime="20170809 03:29:53.607"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.608">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:29:53.608" status="PASS" endtime="20170809 03:29:53.608"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.609">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:29:53.608" status="PASS" endtime="20170809 03:29:53.609"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.840">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:29:53.609" status="PASS" endtime="20170809 03:29:53.840"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:53.841">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:29:53.841">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:53.609" status="PASS" endtime="20170809 03:29:53.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.841">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:53.841" status="PASS" endtime="20170809 03:29:53.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.842">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:53.842" status="PASS" endtime="20170809 03:29:53.842"></status>
</kw>
<status starttime="20170809 03:29:53.606" status="PASS" endtime="20170809 03:29:53.842"></status>
</kw>
<status starttime="20170809 03:29:53.605" status="PASS" endtime="20170809 03:29:53.842"></status>
</kw>
<status starttime="20170809 03:29:53.605" status="PASS" endtime="20170809 03:29:53.843"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.843">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:29:53.843" status="PASS" endtime="20170809 03:29:53.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.845">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:29:53.845" status="PASS" endtime="20170809 03:29:53.845"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.846">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:29:53.846" status="PASS" endtime="20170809 03:29:53.846"></status>
</kw>
<status starttime="20170809 03:29:53.845" status="PASS" endtime="20170809 03:29:53.846"></status>
</kw>
<status starttime="20170809 03:29:53.844" status="PASS" endtime="20170809 03:29:53.847"></status>
</kw>
<status starttime="20170809 03:29:53.843" status="PASS" endtime="20170809 03:29:53.847"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.935">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:29:53.936">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:53.847" status="PASS" endtime="20170809 03:29:53.936"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.938">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:53.937" status="PASS" endtime="20170809 03:29:53.938"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.939">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:29:53.938" status="PASS" endtime="20170809 03:29:53.939"></status>
</kw>
<status starttime="20170809 03:29:53.938" status="PASS" endtime="20170809 03:29:53.939"></status>
</kw>
<status starttime="20170809 03:29:53.937" status="PASS" endtime="20170809 03:29:53.939"></status>
</kw>
<status starttime="20170809 03:29:53.936" status="PASS" endtime="20170809 03:29:53.939"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:29:53.939">Delete All Sessions</msg>
<status starttime="20170809 03:29:53.939" status="PASS" endtime="20170809 03:29:53.940"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:53.940">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:29:53.603" status="PASS" endtime="20170809 03:29:53.940"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:29:53.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:29:53.940" status="PASS" endtime="20170809 03:29:53.940"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:29:53.941">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:29:53.941">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:29:53.941">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:29:53.941" status="PASS" endtime="20170809 03:29:53.941"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:53.941">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:29:53.603" status="PASS" endtime="20170809 03:29:53.942"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:29:53.942">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:29:53.602" status="PASS" endtime="20170809 03:29:53.942"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:29:53.942">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:29:53.942" status="FAIL" endtime="20170809 03:29:53.943"></status>
</kw>
<status starttime="20170809 03:29:53.602" status="FAIL" endtime="20170809 03:29:53.943"></status>
</kw>
<status starttime="20170809 03:29:52.458" status="FAIL" endtime="20170809 03:29:53.943"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:03.948">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:03.948" status="PASS" endtime="20170809 03:30:03.948"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:03.949">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:03.949" status="PASS" endtime="20170809 03:30:03.949"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:03.950">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:03.949" status="PASS" endtime="20170809 03:30:03.950"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:03.950">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:03.950" status="PASS" endtime="20170809 03:30:03.950"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.141">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:03.951" status="PASS" endtime="20170809 03:30:04.141"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:04.141">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:04.141">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:03.951" status="PASS" endtime="20170809 03:30:04.141"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.142">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:04.142" status="PASS" endtime="20170809 03:30:04.142"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.143">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:04.142" status="PASS" endtime="20170809 03:30:04.143"></status>
</kw>
<status starttime="20170809 03:30:03.947" status="PASS" endtime="20170809 03:30:04.143"></status>
</kw>
<status starttime="20170809 03:30:03.947" status="PASS" endtime="20170809 03:30:04.143"></status>
</kw>
<status starttime="20170809 03:30:03.946" status="PASS" endtime="20170809 03:30:04.143"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.144">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:30:04.144" status="PASS" endtime="20170809 03:30:04.144"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.146">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:04.146" status="PASS" endtime="20170809 03:30:04.146"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.147">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:04.147" status="PASS" endtime="20170809 03:30:04.147"></status>
</kw>
<status starttime="20170809 03:30:04.146" status="PASS" endtime="20170809 03:30:04.147"></status>
</kw>
<status starttime="20170809 03:30:04.145" status="PASS" endtime="20170809 03:30:04.147"></status>
</kw>
<status starttime="20170809 03:30:04.144" status="PASS" endtime="20170809 03:30:04.147"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.230">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:04.230">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:04.148" status="PASS" endtime="20170809 03:30:04.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.232">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:04.232" status="PASS" endtime="20170809 03:30:04.232"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.233">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:04.233" status="PASS" endtime="20170809 03:30:04.233"></status>
</kw>
<status starttime="20170809 03:30:04.232" status="PASS" endtime="20170809 03:30:04.233"></status>
</kw>
<status starttime="20170809 03:30:04.231" status="PASS" endtime="20170809 03:30:04.233"></status>
</kw>
<status starttime="20170809 03:30:04.231" status="PASS" endtime="20170809 03:30:04.234"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:04.234">Delete All Sessions</msg>
<status starttime="20170809 03:30:04.234" status="PASS" endtime="20170809 03:30:04.234"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:04.234">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:03.945" status="PASS" endtime="20170809 03:30:04.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.235">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:04.234" status="PASS" endtime="20170809 03:30:04.235"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.235">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:04.235">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:04.236">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:30:04.235" status="PASS" endtime="20170809 03:30:04.236"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:04.236">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:30:03.945" status="PASS" endtime="20170809 03:30:04.236"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:04.236">${power_state} = On</msg>
<status starttime="20170809 03:30:03.944" status="PASS" endtime="20170809 03:30:04.236"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:30:04.237" status="PASS" endtime="20170809 03:30:04.237"></status>
</kw>
<status starttime="20170809 03:30:03.944" status="PASS" endtime="20170809 03:30:04.237"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.241">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:04.240" status="PASS" endtime="20170809 03:30:04.249"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.250">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:04.250" status="PASS" endtime="20170809 03:30:04.250"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.251">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:04.250" status="PASS" endtime="20170809 03:30:04.251"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.251">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:04.251" status="PASS" endtime="20170809 03:30:04.251"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.472">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:04.252" status="PASS" endtime="20170809 03:30:04.472"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:04.472">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:04.473">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:04.252" status="PASS" endtime="20170809 03:30:04.473"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.473">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:04.473" status="PASS" endtime="20170809 03:30:04.473"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.474">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:04.474" status="PASS" endtime="20170809 03:30:04.474"></status>
</kw>
<status starttime="20170809 03:30:04.240" status="PASS" endtime="20170809 03:30:04.474"></status>
</kw>
<status starttime="20170809 03:30:04.239" status="PASS" endtime="20170809 03:30:04.474"></status>
</kw>
<status starttime="20170809 03:30:04.239" status="PASS" endtime="20170809 03:30:04.474"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.475">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:30:04.475" status="PASS" endtime="20170809 03:30:04.475"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.477">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:04.476" status="PASS" endtime="20170809 03:30:04.477"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.479">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:04.478" status="PASS" endtime="20170809 03:30:04.479"></status>
</kw>
<status starttime="20170809 03:30:04.478" status="PASS" endtime="20170809 03:30:04.479"></status>
</kw>
<status starttime="20170809 03:30:04.476" status="PASS" endtime="20170809 03:30:04.479"></status>
</kw>
<status starttime="20170809 03:30:04.475" status="PASS" endtime="20170809 03:30:04.479"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.569">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:04.569">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:04.479" status="PASS" endtime="20170809 03:30:04.569"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.571">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:04.571" status="PASS" endtime="20170809 03:30:04.571"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.572">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:04.572" status="PASS" endtime="20170809 03:30:04.572"></status>
</kw>
<status starttime="20170809 03:30:04.571" status="PASS" endtime="20170809 03:30:04.572"></status>
</kw>
<status starttime="20170809 03:30:04.570" status="PASS" endtime="20170809 03:30:04.573"></status>
</kw>
<status starttime="20170809 03:30:04.570" status="PASS" endtime="20170809 03:30:04.573"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:04.573">Delete All Sessions</msg>
<status starttime="20170809 03:30:04.573" status="PASS" endtime="20170809 03:30:04.573"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:04.573">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:04.238" status="PASS" endtime="20170809 03:30:04.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.574">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:04.574" status="PASS" endtime="20170809 03:30:04.574"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.574">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:04.575">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:04.575">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:30:04.574" status="PASS" endtime="20170809 03:30:04.575"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:04.575">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:30:04.237" status="PASS" endtime="20170809 03:30:04.575"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:04.575">${host_state} = Running</msg>
<status starttime="20170809 03:30:04.237" status="PASS" endtime="20170809 03:30:04.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:30:04.576" status="PASS" endtime="20170809 03:30:04.576"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.582">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:04.581" status="PASS" endtime="20170809 03:30:04.582"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.583">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:04.583" status="PASS" endtime="20170809 03:30:04.583"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.584">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:04.583" status="PASS" endtime="20170809 03:30:04.584"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.585">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:04.584" status="PASS" endtime="20170809 03:30:04.585"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.763">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:04.586" status="PASS" endtime="20170809 03:30:04.763"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:04.763">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:04.763">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:04.585" status="PASS" endtime="20170809 03:30:04.763"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.764">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:04.764" status="PASS" endtime="20170809 03:30:04.764"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.765">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:04.765" status="PASS" endtime="20170809 03:30:04.765"></status>
</kw>
<status starttime="20170809 03:30:04.580" status="PASS" endtime="20170809 03:30:04.765"></status>
</kw>
<status starttime="20170809 03:30:04.580" status="PASS" endtime="20170809 03:30:04.765"></status>
</kw>
<status starttime="20170809 03:30:04.579" status="PASS" endtime="20170809 03:30:04.765"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.766">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:30:04.766" status="PASS" endtime="20170809 03:30:04.766"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.768">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:30:04.767" status="PASS" endtime="20170809 03:30:04.768"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.769">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:30:04.769" status="PASS" endtime="20170809 03:30:04.769"></status>
</kw>
<status starttime="20170809 03:30:04.768" status="PASS" endtime="20170809 03:30:04.770"></status>
</kw>
<status starttime="20170809 03:30:04.767" status="PASS" endtime="20170809 03:30:04.770"></status>
</kw>
<status starttime="20170809 03:30:04.766" status="PASS" endtime="20170809 03:30:04.770"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.855">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:04.855">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:04.770" status="PASS" endtime="20170809 03:30:04.855"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.857">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:04.856" status="PASS" endtime="20170809 03:30:04.857"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.858">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:04.857" status="PASS" endtime="20170809 03:30:04.858"></status>
</kw>
<status starttime="20170809 03:30:04.857" status="PASS" endtime="20170809 03:30:04.858"></status>
</kw>
<status starttime="20170809 03:30:04.856" status="PASS" endtime="20170809 03:30:04.858"></status>
</kw>
<status starttime="20170809 03:30:04.855" status="PASS" endtime="20170809 03:30:04.858"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:04.858">Delete All Sessions</msg>
<status starttime="20170809 03:30:04.858" status="PASS" endtime="20170809 03:30:04.858"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:04.859">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:04.578" status="PASS" endtime="20170809 03:30:04.859"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:04.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:04.859" status="PASS" endtime="20170809 03:30:04.859"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:04.860">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:04.860">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:04.860">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:30:04.860" status="PASS" endtime="20170809 03:30:04.860"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:04.860">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:30:04.577" status="PASS" endtime="20170809 03:30:04.860"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:04.861">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:30:04.576" status="PASS" endtime="20170809 03:30:04.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:30:04.861">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:30:04.861" status="FAIL" endtime="20170809 03:30:04.861"></status>
</kw>
<status starttime="20170809 03:30:04.576" status="FAIL" endtime="20170809 03:30:04.862"></status>
</kw>
<status starttime="20170809 03:30:03.943" status="FAIL" endtime="20170809 03:30:04.862"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:14.867">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:14.867" status="PASS" endtime="20170809 03:30:14.867"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:14.868">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:14.868" status="PASS" endtime="20170809 03:30:14.868"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:14.868">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:14.868" status="PASS" endtime="20170809 03:30:14.869"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:14.869">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:14.869" status="PASS" endtime="20170809 03:30:14.869"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.065">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:14.870" status="PASS" endtime="20170809 03:30:15.065"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:15.065">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:15.065">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:14.869" status="PASS" endtime="20170809 03:30:15.065"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.066">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:15.066" status="PASS" endtime="20170809 03:30:15.066"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.067">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:15.066" status="PASS" endtime="20170809 03:30:15.067"></status>
</kw>
<status starttime="20170809 03:30:14.866" status="PASS" endtime="20170809 03:30:15.067"></status>
</kw>
<status starttime="20170809 03:30:14.866" status="PASS" endtime="20170809 03:30:15.067"></status>
</kw>
<status starttime="20170809 03:30:14.865" status="PASS" endtime="20170809 03:30:15.067"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.068">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:30:15.067" status="PASS" endtime="20170809 03:30:15.068"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.070">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:15.069" status="PASS" endtime="20170809 03:30:15.070"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.071">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:15.071" status="PASS" endtime="20170809 03:30:15.071"></status>
</kw>
<status starttime="20170809 03:30:15.070" status="PASS" endtime="20170809 03:30:15.071"></status>
</kw>
<status starttime="20170809 03:30:15.069" status="PASS" endtime="20170809 03:30:15.071"></status>
</kw>
<status starttime="20170809 03:30:15.068" status="PASS" endtime="20170809 03:30:15.071"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.223">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:15.223">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:15.071" status="PASS" endtime="20170809 03:30:15.223"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.225">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:15.225" status="PASS" endtime="20170809 03:30:15.225"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.226">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:15.226" status="PASS" endtime="20170809 03:30:15.226"></status>
</kw>
<status starttime="20170809 03:30:15.225" status="PASS" endtime="20170809 03:30:15.226"></status>
</kw>
<status starttime="20170809 03:30:15.224" status="PASS" endtime="20170809 03:30:15.227"></status>
</kw>
<status starttime="20170809 03:30:15.224" status="PASS" endtime="20170809 03:30:15.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:15.227">Delete All Sessions</msg>
<status starttime="20170809 03:30:15.227" status="PASS" endtime="20170809 03:30:15.227"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:15.227">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:14.864" status="PASS" endtime="20170809 03:30:15.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.228">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:15.228" status="PASS" endtime="20170809 03:30:15.228"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.229">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:15.229">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:15.229">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:30:15.228" status="PASS" endtime="20170809 03:30:15.229"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:15.229">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:30:14.864" status="PASS" endtime="20170809 03:30:15.229"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:15.229">${power_state} = On</msg>
<status starttime="20170809 03:30:14.863" status="PASS" endtime="20170809 03:30:15.229"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:30:15.230" status="PASS" endtime="20170809 03:30:15.230"></status>
</kw>
<status starttime="20170809 03:30:14.863" status="PASS" endtime="20170809 03:30:15.230"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.234">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:15.233" status="PASS" endtime="20170809 03:30:15.234"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.235">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:15.235" status="PASS" endtime="20170809 03:30:15.235"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.236">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:15.235" status="PASS" endtime="20170809 03:30:15.236"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.236">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:15.236" status="PASS" endtime="20170809 03:30:15.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.611">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:15.237" status="PASS" endtime="20170809 03:30:15.611"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:15.612">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:15.612">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:15.236" status="PASS" endtime="20170809 03:30:15.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.612">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:15.612" status="PASS" endtime="20170809 03:30:15.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:15.613" status="PASS" endtime="20170809 03:30:15.613"></status>
</kw>
<status starttime="20170809 03:30:15.233" status="PASS" endtime="20170809 03:30:15.613"></status>
</kw>
<status starttime="20170809 03:30:15.232" status="PASS" endtime="20170809 03:30:15.613"></status>
</kw>
<status starttime="20170809 03:30:15.232" status="PASS" endtime="20170809 03:30:15.614"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.614">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:30:15.614" status="PASS" endtime="20170809 03:30:15.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.616">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:15.616" status="PASS" endtime="20170809 03:30:15.616"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.617">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:15.617" status="PASS" endtime="20170809 03:30:15.617"></status>
</kw>
<status starttime="20170809 03:30:15.616" status="PASS" endtime="20170809 03:30:15.617"></status>
</kw>
<status starttime="20170809 03:30:15.615" status="PASS" endtime="20170809 03:30:15.617"></status>
</kw>
<status starttime="20170809 03:30:15.614" status="PASS" endtime="20170809 03:30:15.618"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.740">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:15.740">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:15.618" status="PASS" endtime="20170809 03:30:15.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.742">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:15.742" status="PASS" endtime="20170809 03:30:15.742"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.743">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:15.743" status="PASS" endtime="20170809 03:30:15.743"></status>
</kw>
<status starttime="20170809 03:30:15.742" status="PASS" endtime="20170809 03:30:15.743"></status>
</kw>
<status starttime="20170809 03:30:15.741" status="PASS" endtime="20170809 03:30:15.744"></status>
</kw>
<status starttime="20170809 03:30:15.741" status="PASS" endtime="20170809 03:30:15.744"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:15.744">Delete All Sessions</msg>
<status starttime="20170809 03:30:15.744" status="PASS" endtime="20170809 03:30:15.744"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:15.744">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:15.231" status="PASS" endtime="20170809 03:30:15.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:15.745" status="PASS" endtime="20170809 03:30:15.745"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.745">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:15.746">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:15.746">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:30:15.745" status="PASS" endtime="20170809 03:30:15.746"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:15.746">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:30:15.231" status="PASS" endtime="20170809 03:30:15.746"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:15.746">${host_state} = Running</msg>
<status starttime="20170809 03:30:15.230" status="PASS" endtime="20170809 03:30:15.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:30:15.747" status="PASS" endtime="20170809 03:30:15.747"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:15.751">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:15.751" status="PASS" endtime="20170809 03:30:15.751"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.752">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:15.752" status="PASS" endtime="20170809 03:30:15.752"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.753">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:15.752" status="PASS" endtime="20170809 03:30:15.753"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:15.753">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:15.753" status="PASS" endtime="20170809 03:30:15.753"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:16.021">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:15.754" status="PASS" endtime="20170809 03:30:16.021"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:16.021">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:16.021">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:15.754" status="PASS" endtime="20170809 03:30:16.021"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:16.022">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:16.021" status="PASS" endtime="20170809 03:30:16.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:16.022">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:16.022" status="PASS" endtime="20170809 03:30:16.023"></status>
</kw>
<status starttime="20170809 03:30:15.750" status="PASS" endtime="20170809 03:30:16.023"></status>
</kw>
<status starttime="20170809 03:30:15.750" status="PASS" endtime="20170809 03:30:16.023"></status>
</kw>
<status starttime="20170809 03:30:15.749" status="PASS" endtime="20170809 03:30:16.023"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:16.023">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:30:16.023" status="PASS" endtime="20170809 03:30:16.024"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:16.026">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:30:16.025" status="PASS" endtime="20170809 03:30:16.026"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:16.027">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:30:16.027" status="PASS" endtime="20170809 03:30:16.027"></status>
</kw>
<status starttime="20170809 03:30:16.026" status="PASS" endtime="20170809 03:30:16.027"></status>
</kw>
<status starttime="20170809 03:30:16.024" status="PASS" endtime="20170809 03:30:16.027"></status>
</kw>
<status starttime="20170809 03:30:16.024" status="PASS" endtime="20170809 03:30:16.027"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:16.093">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:16.094">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:16.028" status="PASS" endtime="20170809 03:30:16.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:16.095">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:16.095" status="PASS" endtime="20170809 03:30:16.095"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:16.096">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:16.096" status="PASS" endtime="20170809 03:30:16.096"></status>
</kw>
<status starttime="20170809 03:30:16.096" status="PASS" endtime="20170809 03:30:16.097"></status>
</kw>
<status starttime="20170809 03:30:16.094" status="PASS" endtime="20170809 03:30:16.097"></status>
</kw>
<status starttime="20170809 03:30:16.094" status="PASS" endtime="20170809 03:30:16.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:16.097">Delete All Sessions</msg>
<status starttime="20170809 03:30:16.097" status="PASS" endtime="20170809 03:30:16.097"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:16.097">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:15.749" status="PASS" endtime="20170809 03:30:16.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:16.098">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:16.098" status="PASS" endtime="20170809 03:30:16.098"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:16.099">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:16.099">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:16.099">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:30:16.098" status="PASS" endtime="20170809 03:30:16.099"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:16.099">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:30:15.748" status="PASS" endtime="20170809 03:30:16.099"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:16.099">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:30:15.747" status="PASS" endtime="20170809 03:30:16.099"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:30:16.100">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:30:16.100" status="FAIL" endtime="20170809 03:30:16.100"></status>
</kw>
<status starttime="20170809 03:30:15.747" status="FAIL" endtime="20170809 03:30:16.100"></status>
</kw>
<status starttime="20170809 03:30:14.862" status="FAIL" endtime="20170809 03:30:16.100"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.106">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:26.106" status="PASS" endtime="20170809 03:30:26.106"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.107">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:26.107" status="PASS" endtime="20170809 03:30:26.107"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.108">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:26.107" status="PASS" endtime="20170809 03:30:26.108"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.108">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:26.108" status="PASS" endtime="20170809 03:30:26.108"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.308">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:26.109" status="PASS" endtime="20170809 03:30:26.309"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:26.309">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:26.309">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:26.109" status="PASS" endtime="20170809 03:30:26.309"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.309">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:26.309" status="PASS" endtime="20170809 03:30:26.310"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.310">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:26.310" status="PASS" endtime="20170809 03:30:26.310"></status>
</kw>
<status starttime="20170809 03:30:26.105" status="PASS" endtime="20170809 03:30:26.310"></status>
</kw>
<status starttime="20170809 03:30:26.105" status="PASS" endtime="20170809 03:30:26.310"></status>
</kw>
<status starttime="20170809 03:30:26.104" status="PASS" endtime="20170809 03:30:26.311"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.311">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:30:26.311" status="PASS" endtime="20170809 03:30:26.311"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.313">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:26.313" status="PASS" endtime="20170809 03:30:26.313"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.314">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:26.314" status="PASS" endtime="20170809 03:30:26.314"></status>
</kw>
<status starttime="20170809 03:30:26.314" status="PASS" endtime="20170809 03:30:26.314"></status>
</kw>
<status starttime="20170809 03:30:26.312" status="PASS" endtime="20170809 03:30:26.315"></status>
</kw>
<status starttime="20170809 03:30:26.311" status="PASS" endtime="20170809 03:30:26.315"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.378">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:26.378">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:26.315" status="PASS" endtime="20170809 03:30:26.378"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.380">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:26.379" status="PASS" endtime="20170809 03:30:26.380"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.380">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:26.380" status="PASS" endtime="20170809 03:30:26.381"></status>
</kw>
<status starttime="20170809 03:30:26.380" status="PASS" endtime="20170809 03:30:26.381"></status>
</kw>
<status starttime="20170809 03:30:26.379" status="PASS" endtime="20170809 03:30:26.381"></status>
</kw>
<status starttime="20170809 03:30:26.378" status="PASS" endtime="20170809 03:30:26.381"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:26.381">Delete All Sessions</msg>
<status starttime="20170809 03:30:26.381" status="PASS" endtime="20170809 03:30:26.381"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:26.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:26.103" status="PASS" endtime="20170809 03:30:26.382"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.382">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:26.382" status="PASS" endtime="20170809 03:30:26.382"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.383">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:26.383">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:26.383">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:30:26.383" status="PASS" endtime="20170809 03:30:26.383"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:26.383">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:30:26.102" status="PASS" endtime="20170809 03:30:26.383"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:26.384">${power_state} = On</msg>
<status starttime="20170809 03:30:26.102" status="PASS" endtime="20170809 03:30:26.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:30:26.384" status="PASS" endtime="20170809 03:30:26.384"></status>
</kw>
<status starttime="20170809 03:30:26.102" status="PASS" endtime="20170809 03:30:26.384"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.388">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:26.388" status="PASS" endtime="20170809 03:30:26.389"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.389">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:26.389" status="PASS" endtime="20170809 03:30:26.389"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.390">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:26.390" status="PASS" endtime="20170809 03:30:26.390"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.391">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:26.390" status="PASS" endtime="20170809 03:30:26.391"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.569">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:26.391" status="PASS" endtime="20170809 03:30:26.569"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:26.569">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:26.569">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:26.391" status="PASS" endtime="20170809 03:30:26.569"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.570">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:26.570" status="PASS" endtime="20170809 03:30:26.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:26.570" status="PASS" endtime="20170809 03:30:26.571"></status>
</kw>
<status starttime="20170809 03:30:26.387" status="PASS" endtime="20170809 03:30:26.571"></status>
</kw>
<status starttime="20170809 03:30:26.387" status="PASS" endtime="20170809 03:30:26.571"></status>
</kw>
<status starttime="20170809 03:30:26.386" status="PASS" endtime="20170809 03:30:26.571"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.572">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:30:26.571" status="PASS" endtime="20170809 03:30:26.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.574">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:26.573" status="PASS" endtime="20170809 03:30:26.574"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.575">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:26.575" status="PASS" endtime="20170809 03:30:26.575"></status>
</kw>
<status starttime="20170809 03:30:26.574" status="PASS" endtime="20170809 03:30:26.575"></status>
</kw>
<status starttime="20170809 03:30:26.572" status="PASS" endtime="20170809 03:30:26.575"></status>
</kw>
<status starttime="20170809 03:30:26.572" status="PASS" endtime="20170809 03:30:26.575"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.664">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:26.664">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:26.575" status="PASS" endtime="20170809 03:30:26.665"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.666">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:26.666" status="PASS" endtime="20170809 03:30:26.666"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.667">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:26.667" status="PASS" endtime="20170809 03:30:26.667"></status>
</kw>
<status starttime="20170809 03:30:26.667" status="PASS" endtime="20170809 03:30:26.668"></status>
</kw>
<status starttime="20170809 03:30:26.665" status="PASS" endtime="20170809 03:30:26.668"></status>
</kw>
<status starttime="20170809 03:30:26.665" status="PASS" endtime="20170809 03:30:26.668"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:26.668">Delete All Sessions</msg>
<status starttime="20170809 03:30:26.668" status="PASS" endtime="20170809 03:30:26.668"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:26.668">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:26.385" status="PASS" endtime="20170809 03:30:26.668"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.669">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:26.669" status="PASS" endtime="20170809 03:30:26.669"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.670">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:26.670">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:26.670">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:30:26.669" status="PASS" endtime="20170809 03:30:26.670"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:26.670">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:30:26.385" status="PASS" endtime="20170809 03:30:26.670"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:26.670">${host_state} = Running</msg>
<status starttime="20170809 03:30:26.385" status="PASS" endtime="20170809 03:30:26.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:30:26.671" status="PASS" endtime="20170809 03:30:26.671"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.675">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:26.675" status="PASS" endtime="20170809 03:30:26.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.676">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:26.676" status="PASS" endtime="20170809 03:30:26.676"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.677">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:26.677" status="PASS" endtime="20170809 03:30:26.677"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.678">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:26.677" status="PASS" endtime="20170809 03:30:26.678"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.880">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:26.678" status="PASS" endtime="20170809 03:30:26.880"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:26.880">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:26.880">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:26.678" status="PASS" endtime="20170809 03:30:26.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.881">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:26.880" status="PASS" endtime="20170809 03:30:26.881"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:26.881" status="PASS" endtime="20170809 03:30:26.881"></status>
</kw>
<status starttime="20170809 03:30:26.674" status="PASS" endtime="20170809 03:30:26.882"></status>
</kw>
<status starttime="20170809 03:30:26.674" status="PASS" endtime="20170809 03:30:26.882"></status>
</kw>
<status starttime="20170809 03:30:26.673" status="PASS" endtime="20170809 03:30:26.882"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.882">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:30:26.882" status="PASS" endtime="20170809 03:30:26.882"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.885">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:30:26.884" status="PASS" endtime="20170809 03:30:26.885"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.886">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:30:26.886" status="PASS" endtime="20170809 03:30:26.886"></status>
</kw>
<status starttime="20170809 03:30:26.885" status="PASS" endtime="20170809 03:30:26.886"></status>
</kw>
<status starttime="20170809 03:30:26.883" status="PASS" endtime="20170809 03:30:26.886"></status>
</kw>
<status starttime="20170809 03:30:26.883" status="PASS" endtime="20170809 03:30:26.886"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.968">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:26.968">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:26.886" status="PASS" endtime="20170809 03:30:26.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.970">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:26.970" status="PASS" endtime="20170809 03:30:26.970"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.971">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:26.971" status="PASS" endtime="20170809 03:30:26.971"></status>
</kw>
<status starttime="20170809 03:30:26.970" status="PASS" endtime="20170809 03:30:26.971"></status>
</kw>
<status starttime="20170809 03:30:26.969" status="PASS" endtime="20170809 03:30:26.972"></status>
</kw>
<status starttime="20170809 03:30:26.969" status="PASS" endtime="20170809 03:30:26.972"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:26.972">Delete All Sessions</msg>
<status starttime="20170809 03:30:26.972" status="PASS" endtime="20170809 03:30:26.972"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:26.972">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:26.673" status="PASS" endtime="20170809 03:30:26.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:26.973">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:26.973" status="PASS" endtime="20170809 03:30:26.973"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:26.974">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:26.974">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:26.974">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:30:26.973" status="PASS" endtime="20170809 03:30:26.974"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:26.974">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:30:26.672" status="PASS" endtime="20170809 03:30:26.974"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:26.974">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:30:26.671" status="PASS" endtime="20170809 03:30:26.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:30:26.975">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:30:26.975" status="FAIL" endtime="20170809 03:30:26.975"></status>
</kw>
<status starttime="20170809 03:30:26.671" status="FAIL" endtime="20170809 03:30:26.975"></status>
</kw>
<status starttime="20170809 03:30:26.101" status="FAIL" endtime="20170809 03:30:26.975"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:36.980">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:36.980" status="PASS" endtime="20170809 03:30:36.981"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:36.981">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:36.981" status="PASS" endtime="20170809 03:30:36.981"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:36.982">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:36.982" status="PASS" endtime="20170809 03:30:36.982"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:36.983">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:36.982" status="PASS" endtime="20170809 03:30:36.983"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.171">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:36.983" status="PASS" endtime="20170809 03:30:37.171"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:37.171">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:37.171">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:36.983" status="PASS" endtime="20170809 03:30:37.171"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.172">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:37.172" status="PASS" endtime="20170809 03:30:37.172"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.173">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:37.173" status="PASS" endtime="20170809 03:30:37.173"></status>
</kw>
<status starttime="20170809 03:30:36.980" status="PASS" endtime="20170809 03:30:37.173"></status>
</kw>
<status starttime="20170809 03:30:36.979" status="PASS" endtime="20170809 03:30:37.173"></status>
</kw>
<status starttime="20170809 03:30:36.978" status="PASS" endtime="20170809 03:30:37.173"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.174">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:30:37.174" status="PASS" endtime="20170809 03:30:37.174"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.176">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:37.175" status="PASS" endtime="20170809 03:30:37.176"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.177">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:37.177" status="PASS" endtime="20170809 03:30:37.177"></status>
</kw>
<status starttime="20170809 03:30:37.176" status="PASS" endtime="20170809 03:30:37.177"></status>
</kw>
<status starttime="20170809 03:30:37.175" status="PASS" endtime="20170809 03:30:37.177"></status>
</kw>
<status starttime="20170809 03:30:37.174" status="PASS" endtime="20170809 03:30:37.177"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.256">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:37.256">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:37.178" status="PASS" endtime="20170809 03:30:37.256"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.258">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:37.258" status="PASS" endtime="20170809 03:30:37.258"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.259">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:37.259" status="PASS" endtime="20170809 03:30:37.259"></status>
</kw>
<status starttime="20170809 03:30:37.258" status="PASS" endtime="20170809 03:30:37.259"></status>
</kw>
<status starttime="20170809 03:30:37.257" status="PASS" endtime="20170809 03:30:37.260"></status>
</kw>
<status starttime="20170809 03:30:37.257" status="PASS" endtime="20170809 03:30:37.260"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:37.260">Delete All Sessions</msg>
<status starttime="20170809 03:30:37.260" status="PASS" endtime="20170809 03:30:37.260"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:37.260">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:36.978" status="PASS" endtime="20170809 03:30:37.260"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.261">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:37.261" status="PASS" endtime="20170809 03:30:37.261"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.261">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:37.262">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:37.262">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:30:37.261" status="PASS" endtime="20170809 03:30:37.262"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:37.262">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:30:36.977" status="PASS" endtime="20170809 03:30:37.262"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:37.262">${power_state} = On</msg>
<status starttime="20170809 03:30:36.977" status="PASS" endtime="20170809 03:30:37.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:30:37.263" status="PASS" endtime="20170809 03:30:37.263"></status>
</kw>
<status starttime="20170809 03:30:36.977" status="PASS" endtime="20170809 03:30:37.263"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.270">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:37.269" status="PASS" endtime="20170809 03:30:37.270"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.271">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:37.271" status="PASS" endtime="20170809 03:30:37.271"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.271">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:37.271" status="PASS" endtime="20170809 03:30:37.272"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.272">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:37.272" status="PASS" endtime="20170809 03:30:37.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.483">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:37.273" status="PASS" endtime="20170809 03:30:37.483"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:37.483">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:37.483">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:37.272" status="PASS" endtime="20170809 03:30:37.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.484">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:37.483" status="PASS" endtime="20170809 03:30:37.484"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.484">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:37.484" status="PASS" endtime="20170809 03:30:37.485"></status>
</kw>
<status starttime="20170809 03:30:37.266" status="PASS" endtime="20170809 03:30:37.485"></status>
</kw>
<status starttime="20170809 03:30:37.265" status="PASS" endtime="20170809 03:30:37.485"></status>
</kw>
<status starttime="20170809 03:30:37.265" status="PASS" endtime="20170809 03:30:37.485"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.485">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:30:37.485" status="PASS" endtime="20170809 03:30:37.486"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.488">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:37.487" status="PASS" endtime="20170809 03:30:37.488"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.488">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:37.488" status="PASS" endtime="20170809 03:30:37.489"></status>
</kw>
<status starttime="20170809 03:30:37.488" status="PASS" endtime="20170809 03:30:37.489"></status>
</kw>
<status starttime="20170809 03:30:37.486" status="PASS" endtime="20170809 03:30:37.489"></status>
</kw>
<status starttime="20170809 03:30:37.486" status="PASS" endtime="20170809 03:30:37.489"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.595">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:37.595">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:37.489" status="PASS" endtime="20170809 03:30:37.595"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.597">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:37.596" status="PASS" endtime="20170809 03:30:37.597"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.598">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:37.598" status="PASS" endtime="20170809 03:30:37.598"></status>
</kw>
<status starttime="20170809 03:30:37.597" status="PASS" endtime="20170809 03:30:37.598"></status>
</kw>
<status starttime="20170809 03:30:37.596" status="PASS" endtime="20170809 03:30:37.599"></status>
</kw>
<status starttime="20170809 03:30:37.595" status="PASS" endtime="20170809 03:30:37.599"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:37.599">Delete All Sessions</msg>
<status starttime="20170809 03:30:37.599" status="PASS" endtime="20170809 03:30:37.599"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:37.599">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:37.264" status="PASS" endtime="20170809 03:30:37.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.600">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:37.600" status="PASS" endtime="20170809 03:30:37.600"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.601">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:37.601">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:37.601">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:30:37.600" status="PASS" endtime="20170809 03:30:37.601"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:37.601">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:30:37.264" status="PASS" endtime="20170809 03:30:37.601"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:37.601">${host_state} = Running</msg>
<status starttime="20170809 03:30:37.263" status="PASS" endtime="20170809 03:30:37.601"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:30:37.602" status="PASS" endtime="20170809 03:30:37.602"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.607">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:37.607" status="PASS" endtime="20170809 03:30:37.607"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.608">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:37.608" status="PASS" endtime="20170809 03:30:37.608"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.609">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:37.608" status="PASS" endtime="20170809 03:30:37.609"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.609">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:37.609" status="PASS" endtime="20170809 03:30:37.609"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.792">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:37.610" status="PASS" endtime="20170809 03:30:37.792"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:37.793">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:37.793">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:37.610" status="PASS" endtime="20170809 03:30:37.793"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.793">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:37.793" status="PASS" endtime="20170809 03:30:37.793"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.794">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:37.794" status="PASS" endtime="20170809 03:30:37.795"></status>
</kw>
<status starttime="20170809 03:30:37.606" status="PASS" endtime="20170809 03:30:37.795"></status>
</kw>
<status starttime="20170809 03:30:37.606" status="PASS" endtime="20170809 03:30:37.795"></status>
</kw>
<status starttime="20170809 03:30:37.605" status="PASS" endtime="20170809 03:30:37.795"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.796">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:30:37.795" status="PASS" endtime="20170809 03:30:37.796"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.798">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:30:37.797" status="PASS" endtime="20170809 03:30:37.798"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.799">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:30:37.798" status="PASS" endtime="20170809 03:30:37.799"></status>
</kw>
<status starttime="20170809 03:30:37.798" status="PASS" endtime="20170809 03:30:37.799"></status>
</kw>
<status starttime="20170809 03:30:37.796" status="PASS" endtime="20170809 03:30:37.799"></status>
</kw>
<status starttime="20170809 03:30:37.796" status="PASS" endtime="20170809 03:30:37.799"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.891">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:37.891">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:37.799" status="PASS" endtime="20170809 03:30:37.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.893">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:37.892" status="PASS" endtime="20170809 03:30:37.893"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.894">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:37.893" status="PASS" endtime="20170809 03:30:37.894"></status>
</kw>
<status starttime="20170809 03:30:37.893" status="PASS" endtime="20170809 03:30:37.894"></status>
</kw>
<status starttime="20170809 03:30:37.892" status="PASS" endtime="20170809 03:30:37.894"></status>
</kw>
<status starttime="20170809 03:30:37.891" status="PASS" endtime="20170809 03:30:37.894"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:37.894">Delete All Sessions</msg>
<status starttime="20170809 03:30:37.894" status="PASS" endtime="20170809 03:30:37.895"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:37.895">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:37.603" status="PASS" endtime="20170809 03:30:37.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:37.895">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:37.895" status="PASS" endtime="20170809 03:30:37.895"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:37.896">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:37.896">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:37.896">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:30:37.896" status="PASS" endtime="20170809 03:30:37.896"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:37.896">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:30:37.603" status="PASS" endtime="20170809 03:30:37.896"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:37.897">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:30:37.602" status="PASS" endtime="20170809 03:30:37.897"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:30:37.897">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:30:37.897" status="FAIL" endtime="20170809 03:30:37.898"></status>
</kw>
<status starttime="20170809 03:30:37.602" status="FAIL" endtime="20170809 03:30:37.898"></status>
</kw>
<status starttime="20170809 03:30:36.976" status="FAIL" endtime="20170809 03:30:37.898"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:47.903">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:47.903" status="PASS" endtime="20170809 03:30:47.904"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:47.905">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:47.904" status="PASS" endtime="20170809 03:30:47.905"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:47.905">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:47.905" status="PASS" endtime="20170809 03:30:47.905"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:47.906">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:47.905" status="PASS" endtime="20170809 03:30:47.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.084">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:47.907" status="PASS" endtime="20170809 03:30:48.085"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:48.085">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:48.085">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:47.906" status="PASS" endtime="20170809 03:30:48.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.085">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:48.085" status="PASS" endtime="20170809 03:30:48.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.086">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:48.086" status="PASS" endtime="20170809 03:30:48.086"></status>
</kw>
<status starttime="20170809 03:30:47.902" status="PASS" endtime="20170809 03:30:48.086"></status>
</kw>
<status starttime="20170809 03:30:47.902" status="PASS" endtime="20170809 03:30:48.086"></status>
</kw>
<status starttime="20170809 03:30:47.901" status="PASS" endtime="20170809 03:30:48.087"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.087">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:30:48.087" status="PASS" endtime="20170809 03:30:48.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.089">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:48.089" status="PASS" endtime="20170809 03:30:48.089"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.090">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:48.090" status="PASS" endtime="20170809 03:30:48.090"></status>
</kw>
<status starttime="20170809 03:30:48.089" status="PASS" endtime="20170809 03:30:48.090"></status>
</kw>
<status starttime="20170809 03:30:48.088" status="PASS" endtime="20170809 03:30:48.091"></status>
</kw>
<status starttime="20170809 03:30:48.087" status="PASS" endtime="20170809 03:30:48.091"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.169">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:48.169">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:48.091" status="PASS" endtime="20170809 03:30:48.169"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.171">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:48.170" status="PASS" endtime="20170809 03:30:48.171"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.172">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:48.172" status="PASS" endtime="20170809 03:30:48.172"></status>
</kw>
<status starttime="20170809 03:30:48.171" status="PASS" endtime="20170809 03:30:48.172"></status>
</kw>
<status starttime="20170809 03:30:48.170" status="PASS" endtime="20170809 03:30:48.173"></status>
</kw>
<status starttime="20170809 03:30:48.169" status="PASS" endtime="20170809 03:30:48.173"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:48.173">Delete All Sessions</msg>
<status starttime="20170809 03:30:48.173" status="PASS" endtime="20170809 03:30:48.173"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:48.173">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:47.900" status="PASS" endtime="20170809 03:30:48.173"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:48.174" status="PASS" endtime="20170809 03:30:48.174"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.175">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:48.175">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:48.175">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:30:48.174" status="PASS" endtime="20170809 03:30:48.175"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:48.175">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:30:47.900" status="PASS" endtime="20170809 03:30:48.175"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:48.175">${power_state} = On</msg>
<status starttime="20170809 03:30:47.899" status="PASS" endtime="20170809 03:30:48.175"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:30:48.176" status="PASS" endtime="20170809 03:30:48.176"></status>
</kw>
<status starttime="20170809 03:30:47.899" status="PASS" endtime="20170809 03:30:48.176"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.180">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:48.179" status="PASS" endtime="20170809 03:30:48.180"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.181">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:48.180" status="PASS" endtime="20170809 03:30:48.181"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.181">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:48.181" status="PASS" endtime="20170809 03:30:48.181"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.182">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:48.182" status="PASS" endtime="20170809 03:30:48.182"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.383">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:48.183" status="PASS" endtime="20170809 03:30:48.383"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:48.383">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:48.383">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:48.182" status="PASS" endtime="20170809 03:30:48.383"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.384">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:48.384" status="PASS" endtime="20170809 03:30:48.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:48.384" status="PASS" endtime="20170809 03:30:48.385"></status>
</kw>
<status starttime="20170809 03:30:48.179" status="PASS" endtime="20170809 03:30:48.385"></status>
</kw>
<status starttime="20170809 03:30:48.178" status="PASS" endtime="20170809 03:30:48.385"></status>
</kw>
<status starttime="20170809 03:30:48.178" status="PASS" endtime="20170809 03:30:48.385"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.386">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:30:48.385" status="PASS" endtime="20170809 03:30:48.386"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.388">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:48.387" status="PASS" endtime="20170809 03:30:48.388"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.389">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:48.389" status="PASS" endtime="20170809 03:30:48.389"></status>
</kw>
<status starttime="20170809 03:30:48.388" status="PASS" endtime="20170809 03:30:48.389"></status>
</kw>
<status starttime="20170809 03:30:48.386" status="PASS" endtime="20170809 03:30:48.389"></status>
</kw>
<status starttime="20170809 03:30:48.386" status="PASS" endtime="20170809 03:30:48.389"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.478">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:48.478">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:48.390" status="PASS" endtime="20170809 03:30:48.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.480">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:48.479" status="PASS" endtime="20170809 03:30:48.480"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.481">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:48.480" status="PASS" endtime="20170809 03:30:48.481"></status>
</kw>
<status starttime="20170809 03:30:48.480" status="PASS" endtime="20170809 03:30:48.481"></status>
</kw>
<status starttime="20170809 03:30:48.479" status="PASS" endtime="20170809 03:30:48.481"></status>
</kw>
<status starttime="20170809 03:30:48.478" status="PASS" endtime="20170809 03:30:48.481"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:48.481">Delete All Sessions</msg>
<status starttime="20170809 03:30:48.481" status="PASS" endtime="20170809 03:30:48.481"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:48.482">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:48.177" status="PASS" endtime="20170809 03:30:48.482"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.482">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:48.482" status="PASS" endtime="20170809 03:30:48.482"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.483">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:48.483">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:48.483">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:30:48.483" status="PASS" endtime="20170809 03:30:48.483"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:48.483">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:30:48.177" status="PASS" endtime="20170809 03:30:48.483"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:48.484">${host_state} = Running</msg>
<status starttime="20170809 03:30:48.176" status="PASS" endtime="20170809 03:30:48.484"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:30:48.484" status="PASS" endtime="20170809 03:30:48.484"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.488">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:48.488" status="PASS" endtime="20170809 03:30:48.489"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.489">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:48.489" status="PASS" endtime="20170809 03:30:48.489"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.490">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:48.490" status="PASS" endtime="20170809 03:30:48.490"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.491">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:48.490" status="PASS" endtime="20170809 03:30:48.491"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.745">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:48.491" status="PASS" endtime="20170809 03:30:48.745"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:48.745">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:48.745">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:48.491" status="PASS" endtime="20170809 03:30:48.745"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.746">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:48.745" status="PASS" endtime="20170809 03:30:48.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:48.746" status="PASS" endtime="20170809 03:30:48.747"></status>
</kw>
<status starttime="20170809 03:30:48.487" status="PASS" endtime="20170809 03:30:48.747"></status>
</kw>
<status starttime="20170809 03:30:48.487" status="PASS" endtime="20170809 03:30:48.747"></status>
</kw>
<status starttime="20170809 03:30:48.487" status="PASS" endtime="20170809 03:30:48.747"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.748">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:30:48.748" status="PASS" endtime="20170809 03:30:48.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.751">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:30:48.750" status="PASS" endtime="20170809 03:30:48.751"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.753">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:30:48.752" status="PASS" endtime="20170809 03:30:48.753"></status>
</kw>
<status starttime="20170809 03:30:48.752" status="PASS" endtime="20170809 03:30:48.753"></status>
</kw>
<status starttime="20170809 03:30:48.749" status="PASS" endtime="20170809 03:30:48.753"></status>
</kw>
<status starttime="20170809 03:30:48.748" status="PASS" endtime="20170809 03:30:48.753"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.846">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:48.846">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:48.753" status="PASS" endtime="20170809 03:30:48.846"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.847">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:48.847" status="PASS" endtime="20170809 03:30:48.848"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.848">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:48.848" status="PASS" endtime="20170809 03:30:48.848"></status>
</kw>
<status starttime="20170809 03:30:48.848" status="PASS" endtime="20170809 03:30:48.849"></status>
</kw>
<status starttime="20170809 03:30:48.847" status="PASS" endtime="20170809 03:30:48.849"></status>
</kw>
<status starttime="20170809 03:30:48.846" status="PASS" endtime="20170809 03:30:48.849"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:48.849">Delete All Sessions</msg>
<status starttime="20170809 03:30:48.849" status="PASS" endtime="20170809 03:30:48.849"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:48.849">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:48.486" status="PASS" endtime="20170809 03:30:48.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:48.850">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:48.850" status="PASS" endtime="20170809 03:30:48.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:48.851">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:48.851">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:48.851">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:30:48.850" status="PASS" endtime="20170809 03:30:48.851"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:48.851">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:30:48.485" status="PASS" endtime="20170809 03:30:48.851"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:48.852">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:30:48.485" status="PASS" endtime="20170809 03:30:48.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:30:48.852">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:30:48.852" status="FAIL" endtime="20170809 03:30:48.852"></status>
</kw>
<status starttime="20170809 03:30:48.485" status="FAIL" endtime="20170809 03:30:48.853"></status>
</kw>
<status starttime="20170809 03:30:47.898" status="FAIL" endtime="20170809 03:30:48.853"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:58.858">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:58.858" status="PASS" endtime="20170809 03:30:58.858"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:58.859">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:58.859" status="PASS" endtime="20170809 03:30:58.859"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:58.860">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:58.859" status="PASS" endtime="20170809 03:30:58.860"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:58.860">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:58.860" status="PASS" endtime="20170809 03:30:58.860"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.038">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:58.861" status="PASS" endtime="20170809 03:30:59.038"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:59.038">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:59.038">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:58.861" status="PASS" endtime="20170809 03:30:59.038"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.039">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:59.039" status="PASS" endtime="20170809 03:30:59.039"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.040">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:59.039" status="PASS" endtime="20170809 03:30:59.040"></status>
</kw>
<status starttime="20170809 03:30:58.857" status="PASS" endtime="20170809 03:30:59.040"></status>
</kw>
<status starttime="20170809 03:30:58.856" status="PASS" endtime="20170809 03:30:59.040"></status>
</kw>
<status starttime="20170809 03:30:58.856" status="PASS" endtime="20170809 03:30:59.040"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.041">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:30:59.040" status="PASS" endtime="20170809 03:30:59.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.043">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:59.042" status="PASS" endtime="20170809 03:30:59.043"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.044">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:59.043" status="PASS" endtime="20170809 03:30:59.044"></status>
</kw>
<status starttime="20170809 03:30:59.043" status="PASS" endtime="20170809 03:30:59.044"></status>
</kw>
<status starttime="20170809 03:30:59.041" status="PASS" endtime="20170809 03:30:59.044"></status>
</kw>
<status starttime="20170809 03:30:59.041" status="PASS" endtime="20170809 03:30:59.044"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.108">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:59.108">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:59.044" status="PASS" endtime="20170809 03:30:59.108"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.110">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:59.109" status="PASS" endtime="20170809 03:30:59.110"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.111">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:59.111" status="PASS" endtime="20170809 03:30:59.111"></status>
</kw>
<status starttime="20170809 03:30:59.110" status="PASS" endtime="20170809 03:30:59.111"></status>
</kw>
<status starttime="20170809 03:30:59.109" status="PASS" endtime="20170809 03:30:59.111"></status>
</kw>
<status starttime="20170809 03:30:59.108" status="PASS" endtime="20170809 03:30:59.111"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:59.112">Delete All Sessions</msg>
<status starttime="20170809 03:30:59.112" status="PASS" endtime="20170809 03:30:59.112"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:59.112">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:58.855" status="PASS" endtime="20170809 03:30:59.112"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.113">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:59.112" status="PASS" endtime="20170809 03:30:59.113"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.113">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:59.113">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:59.114">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:30:59.113" status="PASS" endtime="20170809 03:30:59.114"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:59.114">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:30:58.855" status="PASS" endtime="20170809 03:30:59.114"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:59.114">${power_state} = On</msg>
<status starttime="20170809 03:30:58.854" status="PASS" endtime="20170809 03:30:59.114"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:30:59.115" status="PASS" endtime="20170809 03:30:59.115"></status>
</kw>
<status starttime="20170809 03:30:58.854" status="PASS" endtime="20170809 03:30:59.115"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.118">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:59.118" status="PASS" endtime="20170809 03:30:59.119"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.119">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:59.119" status="PASS" endtime="20170809 03:30:59.119"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.120">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:59.120" status="PASS" endtime="20170809 03:30:59.120"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.121">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:59.120" status="PASS" endtime="20170809 03:30:59.121"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.352">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:59.121" status="PASS" endtime="20170809 03:30:59.352"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:59.352">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:59.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:59.121" status="PASS" endtime="20170809 03:30:59.352"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.353">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:59.353" status="PASS" endtime="20170809 03:30:59.353"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:59.353" status="PASS" endtime="20170809 03:30:59.354"></status>
</kw>
<status starttime="20170809 03:30:59.118" status="PASS" endtime="20170809 03:30:59.354"></status>
</kw>
<status starttime="20170809 03:30:59.117" status="PASS" endtime="20170809 03:30:59.354"></status>
</kw>
<status starttime="20170809 03:30:59.117" status="PASS" endtime="20170809 03:30:59.354"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.355">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:30:59.354" status="PASS" endtime="20170809 03:30:59.355"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.357">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:59.356" status="PASS" endtime="20170809 03:30:59.358"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.358">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:30:59.358" status="PASS" endtime="20170809 03:30:59.359"></status>
</kw>
<status starttime="20170809 03:30:59.358" status="PASS" endtime="20170809 03:30:59.359"></status>
</kw>
<status starttime="20170809 03:30:59.356" status="PASS" endtime="20170809 03:30:59.359"></status>
</kw>
<status starttime="20170809 03:30:59.355" status="PASS" endtime="20170809 03:30:59.359"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.448">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:59.448">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:59.359" status="PASS" endtime="20170809 03:30:59.448"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.450">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:59.450" status="PASS" endtime="20170809 03:30:59.450"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.451">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:59.451" status="PASS" endtime="20170809 03:30:59.451"></status>
</kw>
<status starttime="20170809 03:30:59.450" status="PASS" endtime="20170809 03:30:59.451"></status>
</kw>
<status starttime="20170809 03:30:59.449" status="PASS" endtime="20170809 03:30:59.451"></status>
</kw>
<status starttime="20170809 03:30:59.449" status="PASS" endtime="20170809 03:30:59.451"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:59.452">Delete All Sessions</msg>
<status starttime="20170809 03:30:59.452" status="PASS" endtime="20170809 03:30:59.452"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:59.452">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:59.116" status="PASS" endtime="20170809 03:30:59.452"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.453">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:59.452" status="PASS" endtime="20170809 03:30:59.453"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.453">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:59.453">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:59.453">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:30:59.453" status="PASS" endtime="20170809 03:30:59.454"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:59.454">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:30:59.115" status="PASS" endtime="20170809 03:30:59.454"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:59.454">${host_state} = Running</msg>
<status starttime="20170809 03:30:59.115" status="PASS" endtime="20170809 03:30:59.454"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:30:59.454" status="PASS" endtime="20170809 03:30:59.455"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.459">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:30:59.458" status="PASS" endtime="20170809 03:30:59.459"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.459">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:30:59.459" status="PASS" endtime="20170809 03:30:59.460"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.460">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:30:59.460" status="PASS" endtime="20170809 03:30:59.460"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.461">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:30:59.460" status="PASS" endtime="20170809 03:30:59.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.639">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:30:59.462" status="PASS" endtime="20170809 03:30:59.640"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:59.640">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:30:59.640">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:59.461" status="PASS" endtime="20170809 03:30:59.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.641">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:59.640" status="PASS" endtime="20170809 03:30:59.641"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:59.641" status="PASS" endtime="20170809 03:30:59.641"></status>
</kw>
<status starttime="20170809 03:30:59.458" status="PASS" endtime="20170809 03:30:59.641"></status>
</kw>
<status starttime="20170809 03:30:59.457" status="PASS" endtime="20170809 03:30:59.642"></status>
</kw>
<status starttime="20170809 03:30:59.457" status="PASS" endtime="20170809 03:30:59.642"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.642">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:30:59.642" status="PASS" endtime="20170809 03:30:59.642"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.644">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:30:59.644" status="PASS" endtime="20170809 03:30:59.644"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.645">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:30:59.645" status="PASS" endtime="20170809 03:30:59.645"></status>
</kw>
<status starttime="20170809 03:30:59.645" status="PASS" endtime="20170809 03:30:59.646"></status>
</kw>
<status starttime="20170809 03:30:59.643" status="PASS" endtime="20170809 03:30:59.646"></status>
</kw>
<status starttime="20170809 03:30:59.643" status="PASS" endtime="20170809 03:30:59.646"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.738">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:30:59.738">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:59.646" status="PASS" endtime="20170809 03:30:59.738"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.740">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:59.740" status="PASS" endtime="20170809 03:30:59.740"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.741">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:30:59.741" status="PASS" endtime="20170809 03:30:59.741"></status>
</kw>
<status starttime="20170809 03:30:59.740" status="PASS" endtime="20170809 03:30:59.741"></status>
</kw>
<status starttime="20170809 03:30:59.739" status="PASS" endtime="20170809 03:30:59.741"></status>
</kw>
<status starttime="20170809 03:30:59.739" status="PASS" endtime="20170809 03:30:59.742"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:30:59.742">Delete All Sessions</msg>
<status starttime="20170809 03:30:59.742" status="PASS" endtime="20170809 03:30:59.742"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:59.742">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:30:59.456" status="PASS" endtime="20170809 03:30:59.742"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:30:59.743">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:30:59.743" status="PASS" endtime="20170809 03:30:59.743"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:30:59.744">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:30:59.744">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:30:59.744">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:30:59.743" status="PASS" endtime="20170809 03:30:59.744"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:59.744">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:30:59.456" status="PASS" endtime="20170809 03:30:59.744"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:30:59.744">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:30:59.455" status="PASS" endtime="20170809 03:30:59.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:30:59.745">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:30:59.745" status="FAIL" endtime="20170809 03:30:59.745"></status>
</kw>
<status starttime="20170809 03:30:59.455" status="FAIL" endtime="20170809 03:30:59.745"></status>
</kw>
<status starttime="20170809 03:30:58.853" status="FAIL" endtime="20170809 03:30:59.745"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:09.751">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:09.751" status="PASS" endtime="20170809 03:31:09.752"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:09.752">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:09.752" status="PASS" endtime="20170809 03:31:09.752"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:09.753">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:09.752" status="PASS" endtime="20170809 03:31:09.753"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:09.753">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:09.753" status="PASS" endtime="20170809 03:31:09.754"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:09.951">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:09.754" status="PASS" endtime="20170809 03:31:09.951"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:09.952">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:09.952">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:09.754" status="PASS" endtime="20170809 03:31:09.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:09.952">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:09.952" status="PASS" endtime="20170809 03:31:09.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:09.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:09.953" status="PASS" endtime="20170809 03:31:09.953"></status>
</kw>
<status starttime="20170809 03:31:09.750" status="PASS" endtime="20170809 03:31:09.953"></status>
</kw>
<status starttime="20170809 03:31:09.749" status="PASS" endtime="20170809 03:31:09.953"></status>
</kw>
<status starttime="20170809 03:31:09.749" status="PASS" endtime="20170809 03:31:09.953"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:09.954">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:31:09.954" status="PASS" endtime="20170809 03:31:09.954"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:09.956">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:09.956" status="PASS" endtime="20170809 03:31:09.957"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:09.957">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:09.957" status="PASS" endtime="20170809 03:31:09.957"></status>
</kw>
<status starttime="20170809 03:31:09.957" status="PASS" endtime="20170809 03:31:09.958"></status>
</kw>
<status starttime="20170809 03:31:09.955" status="PASS" endtime="20170809 03:31:09.958"></status>
</kw>
<status starttime="20170809 03:31:09.954" status="PASS" endtime="20170809 03:31:09.958"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.123">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:10.123">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:09.958" status="PASS" endtime="20170809 03:31:10.123"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.129">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:10.125" status="PASS" endtime="20170809 03:31:10.130"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.131">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:10.130" status="PASS" endtime="20170809 03:31:10.131"></status>
</kw>
<status starttime="20170809 03:31:10.130" status="PASS" endtime="20170809 03:31:10.131"></status>
</kw>
<status starttime="20170809 03:31:10.124" status="PASS" endtime="20170809 03:31:10.131"></status>
</kw>
<status starttime="20170809 03:31:10.124" status="PASS" endtime="20170809 03:31:10.131"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:10.131">Delete All Sessions</msg>
<status starttime="20170809 03:31:10.131" status="PASS" endtime="20170809 03:31:10.131"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:10.132">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:09.748" status="PASS" endtime="20170809 03:31:10.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.132">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:10.132" status="PASS" endtime="20170809 03:31:10.132"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.133">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:10.133">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:10.133">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:31:10.133" status="PASS" endtime="20170809 03:31:10.133"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:10.133">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:31:09.747" status="PASS" endtime="20170809 03:31:10.133"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:10.134">${power_state} = On</msg>
<status starttime="20170809 03:31:09.747" status="PASS" endtime="20170809 03:31:10.134"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:31:10.134" status="PASS" endtime="20170809 03:31:10.134"></status>
</kw>
<status starttime="20170809 03:31:09.747" status="PASS" endtime="20170809 03:31:10.134"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.138">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:10.138" status="PASS" endtime="20170809 03:31:10.139"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.140">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:10.139" status="PASS" endtime="20170809 03:31:10.140"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.140">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:10.140" status="PASS" endtime="20170809 03:31:10.140"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.141">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:10.140" status="PASS" endtime="20170809 03:31:10.141"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.335">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:10.142" status="PASS" endtime="20170809 03:31:10.335"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:10.335">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:10.335">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:10.141" status="PASS" endtime="20170809 03:31:10.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.336">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:10.336" status="PASS" endtime="20170809 03:31:10.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:10.336" status="PASS" endtime="20170809 03:31:10.337"></status>
</kw>
<status starttime="20170809 03:31:10.138" status="PASS" endtime="20170809 03:31:10.337"></status>
</kw>
<status starttime="20170809 03:31:10.137" status="PASS" endtime="20170809 03:31:10.337"></status>
</kw>
<status starttime="20170809 03:31:10.136" status="PASS" endtime="20170809 03:31:10.337"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.338">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:31:10.337" status="PASS" endtime="20170809 03:31:10.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.341">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:10.340" status="PASS" endtime="20170809 03:31:10.341"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.342">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:10.341" status="PASS" endtime="20170809 03:31:10.342"></status>
</kw>
<status starttime="20170809 03:31:10.341" status="PASS" endtime="20170809 03:31:10.342"></status>
</kw>
<status starttime="20170809 03:31:10.339" status="PASS" endtime="20170809 03:31:10.342"></status>
</kw>
<status starttime="20170809 03:31:10.338" status="PASS" endtime="20170809 03:31:10.342"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.431">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:10.432">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:10.342" status="PASS" endtime="20170809 03:31:10.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.433">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:10.433" status="PASS" endtime="20170809 03:31:10.433"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.434">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:10.434" status="PASS" endtime="20170809 03:31:10.435"></status>
</kw>
<status starttime="20170809 03:31:10.434" status="PASS" endtime="20170809 03:31:10.435"></status>
</kw>
<status starttime="20170809 03:31:10.432" status="PASS" endtime="20170809 03:31:10.435"></status>
</kw>
<status starttime="20170809 03:31:10.432" status="PASS" endtime="20170809 03:31:10.435"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:10.435">Delete All Sessions</msg>
<status starttime="20170809 03:31:10.435" status="PASS" endtime="20170809 03:31:10.435"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:10.436">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:10.135" status="PASS" endtime="20170809 03:31:10.436"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.436">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:10.436" status="PASS" endtime="20170809 03:31:10.436"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.437">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:10.437">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:10.437">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:31:10.436" status="PASS" endtime="20170809 03:31:10.437"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:10.437">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:31:10.135" status="PASS" endtime="20170809 03:31:10.437"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:10.438">${host_state} = Running</msg>
<status starttime="20170809 03:31:10.135" status="PASS" endtime="20170809 03:31:10.438"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:31:10.438" status="PASS" endtime="20170809 03:31:10.438"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.443">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:10.443" status="PASS" endtime="20170809 03:31:10.443"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.444">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:10.444" status="PASS" endtime="20170809 03:31:10.444"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.444">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:10.444" status="PASS" endtime="20170809 03:31:10.445"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.445">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:10.445" status="PASS" endtime="20170809 03:31:10.445"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.657">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:10.446" status="PASS" endtime="20170809 03:31:10.657"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:10.657">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:10.657">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:10.445" status="PASS" endtime="20170809 03:31:10.657"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.658">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:10.657" status="PASS" endtime="20170809 03:31:10.658"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:10.658" status="PASS" endtime="20170809 03:31:10.658"></status>
</kw>
<status starttime="20170809 03:31:10.442" status="PASS" endtime="20170809 03:31:10.659"></status>
</kw>
<status starttime="20170809 03:31:10.441" status="PASS" endtime="20170809 03:31:10.659"></status>
</kw>
<status starttime="20170809 03:31:10.441" status="PASS" endtime="20170809 03:31:10.659"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.659">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:31:10.659" status="PASS" endtime="20170809 03:31:10.659"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.662">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:31:10.661" status="PASS" endtime="20170809 03:31:10.662"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.663">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:31:10.662" status="PASS" endtime="20170809 03:31:10.663"></status>
</kw>
<status starttime="20170809 03:31:10.662" status="PASS" endtime="20170809 03:31:10.663"></status>
</kw>
<status starttime="20170809 03:31:10.660" status="PASS" endtime="20170809 03:31:10.663"></status>
</kw>
<status starttime="20170809 03:31:10.660" status="PASS" endtime="20170809 03:31:10.663"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.765">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:10.765">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:10.663" status="PASS" endtime="20170809 03:31:10.765"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.767">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:10.766" status="PASS" endtime="20170809 03:31:10.767"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.768">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:10.768" status="PASS" endtime="20170809 03:31:10.768"></status>
</kw>
<status starttime="20170809 03:31:10.767" status="PASS" endtime="20170809 03:31:10.768"></status>
</kw>
<status starttime="20170809 03:31:10.766" status="PASS" endtime="20170809 03:31:10.768"></status>
</kw>
<status starttime="20170809 03:31:10.765" status="PASS" endtime="20170809 03:31:10.768"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:10.769">Delete All Sessions</msg>
<status starttime="20170809 03:31:10.769" status="PASS" endtime="20170809 03:31:10.769"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:10.769">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:10.440" status="PASS" endtime="20170809 03:31:10.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:10.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:10.769" status="PASS" endtime="20170809 03:31:10.770"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:10.770">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:10.770">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:10.770">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:31:10.770" status="PASS" endtime="20170809 03:31:10.770"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:10.771">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:31:10.439" status="PASS" endtime="20170809 03:31:10.771"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:10.771">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:31:10.439" status="PASS" endtime="20170809 03:31:10.771"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:31:10.772">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:31:10.771" status="FAIL" endtime="20170809 03:31:10.772"></status>
</kw>
<status starttime="20170809 03:31:10.438" status="FAIL" endtime="20170809 03:31:10.772"></status>
</kw>
<status starttime="20170809 03:31:09.746" status="FAIL" endtime="20170809 03:31:10.772"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:20.778">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:20.777" status="PASS" endtime="20170809 03:31:20.778"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:20.779">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:20.778" status="PASS" endtime="20170809 03:31:20.779"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:20.779">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:20.779" status="PASS" endtime="20170809 03:31:20.779"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:20.780">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:20.779" status="PASS" endtime="20170809 03:31:20.780"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:20.961">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:20.781" status="PASS" endtime="20170809 03:31:20.961"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:20.961">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:20.961">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:20.780" status="PASS" endtime="20170809 03:31:20.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:20.962">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:20.961" status="PASS" endtime="20170809 03:31:20.962"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:20.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:20.962" status="PASS" endtime="20170809 03:31:20.962"></status>
</kw>
<status starttime="20170809 03:31:20.777" status="PASS" endtime="20170809 03:31:20.963"></status>
</kw>
<status starttime="20170809 03:31:20.776" status="PASS" endtime="20170809 03:31:20.963"></status>
</kw>
<status starttime="20170809 03:31:20.775" status="PASS" endtime="20170809 03:31:20.963"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:20.963">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:31:20.963" status="PASS" endtime="20170809 03:31:20.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:20.965">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:20.965" status="PASS" endtime="20170809 03:31:20.966"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:20.966">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:20.966" status="PASS" endtime="20170809 03:31:20.967"></status>
</kw>
<status starttime="20170809 03:31:20.966" status="PASS" endtime="20170809 03:31:20.967"></status>
</kw>
<status starttime="20170809 03:31:20.964" status="PASS" endtime="20170809 03:31:20.967"></status>
</kw>
<status starttime="20170809 03:31:20.964" status="PASS" endtime="20170809 03:31:20.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.030">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:21.030">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:20.967" status="PASS" endtime="20170809 03:31:21.030"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.032">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:21.032" status="PASS" endtime="20170809 03:31:21.032"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.033">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:21.033" status="PASS" endtime="20170809 03:31:21.033"></status>
</kw>
<status starttime="20170809 03:31:21.033" status="PASS" endtime="20170809 03:31:21.034"></status>
</kw>
<status starttime="20170809 03:31:21.031" status="PASS" endtime="20170809 03:31:21.034"></status>
</kw>
<status starttime="20170809 03:31:21.030" status="PASS" endtime="20170809 03:31:21.034"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:21.034">Delete All Sessions</msg>
<status starttime="20170809 03:31:21.034" status="PASS" endtime="20170809 03:31:21.034"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:21.034">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:20.774" status="PASS" endtime="20170809 03:31:21.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.035">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:21.035" status="PASS" endtime="20170809 03:31:21.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.036">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:21.036">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:21.036">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:31:21.035" status="PASS" endtime="20170809 03:31:21.036"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:21.036">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:31:20.774" status="PASS" endtime="20170809 03:31:21.036"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:21.037">${power_state} = On</msg>
<status starttime="20170809 03:31:20.773" status="PASS" endtime="20170809 03:31:21.037"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:31:21.037" status="PASS" endtime="20170809 03:31:21.037"></status>
</kw>
<status starttime="20170809 03:31:20.773" status="PASS" endtime="20170809 03:31:21.037"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.041">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:21.040" status="PASS" endtime="20170809 03:31:21.041"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.042">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:21.041" status="PASS" endtime="20170809 03:31:21.042"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.042">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:21.042" status="PASS" endtime="20170809 03:31:21.042"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.043">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:21.043" status="PASS" endtime="20170809 03:31:21.043"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.268">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:21.044" status="PASS" endtime="20170809 03:31:21.269"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:21.269">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:21.269">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:21.043" status="PASS" endtime="20170809 03:31:21.269"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.270">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:21.269" status="PASS" endtime="20170809 03:31:21.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.270">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:21.270" status="PASS" endtime="20170809 03:31:21.270"></status>
</kw>
<status starttime="20170809 03:31:21.040" status="PASS" endtime="20170809 03:31:21.270"></status>
</kw>
<status starttime="20170809 03:31:21.039" status="PASS" endtime="20170809 03:31:21.271"></status>
</kw>
<status starttime="20170809 03:31:21.039" status="PASS" endtime="20170809 03:31:21.271"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.271">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:31:21.271" status="PASS" endtime="20170809 03:31:21.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.274">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:21.273" status="PASS" endtime="20170809 03:31:21.274"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.275">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:21.274" status="PASS" endtime="20170809 03:31:21.275"></status>
</kw>
<status starttime="20170809 03:31:21.274" status="PASS" endtime="20170809 03:31:21.275"></status>
</kw>
<status starttime="20170809 03:31:21.272" status="PASS" endtime="20170809 03:31:21.275"></status>
</kw>
<status starttime="20170809 03:31:21.272" status="PASS" endtime="20170809 03:31:21.275"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.383">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:21.383">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:21.275" status="PASS" endtime="20170809 03:31:21.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.386">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:21.385" status="PASS" endtime="20170809 03:31:21.386"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.387">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:21.386" status="PASS" endtime="20170809 03:31:21.387"></status>
</kw>
<status starttime="20170809 03:31:21.386" status="PASS" endtime="20170809 03:31:21.387"></status>
</kw>
<status starttime="20170809 03:31:21.384" status="PASS" endtime="20170809 03:31:21.387"></status>
</kw>
<status starttime="20170809 03:31:21.384" status="PASS" endtime="20170809 03:31:21.387"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:21.387">Delete All Sessions</msg>
<status starttime="20170809 03:31:21.387" status="PASS" endtime="20170809 03:31:21.387"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:21.388">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:21.038" status="PASS" endtime="20170809 03:31:21.388"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.388">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:21.388" status="PASS" endtime="20170809 03:31:21.388"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.389">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:21.389">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:21.389">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:31:21.389" status="PASS" endtime="20170809 03:31:21.389"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:21.389">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:31:21.038" status="PASS" endtime="20170809 03:31:21.389"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:21.390">${host_state} = Running</msg>
<status starttime="20170809 03:31:21.037" status="PASS" endtime="20170809 03:31:21.390"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:31:21.390" status="PASS" endtime="20170809 03:31:21.390"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.394">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:21.394" status="PASS" endtime="20170809 03:31:21.395"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.395">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:21.395" status="PASS" endtime="20170809 03:31:21.395"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.396">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:21.396" status="PASS" endtime="20170809 03:31:21.396"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.397">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:21.397" status="PASS" endtime="20170809 03:31:21.397"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.594">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:21.398" status="PASS" endtime="20170809 03:31:21.594"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:21.595">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:21.595">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:21.398" status="PASS" endtime="20170809 03:31:21.595"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.595">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:21.595" status="PASS" endtime="20170809 03:31:21.596"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.596">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:21.596" status="PASS" endtime="20170809 03:31:21.596"></status>
</kw>
<status starttime="20170809 03:31:21.393" status="PASS" endtime="20170809 03:31:21.596"></status>
</kw>
<status starttime="20170809 03:31:21.393" status="PASS" endtime="20170809 03:31:21.597"></status>
</kw>
<status starttime="20170809 03:31:21.392" status="PASS" endtime="20170809 03:31:21.597"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.597">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:31:21.597" status="PASS" endtime="20170809 03:31:21.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.599">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:31:21.599" status="PASS" endtime="20170809 03:31:21.599"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.601">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:31:21.600" status="PASS" endtime="20170809 03:31:21.601"></status>
</kw>
<status starttime="20170809 03:31:21.600" status="PASS" endtime="20170809 03:31:21.601"></status>
</kw>
<status starttime="20170809 03:31:21.598" status="PASS" endtime="20170809 03:31:21.601"></status>
</kw>
<status starttime="20170809 03:31:21.598" status="PASS" endtime="20170809 03:31:21.601"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.668">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:21.668">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:21.602" status="PASS" endtime="20170809 03:31:21.668"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.670">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:21.669" status="PASS" endtime="20170809 03:31:21.670"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.671">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:21.670" status="PASS" endtime="20170809 03:31:21.671"></status>
</kw>
<status starttime="20170809 03:31:21.670" status="PASS" endtime="20170809 03:31:21.671"></status>
</kw>
<status starttime="20170809 03:31:21.669" status="PASS" endtime="20170809 03:31:21.671"></status>
</kw>
<status starttime="20170809 03:31:21.668" status="PASS" endtime="20170809 03:31:21.671"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:21.671">Delete All Sessions</msg>
<status starttime="20170809 03:31:21.671" status="PASS" endtime="20170809 03:31:21.672"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:21.672">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:21.392" status="PASS" endtime="20170809 03:31:21.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:21.672">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:21.672" status="PASS" endtime="20170809 03:31:21.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:21.673">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:21.673">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:21.673">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:31:21.673" status="PASS" endtime="20170809 03:31:21.673"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:21.673">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:31:21.391" status="PASS" endtime="20170809 03:31:21.673"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:21.674">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:31:21.391" status="PASS" endtime="20170809 03:31:21.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:31:21.674">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:31:21.674" status="FAIL" endtime="20170809 03:31:21.674"></status>
</kw>
<status starttime="20170809 03:31:21.390" status="FAIL" endtime="20170809 03:31:21.675"></status>
</kw>
<status starttime="20170809 03:31:20.772" status="FAIL" endtime="20170809 03:31:21.675"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:31.680">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:31.680" status="PASS" endtime="20170809 03:31:31.681"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:31.681">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:31.681" status="PASS" endtime="20170809 03:31:31.681"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:31.682">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:31.682" status="PASS" endtime="20170809 03:31:31.682"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:31.683">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:31.682" status="PASS" endtime="20170809 03:31:31.683"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:31.894">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:31.683" status="PASS" endtime="20170809 03:31:31.894"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:31.895">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:31.895">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:31.683" status="PASS" endtime="20170809 03:31:31.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:31.895">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:31.895" status="PASS" endtime="20170809 03:31:31.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:31.896">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:31.896" status="PASS" endtime="20170809 03:31:31.896"></status>
</kw>
<status starttime="20170809 03:31:31.679" status="PASS" endtime="20170809 03:31:31.896"></status>
</kw>
<status starttime="20170809 03:31:31.678" status="PASS" endtime="20170809 03:31:31.896"></status>
</kw>
<status starttime="20170809 03:31:31.678" status="PASS" endtime="20170809 03:31:31.897"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:31.897">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:31:31.897" status="PASS" endtime="20170809 03:31:31.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:31.899">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:31.899" status="PASS" endtime="20170809 03:31:31.899"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:31.900">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:31.900" status="PASS" endtime="20170809 03:31:31.900"></status>
</kw>
<status starttime="20170809 03:31:31.900" status="PASS" endtime="20170809 03:31:31.901"></status>
</kw>
<status starttime="20170809 03:31:31.898" status="PASS" endtime="20170809 03:31:31.901"></status>
</kw>
<status starttime="20170809 03:31:31.897" status="PASS" endtime="20170809 03:31:31.901"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:31.964">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:31.964">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:31.901" status="PASS" endtime="20170809 03:31:31.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:31.966">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:31.966" status="PASS" endtime="20170809 03:31:31.966"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:31.967">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:31.967" status="PASS" endtime="20170809 03:31:31.967"></status>
</kw>
<status starttime="20170809 03:31:31.967" status="PASS" endtime="20170809 03:31:31.968"></status>
</kw>
<status starttime="20170809 03:31:31.965" status="PASS" endtime="20170809 03:31:31.968"></status>
</kw>
<status starttime="20170809 03:31:31.964" status="PASS" endtime="20170809 03:31:31.968"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:31.968">Delete All Sessions</msg>
<status starttime="20170809 03:31:31.968" status="PASS" endtime="20170809 03:31:31.968"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:31.968">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:31.677" status="PASS" endtime="20170809 03:31:31.968"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:31.969">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:31.969" status="PASS" endtime="20170809 03:31:31.969"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:31.970">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:31.970">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:31.970">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status starttime="20170809 03:31:31.969" status="PASS" endtime="20170809 03:31:31.970"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:31.970">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:31:31.677" status="PASS" endtime="20170809 03:31:31.970"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:31.971">${power_state} = On</msg>
<status starttime="20170809 03:31:31.676" status="PASS" endtime="20170809 03:31:31.971"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:31:31.971" status="PASS" endtime="20170809 03:31:31.971"></status>
</kw>
<status starttime="20170809 03:31:31.676" status="PASS" endtime="20170809 03:31:31.971"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:31.975">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:31.974" status="PASS" endtime="20170809 03:31:31.975"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:31.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:31.975" status="PASS" endtime="20170809 03:31:31.976"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:31.976">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:31.976" status="PASS" endtime="20170809 03:31:31.976"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:31.977">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:31.977" status="PASS" endtime="20170809 03:31:31.977"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.168">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:31.978" status="PASS" endtime="20170809 03:31:32.168"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:32.169">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:32.169">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:31.977" status="PASS" endtime="20170809 03:31:32.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.169">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:32.169" status="PASS" endtime="20170809 03:31:32.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:32.170" status="PASS" endtime="20170809 03:31:32.170"></status>
</kw>
<status starttime="20170809 03:31:31.974" status="PASS" endtime="20170809 03:31:32.170"></status>
</kw>
<status starttime="20170809 03:31:31.973" status="PASS" endtime="20170809 03:31:32.170"></status>
</kw>
<status starttime="20170809 03:31:31.973" status="PASS" endtime="20170809 03:31:32.170"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.171">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:31:32.171" status="PASS" endtime="20170809 03:31:32.171"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.174">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:32.172" status="PASS" endtime="20170809 03:31:32.174"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.175">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:32.174" status="PASS" endtime="20170809 03:31:32.175"></status>
</kw>
<status starttime="20170809 03:31:32.174" status="PASS" endtime="20170809 03:31:32.175"></status>
</kw>
<status starttime="20170809 03:31:32.172" status="PASS" endtime="20170809 03:31:32.175"></status>
</kw>
<status starttime="20170809 03:31:32.171" status="PASS" endtime="20170809 03:31:32.175"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.296">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:32.297">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:32.175" status="PASS" endtime="20170809 03:31:32.297"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.299">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:32.298" status="PASS" endtime="20170809 03:31:32.299"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.300">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:32.299" status="PASS" endtime="20170809 03:31:32.300"></status>
</kw>
<status starttime="20170809 03:31:32.299" status="PASS" endtime="20170809 03:31:32.300"></status>
</kw>
<status starttime="20170809 03:31:32.298" status="PASS" endtime="20170809 03:31:32.300"></status>
</kw>
<status starttime="20170809 03:31:32.297" status="PASS" endtime="20170809 03:31:32.300"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:32.300">Delete All Sessions</msg>
<status starttime="20170809 03:31:32.300" status="PASS" endtime="20170809 03:31:32.300"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:32.301">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:31.972" status="PASS" endtime="20170809 03:31:32.301"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.301">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:32.301" status="PASS" endtime="20170809 03:31:32.301"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.302">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:32.302">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:32.302">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:31:32.302" status="PASS" endtime="20170809 03:31:32.302"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:32.302">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:31:31.972" status="PASS" endtime="20170809 03:31:32.302"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:32.303">${host_state} = Running</msg>
<status starttime="20170809 03:31:31.971" status="PASS" endtime="20170809 03:31:32.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:31:32.303" status="PASS" endtime="20170809 03:31:32.303"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.307">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:32.307" status="PASS" endtime="20170809 03:31:32.307"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.308">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:32.308" status="PASS" endtime="20170809 03:31:32.308"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.309">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:32.308" status="PASS" endtime="20170809 03:31:32.309"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.309">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:32.309" status="PASS" endtime="20170809 03:31:32.309"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.594">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:32.310" status="PASS" endtime="20170809 03:31:32.595"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:32.595">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:32.595">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:32.310" status="PASS" endtime="20170809 03:31:32.595"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.596">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:32.595" status="PASS" endtime="20170809 03:31:32.596"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.596">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:32.596" status="PASS" endtime="20170809 03:31:32.596"></status>
</kw>
<status starttime="20170809 03:31:32.306" status="PASS" endtime="20170809 03:31:32.596"></status>
</kw>
<status starttime="20170809 03:31:32.306" status="PASS" endtime="20170809 03:31:32.597"></status>
</kw>
<status starttime="20170809 03:31:32.305" status="PASS" endtime="20170809 03:31:32.597"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.597">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:31:32.597" status="PASS" endtime="20170809 03:31:32.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.599">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:31:32.599" status="PASS" endtime="20170809 03:31:32.600"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.601">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:31:32.600" status="PASS" endtime="20170809 03:31:32.601"></status>
</kw>
<status starttime="20170809 03:31:32.600" status="PASS" endtime="20170809 03:31:32.601"></status>
</kw>
<status starttime="20170809 03:31:32.598" status="PASS" endtime="20170809 03:31:32.601"></status>
</kw>
<status starttime="20170809 03:31:32.598" status="PASS" endtime="20170809 03:31:32.601"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.667">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:32.667">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:32.601" status="PASS" endtime="20170809 03:31:32.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.669">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:32.669" status="PASS" endtime="20170809 03:31:32.669"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.670">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:32.670" status="PASS" endtime="20170809 03:31:32.670"></status>
</kw>
<status starttime="20170809 03:31:32.669" status="PASS" endtime="20170809 03:31:32.670"></status>
</kw>
<status starttime="20170809 03:31:32.668" status="PASS" endtime="20170809 03:31:32.670"></status>
</kw>
<status starttime="20170809 03:31:32.668" status="PASS" endtime="20170809 03:31:32.670"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:32.671">Delete All Sessions</msg>
<status starttime="20170809 03:31:32.671" status="PASS" endtime="20170809 03:31:32.671"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:32.671">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:32.305" status="PASS" endtime="20170809 03:31:32.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.672">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:32.671" status="PASS" endtime="20170809 03:31:32.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.672">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:32.673">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:32.673">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170809 03:31:32.672" status="PASS" endtime="20170809 03:31:32.673"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:32.673">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:31:32.304" status="PASS" endtime="20170809 03:31:32.673"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:32.673">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:31:32.304" status="PASS" endtime="20170809 03:31:32.673"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:31:32.674">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:31:32.674" status="FAIL" endtime="20170809 03:31:32.674"></status>
</kw>
<status starttime="20170809 03:31:32.303" status="FAIL" endtime="20170809 03:31:32.674"></status>
</kw>
<status starttime="20170809 03:31:31.675" status="FAIL" endtime="20170809 03:31:32.674"></status>
</kw>
<msg level="FAIL" timestamp="20170809 03:31:32.675">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:21:21.707" status="FAIL" endtime="20170809 03:31:32.675"></status>
</kw>
<status starttime="20170809 03:21:20.638" status="FAIL" endtime="20170809 03:31:32.675"></status>
</kw>
<status starttime="20170809 03:21:12.577" status="FAIL" endtime="20170809 03:31:32.675"></status>
</kw>
<status starttime="20170809 03:21:12.577" status="FAIL" endtime="20170809 03:31:32.675"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.680">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:32.680" status="PASS" endtime="20170809 03:31:32.681"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.681">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:32.681" status="PASS" endtime="20170809 03:31:32.681"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.682">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:32.682" status="PASS" endtime="20170809 03:31:32.682"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.683">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:32.682" status="PASS" endtime="20170809 03:31:32.683"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.899">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:32.683" status="PASS" endtime="20170809 03:31:32.899"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:32.899">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:32.899">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:32.683" status="PASS" endtime="20170809 03:31:32.899"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.900">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:32.899" status="PASS" endtime="20170809 03:31:32.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:32.900" status="PASS" endtime="20170809 03:31:32.901"></status>
</kw>
<status starttime="20170809 03:31:32.680" status="PASS" endtime="20170809 03:31:32.901"></status>
</kw>
<status starttime="20170809 03:31:32.679" status="PASS" endtime="20170809 03:31:32.901"></status>
</kw>
<status starttime="20170809 03:31:32.678" status="PASS" endtime="20170809 03:31:32.901"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.902">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:31:32.901" status="PASS" endtime="20170809 03:31:32.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.904">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:32.903" status="PASS" endtime="20170809 03:31:32.904"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:32.905">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:31:32.904" status="PASS" endtime="20170809 03:31:32.905"></status>
</kw>
<status starttime="20170809 03:31:32.904" status="PASS" endtime="20170809 03:31:32.905"></status>
</kw>
<status starttime="20170809 03:31:32.902" status="PASS" endtime="20170809 03:31:32.905"></status>
</kw>
<status starttime="20170809 03:31:32.902" status="PASS" endtime="20170809 03:31:32.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.994">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:32.994">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:32.905" status="PASS" endtime="20170809 03:31:32.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:32.996">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:32.995" status="PASS" endtime="20170809 03:31:32.996"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:33.000">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:31:33.000" status="PASS" endtime="20170809 03:31:33.000"></status>
</kw>
<status starttime="20170809 03:31:32.996" status="PASS" endtime="20170809 03:31:33.001"></status>
</kw>
<status starttime="20170809 03:31:32.995" status="PASS" endtime="20170809 03:31:33.001"></status>
</kw>
<status starttime="20170809 03:31:32.994" status="PASS" endtime="20170809 03:31:33.001"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:33.001">Delete All Sessions</msg>
<status starttime="20170809 03:31:33.001" status="PASS" endtime="20170809 03:31:33.001"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:33.001">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:32.677" status="PASS" endtime="20170809 03:31:33.001"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:33.002">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:33.002" status="PASS" endtime="20170809 03:31:33.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:33.003">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:33.003">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:33.003">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170809 03:31:33.002" status="PASS" endtime="20170809 03:31:33.003"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:33.003">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:31:32.677" status="PASS" endtime="20170809 03:31:33.003"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:33.003">${host_state} = Running</msg>
<status starttime="20170809 03:31:32.676" status="PASS" endtime="20170809 03:31:33.003"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:31:33.005">Running != Quiesced</msg>
<status starttime="20170809 03:31:33.004" status="FAIL" endtime="20170809 03:31:33.005"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:33.005">${status} = False</msg>
<status starttime="20170809 03:31:33.004" status="PASS" endtime="20170809 03:31:33.005"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:33.005">${status} = False</msg>
<status starttime="20170809 03:31:32.676" status="PASS" endtime="20170809 03:31:33.006"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:33.041">Length is 10</msg>
<status starttime="20170809 03:31:33.041" status="PASS" endtime="20170809 03:31:33.041"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:33.048">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 03:31:36.063">${RC} = 0</msg>
<msg level="INFO" timestamp="20170809 03:31:36.063">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.73 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.633 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status starttime="20170809 03:31:33.041" status="PASS" endtime="20170809 03:31:36.064"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:36.067">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.73 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.633 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.590 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.647 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.590/0.900/1.731/0.480 ms</msg>
<status starttime="20170809 03:31:36.066" status="PASS" endtime="20170809 03:31:36.067"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170809 03:31:36.067" status="PASS" endtime="20170809 03:31:36.068"></status>
</kw>
<status starttime="20170809 03:31:33.040" status="PASS" endtime="20170809 03:31:36.068"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:36.086">${cur_time} = 2017-08-09 03:31:36:085556</msg>
<status starttime="20170809 03:31:36.085" status="PASS" endtime="20170809 03:31:36.086"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:36.086">${cur_time} = 20170809033136085556</msg>
<status starttime="20170809 03:31:36.086" status="PASS" endtime="20170809 03:31:36.086"></status>
</kw>
<status starttime="20170809 03:31:36.085" status="PASS" endtime="20170809 03:31:36.087"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:36.087">${FFDC_TIME} = 20170809033136085556</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:36.100">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170809 03:31:36.100" status="PASS" endtime="20170809 03:31:36.100"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:36.101">${suite_name} = 20170809033136085556_TestsTestBasicPoweron</msg>
<status starttime="20170809 03:31:36.101" status="PASS" endtime="20170809 03:31:36.101"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:36.101">${test_name} = PowerOnTest</msg>
<status starttime="20170809 03:31:36.101" status="PASS" endtime="20170809 03:31:36.102"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:36.102">${test_name} = 20170809033136085556_PowerOnTest</msg>
<status starttime="20170809 03:31:36.102" status="PASS" endtime="20170809 03:31:36.102"></status>
</kw>
<status starttime="20170809 03:31:36.099" status="PASS" endtime="20170809 03:31:36.102"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:36.103">${FFDC_DIR_PATH} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170809 03:31:36.103">${FFDC_PREFIX} = 20170809033136085556_</msg>
<msg level="INFO" timestamp="20170809 03:31:36.133">${LOG_PREFIX} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.135">Created directory '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.134" status="PASS" endtime="20170809 03:31:36.135"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:36.139">${FFDC_FILE_PATH} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.172">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.171" status="PASS" endtime="20170809 03:31:36.172"></status>
</kw>
<status starttime="20170809 03:31:36.171" status="PASS" endtime="20170809 03:31:36.172"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.174">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.173" status="PASS" endtime="20170809 03:31:36.174"></status>
</kw>
<status starttime="20170809 03:31:36.173" status="PASS" endtime="20170809 03:31:36.174"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.175">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.175" status="PASS" endtime="20170809 03:31:36.175"></status>
</kw>
<status starttime="20170809 03:31:36.174" status="PASS" endtime="20170809 03:31:36.175"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.176">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.176" status="PASS" endtime="20170809 03:31:36.176"></status>
</kw>
<status starttime="20170809 03:31:36.175" status="PASS" endtime="20170809 03:31:36.177"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.178">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.177" status="PASS" endtime="20170809 03:31:36.178"></status>
</kw>
<status starttime="20170809 03:31:36.177" status="PASS" endtime="20170809 03:31:36.178"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.179">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.179" status="PASS" endtime="20170809 03:31:36.179"></status>
</kw>
<status starttime="20170809 03:31:36.178" status="PASS" endtime="20170809 03:31:36.179"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.182">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.182" status="PASS" endtime="20170809 03:31:36.182"></status>
</kw>
<status starttime="20170809 03:31:36.179" status="PASS" endtime="20170809 03:31:36.182"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.184">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.183" status="PASS" endtime="20170809 03:31:36.184"></status>
</kw>
<status starttime="20170809 03:31:36.182" status="PASS" endtime="20170809 03:31:36.184"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.185">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.185" status="PASS" endtime="20170809 03:31:36.185"></status>
</kw>
<status starttime="20170809 03:31:36.184" status="PASS" endtime="20170809 03:31:36.185"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.187">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.187" status="PASS" endtime="20170809 03:31:36.187"></status>
</kw>
<status starttime="20170809 03:31:36.186" status="PASS" endtime="20170809 03:31:36.187"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.189">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.188" status="PASS" endtime="20170809 03:31:36.189"></status>
</kw>
<status starttime="20170809 03:31:36.188" status="PASS" endtime="20170809 03:31:36.189"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.190">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.189" status="PASS" endtime="20170809 03:31:36.190"></status>
</kw>
<status starttime="20170809 03:31:36.189" status="PASS" endtime="20170809 03:31:36.190"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.191">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.191" status="PASS" endtime="20170809 03:31:36.191"></status>
</kw>
<status starttime="20170809 03:31:36.190" status="PASS" endtime="20170809 03:31:36.191"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:36.243">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:36.244">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170809 03:31:36.321">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 03:31:36.337">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170809 03:31:36.337">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 03:31:36.338">${rc} = 0</msg>
<status starttime="20170809 03:31:36.192" status="PASS" endtime="20170809 03:31:36.338"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:36.338">Length is 0</msg>
<status starttime="20170809 03:31:36.338" status="PASS" endtime="20170809 03:31:36.339"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:36.339">Length is 11</msg>
<status starttime="20170809 03:31:36.339" status="PASS" endtime="20170809 03:31:36.339"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:36.340">${model_name} = Witherspoon</msg>
<status starttime="20170809 03:31:36.192" status="PASS" endtime="20170809 03:31:36.340"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.341">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.341" status="PASS" endtime="20170809 03:31:36.342"></status>
</kw>
<status starttime="20170809 03:31:36.340" status="PASS" endtime="20170809 03:31:36.342"></status>
</kw>
<status starttime="20170809 03:31:36.185" status="PASS" endtime="20170809 03:31:36.342"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.343">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.343" status="PASS" endtime="20170809 03:31:36.343"></status>
</kw>
<status starttime="20170809 03:31:36.342" status="PASS" endtime="20170809 03:31:36.343"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:36.344">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170809 03:31:36.343" status="PASS" endtime="20170809 03:31:36.344"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.346">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.345" status="PASS" endtime="20170809 03:31:36.346"></status>
</kw>
<status starttime="20170809 03:31:36.345" status="PASS" endtime="20170809 03:31:36.346"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.347">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.347" status="PASS" endtime="20170809 03:31:36.347"></status>
</kw>
<status starttime="20170809 03:31:36.346" status="PASS" endtime="20170809 03:31:36.347"></status>
</kw>
<status starttime="20170809 03:31:36.344" status="PASS" endtime="20170809 03:31:36.347"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.349">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.348" status="PASS" endtime="20170809 03:31:36.349"></status>
</kw>
<status starttime="20170809 03:31:36.348" status="PASS" endtime="20170809 03:31:36.350"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.351">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.351" status="PASS" endtime="20170809 03:31:36.351"></status>
</kw>
<status starttime="20170809 03:31:36.350" status="PASS" endtime="20170809 03:31:36.351"></status>
</kw>
<status starttime="20170809 03:31:36.347" status="PASS" endtime="20170809 03:31:36.351"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.355">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.354" status="PASS" endtime="20170809 03:31:36.355"></status>
</kw>
<status starttime="20170809 03:31:36.352" status="PASS" endtime="20170809 03:31:36.355"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.356">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.356" status="PASS" endtime="20170809 03:31:36.356"></status>
</kw>
<status starttime="20170809 03:31:36.355" status="PASS" endtime="20170809 03:31:36.356"></status>
</kw>
<status starttime="20170809 03:31:36.351" status="PASS" endtime="20170809 03:31:36.357"></status>
</kw>
<status starttime="20170809 03:31:36.344" status="PASS" endtime="20170809 03:31:36.357"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:36.358">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:36.357" status="PASS" endtime="20170809 03:31:36.358"></status>
</kw>
<status starttime="20170809 03:31:36.357" status="PASS" endtime="20170809 03:31:36.358"></status>
</kw>
<status starttime="20170809 03:31:36.170" status="PASS" endtime="20170809 03:31:36.358"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:36.369">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170809 03:31:36.369" status="PASS" endtime="20170809 03:31:36.369"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:36.371">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Req...</msg>
<status starttime="20170809 03:31:36.370" status="PASS" endtime="20170809 03:31:36.371"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170809 03:31:36.371" status="PASS" endtime="20170809 03:31:36.372"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:36.372">@{ffdc_function_list} = [ OS FFDC | Core Files | FFDC Generic Report | BMC Specific Files | Get Request FFDC | SEL Log ]</msg>
<status starttime="20170809 03:31:36.371" status="PASS" endtime="20170809 03:31:36.372"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 03:31:36.374" status="PASS" endtime="20170809 03:31:36.374"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:36.374">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:36.374">${ret_values} = None</msg>
<status starttime="20170809 03:31:36.373" status="PASS" endtime="20170809 03:31:36.374"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 03:31:36.374" status="PASS" endtime="20170809 03:31:36.375"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:36.427">Returning from the enclosing user keyword.</msg>
<status starttime="20170809 03:31:36.427" status="PASS" endtime="20170809 03:31:36.427"></status>
</kw>
<status starttime="20170809 03:31:36.426" status="PASS" endtime="20170809 03:31:36.427"></status>
</kw>
<status starttime="20170809 03:31:36.375" status="PASS" endtime="20170809 03:31:36.428"></status>
</kw>
<status starttime="20170809 03:31:36.372" status="PASS" endtime="20170809 03:31:36.428"></status>
</kw>
<status starttime="20170809 03:31:36.372" status="PASS" endtime="20170809 03:31:36.428"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 03:31:36.429" status="PASS" endtime="20170809 03:31:36.430"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:36.430">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:36.430">${ret_values} = None</msg>
<status starttime="20170809 03:31:36.429" status="PASS" endtime="20170809 03:31:36.430"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 03:31:36.430" status="PASS" endtime="20170809 03:31:36.430"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:36.536">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:36.538">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170809 03:31:36.594">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170809 03:31:36.618">${core_files} = None</msg>
<msg level="INFO" timestamp="20170809 03:31:36.618">${stderr} = None</msg>
<msg level="INFO" timestamp="20170809 03:31:36.618">${rc} = None</msg>
<msg level="FAIL" timestamp="20170809 03:31:36.618">#(UTC) 2017/08/09 03:31:36.614810 -    0.079305 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status starttime="20170809 03:31:36.476" status="FAIL" endtime="20170809 03:31:36.618"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:36.619">@{core_list} = [ ]</msg>
<msg level="FAIL" timestamp="20170809 03:31:36.619">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status starttime="20170809 03:31:36.619" status="FAIL" endtime="20170809 03:31:36.619"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170809 03:31:36.640" status="PASS" endtime="20170809 03:31:36.651"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170809 03:31:36.653" status="PASS" endtime="20170809 03:31:37.352"></status>
</kw>
<status starttime="20170809 03:31:36.652" status="PASS" endtime="20170809 03:31:37.352"></status>
</kw>
<status starttime="20170809 03:31:36.651" status="PASS" endtime="20170809 03:31:37.352"></status>
</kw>
<status starttime="20170809 03:31:36.640" status="PASS" endtime="20170809 03:31:37.352"></status>
</kw>
<status starttime="20170809 03:31:36.620" status="PASS" endtime="20170809 03:31:37.352"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status starttime="20170809 03:31:37.352" status="PASS" endtime="20170809 03:31:37.352"></status>
</kw>
<status starttime="20170809 03:31:36.475" status="FAIL" endtime="20170809 03:31:37.353"></status>
</kw>
<status starttime="20170809 03:31:36.431" status="PASS" endtime="20170809 03:31:37.353"></status>
</kw>
<status starttime="20170809 03:31:36.428" status="PASS" endtime="20170809 03:31:37.353"></status>
</kw>
<status starttime="20170809 03:31:36.428" status="PASS" endtime="20170809 03:31:37.353"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 03:31:37.355" status="PASS" endtime="20170809 03:31:37.355"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:37.355">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:37.355">${ret_values} = None</msg>
<status starttime="20170809 03:31:37.354" status="PASS" endtime="20170809 03:31:37.355"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 03:31:37.356" status="PASS" endtime="20170809 03:31:37.356"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:37.396">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170809 03:31:37.395" status="PASS" endtime="20170809 03:31:37.396"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:37.397">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status starttime="20170809 03:31:37.397" status="PASS" endtime="20170809 03:31:37.397"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:37.402">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170809 03:31:37.397" status="PASS" endtime="20170809 03:31:37.403"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:37.407">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:37.406" status="PASS" endtime="20170809 03:31:37.407"></status>
</kw>
<status starttime="20170809 03:31:37.405" status="PASS" endtime="20170809 03:31:37.407"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:37.408">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:37.408" status="PASS" endtime="20170809 03:31:37.408"></status>
</kw>
<status starttime="20170809 03:31:37.407" status="PASS" endtime="20170809 03:31:37.408"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:37.410">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:37.409" status="PASS" endtime="20170809 03:31:37.410"></status>
</kw>
<status starttime="20170809 03:31:37.409" status="PASS" endtime="20170809 03:31:37.410"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:37.411">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:37.410" status="PASS" endtime="20170809 03:31:37.411"></status>
</kw>
<status starttime="20170809 03:31:37.410" status="PASS" endtime="20170809 03:31:37.411"></status>
</kw>
<status starttime="20170809 03:31:37.404" status="PASS" endtime="20170809 03:31:37.411"></status>
</kw>
<status starttime="20170809 03:31:37.404" status="PASS" endtime="20170809 03:31:37.411"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:37.412">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status starttime="20170809 03:31:37.411" status="PASS" endtime="20170809 03:31:37.412"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:37.522">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:37.523">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170809 03:31:39.020">Command exited with return code 0.</msg>
<status starttime="20170809 03:31:37.463" status="PASS" endtime="20170809 03:31:39.020"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:39.020">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:39.020">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status starttime="20170809 03:31:37.412" status="PASS" endtime="20170809 03:31:39.020"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.021">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status starttime="20170809 03:31:39.021" status="PASS" endtime="20170809 03:31:39.021"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.022">${stderr} = </msg>
<status starttime="20170809 03:31:39.021" status="PASS" endtime="20170809 03:31:39.022"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.028">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.028" status="PASS" endtime="20170809 03:31:39.029"></status>
</kw>
<status starttime="20170809 03:31:39.027" status="PASS" endtime="20170809 03:31:39.029"></status>
</kw>
<status starttime="20170809 03:31:39.022" status="PASS" endtime="20170809 03:31:39.029"></status>
</kw>
<status starttime="20170809 03:31:37.403" status="PASS" endtime="20170809 03:31:39.029"></status>
</kw>
<status starttime="20170809 03:31:37.403" status="PASS" endtime="20170809 03:31:39.029"></status>
</kw>
<status starttime="20170809 03:31:37.403" status="PASS" endtime="20170809 03:31:39.029"></status>
</kw>
<status starttime="20170809 03:31:37.396" status="PASS" endtime="20170809 03:31:39.029"></status>
</kw>
<status starttime="20170809 03:31:37.396" status="PASS" endtime="20170809 03:31:39.029"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.030">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170809 03:31:39.030" status="PASS" endtime="20170809 03:31:39.030"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:39.031">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170809 03:31:39.031" status="PASS" endtime="20170809 03:31:39.031"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.034">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.034" status="PASS" endtime="20170809 03:31:39.035"></status>
</kw>
<status starttime="20170809 03:31:39.034" status="PASS" endtime="20170809 03:31:39.035"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.036">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.036" status="PASS" endtime="20170809 03:31:39.036"></status>
</kw>
<status starttime="20170809 03:31:39.035" status="PASS" endtime="20170809 03:31:39.036"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.037">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.037" status="PASS" endtime="20170809 03:31:39.037"></status>
</kw>
<status starttime="20170809 03:31:39.036" status="PASS" endtime="20170809 03:31:39.038"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.039">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.038" status="PASS" endtime="20170809 03:31:39.039"></status>
</kw>
<status starttime="20170809 03:31:39.038" status="PASS" endtime="20170809 03:31:39.039"></status>
</kw>
<status starttime="20170809 03:31:39.033" status="PASS" endtime="20170809 03:31:39.039"></status>
</kw>
<status starttime="20170809 03:31:39.032" status="PASS" endtime="20170809 03:31:39.039"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.040">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status starttime="20170809 03:31:39.039" status="PASS" endtime="20170809 03:31:39.040"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:39.162">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:39.163">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170809 03:31:39.211">Command exited with return code 0.</msg>
<status starttime="20170809 03:31:39.092" status="PASS" endtime="20170809 03:31:39.211"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:39.211">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:39.211">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-201"\nVERSION_ID="v1.99.8-201-gec590ff"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status starttime="20170809 03:31:39.040" status="PASS" endtime="20170809 03:31:39.212"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.212">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-201"
VERSION_ID="v1.99.8-201-gec590ff"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status starttime="20170809 03:31:39.212" status="PASS" endtime="20170809 03:31:39.212"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.213">${stderr} = </msg>
<status starttime="20170809 03:31:39.213" status="PASS" endtime="20170809 03:31:39.213"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.220">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.219" status="PASS" endtime="20170809 03:31:39.220"></status>
</kw>
<status starttime="20170809 03:31:39.218" status="PASS" endtime="20170809 03:31:39.220"></status>
</kw>
<status starttime="20170809 03:31:39.213" status="PASS" endtime="20170809 03:31:39.220"></status>
</kw>
<status starttime="20170809 03:31:39.031" status="PASS" endtime="20170809 03:31:39.220"></status>
</kw>
<status starttime="20170809 03:31:39.031" status="PASS" endtime="20170809 03:31:39.220"></status>
</kw>
<status starttime="20170809 03:31:39.031" status="PASS" endtime="20170809 03:31:39.220"></status>
</kw>
<status starttime="20170809 03:31:39.029" status="PASS" endtime="20170809 03:31:39.220"></status>
</kw>
<status starttime="20170809 03:31:39.029" status="PASS" endtime="20170809 03:31:39.220"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.221">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170809 03:31:39.221" status="PASS" endtime="20170809 03:31:39.221"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:39.222">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170809 03:31:39.222" status="PASS" endtime="20170809 03:31:39.222"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.226">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.225" status="PASS" endtime="20170809 03:31:39.226"></status>
</kw>
<status starttime="20170809 03:31:39.224" status="PASS" endtime="20170809 03:31:39.226"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.227">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.227" status="PASS" endtime="20170809 03:31:39.227"></status>
</kw>
<status starttime="20170809 03:31:39.226" status="PASS" endtime="20170809 03:31:39.227"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.228">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.228" status="PASS" endtime="20170809 03:31:39.229"></status>
</kw>
<status starttime="20170809 03:31:39.227" status="PASS" endtime="20170809 03:31:39.229"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.230">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.229" status="PASS" endtime="20170809 03:31:39.230"></status>
</kw>
<status starttime="20170809 03:31:39.229" status="PASS" endtime="20170809 03:31:39.230"></status>
</kw>
<status starttime="20170809 03:31:39.224" status="PASS" endtime="20170809 03:31:39.230"></status>
</kw>
<status starttime="20170809 03:31:39.223" status="PASS" endtime="20170809 03:31:39.230"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.231">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status starttime="20170809 03:31:39.230" status="PASS" endtime="20170809 03:31:39.231"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:39.353">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:39.354">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170809 03:31:39.410">Command exited with return code 0.</msg>
<status starttime="20170809 03:31:39.290" status="PASS" endtime="20170809 03:31:39.411"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:39.411">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:39.411">${ret_values} = (u' 03:31:45 up 16 min,  load average: 0.74, 1.03, 0.84', u'', 0)</msg>
<status starttime="20170809 03:31:39.231" status="PASS" endtime="20170809 03:31:39.411"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.412">${stdout} =  03:31:45 up 16 min,  load average: 0.74, 1.03, 0.84</msg>
<status starttime="20170809 03:31:39.411" status="PASS" endtime="20170809 03:31:39.412"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.412">${stderr} = </msg>
<status starttime="20170809 03:31:39.412" status="PASS" endtime="20170809 03:31:39.412"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.419">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.418" status="PASS" endtime="20170809 03:31:39.419"></status>
</kw>
<status starttime="20170809 03:31:39.418" status="PASS" endtime="20170809 03:31:39.419"></status>
</kw>
<status starttime="20170809 03:31:39.412" status="PASS" endtime="20170809 03:31:39.419"></status>
</kw>
<status starttime="20170809 03:31:39.222" status="PASS" endtime="20170809 03:31:39.419"></status>
</kw>
<status starttime="20170809 03:31:39.222" status="PASS" endtime="20170809 03:31:39.419"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.422">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.422" status="PASS" endtime="20170809 03:31:39.422"></status>
</kw>
<status starttime="20170809 03:31:39.421" status="PASS" endtime="20170809 03:31:39.422"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.424">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.423" status="PASS" endtime="20170809 03:31:39.424"></status>
</kw>
<status starttime="20170809 03:31:39.422" status="PASS" endtime="20170809 03:31:39.424"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.425">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.425" status="PASS" endtime="20170809 03:31:39.425"></status>
</kw>
<status starttime="20170809 03:31:39.424" status="PASS" endtime="20170809 03:31:39.425"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.427">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.426" status="PASS" endtime="20170809 03:31:39.427"></status>
</kw>
<status starttime="20170809 03:31:39.426" status="PASS" endtime="20170809 03:31:39.427"></status>
</kw>
<status starttime="20170809 03:31:39.421" status="PASS" endtime="20170809 03:31:39.427"></status>
</kw>
<status starttime="20170809 03:31:39.420" status="PASS" endtime="20170809 03:31:39.427"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.428">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status starttime="20170809 03:31:39.427" status="PASS" endtime="20170809 03:31:39.428"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:39.540">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:39.541">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170809 03:31:39.618">Command exited with return code 0.</msg>
<status starttime="20170809 03:31:39.475" status="PASS" endtime="20170809 03:31:39.618"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:39.619">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:39.619">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status starttime="20170809 03:31:39.428" status="PASS" endtime="20170809 03:31:39.619"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.619">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status starttime="20170809 03:31:39.619" status="PASS" endtime="20170809 03:31:39.620"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.620">${stderr} = </msg>
<status starttime="20170809 03:31:39.620" status="PASS" endtime="20170809 03:31:39.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.627">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.626" status="PASS" endtime="20170809 03:31:39.627"></status>
</kw>
<status starttime="20170809 03:31:39.626" status="PASS" endtime="20170809 03:31:39.627"></status>
</kw>
<status starttime="20170809 03:31:39.621" status="PASS" endtime="20170809 03:31:39.627"></status>
</kw>
<status starttime="20170809 03:31:39.419" status="PASS" endtime="20170809 03:31:39.627"></status>
</kw>
<status starttime="20170809 03:31:39.419" status="PASS" endtime="20170809 03:31:39.627"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.630">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.630" status="PASS" endtime="20170809 03:31:39.630"></status>
</kw>
<status starttime="20170809 03:31:39.629" status="PASS" endtime="20170809 03:31:39.630"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.632">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.631" status="PASS" endtime="20170809 03:31:39.632"></status>
</kw>
<status starttime="20170809 03:31:39.631" status="PASS" endtime="20170809 03:31:39.632"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.633">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.633" status="PASS" endtime="20170809 03:31:39.633"></status>
</kw>
<status starttime="20170809 03:31:39.632" status="PASS" endtime="20170809 03:31:39.633"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.634">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.634" status="PASS" endtime="20170809 03:31:39.634"></status>
</kw>
<status starttime="20170809 03:31:39.633" status="PASS" endtime="20170809 03:31:39.635"></status>
</kw>
<status starttime="20170809 03:31:39.629" status="PASS" endtime="20170809 03:31:39.635"></status>
</kw>
<status starttime="20170809 03:31:39.628" status="PASS" endtime="20170809 03:31:39.635"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.636">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status starttime="20170809 03:31:39.635" status="PASS" endtime="20170809 03:31:39.636"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:39.754">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:39.755">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170809 03:31:39.810">Command exited with return code 0.</msg>
<status starttime="20170809 03:31:39.691" status="PASS" endtime="20170809 03:31:39.811"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:39.811">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:39.811">${ret_values} = (u'Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Wed Aug 9 01:01:02 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status starttime="20170809 03:31:39.636" status="PASS" endtime="20170809 03:31:39.811"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.812">${stdout} = Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Wed Aug 9 01:01:02 UTC 2017 armv6l GNU/Linux</msg>
<status starttime="20170809 03:31:39.811" status="PASS" endtime="20170809 03:31:39.812"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.812">${stderr} = </msg>
<status starttime="20170809 03:31:39.812" status="PASS" endtime="20170809 03:31:39.812"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:39.819">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:39.818" status="PASS" endtime="20170809 03:31:39.819"></status>
</kw>
<status starttime="20170809 03:31:39.818" status="PASS" endtime="20170809 03:31:39.819"></status>
</kw>
<status starttime="20170809 03:31:39.813" status="PASS" endtime="20170809 03:31:39.819"></status>
</kw>
<status starttime="20170809 03:31:39.628" status="PASS" endtime="20170809 03:31:39.819"></status>
</kw>
<status starttime="20170809 03:31:39.627" status="PASS" endtime="20170809 03:31:39.819"></status>
</kw>
<status starttime="20170809 03:31:39.222" status="PASS" endtime="20170809 03:31:39.819"></status>
</kw>
<status starttime="20170809 03:31:39.220" status="PASS" endtime="20170809 03:31:39.820"></status>
</kw>
<status starttime="20170809 03:31:39.220" status="PASS" endtime="20170809 03:31:39.820"></status>
</kw>
<status starttime="20170809 03:31:37.396" status="PASS" endtime="20170809 03:31:39.820"></status>
</kw>
<status starttime="20170809 03:31:37.395" status="PASS" endtime="20170809 03:31:39.820"></status>
</kw>
<status starttime="20170809 03:31:37.356" status="PASS" endtime="20170809 03:31:39.820"></status>
</kw>
<status starttime="20170809 03:31:37.353" status="PASS" endtime="20170809 03:31:39.820"></status>
</kw>
<status starttime="20170809 03:31:37.353" status="PASS" endtime="20170809 03:31:39.820"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 03:31:39.822" status="PASS" endtime="20170809 03:31:39.822"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:39.822">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:39.822">${ret_values} = None</msg>
<status starttime="20170809 03:31:39.821" status="PASS" endtime="20170809 03:31:39.822"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 03:31:39.822" status="PASS" endtime="20170809 03:31:39.823"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.867">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170809 03:31:39.867" status="PASS" endtime="20170809 03:31:39.867"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.869">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg'...</msg>
<status starttime="20170809 03:31:39.868" status="PASS" endtime="20170809 03:31:39.869"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.870">${logpath} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_meminfo.txt</msg>
<status starttime="20170809 03:31:39.869" status="PASS" endtime="20170809 03:31:39.870"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 03:31:39.871" status="PASS" endtime="20170809 03:31:39.871"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:39.872">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status starttime="20170809 03:31:39.871" status="PASS" endtime="20170809 03:31:39.872"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:39.980">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:39.980">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170809 03:31:40.028">Command exited with return code 0.</msg>
<status starttime="20170809 03:31:39.922" status="PASS" endtime="20170809 03:31:40.028"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:40.028">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:40.028">${ret_values} = (u'MemTotal:         432260 kB\nMemFree:          249612 kB\nMemAvailable:     318600 kB\nBuffers:           15616 kB\nCached:            69672 kB\nSwapCached:            0 kB\nActive:           12258...</msg>
<status starttime="20170809 03:31:39.872" status="PASS" endtime="20170809 03:31:40.028"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:40.029">${stdout} = MemTotal:         432260 kB
MemFree:          249612 kB
MemAvailable:     318600 kB
Buffers:           15616 kB
Cached:            69672 kB
SwapCached:            0 kB
Active:           122580 kB
Inac...</msg>
<status starttime="20170809 03:31:40.029" status="PASS" endtime="20170809 03:31:40.029"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:40.030">${stderr} = </msg>
<status starttime="20170809 03:31:40.029" status="PASS" endtime="20170809 03:31:40.030"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:40.037">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_meminfo.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:40.036" status="PASS" endtime="20170809 03:31:40.037"></status>
</kw>
<status starttime="20170809 03:31:40.035" status="PASS" endtime="20170809 03:31:40.037"></status>
</kw>
<status starttime="20170809 03:31:40.030" status="PASS" endtime="20170809 03:31:40.037"></status>
</kw>
<status starttime="20170809 03:31:39.870" status="PASS" endtime="20170809 03:31:40.037"></status>
</kw>
<status starttime="20170809 03:31:39.869" status="PASS" endtime="20170809 03:31:40.037"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:40.038">${logpath} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_proc_fd_active_list.txt</msg>
<status starttime="20170809 03:31:40.038" status="PASS" endtime="20170809 03:31:40.038"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 03:31:40.039" status="PASS" endtime="20170809 03:31:40.039"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:40.040">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status starttime="20170809 03:31:40.040" status="PASS" endtime="20170809 03:31:40.040"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:40.152">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:40.153">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170809 03:31:40.706">Command exited with return code 0.</msg>
<status starttime="20170809 03:31:40.092" status="PASS" endtime="20170809 03:31:40.706"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:40.706">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:40.707">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  9 03:31 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  9 03:31 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status starttime="20170809 03:31:40.040" status="PASS" endtime="20170809 03:31:40.707"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:40.708">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  9 03:31 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  9 03:31 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status starttime="20170809 03:31:40.708" status="PASS" endtime="20170809 03:31:40.708"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:40.709">${stderr} = ls: /proc/2835/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status starttime="20170809 03:31:40.709" status="PASS" endtime="20170809 03:31:40.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:40.716">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:40.715" status="PASS" endtime="20170809 03:31:40.716"></status>
</kw>
<status starttime="20170809 03:31:40.714" status="PASS" endtime="20170809 03:31:40.716"></status>
</kw>
<status starttime="20170809 03:31:40.709" status="PASS" endtime="20170809 03:31:40.716"></status>
</kw>
<status starttime="20170809 03:31:40.038" status="PASS" endtime="20170809 03:31:40.717"></status>
</kw>
<status starttime="20170809 03:31:40.037" status="PASS" endtime="20170809 03:31:40.717"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:40.717">${logpath} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_journalctl.txt</msg>
<status starttime="20170809 03:31:40.717" status="PASS" endtime="20170809 03:31:40.717"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 03:31:40.718" status="PASS" endtime="20170809 03:31:40.719"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:40.719">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status starttime="20170809 03:31:40.719" status="PASS" endtime="20170809 03:31:40.719"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:40.883">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:40.884">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170809 03:31:43.252">Command exited with return code 0.</msg>
<status starttime="20170809 03:31:40.809" status="PASS" endtime="20170809 03:31:43.253"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:43.253">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:43.257">${ret_values} = (u'-- Logs begin at Wed 2017-08-09 03:15:20 UTC, end at Wed 2017-08-09 03:31:42 UTC. --\nAug 09 03:15:20 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 09 03:15:20 witherspoon kernel: Linu...</msg>
<status starttime="20170809 03:31:40.720" status="PASS" endtime="20170809 03:31:43.257"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:43.259">${stdout} = -- Logs begin at Wed 2017-08-09 03:15:20 UTC, end at Wed 2017-08-09 03:31:42 UTC. --
Aug 09 03:15:20 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 09 03:15:20 witherspoon kernel: Linux ver...</msg>
<status starttime="20170809 03:31:43.258" status="PASS" endtime="20170809 03:31:43.259"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:43.259">${stderr} = </msg>
<status starttime="20170809 03:31:43.259" status="PASS" endtime="20170809 03:31:43.259"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:43.269">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_journalctl.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:43.267" status="PASS" endtime="20170809 03:31:43.269"></status>
</kw>
<status starttime="20170809 03:31:43.265" status="PASS" endtime="20170809 03:31:43.269"></status>
</kw>
<status starttime="20170809 03:31:43.260" status="PASS" endtime="20170809 03:31:43.269"></status>
</kw>
<status starttime="20170809 03:31:40.718" status="PASS" endtime="20170809 03:31:43.270"></status>
</kw>
<status starttime="20170809 03:31:40.717" status="PASS" endtime="20170809 03:31:43.270"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:43.270">${logpath} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_procinfo.txt</msg>
<status starttime="20170809 03:31:43.270" status="PASS" endtime="20170809 03:31:43.270"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 03:31:43.271" status="PASS" endtime="20170809 03:31:43.272"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:43.273">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status starttime="20170809 03:31:43.272" status="PASS" endtime="20170809 03:31:43.273"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:43.394">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:43.394">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170809 03:31:43.453">Command exited with return code 0.</msg>
<status starttime="20170809 03:31:43.330" status="PASS" endtime="20170809 03:31:43.453"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:43.453">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:43.453">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status starttime="20170809 03:31:43.273" status="PASS" endtime="20170809 03:31:43.453"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:43.454">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status starttime="20170809 03:31:43.454" status="PASS" endtime="20170809 03:31:43.454"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:43.455">${stderr} = </msg>
<status starttime="20170809 03:31:43.454" status="PASS" endtime="20170809 03:31:43.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:43.462">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_procinfo.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:43.461" status="PASS" endtime="20170809 03:31:43.462"></status>
</kw>
<status starttime="20170809 03:31:43.460" status="PASS" endtime="20170809 03:31:43.462"></status>
</kw>
<status starttime="20170809 03:31:43.455" status="PASS" endtime="20170809 03:31:43.462"></status>
</kw>
<status starttime="20170809 03:31:43.271" status="PASS" endtime="20170809 03:31:43.462"></status>
</kw>
<status starttime="20170809 03:31:43.270" status="PASS" endtime="20170809 03:31:43.462"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:43.463">${logpath} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_dmesg.txt</msg>
<status starttime="20170809 03:31:43.462" status="PASS" endtime="20170809 03:31:43.463"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 03:31:43.464" status="PASS" endtime="20170809 03:31:43.464"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:43.465">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status starttime="20170809 03:31:43.464" status="PASS" endtime="20170809 03:31:43.465"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:43.580">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:43.580">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170809 03:31:43.638">Command exited with return code 0.</msg>
<status starttime="20170809 03:31:43.514" status="PASS" endtime="20170809 03:31:43.638"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:43.638">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:43.639">${ret_values} = (u'[    2.760000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB\n[    2.780000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB\n[    2.7...</msg>
<status starttime="20170809 03:31:43.465" status="PASS" endtime="20170809 03:31:43.639"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:43.639">${stdout} = [    2.760000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB
[    2.780000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB
[    2.790000...</msg>
<status starttime="20170809 03:31:43.639" status="PASS" endtime="20170809 03:31:43.640"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:43.640">${stderr} = </msg>
<status starttime="20170809 03:31:43.640" status="PASS" endtime="20170809 03:31:43.640"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:43.647">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_dmesg.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:43.646" status="PASS" endtime="20170809 03:31:43.647"></status>
</kw>
<status starttime="20170809 03:31:43.645" status="PASS" endtime="20170809 03:31:43.647"></status>
</kw>
<status starttime="20170809 03:31:43.640" status="PASS" endtime="20170809 03:31:43.647"></status>
</kw>
<status starttime="20170809 03:31:43.463" status="PASS" endtime="20170809 03:31:43.647"></status>
</kw>
<status starttime="20170809 03:31:43.462" status="PASS" endtime="20170809 03:31:43.647"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:43.648">${logpath} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_proc_list.txt</msg>
<status starttime="20170809 03:31:43.648" status="PASS" endtime="20170809 03:31:43.648"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 03:31:43.649" status="PASS" endtime="20170809 03:31:43.649"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:43.650">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status starttime="20170809 03:31:43.650" status="PASS" endtime="20170809 03:31:43.650"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:43.771">index=1
host=9.3.86.161
encoding=UTF-8
timeout=25 seconds
newline=

path_separator=/
term_type=vt100
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:31:43.771">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170809 03:31:44.062">Command exited with return code 0.</msg>
<status starttime="20170809 03:31:43.708" status="PASS" endtime="20170809 03:31:44.062"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:44.062">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:44.063">${ret_values} = (u'Mem: 182888K used, 249372K free, 14696K shrd, 15616K buff, 69680K cached\nCPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.92 1.07 0.86 1/168 2839\n  PID  PPID ...</msg>
<status starttime="20170809 03:31:43.650" status="PASS" endtime="20170809 03:31:44.063"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.063">${stdout} = Mem: 182888K used, 249372K free, 14696K shrd, 15616K buff, 69680K cached
CPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.92 1.07 0.86 1/168 2839
  PID  PPID USER  ...</msg>
<status starttime="20170809 03:31:44.063" status="PASS" endtime="20170809 03:31:44.063"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.064">${stderr} = </msg>
<status starttime="20170809 03:31:44.064" status="PASS" endtime="20170809 03:31:44.064"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:44.071">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_proc_list.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:44.070" status="PASS" endtime="20170809 03:31:44.071"></status>
</kw>
<status starttime="20170809 03:31:44.069" status="PASS" endtime="20170809 03:31:44.071"></status>
</kw>
<status starttime="20170809 03:31:44.064" status="PASS" endtime="20170809 03:31:44.071"></status>
</kw>
<status starttime="20170809 03:31:43.648" status="PASS" endtime="20170809 03:31:44.071"></status>
</kw>
<status starttime="20170809 03:31:43.647" status="PASS" endtime="20170809 03:31:44.071"></status>
</kw>
<status starttime="20170809 03:31:39.869" status="PASS" endtime="20170809 03:31:44.071"></status>
</kw>
<status starttime="20170809 03:31:39.868" status="PASS" endtime="20170809 03:31:44.071"></status>
</kw>
<status starttime="20170809 03:31:39.868" status="PASS" endtime="20170809 03:31:44.071"></status>
</kw>
<status starttime="20170809 03:31:39.868" status="PASS" endtime="20170809 03:31:44.071"></status>
</kw>
<status starttime="20170809 03:31:39.866" status="PASS" endtime="20170809 03:31:44.071"></status>
</kw>
<status starttime="20170809 03:31:39.823" status="PASS" endtime="20170809 03:31:44.072"></status>
</kw>
<status starttime="20170809 03:31:39.820" status="PASS" endtime="20170809 03:31:44.072"></status>
</kw>
<status starttime="20170809 03:31:39.820" status="PASS" endtime="20170809 03:31:44.072"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 03:31:44.073" status="PASS" endtime="20170809 03:31:44.073"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:44.074">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:44.074">${ret_values} = None</msg>
<status starttime="20170809 03:31:44.073" status="PASS" endtime="20170809 03:31:44.074"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 03:31:44.074" status="PASS" endtime="20170809 03:31:44.074"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.118">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170809 03:31:44.118" status="PASS" endtime="20170809 03:31:44.118"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.120">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/o...</msg>
<status starttime="20170809 03:31:44.119" status="PASS" endtime="20170809 03:31:44.120"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.123">${logpath} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_inventory.txt</msg>
<status starttime="20170809 03:31:44.123" status="PASS" endtime="20170809 03:31:44.123"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:44.126">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:44.126" status="PASS" endtime="20170809 03:31:44.127"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:44.127" status="PASS" endtime="20170809 03:31:44.127"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.128">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:44.128" status="PASS" endtime="20170809 03:31:44.128"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.129">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:44.129" status="PASS" endtime="20170809 03:31:44.129"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:44.318">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:44.130" status="PASS" endtime="20170809 03:31:44.318"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:44.318">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:44.318">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:44.129" status="PASS" endtime="20170809 03:31:44.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:44.319">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:44.319" status="PASS" endtime="20170809 03:31:44.319"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:44.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:44.319" status="PASS" endtime="20170809 03:31:44.320"></status>
</kw>
<status starttime="20170809 03:31:44.125" status="PASS" endtime="20170809 03:31:44.320"></status>
</kw>
<status starttime="20170809 03:31:44.125" status="PASS" endtime="20170809 03:31:44.320"></status>
</kw>
<status starttime="20170809 03:31:44.124" status="PASS" endtime="20170809 03:31:44.320"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.321">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170809 03:31:44.320" status="PASS" endtime="20170809 03:31:44.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:44.321" status="PASS" endtime="20170809 03:31:44.321"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.617">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:44.618">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:44.322" status="PASS" endtime="20170809 03:31:44.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:44.618" status="PASS" endtime="20170809 03:31:44.618"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:44.619">Delete All Sessions</msg>
<status starttime="20170809 03:31:44.619" status="PASS" endtime="20170809 03:31:44.619"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:44.619">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:44.123" status="PASS" endtime="20170809 03:31:44.619"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:44.620">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:44.620" status="PASS" endtime="20170809 03:31:44.620"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:44.620">${status} = True</msg>
<status starttime="20170809 03:31:44.619" status="PASS" endtime="20170809 03:31:44.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170809 03:31:44.621" status="PASS" endtime="20170809 03:31:44.621"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.622">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:44.622">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 03:31:44.622">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status starttime="20170809 03:31:44.621" status="PASS" endtime="20170809 03:31:44.622"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:44.623">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_inventory.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:44.623" status="PASS" endtime="20170809 03:31:44.624"></status>
</kw>
<status starttime="20170809 03:31:44.622" status="PASS" endtime="20170809 03:31:44.624"></status>
</kw>
<status starttime="20170809 03:31:44.122" status="PASS" endtime="20170809 03:31:44.624"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.624">${logpath} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_led.txt</msg>
<status starttime="20170809 03:31:44.624" status="PASS" endtime="20170809 03:31:44.624"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:44.628">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:44.627" status="PASS" endtime="20170809 03:31:44.628"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.628">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:44.628" status="PASS" endtime="20170809 03:31:44.629"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.629">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:44.629" status="PASS" endtime="20170809 03:31:44.629"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.630">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:44.629" status="PASS" endtime="20170809 03:31:44.630"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:44.901">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:44.631" status="PASS" endtime="20170809 03:31:44.901"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:44.901">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:44.901">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:44.630" status="PASS" endtime="20170809 03:31:44.901"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:44.902">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:44.902" status="PASS" endtime="20170809 03:31:44.902"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:44.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:44.902" status="PASS" endtime="20170809 03:31:44.903"></status>
</kw>
<status starttime="20170809 03:31:44.626" status="PASS" endtime="20170809 03:31:44.903"></status>
</kw>
<status starttime="20170809 03:31:44.626" status="PASS" endtime="20170809 03:31:44.903"></status>
</kw>
<status starttime="20170809 03:31:44.625" status="PASS" endtime="20170809 03:31:44.903"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.904">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170809 03:31:44.903" status="PASS" endtime="20170809 03:31:44.904"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:44.904" status="PASS" endtime="20170809 03:31:44.904"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.948">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:44.948">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170809 03:31:44.905" status="PASS" endtime="20170809 03:31:44.948"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:44.948" status="PASS" endtime="20170809 03:31:44.949"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:44.949">Delete All Sessions</msg>
<status starttime="20170809 03:31:44.949" status="PASS" endtime="20170809 03:31:44.949"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:44.949">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170809 03:31:44.625" status="PASS" endtime="20170809 03:31:44.949"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:44.950">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170809 03:31:44.951">404 != 200</msg>
<status starttime="20170809 03:31:44.950" status="FAIL" endtime="20170809 03:31:44.951"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:44.951">${status} = False</msg>
<status starttime="20170809 03:31:44.950" status="PASS" endtime="20170809 03:31:44.951"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170809 03:31:44.952">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 03:31:44.952" status="PASS" endtime="20170809 03:31:44.952"></status>
</kw>
<status starttime="20170809 03:31:44.951" status="PASS" endtime="20170809 03:31:44.952"></status>
</kw>
<status starttime="20170809 03:31:44.624" status="PASS" endtime="20170809 03:31:44.952"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.953">${logpath} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_record_log.txt</msg>
<status starttime="20170809 03:31:44.952" status="PASS" endtime="20170809 03:31:44.953"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:44.955">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:44.955" status="PASS" endtime="20170809 03:31:44.956"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.957">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:44.956" status="PASS" endtime="20170809 03:31:44.957"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.957">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:44.957" status="PASS" endtime="20170809 03:31:44.957"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:44.958">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:44.958" status="PASS" endtime="20170809 03:31:44.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.139">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:44.959" status="PASS" endtime="20170809 03:31:45.139"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:45.139">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:45.139">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:44.958" status="PASS" endtime="20170809 03:31:45.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.140">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:45.139" status="PASS" endtime="20170809 03:31:45.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:45.140" status="PASS" endtime="20170809 03:31:45.140"></status>
</kw>
<status starttime="20170809 03:31:44.955" status="PASS" endtime="20170809 03:31:45.140"></status>
</kw>
<status starttime="20170809 03:31:44.954" status="PASS" endtime="20170809 03:31:45.141"></status>
</kw>
<status starttime="20170809 03:31:44.954" status="PASS" endtime="20170809 03:31:45.141"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.141">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170809 03:31:45.141" status="PASS" endtime="20170809 03:31:45.141"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:45.142" status="PASS" endtime="20170809 03:31:45.142"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.209">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:45.209">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170809 03:31:45.142" status="PASS" endtime="20170809 03:31:45.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:45.209" status="PASS" endtime="20170809 03:31:45.210"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:45.210">Delete All Sessions</msg>
<status starttime="20170809 03:31:45.210" status="PASS" endtime="20170809 03:31:45.210"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:45.210">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170809 03:31:44.953" status="PASS" endtime="20170809 03:31:45.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.211">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170809 03:31:45.212">404 != 200</msg>
<status starttime="20170809 03:31:45.211" status="FAIL" endtime="20170809 03:31:45.212"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:45.212">${status} = False</msg>
<status starttime="20170809 03:31:45.211" status="PASS" endtime="20170809 03:31:45.212"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170809 03:31:45.213">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 03:31:45.213" status="PASS" endtime="20170809 03:31:45.213"></status>
</kw>
<status starttime="20170809 03:31:45.212" status="PASS" endtime="20170809 03:31:45.213"></status>
</kw>
<status starttime="20170809 03:31:44.952" status="PASS" endtime="20170809 03:31:45.213"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.214">${logpath} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_elog.txt</msg>
<status starttime="20170809 03:31:45.213" status="PASS" endtime="20170809 03:31:45.214"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.217">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:45.216" status="PASS" endtime="20170809 03:31:45.217"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.218">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:45.217" status="PASS" endtime="20170809 03:31:45.218"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.218">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:45.218" status="PASS" endtime="20170809 03:31:45.218"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.219">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:45.219" status="PASS" endtime="20170809 03:31:45.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.407">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:45.220" status="PASS" endtime="20170809 03:31:45.407"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:45.408">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:45.408">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:45.219" status="PASS" endtime="20170809 03:31:45.408"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.408">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:45.408" status="PASS" endtime="20170809 03:31:45.408"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.409">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:45.409" status="PASS" endtime="20170809 03:31:45.409"></status>
</kw>
<status starttime="20170809 03:31:45.216" status="PASS" endtime="20170809 03:31:45.409"></status>
</kw>
<status starttime="20170809 03:31:45.215" status="PASS" endtime="20170809 03:31:45.409"></status>
</kw>
<status starttime="20170809 03:31:45.215" status="PASS" endtime="20170809 03:31:45.409"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.411">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170809 03:31:45.410" status="PASS" endtime="20170809 03:31:45.411"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:45.411" status="PASS" endtime="20170809 03:31:45.412"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.711">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:45.711">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:45.412" status="PASS" endtime="20170809 03:31:45.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:45.711" status="PASS" endtime="20170809 03:31:45.712"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:45.713">Delete All Sessions</msg>
<status starttime="20170809 03:31:45.712" status="PASS" endtime="20170809 03:31:45.713"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:45.713">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:45.214" status="PASS" endtime="20170809 03:31:45.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:45.714" status="PASS" endtime="20170809 03:31:45.714"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:45.715">${status} = True</msg>
<status starttime="20170809 03:31:45.714" status="PASS" endtime="20170809 03:31:45.715"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170809 03:31:45.715" status="PASS" endtime="20170809 03:31:45.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.717">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f ed f8 09 00 00 00 00 a0 1c 2a b3 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 01 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 20 00 60 00 70 00 50 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 01 8a fa 6e 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 a4 9d b4 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 01 a5 c7 fb 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 a6 e2 25 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 01 a6 e9 38 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 a6 f7 9a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 01 a7 02 5f 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 01 a8 c3 47 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 01 a8 ce 82 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 a8 ea a9 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 a9 34 09 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 01 a9 3e 01 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 01 aa 7e 21 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 aa 88 17 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 aa cf 07 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 aa d9 56 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 01 aa e2 d0 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 01 ac 5e 33 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 ac 66 72 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0e 56 bb d3 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0e 56 c4 16 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502249398355, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502247947175, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502248589125, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d5 2f 98 ba 00 00 00 00 d5 5c 80 8c 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 05 90 00 00 05 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 11 9c e3 bb 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 11 b6 6d cf 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 11 b7 a3 b9 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 11 b8 c0 ef 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 11 b8 c7 c9 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 11 b8 d6 b5 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 11 b8 e1 12 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 11 ba a5 18 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 11 ba af 25 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 11 ba cc ec 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 11 bb 16 5a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 11 bb 20 76 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 11 bc 6a a0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 11 bc 74 f6 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 11 bc bc 17 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 11 bc c6 2d 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 11 bc cf a3 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 11 be 51 59 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 11 be 59 eb 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 3a c0 27 0f 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 3a c0 2f 54 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 11 9c e3 bb 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 11 b6 6d cf 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 11 b7 a3 b9 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 11 b8 c0 ef 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 11 b8 c7 c9 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 11 b8 d6 b5 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 11 b8 e1 12 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 11 ba a5 18 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 11 ba af 25 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 11 ba cc ec 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 11 bb 16 5a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 11 bb 20 76"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502248916549, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502249034401, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a2 98 b2 60 00 00 00 00 a2 c6 62 c3 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 07 90 00 00 07 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 01 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 04 22 c9 06 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 3c 76 46 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 04 3d a7 31 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 3e be 38 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 04 3e c5 45 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 3e d3 b8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 04 3e dd a5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 04 40 9f d3 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 04 40 a9 bd 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 40 c6 13 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 41 0e 74 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 04 41 18 1e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 04 42 55 da 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 42 5f bc 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 42 a6 ee 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 42 b1 7d 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 04 42 ba dc 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 04 44 36 25 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 44 3e 8a 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 13 8c 2f a7 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 13 8c 38 8f 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 04 22 c9 06 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 3c 76 46 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 04 3d a7 31 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 3e be 38 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 04 3e c5 45 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 3e d3 b8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 04 3e dd a5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 04 40 9f d3 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 04 40 a9 bd 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 40 c6 13 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 41 0e 74 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 04 41 18 1e"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502249077524, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502249195301, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 9e 14 91 00 00 00 00 a0 ca 99 24 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 01 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 02 ff 33 8a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 18 df 3c 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 1a 27 8b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 1b 47 54 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 1b 4e 78 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 1b 5c de 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 1b 67 46 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 1d 2d 06 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 1d 37 61 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 1d 53 d2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 1d a6 6a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 1d b0 88 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 03 1e ec 98 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 1e f6 e3 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 1f 3d 6e 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 1f 47 b9 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 03 1f 51 65 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 03 20 d0 e9 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 20 d9 67 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0f ae b4 d0 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0f ae bc e9 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 02 ff 33 8a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 18 df 3c 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 1a 27 8b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 1b 47 54 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 1b 4e 78 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 1b 5c de 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 1b 67 46 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 1d 2d 06 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 1d 37 61 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 1d 53 d2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 1d a6 6a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 1d b0 88"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502249237959, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502249355746, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:45.718">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 03:31:45.718">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [
                "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu...</msg>
<status starttime="20170809 03:31:45.715" status="PASS" endtime="20170809 03:31:45.718"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:45.720">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_elog.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:45.719" status="PASS" endtime="20170809 03:31:45.720"></status>
</kw>
<status starttime="20170809 03:31:45.718" status="PASS" endtime="20170809 03:31:45.720"></status>
</kw>
<status starttime="20170809 03:31:45.213" status="PASS" endtime="20170809 03:31:45.720"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.721">${logpath} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_sensor_list.txt</msg>
<status starttime="20170809 03:31:45.720" status="PASS" endtime="20170809 03:31:45.721"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.723">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:45.723" status="PASS" endtime="20170809 03:31:45.724"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.726">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:45.724" status="PASS" endtime="20170809 03:31:45.726"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.727">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:45.726" status="PASS" endtime="20170809 03:31:45.727"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.727">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:45.727" status="PASS" endtime="20170809 03:31:45.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.953">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:45.728" status="PASS" endtime="20170809 03:31:45.953"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:45.954">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:45.954">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:45.727" status="PASS" endtime="20170809 03:31:45.954"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.954">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:45.954" status="PASS" endtime="20170809 03:31:45.954"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:45.955">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:45.955" status="PASS" endtime="20170809 03:31:45.955"></status>
</kw>
<status starttime="20170809 03:31:45.723" status="PASS" endtime="20170809 03:31:45.955"></status>
</kw>
<status starttime="20170809 03:31:45.722" status="PASS" endtime="20170809 03:31:45.955"></status>
</kw>
<status starttime="20170809 03:31:45.722" status="PASS" endtime="20170809 03:31:45.955"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:45.956">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170809 03:31:45.956" status="PASS" endtime="20170809 03:31:45.956"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:45.956" status="PASS" endtime="20170809 03:31:45.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.196">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:46.196">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:45.957" status="PASS" endtime="20170809 03:31:46.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:46.197" status="PASS" endtime="20170809 03:31:46.197"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:46.198">Delete All Sessions</msg>
<status starttime="20170809 03:31:46.197" status="PASS" endtime="20170809 03:31:46.198"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:46.198">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:45.721" status="PASS" endtime="20170809 03:31:46.198"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:46.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:46.199" status="PASS" endtime="20170809 03:31:46.199"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:46.199">${status} = True</msg>
<status starttime="20170809 03:31:46.198" status="PASS" endtime="20170809 03:31:46.199"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170809 03:31:46.199" status="PASS" endtime="20170809 03:31:46.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.200">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:46.200">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 03:31:46.201">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170809 03:31:46.200" status="PASS" endtime="20170809 03:31:46.201"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:46.202">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_sensor_list.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:46.201" status="PASS" endtime="20170809 03:31:46.202"></status>
</kw>
<status starttime="20170809 03:31:46.201" status="PASS" endtime="20170809 03:31:46.202"></status>
</kw>
<status starttime="20170809 03:31:45.720" status="PASS" endtime="20170809 03:31:46.202"></status>
</kw>
<status starttime="20170809 03:31:44.120" status="PASS" endtime="20170809 03:31:46.202"></status>
</kw>
<status starttime="20170809 03:31:44.119" status="PASS" endtime="20170809 03:31:46.202"></status>
</kw>
<status starttime="20170809 03:31:44.119" status="PASS" endtime="20170809 03:31:46.203"></status>
</kw>
<status starttime="20170809 03:31:44.119" status="PASS" endtime="20170809 03:31:46.203"></status>
</kw>
<status starttime="20170809 03:31:44.118" status="PASS" endtime="20170809 03:31:46.203"></status>
</kw>
<status starttime="20170809 03:31:44.074" status="PASS" endtime="20170809 03:31:46.203"></status>
</kw>
<status starttime="20170809 03:31:44.072" status="PASS" endtime="20170809 03:31:46.203"></status>
</kw>
<status starttime="20170809 03:31:44.072" status="PASS" endtime="20170809 03:31:46.203"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 03:31:46.204" status="PASS" endtime="20170809 03:31:46.205"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:46.205">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:46.205">${ret_values} = None</msg>
<status starttime="20170809 03:31:46.204" status="PASS" endtime="20170809 03:31:46.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 03:31:46.205" status="PASS" endtime="20170809 03:31:46.206"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:46.253">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:46.253" status="PASS" endtime="20170809 03:31:46.254"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.254">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:46.254" status="PASS" endtime="20170809 03:31:46.254"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.255">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:46.254" status="PASS" endtime="20170809 03:31:46.255"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.255">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:46.255" status="PASS" endtime="20170809 03:31:46.255"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:46.448">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:46.258" status="PASS" endtime="20170809 03:31:46.448"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:46.448">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:46.448">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:46.256" status="PASS" endtime="20170809 03:31:46.448"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:46.449">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:46.449" status="PASS" endtime="20170809 03:31:46.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:46.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:46.449" status="PASS" endtime="20170809 03:31:46.450"></status>
</kw>
<status starttime="20170809 03:31:46.252" status="PASS" endtime="20170809 03:31:46.450"></status>
</kw>
<status starttime="20170809 03:31:46.252" status="PASS" endtime="20170809 03:31:46.450"></status>
</kw>
<status starttime="20170809 03:31:46.251" status="PASS" endtime="20170809 03:31:46.450"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.451">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170809 03:31:46.450" status="PASS" endtime="20170809 03:31:46.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:46.451" status="PASS" endtime="20170809 03:31:46.451"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.775">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:46.776">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:46.451" status="PASS" endtime="20170809 03:31:46.776"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:46.776" status="PASS" endtime="20170809 03:31:46.776"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:46.777">Delete All Sessions</msg>
<status starttime="20170809 03:31:46.777" status="PASS" endtime="20170809 03:31:46.777"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:46.777">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:46.251" status="PASS" endtime="20170809 03:31:46.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:46.778">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:46.778" status="PASS" endtime="20170809 03:31:46.778"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:46.778">${status} = True</msg>
<status starttime="20170809 03:31:46.777" status="PASS" endtime="20170809 03:31:46.778"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20170809 03:31:46.779" status="PASS" endtime="20170809 03:31:46.779"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.780">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f ed f8 09 00 00 00 00 a0 1c 2a b3 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 01 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 20 00 60 00 70 00 50 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 01 8a fa 6e 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 a4 9d b4 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 01 a5 c7 fb 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 a6 e2 25 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 01 a6 e9 38 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 a6 f7 9a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 01 a7 02 5f 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 01 a8 c3 47 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 01 a8 ce 82 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 a8 ea a9 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 a9 34 09 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 01 a9 3e 01 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 01 aa 7e 21 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 aa 88 17 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 aa cf 07 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 aa d9 56 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 01 aa e2 d0 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 01 ac 5e 33 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 ac 66 72 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0e 56 bb d3 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0e 56 c4 16 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502249398355, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502247947175, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502248589125, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d5 2f 98 ba 00 00 00 00 d5 5c 80 8c 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 05 90 00 00 05 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 11 9c e3 bb 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 11 b6 6d cf 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 11 b7 a3 b9 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 11 b8 c0 ef 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 11 b8 c7 c9 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 11 b8 d6 b5 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 11 b8 e1 12 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 11 ba a5 18 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 11 ba af 25 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 11 ba cc ec 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 11 bb 16 5a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 11 bb 20 76 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 11 bc 6a a0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 11 bc 74 f6 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 11 bc bc 17 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 11 bc c6 2d 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 11 bc cf a3 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 11 be 51 59 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 11 be 59 eb 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 3a c0 27 0f 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 3a c0 2f 54 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 11 9c e3 bb 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 11 b6 6d cf 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 11 b7 a3 b9 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 11 b8 c0 ef 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 11 b8 c7 c9 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 11 b8 d6 b5 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 11 b8 e1 12 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 11 ba a5 18 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 11 ba af 25 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 11 ba cc ec 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 11 bb 16 5a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 11 bb 20 76"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502248916549, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502249034401, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a2 98 b2 60 00 00 00 00 a2 c6 62 c3 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 07 90 00 00 07 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 01 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 04 22 c9 06 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 3c 76 46 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 04 3d a7 31 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 3e be 38 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 04 3e c5 45 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 3e d3 b8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 04 3e dd a5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 04 40 9f d3 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 04 40 a9 bd 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 40 c6 13 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 41 0e 74 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 04 41 18 1e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 04 42 55 da 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 42 5f bc 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 42 a6 ee 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 42 b1 7d 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 04 42 ba dc 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 04 44 36 25 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 44 3e 8a 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 13 8c 2f a7 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 13 8c 38 8f 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 04 22 c9 06 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 3c 76 46 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 04 3d a7 31 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 3e be 38 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 04 3e c5 45 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 3e d3 b8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 04 3e dd a5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 04 40 9f d3 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 04 40 a9 bd 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 40 c6 13 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 41 0e 74 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 04 41 18 1e"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502249077524, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502249195301, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 9e 14 91 00 00 00 00 a0 ca 99 24 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 01 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 02 ff 33 8a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 18 df 3c 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 1a 27 8b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 1b 47 54 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 1b 4e 78 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 1b 5c de 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 1b 67 46 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 1d 2d 06 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 1d 37 61 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 1d 53 d2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 1d a6 6a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 1d b0 88 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 03 1e ec 98 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 1e f6 e3 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 1f 3d 6e 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 1f 47 b9 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 03 1f 51 65 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 03 20 d0 e9 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 20 d9 67 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0f ae b4 d0 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0f ae bc e9 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 02 ff 33 8a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 18 df 3c 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 1a 27 8b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 1b 47 54 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 1b 4e 78 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 1b 5c de 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 1b 67 46 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 1d 2d 06 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 1d 37 61 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 1d 53 d2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 1d a6 6a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 1d b0 88"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502249237959, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502249355746, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:46.781">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:46.782">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/10': {u'Message': u'org.open_power.Host.Event.Error.Event', u'AdditionalData': [u'CALLOUT_INVENTORY_PATH=/xyz/o...</msg>
<status starttime="20170809 03:31:46.779" status="PASS" endtime="20170809 03:31:46.782"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.783">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/ent...</msg>
<status starttime="20170809 03:31:46.782" status="PASS" endtime="20170809 03:31:46.783"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.783">${logpath} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel</msg>
<status starttime="20170809 03:31:46.783" status="PASS" endtime="20170809 03:31:46.783"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:46.784">Created file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:46.784" status="PASS" endtime="20170809 03:31:46.784"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/10" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 03:31:46.785" status="PASS" endtime="20170809 03:31:46.785"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:46.789">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:46.788" status="PASS" endtime="20170809 03:31:46.789"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.790">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:46.789" status="PASS" endtime="20170809 03:31:46.790"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.790">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:46.790" status="PASS" endtime="20170809 03:31:46.790"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.791">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:46.791" status="PASS" endtime="20170809 03:31:46.791"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:46.987">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:46.792" status="PASS" endtime="20170809 03:31:46.987"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:46.987">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:46.987">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:46.791" status="PASS" endtime="20170809 03:31:46.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:46.988">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:46.988" status="PASS" endtime="20170809 03:31:46.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:46.989">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:46.988" status="PASS" endtime="20170809 03:31:46.989"></status>
</kw>
<status starttime="20170809 03:31:46.788" status="PASS" endtime="20170809 03:31:46.989"></status>
</kw>
<status starttime="20170809 03:31:46.787" status="PASS" endtime="20170809 03:31:46.989"></status>
</kw>
<status starttime="20170809 03:31:46.787" status="PASS" endtime="20170809 03:31:46.989"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:46.990">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status starttime="20170809 03:31:46.990" status="PASS" endtime="20170809 03:31:46.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:46.990" status="PASS" endtime="20170809 03:31:46.991"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.105">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:47.106">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:46.991" status="PASS" endtime="20170809 03:31:47.106"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:47.106" status="PASS" endtime="20170809 03:31:47.107"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:47.107">Delete All Sessions</msg>
<status starttime="20170809 03:31:47.107" status="PASS" endtime="20170809 03:31:47.107"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:47.107">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:46.786" status="PASS" endtime="20170809 03:31:47.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.108">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:47.108" status="PASS" endtime="20170809 03:31:47.108"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.109">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f ed f8 09 00 00 00 00 a0 1c 2a b3 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 01 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 20 00 60 00 70 00 50 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 01 8a fa 6e 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 a4 9d b4 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 01 a5 c7 fb 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 a6 e2 25 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 01 a6 e9 38 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 a6 f7 9a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 01 a7 02 5f 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 01 a8 c3 47 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 01 a8 ce 82 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 a8 ea a9 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 a9 34 09 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 01 a9 3e 01 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 01 aa 7e 21 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 aa 88 17 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 aa cf 07 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 aa d9 56 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 01 aa e2 d0 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 01 ac 5e 33 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 ac 66 72 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0e 56 bb d3 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0e 56 c4 16 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:47.109">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:47.109">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 ...</msg>
<status starttime="20170809 03:31:47.108" status="PASS" endtime="20170809 03:31:47.109"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:47.110">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f ed f8 09 00 00 ...</msg>
<status starttime="20170809 03:31:46.785" status="PASS" endtime="20170809 03:31:47.110"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.110">Length is 2</msg>
<msg level="INFO" timestamp="20170809 03:31:47.110">${length} = 2</msg>
<status starttime="20170809 03:31:47.110" status="PASS" endtime="20170809 03:31:47.110"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170809 03:31:47.110" status="PASS" endtime="20170809 03:31:47.111"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.111">${index} = 1</msg>
<status starttime="20170809 03:31:47.111" status="PASS" endtime="20170809 03:31:47.111"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:47.113">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:47.112" status="PASS" endtime="20170809 03:31:47.113"></status>
</kw>
<status starttime="20170809 03:31:47.112" status="PASS" endtime="20170809 03:31:47.113"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:47.114">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:47.114" status="PASS" endtime="20170809 03:31:47.114"></status>
</kw>
<status starttime="20170809 03:31:47.113" status="PASS" endtime="20170809 03:31:47.114"></status>
</kw>
<status starttime="20170809 03:31:46.785" status="PASS" endtime="20170809 03:31:47.114"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 03:31:47.115" status="PASS" endtime="20170809 03:31:47.115"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.119">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:47.118" status="PASS" endtime="20170809 03:31:47.119"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.120">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:47.119" status="PASS" endtime="20170809 03:31:47.120"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.120">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:47.120" status="PASS" endtime="20170809 03:31:47.120"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.121">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:47.121" status="PASS" endtime="20170809 03:31:47.121"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.395">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:47.122" status="PASS" endtime="20170809 03:31:47.395"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:47.395">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:47.395">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:47.122" status="PASS" endtime="20170809 03:31:47.395"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.396">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:47.395" status="PASS" endtime="20170809 03:31:47.396"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.396">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:47.396" status="PASS" endtime="20170809 03:31:47.397"></status>
</kw>
<status starttime="20170809 03:31:47.118" status="PASS" endtime="20170809 03:31:47.397"></status>
</kw>
<status starttime="20170809 03:31:47.117" status="PASS" endtime="20170809 03:31:47.397"></status>
</kw>
<status starttime="20170809 03:31:47.117" status="PASS" endtime="20170809 03:31:47.397"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.397">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20170809 03:31:47.397" status="PASS" endtime="20170809 03:31:47.397"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:47.398" status="PASS" endtime="20170809 03:31:47.398"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.493">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:47.493">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:47.398" status="PASS" endtime="20170809 03:31:47.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:47.494" status="PASS" endtime="20170809 03:31:47.494"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:47.495">Delete All Sessions</msg>
<status starttime="20170809 03:31:47.495" status="PASS" endtime="20170809 03:31:47.495"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:47.495">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:47.116" status="PASS" endtime="20170809 03:31:47.495"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.496">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:47.496" status="PASS" endtime="20170809 03:31:47.496"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.497">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:47.497">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:47.497">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status starttime="20170809 03:31:47.496" status="PASS" endtime="20170809 03:31:47.497"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:47.497">${esel_data} = []</msg>
<status starttime="20170809 03:31:47.115" status="PASS" endtime="20170809 03:31:47.497"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.498">Length is 0</msg>
<msg level="INFO" timestamp="20170809 03:31:47.498">${length} = 0</msg>
<status starttime="20170809 03:31:47.497" status="PASS" endtime="20170809 03:31:47.498"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.498">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 03:31:47.498" status="PASS" endtime="20170809 03:31:47.498"></status>
</kw>
<status starttime="20170809 03:31:47.114" status="PASS" endtime="20170809 03:31:47.498"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 03:31:47.499" status="PASS" endtime="20170809 03:31:47.499"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.503">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:47.502" status="PASS" endtime="20170809 03:31:47.506"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.506">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:47.506" status="PASS" endtime="20170809 03:31:47.507"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.507">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:47.507" status="PASS" endtime="20170809 03:31:47.507"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.508">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:47.507" status="PASS" endtime="20170809 03:31:47.508"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.723">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:47.509" status="PASS" endtime="20170809 03:31:47.723"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:47.723">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:47.723">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:47.508" status="PASS" endtime="20170809 03:31:47.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.724">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:47.723" status="PASS" endtime="20170809 03:31:47.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:47.724" status="PASS" endtime="20170809 03:31:47.724"></status>
</kw>
<status starttime="20170809 03:31:47.502" status="PASS" endtime="20170809 03:31:47.725"></status>
</kw>
<status starttime="20170809 03:31:47.501" status="PASS" endtime="20170809 03:31:47.725"></status>
</kw>
<status starttime="20170809 03:31:47.501" status="PASS" endtime="20170809 03:31:47.725"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.726">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20170809 03:31:47.725" status="PASS" endtime="20170809 03:31:47.726"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:47.726" status="PASS" endtime="20170809 03:31:47.726"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.825">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:47.825">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:47.727" status="PASS" endtime="20170809 03:31:47.825"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:47.826" status="PASS" endtime="20170809 03:31:47.826"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:47.827">Delete All Sessions</msg>
<status starttime="20170809 03:31:47.826" status="PASS" endtime="20170809 03:31:47.827"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:47.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:47.500" status="PASS" endtime="20170809 03:31:47.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:47.827" status="PASS" endtime="20170809 03:31:47.828"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.828">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:47.828">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:47.828">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status starttime="20170809 03:31:47.828" status="PASS" endtime="20170809 03:31:47.828"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:47.829">${esel_data} = []</msg>
<status starttime="20170809 03:31:47.499" status="PASS" endtime="20170809 03:31:47.829"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.829">Length is 0</msg>
<msg level="INFO" timestamp="20170809 03:31:47.829">${length} = 0</msg>
<status starttime="20170809 03:31:47.829" status="PASS" endtime="20170809 03:31:47.829"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.830">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 03:31:47.830" status="PASS" endtime="20170809 03:31:47.830"></status>
</kw>
<status starttime="20170809 03:31:47.499" status="PASS" endtime="20170809 03:31:47.830"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 03:31:47.830" status="PASS" endtime="20170809 03:31:47.831"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:47.834">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:47.834" status="PASS" endtime="20170809 03:31:47.835"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.836">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:47.835" status="PASS" endtime="20170809 03:31:47.836"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.836">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:47.836" status="PASS" endtime="20170809 03:31:47.836"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:47.837">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:47.837" status="PASS" endtime="20170809 03:31:47.837"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.030">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:47.838" status="PASS" endtime="20170809 03:31:48.030"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:48.030">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:48.030">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:47.837" status="PASS" endtime="20170809 03:31:48.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.031">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:48.031" status="PASS" endtime="20170809 03:31:48.031"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.032">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:48.031" status="PASS" endtime="20170809 03:31:48.032"></status>
</kw>
<status starttime="20170809 03:31:47.833" status="PASS" endtime="20170809 03:31:48.032"></status>
</kw>
<status starttime="20170809 03:31:47.833" status="PASS" endtime="20170809 03:31:48.032"></status>
</kw>
<status starttime="20170809 03:31:47.832" status="PASS" endtime="20170809 03:31:48.032"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.033">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status starttime="20170809 03:31:48.032" status="PASS" endtime="20170809 03:31:48.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:48.033" status="PASS" endtime="20170809 03:31:48.033"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.121">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:48.121">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:48.034" status="PASS" endtime="20170809 03:31:48.121"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:48.121" status="PASS" endtime="20170809 03:31:48.121"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:48.122">Delete All Sessions</msg>
<status starttime="20170809 03:31:48.122" status="PASS" endtime="20170809 03:31:48.122"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:48.122">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:47.832" status="PASS" endtime="20170809 03:31:48.122"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.123">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:48.122" status="PASS" endtime="20170809 03:31:48.123"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.124">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d5 2f 98 ba 00 00 00 00 d5 5c 80 8c 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 05 90 00 00 05 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 11 9c e3 bb 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 11 b6 6d cf 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 11 b7 a3 b9 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 11 b8 c0 ef 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 11 b8 c7 c9 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 11 b8 d6 b5 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 11 b8 e1 12 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 11 ba a5 18 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 11 ba af 25 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 11 ba cc ec 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 11 bb 16 5a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 11 bb 20 76 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 11 bc 6a a0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 11 bc 74 f6 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 11 bc bc 17 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 11 bc c6 2d 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 11 bc cf a3 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 11 be 51 59 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 11 be 59 eb 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 3a c0 27 0f 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 3a c0 2f 54 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 11 9c e3 bb 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 11 b6 6d cf 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 11 b7 a3 b9 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 11 b8 c0 ef 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 11 b8 c7 c9 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 11 b8 d6 b5 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 11 b8 e1 12 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 11 ba a5 18 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 11 ba af 25 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 11 ba cc ec 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 11 bb 16 5a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 11 bb 20 76"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:48.124">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:48.124">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 ...</msg>
<status starttime="20170809 03:31:48.123" status="PASS" endtime="20170809 03:31:48.124"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:48.124">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d5 2f 98 ba 00 00 ...</msg>
<status starttime="20170809 03:31:47.831" status="PASS" endtime="20170809 03:31:48.124"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.125">Length is 2</msg>
<msg level="INFO" timestamp="20170809 03:31:48.125">${length} = 2</msg>
<status starttime="20170809 03:31:48.125" status="PASS" endtime="20170809 03:31:48.125"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170809 03:31:48.125" status="PASS" endtime="20170809 03:31:48.126"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.126">${index} = 1</msg>
<status starttime="20170809 03:31:48.126" status="PASS" endtime="20170809 03:31:48.126"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:48.128">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:48.127" status="PASS" endtime="20170809 03:31:48.128"></status>
</kw>
<status starttime="20170809 03:31:48.126" status="PASS" endtime="20170809 03:31:48.128"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:48.130">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:48.129" status="PASS" endtime="20170809 03:31:48.130"></status>
</kw>
<status starttime="20170809 03:31:48.128" status="PASS" endtime="20170809 03:31:48.130"></status>
</kw>
<status starttime="20170809 03:31:47.830" status="PASS" endtime="20170809 03:31:48.130"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 03:31:48.130" status="PASS" endtime="20170809 03:31:48.131"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.134">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:48.134" status="PASS" endtime="20170809 03:31:48.135"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.135">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:48.135" status="PASS" endtime="20170809 03:31:48.135"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.136">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:48.136" status="PASS" endtime="20170809 03:31:48.136"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.137">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:48.136" status="PASS" endtime="20170809 03:31:48.137"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.380">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:48.138" status="PASS" endtime="20170809 03:31:48.380"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:48.380">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:48.380">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:48.137" status="PASS" endtime="20170809 03:31:48.380"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.381">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:48.381" status="PASS" endtime="20170809 03:31:48.381"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.382">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:48.381" status="PASS" endtime="20170809 03:31:48.382"></status>
</kw>
<status starttime="20170809 03:31:48.133" status="PASS" endtime="20170809 03:31:48.382"></status>
</kw>
<status starttime="20170809 03:31:48.133" status="PASS" endtime="20170809 03:31:48.382"></status>
</kw>
<status starttime="20170809 03:31:48.132" status="PASS" endtime="20170809 03:31:48.382"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.383">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status starttime="20170809 03:31:48.382" status="PASS" endtime="20170809 03:31:48.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:48.383" status="PASS" endtime="20170809 03:31:48.383"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.509">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:48.509">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:48.384" status="PASS" endtime="20170809 03:31:48.509"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:48.509" status="PASS" endtime="20170809 03:31:48.510"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:48.510">Delete All Sessions</msg>
<status starttime="20170809 03:31:48.510" status="PASS" endtime="20170809 03:31:48.510"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:48.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:48.131" status="PASS" endtime="20170809 03:31:48.510"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.511">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:48.511" status="PASS" endtime="20170809 03:31:48.511"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.512">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:48.512">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:48.512">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status starttime="20170809 03:31:48.511" status="PASS" endtime="20170809 03:31:48.512"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:48.512">${esel_data} = []</msg>
<status starttime="20170809 03:31:48.131" status="PASS" endtime="20170809 03:31:48.512"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.513">Length is 0</msg>
<msg level="INFO" timestamp="20170809 03:31:48.513">${length} = 0</msg>
<status starttime="20170809 03:31:48.512" status="PASS" endtime="20170809 03:31:48.513"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.513">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 03:31:48.513" status="PASS" endtime="20170809 03:31:48.513"></status>
</kw>
<status starttime="20170809 03:31:48.130" status="PASS" endtime="20170809 03:31:48.514"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 03:31:48.514" status="PASS" endtime="20170809 03:31:48.514"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.518">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:48.518" status="PASS" endtime="20170809 03:31:48.518"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.519">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:48.519" status="PASS" endtime="20170809 03:31:48.519"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.520">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:48.519" status="PASS" endtime="20170809 03:31:48.520"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.520">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:48.520" status="PASS" endtime="20170809 03:31:48.520"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.703">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:48.521" status="PASS" endtime="20170809 03:31:48.704"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:48.704">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:48.704">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:48.520" status="PASS" endtime="20170809 03:31:48.704"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.704">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:48.704" status="PASS" endtime="20170809 03:31:48.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:48.705" status="PASS" endtime="20170809 03:31:48.705"></status>
</kw>
<status starttime="20170809 03:31:48.517" status="PASS" endtime="20170809 03:31:48.705"></status>
</kw>
<status starttime="20170809 03:31:48.517" status="PASS" endtime="20170809 03:31:48.705"></status>
</kw>
<status starttime="20170809 03:31:48.516" status="PASS" endtime="20170809 03:31:48.706"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.706">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status starttime="20170809 03:31:48.706" status="PASS" endtime="20170809 03:31:48.706"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:48.707" status="PASS" endtime="20170809 03:31:48.707"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.813">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:48.814">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:48.707" status="PASS" endtime="20170809 03:31:48.814"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:48.814" status="PASS" endtime="20170809 03:31:48.814"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:48.815">Delete All Sessions</msg>
<status starttime="20170809 03:31:48.815" status="PASS" endtime="20170809 03:31:48.815"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:48.815">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:48.515" status="PASS" endtime="20170809 03:31:48.815"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.816">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:48.815" status="PASS" endtime="20170809 03:31:48.816"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.816">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a2 98 b2 60 00 00 00 00 a2 c6 62 c3 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 07 90 00 00 07 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 01 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 04 22 c9 06 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 3c 76 46 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 04 3d a7 31 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 3e be 38 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 04 3e c5 45 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 3e d3 b8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 04 3e dd a5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 04 40 9f d3 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 04 40 a9 bd 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 40 c6 13 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 41 0e 74 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 04 41 18 1e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 04 42 55 da 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 42 5f bc 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 42 a6 ee 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 42 b1 7d 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 04 42 ba dc 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 04 44 36 25 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 44 3e 8a 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 13 8c 2f a7 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 13 8c 38 8f 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 04 22 c9 06 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 04 3c 76 46 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 04 3d a7 31 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 3e be 38 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 04 3e c5 45 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 04 3e d3 b8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 04 3e dd a5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 04 40 9f d3 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 04 40 a9 bd 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 04 40 c6 13 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 04 41 0e 74 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 04 41 18 1e"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:48.817">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:48.817">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 ...</msg>
<status starttime="20170809 03:31:48.816" status="PASS" endtime="20170809 03:31:48.817"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:48.817">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a2 98 b2 60 00 00 ...</msg>
<status starttime="20170809 03:31:48.514" status="PASS" endtime="20170809 03:31:48.817"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.818">Length is 2</msg>
<msg level="INFO" timestamp="20170809 03:31:48.818">${length} = 2</msg>
<status starttime="20170809 03:31:48.818" status="PASS" endtime="20170809 03:31:48.818"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170809 03:31:48.818" status="PASS" endtime="20170809 03:31:48.819"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.819">${index} = 1</msg>
<status starttime="20170809 03:31:48.819" status="PASS" endtime="20170809 03:31:48.819"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:48.821">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:48.820" status="PASS" endtime="20170809 03:31:48.821"></status>
</kw>
<status starttime="20170809 03:31:48.819" status="PASS" endtime="20170809 03:31:48.821"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:48.822">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:48.821" status="PASS" endtime="20170809 03:31:48.822"></status>
</kw>
<status starttime="20170809 03:31:48.821" status="PASS" endtime="20170809 03:31:48.822"></status>
</kw>
<status starttime="20170809 03:31:48.514" status="PASS" endtime="20170809 03:31:48.822"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 03:31:48.822" status="PASS" endtime="20170809 03:31:48.823"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:48.826">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:48.826" status="PASS" endtime="20170809 03:31:48.827"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.827">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:48.827" status="PASS" endtime="20170809 03:31:48.827"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.828">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:48.828" status="PASS" endtime="20170809 03:31:48.828"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:48.829">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:48.828" status="PASS" endtime="20170809 03:31:48.829"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:49.513">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:48.829" status="PASS" endtime="20170809 03:31:49.513"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:49.513">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:49.513">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:48.829" status="PASS" endtime="20170809 03:31:49.513"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:49.514">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:49.514" status="PASS" endtime="20170809 03:31:49.514"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:49.515">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:49.514" status="PASS" endtime="20170809 03:31:49.515"></status>
</kw>
<status starttime="20170809 03:31:48.826" status="PASS" endtime="20170809 03:31:49.515"></status>
</kw>
<status starttime="20170809 03:31:48.825" status="PASS" endtime="20170809 03:31:49.515"></status>
</kw>
<status starttime="20170809 03:31:48.825" status="PASS" endtime="20170809 03:31:49.515"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:49.516">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status starttime="20170809 03:31:49.515" status="PASS" endtime="20170809 03:31:49.516"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:49.516" status="PASS" endtime="20170809 03:31:49.516"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.066">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:51.066">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:49.517" status="PASS" endtime="20170809 03:31:51.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:51.067" status="PASS" endtime="20170809 03:31:51.067"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:51.068">Delete All Sessions</msg>
<status starttime="20170809 03:31:51.067" status="PASS" endtime="20170809 03:31:51.068"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:51.068">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:48.824" status="PASS" endtime="20170809 03:31:51.068"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.069">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:51.068" status="PASS" endtime="20170809 03:31:51.069"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.069">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:51.069">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:51.069">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status starttime="20170809 03:31:51.069" status="PASS" endtime="20170809 03:31:51.070"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:51.070">${esel_data} = []</msg>
<status starttime="20170809 03:31:48.823" status="PASS" endtime="20170809 03:31:51.070"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.071">Length is 0</msg>
<msg level="INFO" timestamp="20170809 03:31:51.071">${length} = 0</msg>
<status starttime="20170809 03:31:51.070" status="PASS" endtime="20170809 03:31:51.071"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.072">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 03:31:51.071" status="PASS" endtime="20170809 03:31:51.072"></status>
</kw>
<status starttime="20170809 03:31:48.822" status="PASS" endtime="20170809 03:31:51.072"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 03:31:51.073" status="PASS" endtime="20170809 03:31:51.074"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.079">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:51.078" status="PASS" endtime="20170809 03:31:51.079"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.080">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:51.080" status="PASS" endtime="20170809 03:31:51.080"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.081">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:51.080" status="PASS" endtime="20170809 03:31:51.081"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.082">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:51.081" status="PASS" endtime="20170809 03:31:51.082"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.555">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:51.082" status="PASS" endtime="20170809 03:31:51.555"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:51.555">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:51.555">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:51.082" status="PASS" endtime="20170809 03:31:51.555"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.556">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:51.555" status="PASS" endtime="20170809 03:31:51.556"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.556">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:51.556" status="PASS" endtime="20170809 03:31:51.557"></status>
</kw>
<status starttime="20170809 03:31:51.077" status="PASS" endtime="20170809 03:31:51.557"></status>
</kw>
<status starttime="20170809 03:31:51.077" status="PASS" endtime="20170809 03:31:51.557"></status>
</kw>
<status starttime="20170809 03:31:51.076" status="PASS" endtime="20170809 03:31:51.557"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.557">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status starttime="20170809 03:31:51.557" status="PASS" endtime="20170809 03:31:51.557"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:51.558" status="PASS" endtime="20170809 03:31:51.558"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.663">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:51.663">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:51.558" status="PASS" endtime="20170809 03:31:51.663"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:51.664" status="PASS" endtime="20170809 03:31:51.664"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:51.664">Delete All Sessions</msg>
<status starttime="20170809 03:31:51.664" status="PASS" endtime="20170809 03:31:51.664"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:51.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:51.075" status="PASS" endtime="20170809 03:31:51.665"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.665">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:51.665" status="PASS" endtime="20170809 03:31:51.665"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.666">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 9e 14 91 00 00 00 00 a0 ca 99 24 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 01 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 02 ff 33 8a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 18 df 3c 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 1a 27 8b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 1b 47 54 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 1b 4e 78 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 1b 5c de 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 1b 67 46 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 1d 2d 06 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 1d 37 61 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 1d 53 d2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 1d a6 6a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 1d b0 88 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 03 1e ec 98 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 1e f6 e3 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 1f 3d 6e 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 1f 47 b9 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 03 1f 51 65 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 03 20 d0 e9 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 20 d9 67 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0f ae b4 d0 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0f ae bc e9 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 02 ff 33 8a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 18 df 3c 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 1a 27 8b 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 1b 47 54 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 1b 4e 78 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 1b 5c de 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 1b 67 46 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 1d 2d 06 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 1d 37 61 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 1d 53 d2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 1d a6 6a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 1d b0 88"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:51.666">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:51.667">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 ...</msg>
<status starttime="20170809 03:31:51.666" status="PASS" endtime="20170809 03:31:51.667"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:51.667">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 9e 14 91 00 00 ...</msg>
<status starttime="20170809 03:31:51.074" status="PASS" endtime="20170809 03:31:51.667"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.667">Length is 2</msg>
<msg level="INFO" timestamp="20170809 03:31:51.668">${length} = 2</msg>
<status starttime="20170809 03:31:51.667" status="PASS" endtime="20170809 03:31:51.668"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170809 03:31:51.668" status="PASS" endtime="20170809 03:31:51.668"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.669">${index} = 1</msg>
<status starttime="20170809 03:31:51.668" status="PASS" endtime="20170809 03:31:51.669"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:51.670">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:51.670" status="PASS" endtime="20170809 03:31:51.670"></status>
</kw>
<status starttime="20170809 03:31:51.669" status="PASS" endtime="20170809 03:31:51.670"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:51.671">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel"&gt;/tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/20170809033136085556_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:51.671" status="PASS" endtime="20170809 03:31:51.672"></status>
</kw>
<status starttime="20170809 03:31:51.671" status="PASS" endtime="20170809 03:31:51.672"></status>
</kw>
<status starttime="20170809 03:31:51.073" status="PASS" endtime="20170809 03:31:51.672"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/9" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 03:31:51.672" status="PASS" endtime="20170809 03:31:51.673"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.676">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:31:51.675" status="PASS" endtime="20170809 03:31:51.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.677">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:31:51.676" status="PASS" endtime="20170809 03:31:51.677"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.677">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:31:51.677" status="PASS" endtime="20170809 03:31:51.677"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.678">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:31:51.678" status="PASS" endtime="20170809 03:31:51.678"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.873">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:31:51.679" status="PASS" endtime="20170809 03:31:51.873"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:51.873">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:31:51.873">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:51.678" status="PASS" endtime="20170809 03:31:51.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.874">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:51.874" status="PASS" endtime="20170809 03:31:51.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.875">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:51.874" status="PASS" endtime="20170809 03:31:51.875"></status>
</kw>
<status starttime="20170809 03:31:51.675" status="PASS" endtime="20170809 03:31:51.875"></status>
</kw>
<status starttime="20170809 03:31:51.674" status="PASS" endtime="20170809 03:31:51.875"></status>
</kw>
<status starttime="20170809 03:31:51.674" status="PASS" endtime="20170809 03:31:51.875"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.876">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status starttime="20170809 03:31:51.875" status="PASS" endtime="20170809 03:31:51.876"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 03:31:51.876" status="PASS" endtime="20170809 03:31:51.876"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.980">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:31:51.980">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:51.877" status="PASS" endtime="20170809 03:31:51.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 03:31:51.980" status="PASS" endtime="20170809 03:31:51.981"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:31:51.981">Delete All Sessions</msg>
<status starttime="20170809 03:31:51.981" status="PASS" endtime="20170809 03:31:51.981"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:51.981">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:31:51.673" status="PASS" endtime="20170809 03:31:51.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.982">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:31:51.982" status="PASS" endtime="20170809 03:31:51.982"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.983">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:31:51.983">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:31:51.983">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status starttime="20170809 03:31:51.983" status="PASS" endtime="20170809 03:31:51.983"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:51.984">${esel_data} = []</msg>
<status starttime="20170809 03:31:51.673" status="PASS" endtime="20170809 03:31:51.984"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.984">Length is 0</msg>
<msg level="INFO" timestamp="20170809 03:31:51.985">${length} = 0</msg>
<status starttime="20170809 03:31:51.984" status="PASS" endtime="20170809 03:31:51.985"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:51.985">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 03:31:51.985" status="PASS" endtime="20170809 03:31:51.986"></status>
</kw>
<status starttime="20170809 03:31:51.672" status="PASS" endtime="20170809 03:31:51.986"></status>
</kw>
<status starttime="20170809 03:31:46.784" status="PASS" endtime="20170809 03:31:51.986"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:51.990">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 03:31:51.996">${out} = </msg>
<status starttime="20170809 03:31:51.986" status="PASS" endtime="20170809 03:31:51.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:31:52.000">'' does not contain 'eSEL.pl'</msg>
<status starttime="20170809 03:31:51.999" status="FAIL" endtime="20170809 03:31:52.000"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:52.000">${status} = False</msg>
<status starttime="20170809 03:31:51.998" status="PASS" endtime="20170809 03:31:52.001"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:52.002">Returning from the enclosing user keyword.</msg>
<status starttime="20170809 03:31:52.001" status="PASS" endtime="20170809 03:31:52.002"></status>
</kw>
<status starttime="20170809 03:31:46.250" status="PASS" endtime="20170809 03:31:52.002"></status>
</kw>
<status starttime="20170809 03:31:46.206" status="PASS" endtime="20170809 03:31:52.003"></status>
</kw>
<status starttime="20170809 03:31:46.203" status="PASS" endtime="20170809 03:31:52.003"></status>
</kw>
<status starttime="20170809 03:31:46.203" status="PASS" endtime="20170809 03:31:52.003"></status>
</kw>
<status starttime="20170809 03:31:36.372" status="PASS" endtime="20170809 03:31:52.003"></status>
</kw>
<status starttime="20170809 03:31:36.370" status="PASS" endtime="20170809 03:31:52.004"></status>
</kw>
<status starttime="20170809 03:31:36.369" status="PASS" endtime="20170809 03:31:52.004"></status>
</kw>
<status starttime="20170809 03:31:36.369" status="PASS" endtime="20170809 03:31:52.004"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20170809 03:31:52.017" status="PASS" endtime="20170809 03:31:52.017"></status>
</kw>
<status starttime="20170809 03:31:52.004" status="PASS" endtime="20170809 03:31:52.017"></status>
</kw>
<status starttime="20170809 03:31:36.368" status="PASS" endtime="20170809 03:31:52.017"></status>
</kw>
<status starttime="20170809 03:31:33.006" status="PASS" endtime="20170809 03:31:52.018"></status>
</kw>
<status starttime="20170809 03:31:33.006" status="PASS" endtime="20170809 03:31:52.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170809 03:31:52.018" status="PASS" endtime="20170809 03:31:52.019"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.030">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170809 03:31:52.020" status="PASS" endtime="20170809 03:31:52.030"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.031">${FFDC_DIR_PATH} = /tmp/fspcibld/10990/obmc-robot/logs/20170809033136085556_TestsTestBasicPoweron/20170809033136085556_PowerOnTest/</msg>
<status starttime="20170809 03:31:52.030" status="PASS" endtime="20170809 03:31:52.031"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170809 03:31:52.031" status="PASS" endtime="20170809 03:31:52.031"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170809 03:31:52.032" status="PASS" endtime="20170809 03:31:52.032"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:52.033">Directory '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs"&gt;/tmp/fspcibld/10990/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170809 03:31:52.032" status="PASS" endtime="20170809 03:31:52.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:52.034">File '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170809 03:31:52.033" status="PASS" endtime="20170809 03:31:52.034"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:52.034">${exist} = True</msg>
<status starttime="20170809 03:31:52.033" status="PASS" endtime="20170809 03:31:52.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170809 03:31:52.034" status="PASS" endtime="20170809 03:31:52.034"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170809 03:31:52.035" status="PASS" endtime="20170809 03:31:52.035"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.038">${cur_time} = 2017-08-09 03:31:52:035878</msg>
<status starttime="20170809 03:31:52.036" status="PASS" endtime="20170809 03:31:52.038"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.039">${cur_time} = 20170809033152035878</msg>
<status starttime="20170809 03:31:52.038" status="PASS" endtime="20170809 03:31:52.039"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:52.039">${cur_time} = 20170809033152035878</msg>
<status starttime="20170809 03:31:52.035" status="PASS" endtime="20170809 03:31:52.039"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:52.040">Appended to file '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10990/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:52.039" status="PASS" endtime="20170809 03:31:52.040"></status>
</kw>
<status starttime="20170809 03:31:52.019" status="PASS" endtime="20170809 03:31:52.040"></status>
</kw>
<status starttime="20170809 03:31:32.676" status="PASS" endtime="20170809 03:31:52.040"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.042">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:31:52.042" status="PASS" endtime="20170809 03:31:52.042"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.043">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:31:52.042" status="PASS" endtime="20170809 03:31:52.043"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:52.043">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:31:52.041" status="PASS" endtime="20170809 03:31:52.043"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.044">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170809 03:31:52.044" status="PASS" endtime="20170809 03:31:52.044"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:31:52.044" status="PASS" endtime="20170809 03:31:52.045"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.049">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 03:31:52.052">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 03:31:52.053">${output} = /tmp/fspcibld/10990/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170809 03:31:52.045" status="PASS" endtime="20170809 03:31:52.053"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 03:31:52.055" status="PASS" endtime="20170809 03:31:52.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170809 03:31:52.056" status="PASS" endtime="20170809 03:31:52.056"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.060">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 03:31:52.057" status="PASS" endtime="20170809 03:31:52.060"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:52.060">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 03:31:52.043" status="PASS" endtime="20170809 03:31:52.060"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.061">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170809 03:31:52.061" status="PASS" endtime="20170809 03:31:52.061"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:31:52.061" status="PASS" endtime="20170809 03:31:52.062"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.065">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 03:31:52.078">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 03:31:52.078">${os_con_pid} = </msg>
<status starttime="20170809 03:31:52.062" status="PASS" endtime="20170809 03:31:52.078"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170809 03:31:52.080" status="PASS" endtime="20170809 03:31:52.081"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.082">${cmd_buf} = kill -9 </msg>
<status starttime="20170809 03:31:52.081" status="PASS" endtime="20170809 03:31:52.082"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:31:52.082" status="PASS" endtime="20170809 03:31:52.083"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.084">${rc} = None</msg>
<msg level="INFO" timestamp="20170809 03:31:52.084">${output} = None</msg>
<status starttime="20170809 03:31:52.083" status="PASS" endtime="20170809 03:31:52.084"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 03:31:52.084" status="PASS" endtime="20170809 03:31:52.085"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 03:31:52.090">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/10990/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/10990/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status starttime="20170809 03:31:52.086" status="PASS" endtime="20170809 03:31:52.090"></status>
</kw>
<status starttime="20170809 03:31:52.086" status="PASS" endtime="20170809 03:31:52.090"></status>
</kw>
<status starttime="20170809 03:31:52.085" status="PASS" endtime="20170809 03:31:52.090"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.091">${output} = </msg>
<status starttime="20170809 03:31:52.090" status="PASS" endtime="20170809 03:31:52.091"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:31:52.091">${loc_quiet} = 1</msg>
<status starttime="20170809 03:31:52.091" status="PASS" endtime="20170809 03:31:52.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170809 03:31:52.092" status="PASS" endtime="20170809 03:31:52.162"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:52.168">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 03:31:52.169">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status starttime="20170809 03:31:52.092" status="PASS" endtime="20170809 03:31:52.169"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:31:52.173">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status starttime="20170809 03:31:52.041" status="PASS" endtime="20170809 03:31:52.173"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:31:52.181">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85180|secure|Booting in non-secure mode.
  3.85181|secure|SecureROM invalid - skipping functionality
  6.22494|ISTEP  6. 5 - host_init_fsi
  6.30145|ISTEP  6. 6 - host_set_ipl_parms
  6.32267|ISTEP  6. 7 - host_discover_targets
  6.99972|================================================
  7.00151|Error reported by i2c (0x0700) PLID 0x90000005
  7.00333|  Bus Arbitration Lost Error was found in the I2C status register.
  7.00334|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  7.00334|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  7.00516|  UserData1  Status Register Value : 0x080e080000050001
  7.00517|  UserData2  Master Target : 0x0300006c0190004d
  7.00517|------------------------------------------------
  7.00518|  Callout type             : Hardware Callout
  7.00518|  CPU id                   : 0
  7.00519|  Target                   : Physical:/Sys0/Node0/Proc1
  7.00520|  Deconfig State           : NO_DECONFIG
  7.00520|  GARD Error Type          : GARD_NULL
  7.00521|  Priority                 : SRCI_PRIORITY_HIGH
  7.00521|------------------------------------------------
  7.00522|  Callout type             : Procedure Callout
  7.00522|  Procedure                : EPUB_PRC_HB_CODE
  7.00523|  Priority                 : SRCI_PRIORITY_LOW
  7.00523|------------------------------------------------
  7.00524|  
  7.00524|------------------------------------------------
  7.00525|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  7.00525|================================================
165.12513|IPMI: shutdown requested
165.29242|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85035|secure|Booting in non-secure mode.
  3.85036|secure|SecureROM invalid - skipping functionality
  5.00492|ISTEP  6. 5 - host_init_fsi
  5.07560|ISTEP  6. 6 - host_set_ipl_parms
  5.12870|ISTEP  6. 7 - host_discover_targets
  5.34156|================================================
  5.34334|Error reported by i2c (0x0700) PLID 0x90000007
  5.34516|  Bus Arbitration Lost Error was found in the I2C status register.
  5.34516|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.34517|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.34698|  UserData1  Status Register Value : 0x080e080000050001
  5.34698|  UserData2  Master Target : 0x0300006c0190004d
  5.34699|------------------------------------------------
  5.34699|  Callout type             : Hardware Callout
  5.34700|  CPU id                   : 1
  5.34701|  Target                   : Physical:/Sys0/Node0/Proc1
  5.34701|  Deconfig State           : NO_DECONFIG
  5.34702|  GARD Error Type          : GARD_NULL
  5.34702|  Priority                 : SRCI_PRIORITY_HIGH
  5.34703|------------------------------------------------
  5.34703|  Callout type             : Procedure Callout
  5.34704|  Procedure                : EPUB_PRC_HB_CODE
  5.34704|  Priority                 : SRCI_PRIORITY_LOW
  5.34705|------------------------------------------------
  5.34705|  
  5.34706|------------------------------------------------
  5.34706|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.34707|================================================
163.40602|IPMI: shutdown requested
163.41361|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85033|secure|Booting in non-secure mode.
  3.85034|secure|SecureROM invalid - skipping functionality
  4.97917|ISTEP  6. 5 - host_init_fsi
  5.05621|ISTEP  6. 6 - host_set_ipl_parms
  5.06292|ISTEP  6. 7 - host_discover_targets
  5.27953|================================================
  5.28133|Error reported by i2c (0x0700) PLID 0x90000009
  5.28314|  Bus Arbitration Lost Error was found in the I2C status register.
  5.28314|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.28315|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.28496|  UserData1  Status Register Value : 0x080e080000050001
  5.28496|  UserData2  Master Target : 0x0300006c0190004d
  5.28497|------------------------------------------------
  5.28497|  Callout type             : Hardware Callout
  5.28498|  CPU id                   : 1
  5.28498|  Target                   : Physical:/Sys0/Node0/Proc1
  5.28499|  Deconfig State           : NO_DECONFIG
  5.28499|  GARD Error Type          : GARD_NULL
  5.28500|  Priority                 : SRCI_PRIORITY_HIGH
  5.28500|------------------------------------------------
  5.28501|  Callout type             : Procedure Callout
  5.28501|  Procedure                : EPUB_PRC_HB_CODE
  5.28502|  Priority                 : SRCI_PRIORITY_LOW
  5.28502|------------------------------------------------
  5.28502|  
  5.28503|------------------------------------------------
  5.28503|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.28504|================================================
162.97925|IPMI: shutdown requested
162.98688|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85188|secure|Booting in non-secure mode.
  3.85189|secure|SecureROM invalid - skipping functionality
  4.95979|ISTEP  6. 5 - host_init_fsi
  5.03261|ISTEP  6. 6 - host_set_ipl_parms
  5.03987|ISTEP  6. 7 - host_discover_targets
  5.25446|================================================
  5.25628|Error reported by i2c (0x0700) PLID 0x9000000B
  5.25812|  Bus Arbitration Lost Error was found in the I2C status register.
  5.25812|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.25813|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.25995|  UserData1  Status Register Value : 0x080e080000050001
  5.25995|  UserData2  Master Target : 0x0300006c0190004d
  5.25996|------------------------------------------------
  5.25996|  Callout type             : Hardware Callout
  5.25997|  CPU id                   : 1
  5.25998|  Target                   : Physical:/Sys0/Node0/Proc1
  5.25998|  Deconfig State           : NO_DECONFIG
  5.25999|  GARD Error Type          : GARD_NULL
  5.25999|  Priority                 : SRCI_PRIORITY_HIGH
  5.26000|------------------------------------------------
  5.26000|  Callout type             : Procedure Callout
  5.26001|  Procedure                : EPUB_PRC_HB_CODE
  5.26001|  Priority                 : SRCI_PRIORITY_LOW
  5.26001|------------------------------------------------
  5.26002|  
  5.26002|------------------------------------------------
  5.26003|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.26003|================================================
</msg>
<status starttime="20170809 03:31:52.181" status="PASS" endtime="20170809 03:31:52.181"></status>
</kw>
<status starttime="20170809 03:31:32.675" status="PASS" endtime="20170809 03:31:52.182"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170809 03:21:12.434" critical="yes" status="FAIL" endtime="20170809 03:31:52.182">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170809 03:21:12.399" status="FAIL" endtime="20170809 03:31:52.188"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170809 03:21:06.173" status="FAIL" endtime="20170809 03:31:52.197"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat name="Tests" pass="1" fail="1" id="s1">Tests</stat>
<stat name="Security" pass="1" fail="0" id="s1-s1">Tests.Security</stat>
<stat name="Test Ssl" pass="1" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat name="Test Basic Poweron" pass="0" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
