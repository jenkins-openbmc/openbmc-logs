<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170809 03:05:27.615" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/code_update.robot" id="s1" name="Code Update">
<test id="s1-t1" name="REST PNOR Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'true' == '${DELETE_OLD_PNOR_IMAGES}'</arg>
<arg>Delete All PNOR Images</arg>
</arguments>
<kw name="Delete All Pnor Images" library="code_update">
<doc>Delete all PNOR images from the BMC.</doc>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/enumerate</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:05:28.403" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:05:28.403" starttime="20170809 03:05:28.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:05:28.404" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:05:28.404" starttime="20170809 03:05:28.404"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:05:28.405" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:05:28.405" starttime="20170809 03:05:28.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:05:28.406" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:05:28.406" starttime="20170809 03:05:28.405"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:05:28.601" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:05:28.601" starttime="20170809 03:05:28.406"></status>
</kw>
<msg timestamp="20170809 03:05:28.601" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:05:28.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:28.601" starttime="20170809 03:05:28.406"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:05:28.602" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:28.602" starttime="20170809 03:05:28.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:05:28.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:28.603" starttime="20170809 03:05:28.602"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:28.603" starttime="20170809 03:05:28.402"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:28.603" starttime="20170809 03:05:28.401"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:28.603" starttime="20170809 03:05:28.401"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:05:28.604" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170809 03:05:28.604" starttime="20170809 03:05:28.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:28.605" starttime="20170809 03:05:28.604"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:05:28.791" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 03:05:28.791" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:28.791" starttime="20170809 03:05:28.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:28.792" starttime="20170809 03:05:28.792"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:05:28.792" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:05:28.792" starttime="20170809 03:05:28.792"></status>
</kw>
<msg timestamp="20170809 03:05:28.793" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:28.793" starttime="20170809 03:05:28.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:05:28.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:28.793" starttime="20170809 03:05:28.793"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:05:28.794" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/45e4e571": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.8-201-gec590ff"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:05:28.794" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:05:28.794" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/software/45e4e571': {u'Path': u'', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedA...</msg>
<status status="PASS" endtime="20170809 03:05:28.794" starttime="20170809 03:05:28.794"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:28.794" starttime="20170809 03:05:28.400"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:28.795" starttime="20170809 03:05:28.240"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:28.795" starttime="20170809 03:05:28.239"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:28.795" starttime="20170809 03:05:28.239"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<msg timestamp="20170809 03:05:28.795" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar"&gt;/home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170809 03:05:28.796" starttime="20170809 03:05:28.795"></status>
</kw>
<kw name="Get Version Tar" library="test_uploadimage">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<assign>
<var>${IMAGE_VERSION}</var>
</assign>
<msg timestamp="20170809 03:05:28.799" level="INFO">${IMAGE_VERSION} = IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87</msg>
<status status="PASS" endtime="20170809 03:05:28.799" starttime="20170809 03:05:28.796"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170809 03:05:28.799" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar"&gt;/home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170809 03:05:40.550" level="INFO">${image_data} = MANIFEST0000664075750014206770000000057213136125753011562 0...</msg>
<status status="PASS" endtime="20170809 03:05:40.550" starttime="20170809 03:05:28.799"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:05:40.554" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:05:40.554" starttime="20170809 03:05:40.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:05:40.555" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:05:40.555" starttime="20170809 03:05:40.554"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:05:40.555" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:05:40.555" starttime="20170809 03:05:40.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:05:40.556" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:05:40.556" starttime="20170809 03:05:40.556"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:05:40.732" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:05:40.732" starttime="20170809 03:05:40.557"></status>
</kw>
<msg timestamp="20170809 03:05:40.732" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:05:40.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:40.732" starttime="20170809 03:05:40.556"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:05:40.733" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:40.733" starttime="20170809 03:05:40.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:05:40.734" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:40.734" starttime="20170809 03:05:40.733"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:40.734" starttime="20170809 03:05:40.553"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:40.734" starttime="20170809 03:05:40.552"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:40.734" starttime="20170809 03:05:40.551"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:05:40.735" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170809 03:05:40.735" starttime="20170809 03:05:40.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:05:40.735" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170809 03:05:40.736" starttime="20170809 03:05:40.735"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:40.736" starttime="20170809 03:05:40.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:40.737" starttime="20170809 03:05:40.736"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:05:47.897" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170809 03:05:47.897" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:47.897" starttime="20170809 03:05:40.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:47.898" starttime="20170809 03:05:47.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:05:47.899" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:47.899" starttime="20170809 03:05:47.898"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:05:47.899" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:05:47.899" starttime="20170809 03:05:47.899"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:47.899" starttime="20170809 03:05:40.551"></status>
</kw>
<kw name="Verify Image Upload" library="test_uploadimage">
<doc>Verify the image was uploaded correctly and that it created</doc>
<assign>
<var>${ret}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 03:05:47.909" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 03:05:47.909" starttime="20170809 03:05:47.909"></status>
</kw>
<msg timestamp="20170809 03:05:47.909" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 03:05:47.909" starttime="20170809 03:05:47.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:47.911" starttime="20170809 03:05:47.910"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:47.911" starttime="20170809 03:05:47.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:47.911" starttime="20170809 03:05:47.911"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 03:05:47.913" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 03:05:47.913" starttime="20170809 03:05:47.912"></status>
</kw>
<msg timestamp="20170809 03:05:47.913" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 03:05:47.913" starttime="20170809 03:05:47.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:47.915" starttime="20170809 03:05:47.914"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:47.915" starttime="20170809 03:05:47.914"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:47.915" starttime="20170809 03:05:47.913"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 03:05:47.915" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 03:05:49.994" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 03:05:49.994" starttime="20170809 03:05:47.915"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:49.994" starttime="20170809 03:05:47.908"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 03:05:50.011" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20170809 03:05:50.069" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 03:05:50.069" level="INFO">${stdout} = /tmp/images/136cf504/</msg>
<msg timestamp="20170809 03:05:50.069" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 03:05:50.069" starttime="20170809 03:05:50.011"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 03:05:50.070" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 03:05:50.070" starttime="20170809 03:05:50.070"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:50.070" starttime="20170809 03:05:50.010"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 03:05:50.076" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 03:05:50.076" starttime="20170809 03:05:50.076"></status>
</kw>
<msg timestamp="20170809 03:05:50.076" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 03:05:50.076" starttime="20170809 03:05:50.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:50.077" starttime="20170809 03:05:50.077"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:50.077" starttime="20170809 03:05:50.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:50.078" starttime="20170809 03:05:50.078"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 03:05:50.079" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 03:05:50.079" starttime="20170809 03:05:50.079"></status>
</kw>
<msg timestamp="20170809 03:05:50.079" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 03:05:50.079" starttime="20170809 03:05:50.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:50.081" starttime="20170809 03:05:50.081"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:50.081" starttime="20170809 03:05:50.080"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:50.081" starttime="20170809 03:05:50.079"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 03:05:50.082" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 03:05:51.726" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 03:05:51.726" starttime="20170809 03:05:50.081"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:51.726" starttime="20170809 03:05:50.074"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/136cf504/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 03:05:51.744" level="INFO">Executing command 'cat /tmp/images/136cf504/MANIFEST | grep "version="'.</msg>
<msg timestamp="20170809 03:05:51.818" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 03:05:51.819" level="INFO">${stdout} = version=IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87
extended_version=op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v...</msg>
<msg timestamp="20170809 03:05:51.819" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 03:05:51.819" starttime="20170809 03:05:51.743"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 03:05:51.819" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 03:05:51.819" starttime="20170809 03:05:51.819"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:51.819" starttime="20170809 03:05:51.743"></status>
</kw>
<msg timestamp="20170809 03:05:51.820" level="INFO">${version_id} = 136cf504</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 03:05:51.825" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 03:05:51.825" starttime="20170809 03:05:51.825"></status>
</kw>
<msg timestamp="20170809 03:05:51.825" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 03:05:51.825" starttime="20170809 03:05:51.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:51.826" starttime="20170809 03:05:51.826"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:51.826" starttime="20170809 03:05:51.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:51.827" starttime="20170809 03:05:51.827"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 03:05:51.828" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 03:05:51.828" starttime="20170809 03:05:51.828"></status>
</kw>
<msg timestamp="20170809 03:05:51.828" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 03:05:51.828" starttime="20170809 03:05:51.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:51.830" starttime="20170809 03:05:51.830"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:51.830" starttime="20170809 03:05:51.829"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:51.830" starttime="20170809 03:05:51.829"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 03:05:51.831" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 03:05:53.506" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 03:05:53.507" starttime="20170809 03:05:51.831"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:53.507" starttime="20170809 03:05:51.824"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 03:05:53.513" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 03:05:53.513" starttime="20170809 03:05:53.513"></status>
</kw>
<msg timestamp="20170809 03:05:53.513" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 03:05:53.513" starttime="20170809 03:05:53.512"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:53.515" starttime="20170809 03:05:53.515"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:53.515" starttime="20170809 03:05:53.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:53.516" starttime="20170809 03:05:53.516"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 03:05:53.518" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 03:05:53.518" starttime="20170809 03:05:53.517"></status>
</kw>
<msg timestamp="20170809 03:05:53.518" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 03:05:53.518" starttime="20170809 03:05:53.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:53.520" starttime="20170809 03:05:53.520"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:53.520" starttime="20170809 03:05:53.519"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:53.520" starttime="20170809 03:05:53.518"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 03:05:53.521" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 03:05:55.200" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 03:05:55.200" starttime="20170809 03:05:53.520"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:55.200" starttime="20170809 03:05:53.511"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/136cf504/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 03:05:55.217" level="INFO">Executing command 'cat /tmp/images/136cf504/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20170809 03:05:55.293" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 03:05:55.293" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<msg timestamp="20170809 03:05:55.293" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 03:05:55.294" starttime="20170809 03:05:55.216"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 03:05:55.294" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 03:05:55.294" starttime="20170809 03:05:55.294"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:55.294" starttime="20170809 03:05:55.216"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:05:55.313" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:05:55.313" starttime="20170809 03:05:55.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:05:55.314" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:05:55.314" starttime="20170809 03:05:55.314"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:05:55.315" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:05:55.315" starttime="20170809 03:05:55.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:05:55.315" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:05:55.316" starttime="20170809 03:05:55.315"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:05:55.507" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:05:55.508" starttime="20170809 03:05:55.316"></status>
</kw>
<msg timestamp="20170809 03:05:55.508" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:05:55.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:55.508" starttime="20170809 03:05:55.316"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:05:55.508" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:55.509" starttime="20170809 03:05:55.508"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:05:55.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:55.509" starttime="20170809 03:05:55.509"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:55.509" starttime="20170809 03:05:55.312"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:55.509" starttime="20170809 03:05:55.312"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:55.510" starttime="20170809 03:05:55.311"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:05:55.510" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504/attr/Activation</msg>
<status status="PASS" endtime="20170809 03:05:55.510" starttime="20170809 03:05:55.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:55.511" starttime="20170809 03:05:55.511"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:05:55.635" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170809 03:05:55.636" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:55.636" starttime="20170809 03:05:55.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:55.636" starttime="20170809 03:05:55.636"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:05:55.637" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:05:55.637" starttime="20170809 03:05:55.637"></status>
</kw>
<msg timestamp="20170809 03:05:55.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:55.637" starttime="20170809 03:05:55.310"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:05:55.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:55.638" starttime="20170809 03:05:55.637"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:05:55.638" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:05:55.638" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:05:55.639" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20170809 03:05:55.639" starttime="20170809 03:05:55.638"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:55.639" starttime="20170809 03:05:55.310"></status>
</kw>
<msg timestamp="20170809 03:05:55.639" level="INFO">${ret} = True</msg>
<status status="PASS" endtime="20170809 03:05:55.639" starttime="20170809 03:05:47.900"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:55.640" starttime="20170809 03:05:55.639"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:05:55.643" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:05:55.643" starttime="20170809 03:05:55.643"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:05:55.644" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:05:55.644" starttime="20170809 03:05:55.644"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:05:55.645" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:05:55.645" starttime="20170809 03:05:55.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:05:55.645" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:05:55.645" starttime="20170809 03:05:55.645"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:05:55.820" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:05:55.820" starttime="20170809 03:05:55.646"></status>
</kw>
<msg timestamp="20170809 03:05:55.820" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:05:55.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:55.820" starttime="20170809 03:05:55.646"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:05:55.821" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:55.821" starttime="20170809 03:05:55.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:05:55.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:55.822" starttime="20170809 03:05:55.821"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:55.822" starttime="20170809 03:05:55.642"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:55.822" starttime="20170809 03:05:55.642"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:55.823" starttime="20170809 03:05:55.641"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:05:55.823" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 03:05:55.824" starttime="20170809 03:05:55.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:55.824" starttime="20170809 03:05:55.824"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:05:56.010" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 03:05:56.010" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:56.010" starttime="20170809 03:05:55.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:56.011" starttime="20170809 03:05:56.010"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:05:56.011" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:05:56.011" starttime="20170809 03:05:56.011"></status>
</kw>
<msg timestamp="20170809 03:05:56.012" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:56.012" starttime="20170809 03:05:55.640"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:05:56.012" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:56.012" starttime="20170809 03:05:56.012"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:05:56.013" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:05:56.013" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:05:56.013" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpose': ...</msg>
<status status="PASS" endtime="20170809 03:05:56.013" starttime="20170809 03:05:56.013"></status>
</kw>
<msg timestamp="20170809 03:05:56.013" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpo...</msg>
<status status="PASS" endtime="20170809 03:05:56.013" starttime="20170809 03:05:55.640"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20170809 03:05:56.014" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:56.014" starttime="20170809 03:05:56.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170809 03:05:56.015" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20170809 03:05:56.015" starttime="20170809 03:05:56.014"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:05:56.016" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 03:05:56.016" starttime="20170809 03:05:56.016"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:05:56.019" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:05:56.020" starttime="20170809 03:05:56.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:05:56.020" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:05:56.020" starttime="20170809 03:05:56.020"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:05:56.021" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:05:56.021" starttime="20170809 03:05:56.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:05:56.021" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:05:56.021" starttime="20170809 03:05:56.021"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:05:56.213" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:05:56.213" starttime="20170809 03:05:56.023"></status>
</kw>
<msg timestamp="20170809 03:05:56.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:05:56.214" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:56.214" starttime="20170809 03:05:56.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:05:56.214" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:56.215" starttime="20170809 03:05:56.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:05:56.215" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:56.215" starttime="20170809 03:05:56.215"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:56.215" starttime="20170809 03:05:56.018"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:56.215" starttime="20170809 03:05:56.018"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:56.216" starttime="20170809 03:05:56.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:05:56.216" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504/attr/RequestedActivation</msg>
<status status="PASS" endtime="20170809 03:05:56.216" starttime="20170809 03:05:56.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:05:56.217" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:05:56.217" starttime="20170809 03:05:56.216"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:56.217" starttime="20170809 03:05:56.217"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 03:05:56.219" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/136cf504/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'he...</msg>
<status status="PASS" endtime="20170809 03:05:56.219" starttime="20170809 03:05:56.218"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 03:05:56.220" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/136cf504/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170809 03:05:56.220" starttime="20170809 03:05:56.220"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:56.220" starttime="20170809 03:05:56.219"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:56.220" starttime="20170809 03:05:56.217"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:05:56.923" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 03:05:56.924" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:56.924" starttime="20170809 03:05:56.220"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 03:05:56.925" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 03:05:56.925" starttime="20170809 03:05:56.924"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 03:05:56.926" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 03:05:56.926" starttime="20170809 03:05:56.926"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:56.927" starttime="20170809 03:05:56.926"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:56.927" starttime="20170809 03:05:56.924"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:05:56.927" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:05:56.927" starttime="20170809 03:05:56.927"></status>
</kw>
<msg timestamp="20170809 03:05:56.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:56.928" starttime="20170809 03:05:56.016"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:05:56.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:56.929" starttime="20170809 03:05:56.928"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 03:05:56.930" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:05:56.930" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:05:56.930" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170809 03:05:56.930" starttime="20170809 03:05:56.929"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:56.930" starttime="20170809 03:05:56.015"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:05:56.933" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:05:56.934" starttime="20170809 03:05:56.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:05:56.934" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:05:56.934" starttime="20170809 03:05:56.934"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:05:56.935" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:05:56.935" starttime="20170809 03:05:56.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:05:56.936" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:05:56.936" starttime="20170809 03:05:56.935"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:05:57.487" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:05:57.487" starttime="20170809 03:05:56.936"></status>
</kw>
<msg timestamp="20170809 03:05:57.487" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:05:57.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:57.488" starttime="20170809 03:05:56.936"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:05:57.488" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:57.488" starttime="20170809 03:05:57.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:05:57.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:57.489" starttime="20170809 03:05:57.489"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:57.489" starttime="20170809 03:05:56.932"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:57.489" starttime="20170809 03:05:56.932"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:57.489" starttime="20170809 03:05:56.931"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:05:57.490" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 03:05:57.490" starttime="20170809 03:05:57.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:57.491" starttime="20170809 03:05:57.490"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:05:57.754" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 03:05:57.754" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:57.754" starttime="20170809 03:05:57.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:57.755" starttime="20170809 03:05:57.755"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:05:57.756" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:05:57.756" starttime="20170809 03:05:57.755"></status>
</kw>
<msg timestamp="20170809 03:05:57.756" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:05:57.756" starttime="20170809 03:05:56.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:05:57.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:57.757" starttime="20170809 03:05:57.756"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:05:57.757" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:05:57.757" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:05:57.757" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpo...</msg>
<status status="PASS" endtime="20170809 03:05:57.757" starttime="20170809 03:05:57.757"></status>
</kw>
<msg timestamp="20170809 03:05:57.758" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpose': u'xyz.openbmc_project.Software.Version.Version...</msg>
<status status="PASS" endtime="20170809 03:05:57.758" starttime="20170809 03:05:56.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20170809 03:05:57.759" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170809 03:05:57.759" starttime="20170809 03:05:57.758"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 03:05:57.766" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 03:05:57.766" starttime="20170809 03:05:57.766"></status>
</kw>
<msg timestamp="20170809 03:05:57.766" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 03:05:57.766" starttime="20170809 03:05:57.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:57.767" starttime="20170809 03:05:57.767"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:57.768" starttime="20170809 03:05:57.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:57.768" starttime="20170809 03:05:57.768"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 03:05:57.769" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 03:05:57.769" starttime="20170809 03:05:57.769"></status>
</kw>
<msg timestamp="20170809 03:05:57.769" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 03:05:57.769" starttime="20170809 03:05:57.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:05:57.771" starttime="20170809 03:05:57.771"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:57.772" starttime="20170809 03:05:57.770"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:57.772" starttime="20170809 03:05:57.770"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 03:05:57.772" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 03:05:59.895" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 03:05:59.895" starttime="20170809 03:05:57.772"></status>
</kw>
<status status="PASS" endtime="20170809 03:05:59.895" starttime="20170809 03:05:57.765"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:05:59.914" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:05:59.915" starttime="20170809 03:05:59.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:05:59.915" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:05:59.915" starttime="20170809 03:05:59.915"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:05:59.916" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:05:59.916" starttime="20170809 03:05:59.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:05:59.917" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:05:59.917" starttime="20170809 03:05:59.916"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:06:00.306" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:06:00.306" starttime="20170809 03:05:59.917"></status>
</kw>
<msg timestamp="20170809 03:06:00.307" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:06:00.307" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:06:00.307" starttime="20170809 03:05:59.917"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:06:00.307" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:06:00.307" starttime="20170809 03:06:00.307"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:06:00.308" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:06:00.308" starttime="20170809 03:06:00.308"></status>
</kw>
<status status="PASS" endtime="20170809 03:06:00.308" starttime="20170809 03:05:59.914"></status>
</kw>
<status status="PASS" endtime="20170809 03:06:00.308" starttime="20170809 03:05:59.913"></status>
</kw>
<status status="PASS" endtime="20170809 03:06:00.308" starttime="20170809 03:05:59.913"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:06:00.309" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 03:06:00.309" starttime="20170809 03:06:00.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:06:00.310" starttime="20170809 03:06:00.309"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:06:00.577" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 03:06:00.577" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:06:00.577" starttime="20170809 03:06:00.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:06:00.578" starttime="20170809 03:06:00.577"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:06:00.579" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:06:00.579" starttime="20170809 03:06:00.578"></status>
</kw>
<msg timestamp="20170809 03:06:00.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:06:00.579" starttime="20170809 03:05:59.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:06:00.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:06:00.580" starttime="20170809 03:06:00.579"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:06:00.580" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:06:00.581" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:06:00.581" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpo...</msg>
<status status="PASS" endtime="20170809 03:06:00.581" starttime="20170809 03:06:00.580"></status>
</kw>
<status status="PASS" endtime="20170809 03:06:00.581" starttime="20170809 03:05:59.911"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:07:00.627" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:07:00.627" starttime="20170809 03:07:00.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:07:00.628" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:07:00.628" starttime="20170809 03:07:00.627"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:07:00.628" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:07:00.628" starttime="20170809 03:07:00.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:07:00.629" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:07:00.629" starttime="20170809 03:07:00.629"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:07:01.544" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:07:01.544" starttime="20170809 03:07:00.630"></status>
</kw>
<msg timestamp="20170809 03:07:01.544" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:07:01.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:07:01.544" starttime="20170809 03:07:00.629"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:07:01.545" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:07:01.545" starttime="20170809 03:07:01.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:07:01.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:07:01.546" starttime="20170809 03:07:01.545"></status>
</kw>
<status status="PASS" endtime="20170809 03:07:01.546" starttime="20170809 03:07:00.626"></status>
</kw>
<status status="PASS" endtime="20170809 03:07:01.546" starttime="20170809 03:07:00.625"></status>
</kw>
<status status="PASS" endtime="20170809 03:07:01.546" starttime="20170809 03:07:00.625"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:07:01.547" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 03:07:01.547" starttime="20170809 03:07:01.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:07:01.547" starttime="20170809 03:07:01.547"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:07:01.690" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 03:07:01.690" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:07:01.690" starttime="20170809 03:07:01.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:07:01.691" starttime="20170809 03:07:01.690"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:07:01.691" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:07:01.691" starttime="20170809 03:07:01.691"></status>
</kw>
<msg timestamp="20170809 03:07:01.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:07:01.691" starttime="20170809 03:07:00.624"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:07:01.692" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:07:01.692" starttime="20170809 03:07:01.692"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:07:01.693" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:07:01.693" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:07:01.693" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpo...</msg>
<status status="PASS" endtime="20170809 03:07:01.693" starttime="20170809 03:07:01.692"></status>
</kw>
<status status="PASS" endtime="20170809 03:07:01.693" starttime="20170809 03:07:00.623"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:08:01.773" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:08:01.774" starttime="20170809 03:08:01.773"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:08:01.774" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:08:01.775" starttime="20170809 03:08:01.774"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:08:01.775" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:08:01.775" starttime="20170809 03:08:01.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:08:01.776" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:08:01.776" starttime="20170809 03:08:01.776"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:08:03.106" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:08:03.106" starttime="20170809 03:08:01.777"></status>
</kw>
<msg timestamp="20170809 03:08:03.106" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:08:03.106" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:08:03.106" starttime="20170809 03:08:01.776"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:08:03.107" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:08:03.107" starttime="20170809 03:08:03.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:08:03.108" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:08:03.108" starttime="20170809 03:08:03.107"></status>
</kw>
<status status="PASS" endtime="20170809 03:08:03.108" starttime="20170809 03:08:01.773"></status>
</kw>
<status status="PASS" endtime="20170809 03:08:03.108" starttime="20170809 03:08:01.772"></status>
</kw>
<status status="PASS" endtime="20170809 03:08:03.108" starttime="20170809 03:08:01.771"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:08:03.109" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 03:08:03.109" starttime="20170809 03:08:03.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:08:03.110" starttime="20170809 03:08:03.109"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:08:03.258" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 03:08:03.258" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:08:03.258" starttime="20170809 03:08:03.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:08:03.259" starttime="20170809 03:08:03.258"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:08:03.260" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:08:03.260" starttime="20170809 03:08:03.259"></status>
</kw>
<msg timestamp="20170809 03:08:03.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:08:03.260" starttime="20170809 03:08:01.770"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:08:03.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:08:03.261" starttime="20170809 03:08:03.260"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:08:03.261" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:08:03.261" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:08:03.261" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpo...</msg>
<status status="PASS" endtime="20170809 03:08:03.261" starttime="20170809 03:08:03.261"></status>
</kw>
<status status="PASS" endtime="20170809 03:08:03.262" starttime="20170809 03:08:01.770"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:09:03.323" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:09:03.324" starttime="20170809 03:09:03.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:09:03.325" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:09:03.325" starttime="20170809 03:09:03.324"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:09:03.326" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:09:03.326" starttime="20170809 03:09:03.325"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:09:03.327" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:09:03.327" starttime="20170809 03:09:03.326"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:09:04.201" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:09:04.201" starttime="20170809 03:09:03.328"></status>
</kw>
<msg timestamp="20170809 03:09:04.201" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:09:04.201" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:09:04.202" starttime="20170809 03:09:03.327"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:09:04.202" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:09:04.202" starttime="20170809 03:09:04.202"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:09:04.203" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:09:04.203" starttime="20170809 03:09:04.203"></status>
</kw>
<status status="PASS" endtime="20170809 03:09:04.203" starttime="20170809 03:09:03.322"></status>
</kw>
<status status="PASS" endtime="20170809 03:09:04.203" starttime="20170809 03:09:03.321"></status>
</kw>
<status status="PASS" endtime="20170809 03:09:04.203" starttime="20170809 03:09:03.320"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:09:04.204" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 03:09:04.204" starttime="20170809 03:09:04.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:09:04.205" starttime="20170809 03:09:04.204"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:09:04.355" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 03:09:04.355" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:09:04.355" starttime="20170809 03:09:04.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:09:04.356" starttime="20170809 03:09:04.355"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:09:04.357" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:09:04.357" starttime="20170809 03:09:04.356"></status>
</kw>
<msg timestamp="20170809 03:09:04.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:09:04.357" starttime="20170809 03:09:03.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:09:04.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:09:04.358" starttime="20170809 03:09:04.357"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:09:04.358" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:09:04.358" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:09:04.358" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpo...</msg>
<status status="PASS" endtime="20170809 03:09:04.358" starttime="20170809 03:09:04.358"></status>
</kw>
<status status="PASS" endtime="20170809 03:09:04.359" starttime="20170809 03:09:03.318"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:10:04.379" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:10:04.380" starttime="20170809 03:10:04.379"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:10:04.380" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:10:04.380" starttime="20170809 03:10:04.380"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:10:04.381" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:10:04.381" starttime="20170809 03:10:04.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:10:04.382" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:10:04.382" starttime="20170809 03:10:04.381"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:10:04.558" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:10:04.558" starttime="20170809 03:10:04.383"></status>
</kw>
<msg timestamp="20170809 03:10:04.558" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:10:04.558" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:10:04.558" starttime="20170809 03:10:04.382"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:10:04.559" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:10:04.559" starttime="20170809 03:10:04.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:10:04.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:10:04.560" starttime="20170809 03:10:04.559"></status>
</kw>
<status status="PASS" endtime="20170809 03:10:04.560" starttime="20170809 03:10:04.379"></status>
</kw>
<status status="PASS" endtime="20170809 03:10:04.560" starttime="20170809 03:10:04.378"></status>
</kw>
<status status="PASS" endtime="20170809 03:10:04.560" starttime="20170809 03:10:04.377"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:10:04.561" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 03:10:04.561" starttime="20170809 03:10:04.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:10:04.561" starttime="20170809 03:10:04.561"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:10:04.704" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 03:10:04.704" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:10:04.704" starttime="20170809 03:10:04.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:10:04.705" starttime="20170809 03:10:04.705"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:10:04.706" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:10:04.706" starttime="20170809 03:10:04.706"></status>
</kw>
<msg timestamp="20170809 03:10:04.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:10:04.706" starttime="20170809 03:10:04.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:10:04.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:10:04.707" starttime="20170809 03:10:04.706"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:10:04.707" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:10:04.708" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:10:04.708" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpo...</msg>
<status status="PASS" endtime="20170809 03:10:04.708" starttime="20170809 03:10:04.707"></status>
</kw>
<status status="PASS" endtime="20170809 03:10:04.708" starttime="20170809 03:10:04.376"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:11:04.747" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:11:04.748" starttime="20170809 03:11:04.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:11:04.748" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:11:04.748" starttime="20170809 03:11:04.748"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:11:04.749" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:11:04.749" starttime="20170809 03:11:04.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:11:04.750" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:11:04.750" starttime="20170809 03:11:04.749"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:11:04.926" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:11:04.926" starttime="20170809 03:11:04.750"></status>
</kw>
<msg timestamp="20170809 03:11:04.926" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:11:04.926" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:11:04.926" starttime="20170809 03:11:04.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:11:04.927" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:11:04.927" starttime="20170809 03:11:04.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:11:04.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:11:04.927" starttime="20170809 03:11:04.927"></status>
</kw>
<status status="PASS" endtime="20170809 03:11:04.928" starttime="20170809 03:11:04.746"></status>
</kw>
<status status="PASS" endtime="20170809 03:11:04.928" starttime="20170809 03:11:04.746"></status>
</kw>
<status status="PASS" endtime="20170809 03:11:04.928" starttime="20170809 03:11:04.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:11:04.928" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 03:11:04.928" starttime="20170809 03:11:04.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:11:04.929" starttime="20170809 03:11:04.929"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:11:05.084" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 03:11:05.084" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:11:05.084" starttime="20170809 03:11:04.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:11:05.085" starttime="20170809 03:11:05.084"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:11:05.085" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:11:05.086" starttime="20170809 03:11:05.085"></status>
</kw>
<msg timestamp="20170809 03:11:05.086" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:11:05.086" starttime="20170809 03:11:04.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:11:05.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:11:05.086" starttime="20170809 03:11:05.086"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:11:05.087" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:11:05.087" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:11:05.087" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpo...</msg>
<status status="PASS" endtime="20170809 03:11:05.087" starttime="20170809 03:11:05.087"></status>
</kw>
<status status="PASS" endtime="20170809 03:11:05.088" starttime="20170809 03:11:04.744"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:12:05.116" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:12:05.117" starttime="20170809 03:12:05.116"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:12:05.117" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:12:05.117" starttime="20170809 03:12:05.117"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:12:05.118" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:12:05.118" starttime="20170809 03:12:05.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:12:05.119" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:12:05.119" starttime="20170809 03:12:05.118"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:12:05.300" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:12:05.300" starttime="20170809 03:12:05.120"></status>
</kw>
<msg timestamp="20170809 03:12:05.300" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:12:05.300" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:12:05.300" starttime="20170809 03:12:05.119"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:12:05.301" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:12:05.301" starttime="20170809 03:12:05.301"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:12:05.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:12:05.302" starttime="20170809 03:12:05.301"></status>
</kw>
<status status="PASS" endtime="20170809 03:12:05.302" starttime="20170809 03:12:05.115"></status>
</kw>
<status status="PASS" endtime="20170809 03:12:05.302" starttime="20170809 03:12:05.115"></status>
</kw>
<status status="PASS" endtime="20170809 03:12:05.302" starttime="20170809 03:12:05.114"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:12:05.303" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 03:12:05.303" starttime="20170809 03:12:05.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:12:05.303" starttime="20170809 03:12:05.303"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:12:06.943" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 03:12:06.943" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:12:06.944" starttime="20170809 03:12:05.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:12:06.945" starttime="20170809 03:12:06.944"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:12:06.945" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:12:06.945" starttime="20170809 03:12:06.945"></status>
</kw>
<msg timestamp="20170809 03:12:06.945" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:12:06.945" starttime="20170809 03:12:05.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:12:06.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:12:06.946" starttime="20170809 03:12:06.946"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:12:06.947" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Progress": 60, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:12:06.947" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:12:06.947" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpo...</msg>
<status status="PASS" endtime="20170809 03:12:06.947" starttime="20170809 03:12:06.946"></status>
</kw>
<status status="PASS" endtime="20170809 03:12:06.947" starttime="20170809 03:12:05.113"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:13:07.026" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:13:07.027" starttime="20170809 03:13:07.026"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:13:07.027" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:13:07.027" starttime="20170809 03:13:07.027"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:13:07.028" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:13:07.028" starttime="20170809 03:13:07.028"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:13:07.029" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:13:07.029" starttime="20170809 03:13:07.028"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:13:07.232" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:13:07.232" starttime="20170809 03:13:07.030"></status>
</kw>
<msg timestamp="20170809 03:13:07.232" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:13:07.232" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.232" starttime="20170809 03:13:07.029"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:13:07.233" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.233" starttime="20170809 03:13:07.232"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:13:07.233" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.234" starttime="20170809 03:13:07.233"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:07.234" starttime="20170809 03:13:07.026"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:07.234" starttime="20170809 03:13:07.025"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:07.234" starttime="20170809 03:13:07.025"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:13:07.234" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 03:13:07.234" starttime="20170809 03:13:07.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:07.235" starttime="20170809 03:13:07.235"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:13:07.429" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 03:13:07.429" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.429" starttime="20170809 03:13:07.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:07.430" starttime="20170809 03:13:07.430"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:13:07.430" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:13:07.430" starttime="20170809 03:13:07.430"></status>
</kw>
<msg timestamp="20170809 03:13:07.431" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.431" starttime="20170809 03:13:07.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:13:07.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.431" starttime="20170809 03:13:07.431"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:13:07.432" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:13:07.432" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:13:07.432" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Priority': 0, u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1....</msg>
<status status="PASS" endtime="20170809 03:13:07.432" starttime="20170809 03:13:07.432"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:07.433" starttime="20170809 03:13:07.023"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:07.433" starttime="20170809 03:05:57.760"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:13:07.436" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:13:07.436" starttime="20170809 03:13:07.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:13:07.437" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:13:07.437" starttime="20170809 03:13:07.436"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:13:07.437" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:13:07.437" starttime="20170809 03:13:07.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:13:07.438" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:13:07.438" starttime="20170809 03:13:07.438"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:13:07.636" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:13:07.636" starttime="20170809 03:13:07.439"></status>
</kw>
<msg timestamp="20170809 03:13:07.636" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:13:07.636" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.636" starttime="20170809 03:13:07.438"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:13:07.637" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.637" starttime="20170809 03:13:07.636"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:13:07.637" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.637" starttime="20170809 03:13:07.637"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:07.638" starttime="20170809 03:13:07.435"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:07.638" starttime="20170809 03:13:07.435"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:07.638" starttime="20170809 03:13:07.434"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:13:07.638" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 03:13:07.638" starttime="20170809 03:13:07.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:07.639" starttime="20170809 03:13:07.639"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:13:07.771" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 03:13:07.771" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.771" starttime="20170809 03:13:07.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:07.772" starttime="20170809 03:13:07.771"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:13:07.773" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:13:07.773" starttime="20170809 03:13:07.772"></status>
</kw>
<msg timestamp="20170809 03:13:07.773" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.773" starttime="20170809 03:13:07.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:13:07.774" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.774" starttime="20170809 03:13:07.774"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:13:07.775" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:13:07.775" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:13:07.775" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Priority': 0, u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1....</msg>
<status status="PASS" endtime="20170809 03:13:07.775" starttime="20170809 03:13:07.775"></status>
</kw>
<msg timestamp="20170809 03:13:07.776" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Priority': 0, u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpose': u'xyz.openbmc_project.Software.Ver...</msg>
<status status="PASS" endtime="20170809 03:13:07.776" starttime="20170809 03:13:07.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20170809 03:13:07.782" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170809 03:13:07.782" starttime="20170809 03:13:07.776"></status>
</kw>
<kw type="teardown" name="Code Update Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 03:13:07.784" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 03:13:07.784" starttime="20170809 03:13:07.784"></status>
</kw>
<msg timestamp="20170809 03:13:07.784" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 03:13:07.785" starttime="20170809 03:13:07.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:07.786" starttime="20170809 03:13:07.785"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:07.786" starttime="20170809 03:13:07.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:07.786" starttime="20170809 03:13:07.786"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 03:13:07.787" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 03:13:07.788" starttime="20170809 03:13:07.787"></status>
</kw>
<msg timestamp="20170809 03:13:07.788" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 03:13:07.788" starttime="20170809 03:13:07.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:07.789" starttime="20170809 03:13:07.789"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:07.790" starttime="20170809 03:13:07.789"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:07.790" starttime="20170809 03:13:07.788"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 03:13:07.790" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 03:13:09.471" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 03:13:09.471" starttime="20170809 03:13:07.790"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:09.472" starttime="20170809 03:13:07.783"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -rf /tmp/images/*</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 03:13:09.473" level="INFO">Executing command 'rm -rf /tmp/images/*'.</msg>
<msg timestamp="20170809 03:13:09.540" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 03:13:09.540" level="INFO">${stdout} = </msg>
<msg timestamp="20170809 03:13:09.540" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 03:13:09.540" starttime="20170809 03:13:09.473"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 03:13:09.541" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 03:13:09.541" starttime="20170809 03:13:09.541"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:09.541" starttime="20170809 03:13:09.472"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170809 03:13:09.699" starttime="20170809 03:13:09.541"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 03:13:09.704" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 03:13:09.704" starttime="20170809 03:13:09.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 03:13:09.704" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 03:13:09.705" starttime="20170809 03:13:09.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 03:13:09.705" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 03:13:09.705" starttime="20170809 03:13:09.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 03:13:09.706" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 03:13:09.706" starttime="20170809 03:13:09.705"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 03:13:10.284" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 03:13:10.284" starttime="20170809 03:13:09.707"></status>
</kw>
<msg timestamp="20170809 03:13:10.284" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 03:13:10.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:13:10.284" starttime="20170809 03:13:09.706"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 03:13:10.285" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:13:10.285" starttime="20170809 03:13:10.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:13:10.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:13:10.286" starttime="20170809 03:13:10.285"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:10.286" starttime="20170809 03:13:09.703"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:10.286" starttime="20170809 03:13:09.702"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:10.286" starttime="20170809 03:13:09.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 03:13:10.287" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170809 03:13:10.287" starttime="20170809 03:13:10.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:10.287" starttime="20170809 03:13:10.287"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 03:13:10.377" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 03:13:10.377" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:13:10.377" starttime="20170809 03:13:10.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:10.378" starttime="20170809 03:13:10.378"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 03:13:10.379" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 03:13:10.379" starttime="20170809 03:13:10.378"></status>
</kw>
<msg timestamp="20170809 03:13:10.379" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 03:13:10.379" starttime="20170809 03:13:09.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 03:13:10.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 03:13:10.380" starttime="20170809 03:13:10.379"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 03:13:10.380" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 03:13:10.380" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 03:13:10.380" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170809 03:13:10.380" starttime="20170809 03:13:10.380"></status>
</kw>
<msg timestamp="20170809 03:13:10.381" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170809 03:13:10.381" starttime="20170809 03:13:09.700"></status>
</kw>
<msg timestamp="20170809 03:13:10.381" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170809 03:13:10.381" starttime="20170809 03:13:09.700"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170809 03:13:10.382" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170809 03:13:10.382" starttime="20170809 03:13:10.382"></status>
</kw>
<msg timestamp="20170809 03:13:10.382" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 03:13:10.382" starttime="20170809 03:13:10.381"></status>
</kw>
<msg timestamp="20170809 03:13:10.382" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 03:13:10.383" starttime="20170809 03:13:09.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:10.383" starttime="20170809 03:13:10.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:10.384" starttime="20170809 03:13:10.383"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170809 03:13:10.394" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170809 03:13:10.394" starttime="20170809 03:13:10.384"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170809 03:13:10.403" level="INFO">${FFDC_DIR_PATH} = </msg>
<status status="PASS" endtime="20170809 03:13:10.403" starttime="20170809 03:13:10.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 03:13:10.405" level="INFO">${cur_time} = 2017-08-09 03:13:10:404338</msg>
<status status="PASS" endtime="20170809 03:13:10.405" starttime="20170809 03:13:10.404"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 03:13:10.405" level="INFO">${cur_time} = 20170809031310404338</msg>
<status status="PASS" endtime="20170809 03:13:10.405" starttime="20170809 03:13:10.405"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:10.405" starttime="20170809 03:13:10.404"></status>
</kw>
<msg timestamp="20170809 03:13:10.410" level="INFO">${FFDC_TIME} = 20170809031310404338</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 03:13:10.413" level="INFO">${suite_name} = CodeUpdate</msg>
<status status="PASS" endtime="20170809 03:13:10.413" starttime="20170809 03:13:10.412"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 03:13:10.414" level="INFO">${suite_name} = 20170809031310404338_CodeUpdate</msg>
<status status="PASS" endtime="20170809 03:13:10.414" starttime="20170809 03:13:10.413"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 03:13:10.414" level="INFO">${test_name} = RESTPNORCodeUpdate</msg>
<status status="PASS" endtime="20170809 03:13:10.414" starttime="20170809 03:13:10.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 03:13:10.415" level="INFO">${test_name} = 20170809031310404338_RESTPNORCodeUpdate</msg>
<status status="PASS" endtime="20170809 03:13:10.415" starttime="20170809 03:13:10.415"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:10.415" starttime="20170809 03:13:10.411"></status>
</kw>
<msg timestamp="20170809 03:13:10.415" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170809031310404338_CodeUpdate/20170809031310404338_RESTPNORCodeUpdate/</msg>
<msg timestamp="20170809 03:13:10.420" level="INFO">${FFDC_PREFIX} = 20170809031310404338_</msg>
<status status="PASS" endtime="20170809 03:13:10.420" starttime="20170809 03:13:10.403"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:10.421" starttime="20170809 03:13:10.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:10.421" starttime="20170809 03:13:10.421"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170809 03:13:10.422" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170809 03:13:10.422" starttime="20170809 03:13:10.421"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170809 03:13:10.423" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170809 03:13:10.423" starttime="20170809 03:13:10.422"></status>
</kw>
<msg timestamp="20170809 03:13:10.423" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170809 03:13:10.423" starttime="20170809 03:13:10.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:10.424" starttime="20170809 03:13:10.423"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170809 03:13:10.424" starttime="20170809 03:13:10.424"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 03:13:10.427" level="INFO">${cur_time} = 2017-08-09 03:13:10:426394</msg>
<status status="PASS" endtime="20170809 03:13:10.427" starttime="20170809 03:13:10.426"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 03:13:10.427" level="INFO">${cur_time} = 20170809031310426394</msg>
<status status="PASS" endtime="20170809 03:13:10.427" starttime="20170809 03:13:10.427"></status>
</kw>
<msg timestamp="20170809 03:13:10.427" level="INFO">${cur_time} = 20170809031310426394</msg>
<status status="PASS" endtime="20170809 03:13:10.427" starttime="20170809 03:13:10.425"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170809 03:13:10.428" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 03:13:10.428" starttime="20170809 03:13:10.428"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:10.428" starttime="20170809 03:13:10.384"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:10.429" starttime="20170809 03:13:09.699"></status>
</kw>
<status status="PASS" endtime="20170809 03:13:10.429" starttime="20170809 03:13:07.782"></status>
</kw>
<doc>Do a PNOR code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_PNOR_Code_Update</tag>
</tags>
<status status="PASS" endtime="20170809 03:13:10.429" critical="yes" starttime="20170809 03:05:28.238"></status>
</test>
<doc>Code update to a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v DELETE_OLD_PNOR_IMAGES:&lt;"true" or "false"&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; code_update.robot

Code update method BMC
Update work flow sequence:
- Upload image via REST
- Verify that the file exists on the BMC
- Check software "Activation" status to be "Ready"
- Set "Requested Activation" to "Active"
- Wait for code update to complete
- Verify the new version</doc>
<status status="PASS" endtime="20170809 03:13:10.431" starttime="20170809 03:05:27.617"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="1">Critical Tests</stat>
<stat fail="0" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">REST_PNOR_Code_Update</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="Code Update" pass="1">Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
