<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170807 15:06:55.527" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/code_update.robot" id="s1" name="Code Update">
<test id="s1-t1" name="REST PNOR Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'true' == '${DELETE_OLD_PNOR_IMAGES}'</arg>
<arg>Delete All PNOR Images</arg>
</arguments>
<kw name="Delete All Pnor Images" library="code_update">
<doc>Delete all PNOR images from the BMC.</doc>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/enumerate</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:06:56.295" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:06:56.295" starttime="20170807 15:06:56.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:06:56.296" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:06:56.296" starttime="20170807 15:06:56.296"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:06:56.297" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:06:56.297" starttime="20170807 15:06:56.296"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:06:56.297" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:06:56.297" starttime="20170807 15:06:56.297"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:06:56.527" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:06:56.527" starttime="20170807 15:06:56.298"></status>
</kw>
<msg timestamp="20170807 15:06:56.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:06:56.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:06:56.527" starttime="20170807 15:06:56.298"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:06:56.528" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:06:56.528" starttime="20170807 15:06:56.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:06:56.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:06:56.529" starttime="20170807 15:06:56.528"></status>
</kw>
<status status="PASS" endtime="20170807 15:06:56.529" starttime="20170807 15:06:56.294"></status>
</kw>
<status status="PASS" endtime="20170807 15:06:56.529" starttime="20170807 15:06:56.294"></status>
</kw>
<status status="PASS" endtime="20170807 15:06:56.529" starttime="20170807 15:06:56.293"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:06:56.529" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170807 15:06:56.530" starttime="20170807 15:06:56.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:06:56.530" starttime="20170807 15:06:56.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:06:56.655" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 15:06:56.656" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:06:56.656" starttime="20170807 15:06:56.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:06:56.656" starttime="20170807 15:06:56.656"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:06:56.657" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:06:56.657" starttime="20170807 15:06:56.657"></status>
</kw>
<msg timestamp="20170807 15:06:56.657" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:06:56.657" starttime="20170807 15:06:56.292"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:06:56.658" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:06:56.658" starttime="20170807 15:06:56.657"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:06:56.658" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/c042aa51": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.8-191-g00e005e"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:06:56.658" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:06:56.658" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/software/c042aa51': {u'Path': u'', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedA...</msg>
<status status="PASS" endtime="20170807 15:06:56.659" starttime="20170807 15:06:56.658"></status>
</kw>
<status status="PASS" endtime="20170807 15:06:56.659" starttime="20170807 15:06:56.291"></status>
</kw>
<status status="PASS" endtime="20170807 15:06:56.659" starttime="20170807 15:06:56.132"></status>
</kw>
<status status="PASS" endtime="20170807 15:06:56.659" starttime="20170807 15:06:56.132"></status>
</kw>
<status status="PASS" endtime="20170807 15:06:56.659" starttime="20170807 15:06:56.131"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<msg timestamp="20170807 15:06:56.660" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar"&gt;/home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170807 15:06:56.660" starttime="20170807 15:06:56.659"></status>
</kw>
<kw name="Get Version Tar" library="test_uploadimage">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<assign>
<var>${IMAGE_VERSION}</var>
</assign>
<msg timestamp="20170807 15:06:56.664" level="INFO">${IMAGE_VERSION} = IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88</msg>
<status status="PASS" endtime="20170807 15:06:56.664" starttime="20170807 15:06:56.661"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170807 15:06:56.665" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar"&gt;/home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170807 15:07:08.435" level="INFO">${image_data} = MANIFEST0000664075750014206770000000060213136124465011553 0...</msg>
<status status="PASS" endtime="20170807 15:07:08.436" starttime="20170807 15:06:56.664"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:07:08.441" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:07:08.441" starttime="20170807 15:07:08.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:07:08.442" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:07:08.442" starttime="20170807 15:07:08.442"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:07:08.443" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:07:08.443" starttime="20170807 15:07:08.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:07:08.443" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:07:08.443" starttime="20170807 15:07:08.443"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:07:08.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:07:08.653" starttime="20170807 15:07:08.444"></status>
</kw>
<msg timestamp="20170807 15:07:08.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:07:08.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:08.653" starttime="20170807 15:07:08.444"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:07:08.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:08.654" starttime="20170807 15:07:08.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:07:08.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:08.655" starttime="20170807 15:07:08.654"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:08.655" starttime="20170807 15:07:08.440"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:08.655" starttime="20170807 15:07:08.439"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:08.655" starttime="20170807 15:07:08.438"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:07:08.656" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170807 15:07:08.656" starttime="20170807 15:07:08.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:07:08.656" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170807 15:07:08.656" starttime="20170807 15:07:08.656"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:08.657" starttime="20170807 15:07:08.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:08.658" starttime="20170807 15:07:08.657"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:07:15.887" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170807 15:07:15.888" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:15.888" starttime="20170807 15:07:08.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:15.889" starttime="20170807 15:07:15.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:07:15.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:15.889" starttime="20170807 15:07:15.889"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:07:15.890" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:07:15.890" starttime="20170807 15:07:15.890"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:15.890" starttime="20170807 15:07:08.437"></status>
</kw>
<kw name="Verify Image Upload" library="test_uploadimage">
<doc>Verify the image was uploaded correctly and that it created</doc>
<assign>
<var>${ret}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 15:07:15.896" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 15:07:15.897" starttime="20170807 15:07:15.896"></status>
</kw>
<msg timestamp="20170807 15:07:15.897" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 15:07:15.897" starttime="20170807 15:07:15.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:15.898" starttime="20170807 15:07:15.897"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:15.898" starttime="20170807 15:07:15.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:15.899" starttime="20170807 15:07:15.898"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 15:07:15.900" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 15:07:15.900" starttime="20170807 15:07:15.899"></status>
</kw>
<msg timestamp="20170807 15:07:15.900" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 15:07:15.900" starttime="20170807 15:07:15.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:15.902" starttime="20170807 15:07:15.901"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:15.902" starttime="20170807 15:07:15.901"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:15.902" starttime="20170807 15:07:15.900"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 15:07:15.902" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170807 15:07:18.080" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 15:07:18.081" starttime="20170807 15:07:15.902"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:18.081" starttime="20170807 15:07:15.895"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:07:18.098" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20170807 15:07:18.157" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 15:07:18.157" level="INFO">${stdout} = /tmp/images/e49bc78e/</msg>
<msg timestamp="20170807 15:07:18.157" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:07:18.157" starttime="20170807 15:07:18.098"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 15:07:18.157" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 15:07:18.158" starttime="20170807 15:07:18.157"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:18.158" starttime="20170807 15:07:18.097"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 15:07:18.164" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 15:07:18.164" starttime="20170807 15:07:18.163"></status>
</kw>
<msg timestamp="20170807 15:07:18.164" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 15:07:18.164" starttime="20170807 15:07:18.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:18.165" starttime="20170807 15:07:18.165"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:18.165" starttime="20170807 15:07:18.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:18.166" starttime="20170807 15:07:18.165"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 15:07:18.167" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 15:07:18.167" starttime="20170807 15:07:18.166"></status>
</kw>
<msg timestamp="20170807 15:07:18.167" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 15:07:18.167" starttime="20170807 15:07:18.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:18.169" starttime="20170807 15:07:18.168"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:18.169" starttime="20170807 15:07:18.168"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:18.169" starttime="20170807 15:07:18.167"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 15:07:18.169" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170807 15:07:19.847" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 15:07:19.847" starttime="20170807 15:07:18.169"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:19.847" starttime="20170807 15:07:18.162"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/e49bc78e/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:07:19.865" level="INFO">Executing command 'cat /tmp/images/e49bc78e/MANIFEST | grep "version="'.</msg>
<msg timestamp="20170807 15:07:19.983" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 15:07:19.984" level="INFO">${stdout} = version=IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88
extended_version=op-build-v1.17-210-g7c61ec6,buildroot-2017.05-93-g9b91216,skiboot-v5.7-paa10293,hostboot-f523eaa,linux-4.12.1-openpower1-p1cc6f7f,pet...</msg>
<msg timestamp="20170807 15:07:19.984" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:07:19.984" starttime="20170807 15:07:19.864"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 15:07:19.984" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 15:07:19.984" starttime="20170807 15:07:19.984"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:19.984" starttime="20170807 15:07:19.864"></status>
</kw>
<msg timestamp="20170807 15:07:19.985" level="INFO">${version_id} = e49bc78e</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 15:07:19.990" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 15:07:19.990" starttime="20170807 15:07:19.989"></status>
</kw>
<msg timestamp="20170807 15:07:19.990" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 15:07:19.990" starttime="20170807 15:07:19.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:19.991" starttime="20170807 15:07:19.991"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:19.991" starttime="20170807 15:07:19.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:19.992" starttime="20170807 15:07:19.992"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 15:07:19.993" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 15:07:19.993" starttime="20170807 15:07:19.993"></status>
</kw>
<msg timestamp="20170807 15:07:19.993" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 15:07:19.993" starttime="20170807 15:07:19.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:19.995" starttime="20170807 15:07:19.995"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:19.995" starttime="20170807 15:07:19.994"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:19.995" starttime="20170807 15:07:19.994"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 15:07:19.996" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170807 15:07:21.673" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 15:07:21.673" starttime="20170807 15:07:19.995"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:21.674" starttime="20170807 15:07:19.988"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 15:07:21.680" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 15:07:21.680" starttime="20170807 15:07:21.679"></status>
</kw>
<msg timestamp="20170807 15:07:21.680" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 15:07:21.680" starttime="20170807 15:07:21.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:21.681" starttime="20170807 15:07:21.681"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:21.681" starttime="20170807 15:07:21.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:21.682" starttime="20170807 15:07:21.682"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 15:07:21.683" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 15:07:21.683" starttime="20170807 15:07:21.683"></status>
</kw>
<msg timestamp="20170807 15:07:21.683" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 15:07:21.683" starttime="20170807 15:07:21.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:21.685" starttime="20170807 15:07:21.685"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:21.685" starttime="20170807 15:07:21.685"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:21.685" starttime="20170807 15:07:21.684"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 15:07:21.686" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170807 15:07:23.427" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 15:07:23.428" starttime="20170807 15:07:21.686"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:23.428" starttime="20170807 15:07:21.678"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/e49bc78e/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:07:23.445" level="INFO">Executing command 'cat /tmp/images/e49bc78e/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20170807 15:07:23.521" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 15:07:23.521" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<msg timestamp="20170807 15:07:23.521" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:07:23.521" starttime="20170807 15:07:23.444"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 15:07:23.522" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 15:07:23.522" starttime="20170807 15:07:23.522"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:23.522" starttime="20170807 15:07:23.444"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/e49bc78e</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:07:23.541" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:07:23.542" starttime="20170807 15:07:23.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:07:23.542" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:07:23.542" starttime="20170807 15:07:23.542"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:07:23.543" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:07:23.543" starttime="20170807 15:07:23.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:07:23.544" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:07:23.544" starttime="20170807 15:07:23.543"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:07:23.725" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:07:23.725" starttime="20170807 15:07:23.545"></status>
</kw>
<msg timestamp="20170807 15:07:23.725" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:07:23.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:23.725" starttime="20170807 15:07:23.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:07:23.726" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:23.726" starttime="20170807 15:07:23.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:07:23.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:23.726" starttime="20170807 15:07:23.726"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:23.726" starttime="20170807 15:07:23.540"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:23.727" starttime="20170807 15:07:23.540"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:23.727" starttime="20170807 15:07:23.539"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:07:23.727" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e/attr/Activation</msg>
<status status="PASS" endtime="20170807 15:07:23.727" starttime="20170807 15:07:23.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:23.728" starttime="20170807 15:07:23.728"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:07:23.853" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/e49bc78e/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170807 15:07:23.853" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:23.853" starttime="20170807 15:07:23.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:23.854" starttime="20170807 15:07:23.854"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:07:23.854" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:07:23.854" starttime="20170807 15:07:23.854"></status>
</kw>
<msg timestamp="20170807 15:07:23.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:23.855" starttime="20170807 15:07:23.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:07:23.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:23.856" starttime="20170807 15:07:23.855"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:07:23.856" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:07:23.856" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:07:23.857" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20170807 15:07:23.857" starttime="20170807 15:07:23.856"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:23.857" starttime="20170807 15:07:23.538"></status>
</kw>
<msg timestamp="20170807 15:07:23.857" level="INFO">${ret} = True</msg>
<status status="PASS" endtime="20170807 15:07:23.857" starttime="20170807 15:07:15.890"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:23.858" starttime="20170807 15:07:23.858"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:07:23.864" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:07:23.864" starttime="20170807 15:07:23.864"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:07:23.865" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:07:23.865" starttime="20170807 15:07:23.865"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:07:23.866" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:07:23.866" starttime="20170807 15:07:23.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:07:23.866" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:07:23.866" starttime="20170807 15:07:23.866"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:07:24.103" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:07:24.103" starttime="20170807 15:07:23.867"></status>
</kw>
<msg timestamp="20170807 15:07:24.103" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:07:24.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.104" starttime="20170807 15:07:23.867"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:07:24.104" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.104" starttime="20170807 15:07:24.104"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:07:24.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.105" starttime="20170807 15:07:24.105"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:24.105" starttime="20170807 15:07:23.861"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:24.105" starttime="20170807 15:07:23.860"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:24.105" starttime="20170807 15:07:23.860"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:07:24.106" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e</msg>
<status status="PASS" endtime="20170807 15:07:24.106" starttime="20170807 15:07:24.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:24.107" starttime="20170807 15:07:24.106"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:07:24.276" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/e49bc78e, headers=None json=None</msg>
<msg timestamp="20170807 15:07:24.277" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.277" starttime="20170807 15:07:24.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:24.277" starttime="20170807 15:07:24.277"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:07:24.278" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:07:24.278" starttime="20170807 15:07:24.278"></status>
</kw>
<msg timestamp="20170807 15:07:24.278" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.278" starttime="20170807 15:07:23.859"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:07:24.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.279" starttime="20170807 15:07:24.278"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:07:24.279" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "ExtendedVersion": "op-build-v1.17-210-g7c61ec6,buildroot-2017.05-93-g9b91216,skiboot-v5.7-paa10293,hostboot-f523eaa,linux-4.12.1-openpower1-p1cc6f7f,petitboot-v1.5.1-p279e9f9,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-pfad3bc9", 
    "Path": "/tmp/images/e49bc78e", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:07:24.279" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:07:24.279" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready', u'Version': u'IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88', u'Purpose': u...</msg>
<status status="PASS" endtime="20170807 15:07:24.280" starttime="20170807 15:07:24.279"></status>
</kw>
<msg timestamp="20170807 15:07:24.280" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready', u'Version': u'IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpos...</msg>
<status status="PASS" endtime="20170807 15:07:24.280" starttime="20170807 15:07:23.859"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20170807 15:07:24.281" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.281" starttime="20170807 15:07:24.280"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170807 15:07:24.282" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20170807 15:07:24.282" starttime="20170807 15:07:24.281"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:07:24.284" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e</msg>
<status status="PASS" endtime="20170807 15:07:24.285" starttime="20170807 15:07:24.284"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:07:24.289" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:07:24.289" starttime="20170807 15:07:24.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:07:24.290" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:07:24.290" starttime="20170807 15:07:24.290"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:07:24.290" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:07:24.290" starttime="20170807 15:07:24.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:07:24.291" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:07:24.291" starttime="20170807 15:07:24.291"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:07:24.468" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:07:24.468" starttime="20170807 15:07:24.292"></status>
</kw>
<msg timestamp="20170807 15:07:24.469" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:07:24.469" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.469" starttime="20170807 15:07:24.291"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:07:24.469" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.469" starttime="20170807 15:07:24.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:07:24.470" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.470" starttime="20170807 15:07:24.470"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:24.470" starttime="20170807 15:07:24.287"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:24.470" starttime="20170807 15:07:24.287"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:24.470" starttime="20170807 15:07:24.286"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:07:24.471" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e/attr/RequestedActivation</msg>
<status status="PASS" endtime="20170807 15:07:24.471" starttime="20170807 15:07:24.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:07:24.472" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:07:24.472" starttime="20170807 15:07:24.471"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:24.472" starttime="20170807 15:07:24.472"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 15:07:24.474" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/software/e49bc78e/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'...</msg>
<status status="PASS" endtime="20170807 15:07:24.474" starttime="20170807 15:07:24.473"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 15:07:24.475" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/software/e49bc78e/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 15:07:24.475" starttime="20170807 15:07:24.475"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:24.475" starttime="20170807 15:07:24.474"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:24.475" starttime="20170807 15:07:24.472"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:07:24.910" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/e49bc78e/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170807 15:07:24.911" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.911" starttime="20170807 15:07:24.475"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170807 15:07:24.912" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 15:07:24.912" starttime="20170807 15:07:24.911"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170807 15:07:24.913" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 15:07:24.914" starttime="20170807 15:07:24.913"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:24.914" starttime="20170807 15:07:24.912"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:24.914" starttime="20170807 15:07:24.911"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:07:24.914" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:07:24.914" starttime="20170807 15:07:24.914"></status>
</kw>
<msg timestamp="20170807 15:07:24.915" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.915" starttime="20170807 15:07:24.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:07:24.916" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:24.916" starttime="20170807 15:07:24.915"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170807 15:07:24.917" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:07:24.917" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:07:24.917" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170807 15:07:24.917" starttime="20170807 15:07:24.916"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:24.917" starttime="20170807 15:07:24.283"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:07:24.921" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:07:24.921" starttime="20170807 15:07:24.920"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:07:24.922" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:07:24.922" starttime="20170807 15:07:24.921"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:07:24.922" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:07:24.922" starttime="20170807 15:07:24.922"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:07:24.923" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:07:24.923" starttime="20170807 15:07:24.923"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:07:25.404" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:07:25.405" starttime="20170807 15:07:24.924"></status>
</kw>
<msg timestamp="20170807 15:07:25.405" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:07:25.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:25.405" starttime="20170807 15:07:24.923"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:07:25.405" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:25.406" starttime="20170807 15:07:25.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:07:25.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:25.406" starttime="20170807 15:07:25.406"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:25.406" starttime="20170807 15:07:24.920"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:25.406" starttime="20170807 15:07:24.919"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:25.407" starttime="20170807 15:07:24.919"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:07:25.407" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e</msg>
<status status="PASS" endtime="20170807 15:07:25.407" starttime="20170807 15:07:25.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:25.408" starttime="20170807 15:07:25.408"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:07:25.852" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/e49bc78e, headers=None json=None</msg>
<msg timestamp="20170807 15:07:25.852" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:25.852" starttime="20170807 15:07:25.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:25.853" starttime="20170807 15:07:25.852"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:07:25.853" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:07:25.853" starttime="20170807 15:07:25.853"></status>
</kw>
<msg timestamp="20170807 15:07:25.853" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:25.853" starttime="20170807 15:07:24.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:07:25.854" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:25.854" starttime="20170807 15:07:25.854"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:07:25.855" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-g7c61ec6,buildroot-2017.05-93-g9b91216,skiboot-v5.7-paa10293,hostboot-f523eaa,linux-4.12.1-openpower1-p1cc6f7f,petitboot-v1.5.1-p279e9f9,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-pfad3bc9", 
    "Path": "/tmp/images/e49bc78e", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:07:25.855" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:07:25.855" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88', u'Purpos...</msg>
<status status="PASS" endtime="20170807 15:07:25.855" starttime="20170807 15:07:25.854"></status>
</kw>
<msg timestamp="20170807 15:07:25.855" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionP...</msg>
<status status="PASS" endtime="20170807 15:07:25.855" starttime="20170807 15:07:24.917"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20170807 15:07:25.856" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:25.856" starttime="20170807 15:07:25.855"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 15:07:25.864" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 15:07:25.864" starttime="20170807 15:07:25.864"></status>
</kw>
<msg timestamp="20170807 15:07:25.864" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 15:07:25.865" starttime="20170807 15:07:25.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:25.866" starttime="20170807 15:07:25.866"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:25.866" starttime="20170807 15:07:25.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:25.867" starttime="20170807 15:07:25.867"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 15:07:25.869" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 15:07:25.869" starttime="20170807 15:07:25.868"></status>
</kw>
<msg timestamp="20170807 15:07:25.869" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 15:07:25.869" starttime="20170807 15:07:25.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:25.871" starttime="20170807 15:07:25.871"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:25.871" starttime="20170807 15:07:25.870"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:25.871" starttime="20170807 15:07:25.870"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 15:07:25.872" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170807 15:07:28.214" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 15:07:28.214" starttime="20170807 15:07:25.872"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:28.214" starttime="20170807 15:07:25.862"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/e49bc78e</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:07:28.241" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:07:28.241" starttime="20170807 15:07:28.240"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:07:28.242" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:07:28.242" starttime="20170807 15:07:28.242"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:07:28.243" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:07:28.243" starttime="20170807 15:07:28.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:07:28.244" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:07:28.244" starttime="20170807 15:07:28.244"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:07:28.659" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:07:28.659" starttime="20170807 15:07:28.245"></status>
</kw>
<msg timestamp="20170807 15:07:28.660" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:07:28.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:28.660" starttime="20170807 15:07:28.245"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:07:28.660" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:28.660" starttime="20170807 15:07:28.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:07:28.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:28.662" starttime="20170807 15:07:28.661"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:28.662" starttime="20170807 15:07:28.239"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:28.662" starttime="20170807 15:07:28.239"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:28.662" starttime="20170807 15:07:28.238"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:07:28.663" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e</msg>
<status status="PASS" endtime="20170807 15:07:28.663" starttime="20170807 15:07:28.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:28.663" starttime="20170807 15:07:28.663"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:07:29.031" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/e49bc78e, headers=None json=None</msg>
<msg timestamp="20170807 15:07:29.031" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:29.031" starttime="20170807 15:07:28.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:07:29.032" starttime="20170807 15:07:29.032"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:07:29.033" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:07:29.033" starttime="20170807 15:07:29.032"></status>
</kw>
<msg timestamp="20170807 15:07:29.033" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:07:29.033" starttime="20170807 15:07:28.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:07:29.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:07:29.034" starttime="20170807 15:07:29.033"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:07:29.034" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-g7c61ec6,buildroot-2017.05-93-g9b91216,skiboot-v5.7-paa10293,hostboot-f523eaa,linux-4.12.1-openpower1-p1cc6f7f,petitboot-v1.5.1-p279e9f9,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-pfad3bc9", 
    "Path": "/tmp/images/e49bc78e", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:07:29.034" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:07:29.035" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88', u'Purpos...</msg>
<status status="PASS" endtime="20170807 15:07:29.035" starttime="20170807 15:07:29.034"></status>
</kw>
<status status="PASS" endtime="20170807 15:07:29.035" starttime="20170807 15:07:28.236"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/e49bc78e</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:08:29.114" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:08:29.114" starttime="20170807 15:08:29.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:08:29.115" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:08:29.115" starttime="20170807 15:08:29.115"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:08:29.116" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:08:29.116" starttime="20170807 15:08:29.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:08:29.116" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:08:29.116" starttime="20170807 15:08:29.116"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:08:29.293" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:08:29.293" starttime="20170807 15:08:29.117"></status>
</kw>
<msg timestamp="20170807 15:08:29.294" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:08:29.294" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:08:29.294" starttime="20170807 15:08:29.117"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:08:29.294" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:08:29.294" starttime="20170807 15:08:29.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:08:29.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:08:29.295" starttime="20170807 15:08:29.295"></status>
</kw>
<status status="PASS" endtime="20170807 15:08:29.295" starttime="20170807 15:08:29.113"></status>
</kw>
<status status="PASS" endtime="20170807 15:08:29.295" starttime="20170807 15:08:29.113"></status>
</kw>
<status status="PASS" endtime="20170807 15:08:29.295" starttime="20170807 15:08:29.112"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:08:29.296" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e</msg>
<status status="PASS" endtime="20170807 15:08:29.296" starttime="20170807 15:08:29.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:08:29.297" starttime="20170807 15:08:29.296"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:08:29.444" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/e49bc78e, headers=None json=None</msg>
<msg timestamp="20170807 15:08:29.444" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:08:29.444" starttime="20170807 15:08:29.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:08:29.445" starttime="20170807 15:08:29.445"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:08:29.445" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:08:29.445" starttime="20170807 15:08:29.445"></status>
</kw>
<msg timestamp="20170807 15:08:29.446" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:08:29.446" starttime="20170807 15:08:29.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:08:29.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:08:29.446" starttime="20170807 15:08:29.446"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:08:29.447" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-g7c61ec6,buildroot-2017.05-93-g9b91216,skiboot-v5.7-paa10293,hostboot-f523eaa,linux-4.12.1-openpower1-p1cc6f7f,petitboot-v1.5.1-p279e9f9,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-pfad3bc9", 
    "Path": "/tmp/images/e49bc78e", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:08:29.447" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:08:29.447" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88', u'Purpos...</msg>
<status status="PASS" endtime="20170807 15:08:29.447" starttime="20170807 15:08:29.447"></status>
</kw>
<status status="PASS" endtime="20170807 15:08:29.447" starttime="20170807 15:08:29.111"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/e49bc78e</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:09:29.479" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:09:29.480" starttime="20170807 15:09:29.479"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:09:29.480" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:09:29.480" starttime="20170807 15:09:29.480"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:09:29.481" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:09:29.481" starttime="20170807 15:09:29.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:09:29.481" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:09:29.482" starttime="20170807 15:09:29.481"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:09:29.661" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:09:29.661" starttime="20170807 15:09:29.482"></status>
</kw>
<msg timestamp="20170807 15:09:29.661" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:09:29.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:09:29.661" starttime="20170807 15:09:29.482"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:09:29.662" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:09:29.662" starttime="20170807 15:09:29.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:09:29.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:09:29.663" starttime="20170807 15:09:29.663"></status>
</kw>
<status status="PASS" endtime="20170807 15:09:29.663" starttime="20170807 15:09:29.478"></status>
</kw>
<status status="PASS" endtime="20170807 15:09:29.663" starttime="20170807 15:09:29.478"></status>
</kw>
<status status="PASS" endtime="20170807 15:09:29.663" starttime="20170807 15:09:29.477"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:09:29.664" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e</msg>
<status status="PASS" endtime="20170807 15:09:29.664" starttime="20170807 15:09:29.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:09:29.665" starttime="20170807 15:09:29.664"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:09:29.811" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/e49bc78e, headers=None json=None</msg>
<msg timestamp="20170807 15:09:29.811" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:09:29.812" starttime="20170807 15:09:29.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:09:29.813" starttime="20170807 15:09:29.812"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:09:29.813" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:09:29.813" starttime="20170807 15:09:29.813"></status>
</kw>
<msg timestamp="20170807 15:09:29.813" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:09:29.813" starttime="20170807 15:09:29.477"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:09:29.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:09:29.814" starttime="20170807 15:09:29.814"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:09:29.815" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-g7c61ec6,buildroot-2017.05-93-g9b91216,skiboot-v5.7-paa10293,hostboot-f523eaa,linux-4.12.1-openpower1-p1cc6f7f,petitboot-v1.5.1-p279e9f9,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-pfad3bc9", 
    "Path": "/tmp/images/e49bc78e", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:09:29.815" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:09:29.815" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88', u'Purpos...</msg>
<status status="PASS" endtime="20170807 15:09:29.815" starttime="20170807 15:09:29.814"></status>
</kw>
<status status="PASS" endtime="20170807 15:09:29.815" starttime="20170807 15:09:29.476"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/e49bc78e</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:10:29.868" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:10:29.868" starttime="20170807 15:10:29.867"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:10:29.869" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:10:29.869" starttime="20170807 15:10:29.868"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:10:29.869" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:10:29.869" starttime="20170807 15:10:29.869"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:10:29.870" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:10:29.870" starttime="20170807 15:10:29.870"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:10:31.403" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:10:31.403" starttime="20170807 15:10:29.871"></status>
</kw>
<msg timestamp="20170807 15:10:31.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:10:31.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:10:31.404" starttime="20170807 15:10:29.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:10:31.404" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:10:31.404" starttime="20170807 15:10:31.404"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:10:31.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:10:31.405" starttime="20170807 15:10:31.405"></status>
</kw>
<status status="PASS" endtime="20170807 15:10:31.405" starttime="20170807 15:10:29.867"></status>
</kw>
<status status="PASS" endtime="20170807 15:10:31.406" starttime="20170807 15:10:29.866"></status>
</kw>
<status status="PASS" endtime="20170807 15:10:31.406" starttime="20170807 15:10:29.866"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:10:31.407" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e</msg>
<status status="PASS" endtime="20170807 15:10:31.407" starttime="20170807 15:10:31.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:10:31.408" starttime="20170807 15:10:31.407"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:10:31.551" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/e49bc78e, headers=None json=None</msg>
<msg timestamp="20170807 15:10:31.551" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:10:31.551" starttime="20170807 15:10:31.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:10:31.552" starttime="20170807 15:10:31.552"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:10:31.553" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:10:31.553" starttime="20170807 15:10:31.553"></status>
</kw>
<msg timestamp="20170807 15:10:31.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:10:31.553" starttime="20170807 15:10:29.865"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:10:31.554" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:10:31.554" starttime="20170807 15:10:31.553"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:10:31.555" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-g7c61ec6,buildroot-2017.05-93-g9b91216,skiboot-v5.7-paa10293,hostboot-f523eaa,linux-4.12.1-openpower1-p1cc6f7f,petitboot-v1.5.1-p279e9f9,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-pfad3bc9", 
    "Path": "/tmp/images/e49bc78e", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:10:31.555" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:10:31.555" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88', u'Purpos...</msg>
<status status="PASS" endtime="20170807 15:10:31.555" starttime="20170807 15:10:31.554"></status>
</kw>
<status status="PASS" endtime="20170807 15:10:31.555" starttime="20170807 15:10:29.864"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/e49bc78e</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:11:31.630" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:11:31.631" starttime="20170807 15:11:31.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:11:31.632" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:11:31.632" starttime="20170807 15:11:31.631"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:11:31.633" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:11:31.633" starttime="20170807 15:11:31.632"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:11:31.633" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:11:31.633" starttime="20170807 15:11:31.633"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:11:31.821" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:11:31.821" starttime="20170807 15:11:31.634"></status>
</kw>
<msg timestamp="20170807 15:11:31.821" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:11:31.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:11:31.821" starttime="20170807 15:11:31.634"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:11:31.822" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:11:31.822" starttime="20170807 15:11:31.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:11:31.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:11:31.823" starttime="20170807 15:11:31.822"></status>
</kw>
<status status="PASS" endtime="20170807 15:11:31.823" starttime="20170807 15:11:31.629"></status>
</kw>
<status status="PASS" endtime="20170807 15:11:31.823" starttime="20170807 15:11:31.628"></status>
</kw>
<status status="PASS" endtime="20170807 15:11:31.823" starttime="20170807 15:11:31.627"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:11:31.824" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e</msg>
<status status="PASS" endtime="20170807 15:11:31.824" starttime="20170807 15:11:31.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:11:31.824" starttime="20170807 15:11:31.824"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:11:31.980" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/e49bc78e, headers=None json=None</msg>
<msg timestamp="20170807 15:11:31.981" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:11:31.981" starttime="20170807 15:11:31.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:11:31.982" starttime="20170807 15:11:31.981"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:11:31.982" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:11:31.982" starttime="20170807 15:11:31.982"></status>
</kw>
<msg timestamp="20170807 15:11:31.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:11:31.982" starttime="20170807 15:11:31.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:11:31.983" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:11:31.983" starttime="20170807 15:11:31.983"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:11:31.984" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-g7c61ec6,buildroot-2017.05-93-g9b91216,skiboot-v5.7-paa10293,hostboot-f523eaa,linux-4.12.1-openpower1-p1cc6f7f,petitboot-v1.5.1-p279e9f9,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-pfad3bc9", 
    "Path": "/tmp/images/e49bc78e", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:11:31.984" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:11:31.984" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88', u'Purpos...</msg>
<status status="PASS" endtime="20170807 15:11:31.984" starttime="20170807 15:11:31.983"></status>
</kw>
<status status="PASS" endtime="20170807 15:11:31.984" starttime="20170807 15:11:31.625"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/e49bc78e</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:12:32.064" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:12:32.064" starttime="20170807 15:12:32.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:12:32.065" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:12:32.065" starttime="20170807 15:12:32.065"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:12:32.066" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:12:32.066" starttime="20170807 15:12:32.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:12:32.066" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:12:32.066" starttime="20170807 15:12:32.066"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:12:32.241" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:12:32.242" starttime="20170807 15:12:32.067"></status>
</kw>
<msg timestamp="20170807 15:12:32.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:12:32.242" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:12:32.242" starttime="20170807 15:12:32.067"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:12:32.242" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:12:32.243" starttime="20170807 15:12:32.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:12:32.243" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:12:32.243" starttime="20170807 15:12:32.243"></status>
</kw>
<status status="PASS" endtime="20170807 15:12:32.244" starttime="20170807 15:12:32.063"></status>
</kw>
<status status="PASS" endtime="20170807 15:12:32.244" starttime="20170807 15:12:32.063"></status>
</kw>
<status status="PASS" endtime="20170807 15:12:32.244" starttime="20170807 15:12:32.062"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:12:32.244" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e</msg>
<status status="PASS" endtime="20170807 15:12:32.244" starttime="20170807 15:12:32.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:12:32.245" starttime="20170807 15:12:32.245"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:12:32.409" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/e49bc78e, headers=None json=None</msg>
<msg timestamp="20170807 15:12:32.409" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:12:32.409" starttime="20170807 15:12:32.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:12:32.410" starttime="20170807 15:12:32.409"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:12:32.411" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:12:32.411" starttime="20170807 15:12:32.410"></status>
</kw>
<msg timestamp="20170807 15:12:32.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:12:32.411" starttime="20170807 15:12:32.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:12:32.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:12:32.412" starttime="20170807 15:12:32.411"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:12:32.412" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-g7c61ec6,buildroot-2017.05-93-g9b91216,skiboot-v5.7-paa10293,hostboot-f523eaa,linux-4.12.1-openpower1-p1cc6f7f,petitboot-v1.5.1-p279e9f9,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-pfad3bc9", 
    "Path": "/tmp/images/e49bc78e", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:12:32.412" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:12:32.412" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-redbud-ibm-OP9_v1.17_1.88', u'Purpos...</msg>
<status status="PASS" endtime="20170807 15:12:32.412" starttime="20170807 15:12:32.412"></status>
</kw>
<status status="PASS" endtime="20170807 15:12:32.413" starttime="20170807 15:12:32.061"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/e49bc78e</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:13:32.493" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:13:32.494" starttime="20170807 15:13:32.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:13:32.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:13:32.494" starttime="20170807 15:13:32.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:13:32.495" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:13:32.495" starttime="20170807 15:13:32.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:13:32.496" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:13:32.496" starttime="20170807 15:13:32.495"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:13:32.706" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:13:32.706" starttime="20170807 15:13:32.497"></status>
</kw>
<msg timestamp="20170807 15:13:32.706" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:32.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:32.706" starttime="20170807 15:13:32.496"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:13:32.707" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:32.707" starttime="20170807 15:13:32.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:32.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:32.708" starttime="20170807 15:13:32.707"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:32.708" starttime="20170807 15:13:32.492"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:32.708" starttime="20170807 15:13:32.492"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:32.708" starttime="20170807 15:13:32.491"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:13:32.709" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e</msg>
<status status="PASS" endtime="20170807 15:13:32.709" starttime="20170807 15:13:32.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:32.710" starttime="20170807 15:13:32.710"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:13:32.836" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/e49bc78e, headers=None json=None</msg>
<msg timestamp="20170807 15:13:32.836" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:32.836" starttime="20170807 15:13:32.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:32.837" starttime="20170807 15:13:32.836"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:13:32.838" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:13:32.838" starttime="20170807 15:13:32.837"></status>
</kw>
<msg timestamp="20170807 15:13:32.838" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:32.838" starttime="20170807 15:13:32.490"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:32.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:32.839" starttime="20170807 15:13:32.838"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:13:32.839" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Invalid", 
    "ExtendedVersion": "", 
    "Path": "", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": ""
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:13:32.839" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:13:32.839" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Invalid', u'Version': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.V...</msg>
<status status="PASS" endtime="20170807 15:13:32.839" starttime="20170807 15:13:32.839"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:32.840" starttime="20170807 15:13:32.490"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:32.840" starttime="20170807 15:07:25.857"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:13:32.844" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:13:32.844" starttime="20170807 15:13:32.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:13:32.844" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:13:32.845" starttime="20170807 15:13:32.844"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:13:32.845" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:13:32.845" starttime="20170807 15:13:32.845"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:13:32.846" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:13:32.846" starttime="20170807 15:13:32.845"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:13:33.053" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:13:33.053" starttime="20170807 15:13:32.847"></status>
</kw>
<msg timestamp="20170807 15:13:33.053" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:33.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:33.054" starttime="20170807 15:13:32.846"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:13:33.054" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:33.054" starttime="20170807 15:13:33.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:33.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:33.055" starttime="20170807 15:13:33.055"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:33.055" starttime="20170807 15:13:32.843"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:33.055" starttime="20170807 15:13:32.842"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:33.055" starttime="20170807 15:13:32.842"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:13:33.056" level="INFO">${base_uri} = /xyz/openbmc_project/software/e49bc78e</msg>
<status status="PASS" endtime="20170807 15:13:33.056" starttime="20170807 15:13:33.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:33.057" starttime="20170807 15:13:33.056"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:13:33.226" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/e49bc78e, headers=None json=None</msg>
<msg timestamp="20170807 15:13:33.226" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:33.226" starttime="20170807 15:13:33.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:33.227" starttime="20170807 15:13:33.227"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:13:33.227" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:13:33.227" starttime="20170807 15:13:33.227"></status>
</kw>
<msg timestamp="20170807 15:13:33.228" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:33.228" starttime="20170807 15:13:32.841"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:33.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:33.228" starttime="20170807 15:13:33.228"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:13:33.229" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Invalid", 
    "ExtendedVersion": "", 
    "Path": "", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": ""
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:13:33.229" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:13:33.229" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Invalid', u'Version': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.V...</msg>
<status status="PASS" endtime="20170807 15:13:33.229" starttime="20170807 15:13:33.229"></status>
</kw>
<msg timestamp="20170807 15:13:33.229" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Invalid', u'Version': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'ExtendedVersion': u'', u'Pat...</msg>
<status status="PASS" endtime="20170807 15:13:33.230" starttime="20170807 15:13:32.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20170807 15:13:33.231" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<msg timestamp="20170807 15:13:33.231" level="FAIL">xyz.openbmc_project.Software.Activation.Activations.Invalid != xyz.openbmc_project.Software.Activation.Activations.Active</msg>
<status status="FAIL" endtime="20170807 15:13:33.231" starttime="20170807 15:13:33.230"></status>
</kw>
<kw type="teardown" name="Code Update Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170807 15:13:33.234" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 15:13:33.234" starttime="20170807 15:13:33.233"></status>
</kw>
<msg timestamp="20170807 15:13:33.234" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170807 15:13:33.234" starttime="20170807 15:13:33.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:33.235" starttime="20170807 15:13:33.235"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:33.235" starttime="20170807 15:13:33.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:33.236" starttime="20170807 15:13:33.236"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170807 15:13:33.237" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 15:13:33.237" starttime="20170807 15:13:33.237"></status>
</kw>
<msg timestamp="20170807 15:13:33.237" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170807 15:13:33.237" starttime="20170807 15:13:33.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:33.239" starttime="20170807 15:13:33.239"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:33.239" starttime="20170807 15:13:33.238"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:33.239" starttime="20170807 15:13:33.238"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170807 15:13:33.240" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170807 15:13:34.889" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 15:13:34.889" starttime="20170807 15:13:33.239"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:34.889" starttime="20170807 15:13:33.232"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -rf /tmp/images/*</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:13:34.890" level="INFO">Executing command 'rm -rf /tmp/images/*'.</msg>
<msg timestamp="20170807 15:13:34.978" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 15:13:34.978" level="INFO">${stdout} = </msg>
<msg timestamp="20170807 15:13:34.978" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:13:34.978" starttime="20170807 15:13:34.890"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 15:13:34.979" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 15:13:34.979" starttime="20170807 15:13:34.979"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:34.979" starttime="20170807 15:13:34.889"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170807 15:13:35.125" starttime="20170807 15:13:34.979"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:13:35.130" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:13:35.130" starttime="20170807 15:13:35.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:13:35.131" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:13:35.131" starttime="20170807 15:13:35.130"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:13:35.131" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:13:35.131" starttime="20170807 15:13:35.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:13:35.132" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:13:35.132" starttime="20170807 15:13:35.132"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:13:35.691" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:13:35.691" starttime="20170807 15:13:35.133"></status>
</kw>
<msg timestamp="20170807 15:13:35.691" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:35.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:35.692" starttime="20170807 15:13:35.132"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:13:35.692" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:35.692" starttime="20170807 15:13:35.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:35.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:35.693" starttime="20170807 15:13:35.693"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:35.693" starttime="20170807 15:13:35.129"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:35.693" starttime="20170807 15:13:35.128"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:35.693" starttime="20170807 15:13:35.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:13:35.694" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170807 15:13:35.694" starttime="20170807 15:13:35.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:35.695" starttime="20170807 15:13:35.694"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:13:35.787" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170807 15:13:35.787" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:35.787" starttime="20170807 15:13:35.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:35.788" starttime="20170807 15:13:35.787"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:13:35.788" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:13:35.788" starttime="20170807 15:13:35.788"></status>
</kw>
<msg timestamp="20170807 15:13:35.788" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:35.788" starttime="20170807 15:13:35.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:35.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:35.789" starttime="20170807 15:13:35.789"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:13:35.790" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:13:35.790" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:13:35.790" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170807 15:13:35.790" starttime="20170807 15:13:35.789"></status>
</kw>
<msg timestamp="20170807 15:13:35.790" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170807 15:13:35.790" starttime="20170807 15:13:35.126"></status>
</kw>
<msg timestamp="20170807 15:13:35.790" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170807 15:13:35.791" starttime="20170807 15:13:35.126"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170807 15:13:35.792" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170807 15:13:35.792" starttime="20170807 15:13:35.791"></status>
</kw>
<msg timestamp="20170807 15:13:35.792" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 15:13:35.792" starttime="20170807 15:13:35.791"></status>
</kw>
<msg timestamp="20170807 15:13:35.792" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 15:13:35.792" starttime="20170807 15:13:35.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170807 15:13:35.814" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170807 15:13:35.814" starttime="20170807 15:13:35.813"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170807 15:13:35.820" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170807 15:13:38.824" level="INFO">${RC} = 0</msg>
<msg timestamp="20170807 15:13:38.824" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.69 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.581 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" endtime="20170807 15:13:38.825" starttime="20170807 15:13:35.814"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.828" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.69 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.581 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.629 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.616 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.581/0.880/1.695/0.471 ms</msg>
<status status="PASS" endtime="20170807 15:13:38.828" starttime="20170807 15:13:38.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:38.829" starttime="20170807 15:13:38.829"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.829" starttime="20170807 15:13:35.813"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170807 15:13:38.855" level="INFO">${cur_time} = 2017-08-07 15:13:38:854502</msg>
<status status="PASS" endtime="20170807 15:13:38.855" starttime="20170807 15:13:38.854"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170807 15:13:38.855" level="INFO">${cur_time} = 20170807151338854502</msg>
<status status="PASS" endtime="20170807 15:13:38.855" starttime="20170807 15:13:38.855"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.856" starttime="20170807 15:13:38.854"></status>
</kw>
<msg timestamp="20170807 15:13:38.863" level="INFO">${FFDC_TIME} = 20170807151338854502</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170807 15:13:38.873" level="INFO">${suite_name} = CodeUpdate</msg>
<status status="PASS" endtime="20170807 15:13:38.874" starttime="20170807 15:13:38.873"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170807 15:13:38.874" level="INFO">${suite_name} = 20170807151338854502_CodeUpdate</msg>
<status status="PASS" endtime="20170807 15:13:38.874" starttime="20170807 15:13:38.874"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170807 15:13:38.875" level="INFO">${test_name} = RESTPNORCodeUpdate</msg>
<status status="PASS" endtime="20170807 15:13:38.875" starttime="20170807 15:13:38.875"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170807 15:13:38.875" level="INFO">${test_name} = 20170807151338854502_RESTPNORCodeUpdate</msg>
<status status="PASS" endtime="20170807 15:13:38.876" starttime="20170807 15:13:38.875"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.876" starttime="20170807 15:13:38.873"></status>
</kw>
<msg timestamp="20170807 15:13:38.882" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/</msg>
<msg timestamp="20170807 15:13:38.886" level="INFO">${FFDC_PREFIX} = 20170807151338854502_</msg>
<msg timestamp="20170807 15:13:38.909" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/</arg>
</arguments>
<msg timestamp="20170807 15:13:38.911" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.911" starttime="20170807 15:13:38.910"></status>
</kw>
<msg timestamp="20170807 15:13:38.915" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.938" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.938" starttime="20170807 15:13:38.937"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.938" starttime="20170807 15:13:38.937"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.939" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.939" starttime="20170807 15:13:38.939"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.939" starttime="20170807 15:13:38.938"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.940" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.941" starttime="20170807 15:13:38.940"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.941" starttime="20170807 15:13:38.939"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.942" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.942" starttime="20170807 15:13:38.942"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.942" starttime="20170807 15:13:38.941"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.943" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.943" starttime="20170807 15:13:38.943"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.943" starttime="20170807 15:13:38.942"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.945" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.945" starttime="20170807 15:13:38.945"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.945" starttime="20170807 15:13:38.944"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.947" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.947" starttime="20170807 15:13:38.946"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.947" starttime="20170807 15:13:38.946"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.948" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.949" starttime="20170807 15:13:38.948"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.949" starttime="20170807 15:13:38.947"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.950" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.950" starttime="20170807 15:13:38.949"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.950" starttime="20170807 15:13:38.949"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.951" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.951" starttime="20170807 15:13:38.951"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.951" starttime="20170807 15:13:38.950"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.953" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.953" starttime="20170807 15:13:38.952"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.953" starttime="20170807 15:13:38.952"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.954" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.954" starttime="20170807 15:13:38.953"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.954" starttime="20170807 15:13:38.953"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:38.955" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:38.955" starttime="20170807 15:13:38.955"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:38.955" starttime="20170807 15:13:38.954"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170807 15:13:38.987" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:38.987" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170807 15:13:39.778" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170807 15:13:39.779" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170807 15:13:39.856" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170807 15:13:39.866" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170807 15:13:39.866" level="INFO">${stderr} = </msg>
<msg timestamp="20170807 15:13:39.867" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170807 15:13:39.867" starttime="20170807 15:13:38.956"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.867" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170807 15:13:39.867" starttime="20170807 15:13:39.867"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.868" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170807 15:13:39.868" starttime="20170807 15:13:39.868"></status>
</kw>
<msg timestamp="20170807 15:13:39.868" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170807 15:13:39.868" starttime="20170807 15:13:38.956"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.869" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.870" starttime="20170807 15:13:39.869"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.870" starttime="20170807 15:13:39.868"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.870" starttime="20170807 15:13:38.950"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.871" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.871" starttime="20170807 15:13:39.871"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.871" starttime="20170807 15:13:39.870"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 15:13:39.872" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170807 15:13:39.872" starttime="20170807 15:13:39.871"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.873" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.873" starttime="20170807 15:13:39.873"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.874" starttime="20170807 15:13:39.872"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.875" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.875" starttime="20170807 15:13:39.874"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.875" starttime="20170807 15:13:39.874"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.875" starttime="20170807 15:13:39.872"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.877" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.877" starttime="20170807 15:13:39.876"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.878" starttime="20170807 15:13:39.875"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.879" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.879" starttime="20170807 15:13:39.878"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.879" starttime="20170807 15:13:39.878"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.879" starttime="20170807 15:13:39.875"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.880" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.880" starttime="20170807 15:13:39.880"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.880" starttime="20170807 15:13:39.879"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.882" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.882" starttime="20170807 15:13:39.881"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.882" starttime="20170807 15:13:39.881"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.882" starttime="20170807 15:13:39.879"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.882" starttime="20170807 15:13:39.872"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.883" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.883" starttime="20170807 15:13:39.883"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.883" starttime="20170807 15:13:39.882"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.883" starttime="20170807 15:13:38.936"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 15:13:39.890" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170807 15:13:39.890" starttime="20170807 15:13:39.889"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170807 15:13:39.894" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170807 15:13:39.894" starttime="20170807 15:13:39.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:39.896" starttime="20170807 15:13:39.895"></status>
</kw>
<msg timestamp="20170807 15:13:39.896" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170807 15:13:39.896" starttime="20170807 15:13:39.895"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:39.898" starttime="20170807 15:13:39.898"></status>
</kw>
<msg timestamp="20170807 15:13:39.898" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:39.898" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 15:13:39.898" starttime="20170807 15:13:39.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:39.899" starttime="20170807 15:13:39.898"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 15:13:39.928" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170807 15:13:39.928" starttime="20170807 15:13:39.927"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 15:13:39.929" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170807 15:13:39.929" starttime="20170807 15:13:39.929"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.937" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170807 15:13:39.937" starttime="20170807 15:13:39.930"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.941" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.941" starttime="20170807 15:13:39.941"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.941" starttime="20170807 15:13:39.940"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.943" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.943" starttime="20170807 15:13:39.942"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.943" starttime="20170807 15:13:39.942"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.944" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.944" starttime="20170807 15:13:39.943"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.944" starttime="20170807 15:13:39.943"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:39.945" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:39.945" starttime="20170807 15:13:39.945"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.945" starttime="20170807 15:13:39.944"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.946" starttime="20170807 15:13:39.939"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:39.946" starttime="20170807 15:13:39.939"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 15:13:39.947" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170807 15:13:39.947" starttime="20170807 15:13:39.946"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 15:13:40.025" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:40.026" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170807 15:13:41.375" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 15:13:41.376" starttime="20170807 15:13:39.982"></status>
</kw>
<msg timestamp="20170807 15:13:41.376" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:41.376" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170807 15:13:41.376" starttime="20170807 15:13:39.947"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 15:13:41.377" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170807 15:13:41.377" starttime="20170807 15:13:41.376"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:13:41.377" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:13:41.377" starttime="20170807 15:13:41.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.384" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.384" starttime="20170807 15:13:41.383"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.384" starttime="20170807 15:13:41.383"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.384" starttime="20170807 15:13:41.378"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.384" starttime="20170807 15:13:39.938"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.384" starttime="20170807 15:13:39.937"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.384" starttime="20170807 15:13:39.937"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.385" starttime="20170807 15:13:39.928"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.385" starttime="20170807 15:13:39.928"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 15:13:41.386" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170807 15:13:41.386" starttime="20170807 15:13:41.385"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.386" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170807 15:13:41.387" starttime="20170807 15:13:41.386"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.390" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.390" starttime="20170807 15:13:41.390"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.390" starttime="20170807 15:13:41.389"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.391" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.391" starttime="20170807 15:13:41.391"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.392" starttime="20170807 15:13:41.390"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.393" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.393" starttime="20170807 15:13:41.392"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.393" starttime="20170807 15:13:41.392"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.394" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.394" starttime="20170807 15:13:41.393"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.394" starttime="20170807 15:13:41.393"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.394" starttime="20170807 15:13:41.388"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.394" starttime="20170807 15:13:41.388"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 15:13:41.395" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170807 15:13:41.395" starttime="20170807 15:13:41.394"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 15:13:41.475" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:41.476" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170807 15:13:41.534" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 15:13:41.534" starttime="20170807 15:13:41.428"></status>
</kw>
<msg timestamp="20170807 15:13:41.535" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:41.535" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-191"\nVERSION_ID="v1.99.8-191-g00e005e"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170807 15:13:41.535" starttime="20170807 15:13:41.395"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 15:13:41.535" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-191"
VERSION_ID="v1.99.8-191-g00e005e"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170807 15:13:41.535" starttime="20170807 15:13:41.535"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:13:41.536" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:13:41.536" starttime="20170807 15:13:41.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.543" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.543" starttime="20170807 15:13:41.542"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.543" starttime="20170807 15:13:41.541"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.543" starttime="20170807 15:13:41.536"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.543" starttime="20170807 15:13:41.387"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.543" starttime="20170807 15:13:41.387"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.543" starttime="20170807 15:13:41.387"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.543" starttime="20170807 15:13:41.385"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.543" starttime="20170807 15:13:41.385"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 15:13:41.544" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170807 15:13:41.544" starttime="20170807 15:13:41.544"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.545" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170807 15:13:41.545" starttime="20170807 15:13:41.545"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.549" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.549" starttime="20170807 15:13:41.548"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.549" starttime="20170807 15:13:41.548"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.550" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.550" starttime="20170807 15:13:41.550"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.550" starttime="20170807 15:13:41.549"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.551" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.551" starttime="20170807 15:13:41.551"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.551" starttime="20170807 15:13:41.550"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.553" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.553" starttime="20170807 15:13:41.552"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.553" starttime="20170807 15:13:41.552"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.553" starttime="20170807 15:13:41.547"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.553" starttime="20170807 15:13:41.546"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 15:13:41.554" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170807 15:13:41.554" starttime="20170807 15:13:41.553"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 15:13:41.633" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:41.634" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170807 15:13:41.691" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 15:13:41.691" starttime="20170807 15:13:41.590"></status>
</kw>
<msg timestamp="20170807 15:13:41.691" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:41.691" level="INFO">${ret_values} = (u' 15:51:42 up 8 min,  load average: 1.31, 1.80, 1.23', u'', 0)</msg>
<status status="PASS" endtime="20170807 15:13:41.691" starttime="20170807 15:13:41.554"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 15:13:41.692" level="INFO">${stdout} =  15:51:42 up 8 min,  load average: 1.31, 1.80, 1.23</msg>
<status status="PASS" endtime="20170807 15:13:41.692" starttime="20170807 15:13:41.692"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:13:41.693" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:13:41.693" starttime="20170807 15:13:41.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.699" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.699" starttime="20170807 15:13:41.699"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.699" starttime="20170807 15:13:41.698"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.700" starttime="20170807 15:13:41.693"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.700" starttime="20170807 15:13:41.546"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.700" starttime="20170807 15:13:41.545"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.703" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.703" starttime="20170807 15:13:41.702"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.703" starttime="20170807 15:13:41.702"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.704" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.704" starttime="20170807 15:13:41.704"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.705" starttime="20170807 15:13:41.703"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.706" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.706" starttime="20170807 15:13:41.705"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.706" starttime="20170807 15:13:41.705"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.707" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.707" starttime="20170807 15:13:41.707"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.707" starttime="20170807 15:13:41.706"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.707" starttime="20170807 15:13:41.701"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.707" starttime="20170807 15:13:41.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 15:13:41.708" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170807 15:13:41.708" starttime="20170807 15:13:41.708"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 15:13:41.787" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:41.787" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170807 15:13:41.875" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 15:13:41.875" starttime="20170807 15:13:41.745"></status>
</kw>
<msg timestamp="20170807 15:13:41.875" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:41.875" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170807 15:13:41.875" starttime="20170807 15:13:41.708"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 15:13:41.876" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" endtime="20170807 15:13:41.876" starttime="20170807 15:13:41.876"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:13:41.877" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:13:41.877" starttime="20170807 15:13:41.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.887" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.887" starttime="20170807 15:13:41.886"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.887" starttime="20170807 15:13:41.885"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.887" starttime="20170807 15:13:41.878"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.887" starttime="20170807 15:13:41.700"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.887" starttime="20170807 15:13:41.700"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.890" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.890" starttime="20170807 15:13:41.890"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.891" starttime="20170807 15:13:41.889"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.892" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.892" starttime="20170807 15:13:41.891"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.892" starttime="20170807 15:13:41.891"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.893" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.893" starttime="20170807 15:13:41.893"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.893" starttime="20170807 15:13:41.892"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:41.895" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:41.895" starttime="20170807 15:13:41.894"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.895" starttime="20170807 15:13:41.893"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.895" starttime="20170807 15:13:41.889"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:41.895" starttime="20170807 15:13:41.888"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 15:13:41.896" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170807 15:13:41.896" starttime="20170807 15:13:41.895"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 15:13:41.976" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:41.977" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170807 15:13:42.024" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 15:13:42.025" starttime="20170807 15:13:41.932"></status>
</kw>
<msg timestamp="20170807 15:13:42.025" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:42.025" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Mon Aug 7 14:49:13 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170807 15:13:42.025" starttime="20170807 15:13:41.896"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 15:13:42.026" level="INFO">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Mon Aug 7 14:49:13 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170807 15:13:42.026" starttime="20170807 15:13:42.025"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:13:42.027" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:13:42.027" starttime="20170807 15:13:42.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:42.037" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:42.037" starttime="20170807 15:13:42.036"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.037" starttime="20170807 15:13:42.035"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.037" starttime="20170807 15:13:42.027"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.037" starttime="20170807 15:13:41.888"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.037" starttime="20170807 15:13:41.887"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.037" starttime="20170807 15:13:41.545"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.037" starttime="20170807 15:13:41.543"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.037" starttime="20170807 15:13:41.543"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.037" starttime="20170807 15:13:39.928"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.037" starttime="20170807 15:13:39.927"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.038" starttime="20170807 15:13:39.899"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.038" starttime="20170807 15:13:39.896"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.038" starttime="20170807 15:13:39.896"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:42.040" starttime="20170807 15:13:42.039"></status>
</kw>
<msg timestamp="20170807 15:13:42.040" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:42.040" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 15:13:42.040" starttime="20170807 15:13:42.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:42.040" starttime="20170807 15:13:42.040"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 15:13:42.070" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170807 15:13:42.070" starttime="20170807 15:13:42.069"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 15:13:42.071" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170807 15:13:42.071" starttime="20170807 15:13:42.071"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 15:13:42.073" level="INFO">${logpath} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_elog.txt</msg>
<status status="PASS" endtime="20170807 15:13:42.073" starttime="20170807 15:13:42.072"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:13:42.076" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:13:42.077" starttime="20170807 15:13:42.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:13:42.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:13:42.077" starttime="20170807 15:13:42.077"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:13:42.078" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:13:42.078" starttime="20170807 15:13:42.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:13:42.079" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:13:42.079" starttime="20170807 15:13:42.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:13:42.269" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:13:42.269" starttime="20170807 15:13:42.079"></status>
</kw>
<msg timestamp="20170807 15:13:42.269" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:42.269" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:42.269" starttime="20170807 15:13:42.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:13:42.270" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:42.270" starttime="20170807 15:13:42.269"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:42.271" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:42.271" starttime="20170807 15:13:42.270"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.271" starttime="20170807 15:13:42.075"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.271" starttime="20170807 15:13:42.075"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.271" starttime="20170807 15:13:42.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:13:42.272" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170807 15:13:42.272" starttime="20170807 15:13:42.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:42.272" starttime="20170807 15:13:42.272"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:13:42.392" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 15:13:42.392" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:42.393" starttime="20170807 15:13:42.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:42.393" starttime="20170807 15:13:42.393"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:13:42.394" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:13:42.394" starttime="20170807 15:13:42.393"></status>
</kw>
<msg timestamp="20170807 15:13:42.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:42.394" starttime="20170807 15:13:42.073"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:42.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:42.395" starttime="20170807 15:13:42.395"></status>
</kw>
<msg timestamp="20170807 15:13:42.395" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170807 15:13:42.395" starttime="20170807 15:13:42.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:42.396" starttime="20170807 15:13:42.395"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170807 15:13:42.397" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775110652, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:13:42.397" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170807 15:13:42.397" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status status="PASS" endtime="20170807 15:13:42.397" starttime="20170807 15:13:42.396"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:42.398" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_elog.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:42.398" starttime="20170807 15:13:42.398"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.398" starttime="20170807 15:13:42.397"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.398" starttime="20170807 15:13:42.071"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 15:13:42.399" level="INFO">${logpath} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170807 15:13:42.399" starttime="20170807 15:13:42.399"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:13:42.402" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:13:42.403" starttime="20170807 15:13:42.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:13:42.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:13:42.403" starttime="20170807 15:13:42.403"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:13:42.404" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:13:42.404" starttime="20170807 15:13:42.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:13:42.405" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:13:42.405" starttime="20170807 15:13:42.404"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:13:42.608" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:13:42.608" starttime="20170807 15:13:42.405"></status>
</kw>
<msg timestamp="20170807 15:13:42.608" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:42.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:42.608" starttime="20170807 15:13:42.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:13:42.609" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:42.609" starttime="20170807 15:13:42.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:42.610" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:42.610" starttime="20170807 15:13:42.609"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.610" starttime="20170807 15:13:42.401"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.610" starttime="20170807 15:13:42.401"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.610" starttime="20170807 15:13:42.400"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:13:42.611" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170807 15:13:42.611" starttime="20170807 15:13:42.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:42.611" starttime="20170807 15:13:42.611"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:13:42.796" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 15:13:42.796" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:42.796" starttime="20170807 15:13:42.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:42.797" starttime="20170807 15:13:42.797"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:13:42.797" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:13:42.797" starttime="20170807 15:13:42.797"></status>
</kw>
<msg timestamp="20170807 15:13:42.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:42.798" starttime="20170807 15:13:42.399"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:42.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:42.799" starttime="20170807 15:13:42.798"></status>
</kw>
<msg timestamp="20170807 15:13:42.799" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170807 15:13:42.799" starttime="20170807 15:13:42.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:42.799" starttime="20170807 15:13:42.799"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170807 15:13:42.800" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:13:42.800" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170807 15:13:42.800" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170807 15:13:42.800" starttime="20170807 15:13:42.800"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:42.802" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:42.802" starttime="20170807 15:13:42.801"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.802" starttime="20170807 15:13:42.801"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:42.802" starttime="20170807 15:13:42.398"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 15:13:42.803" level="INFO">${logpath} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170807 15:13:42.803" starttime="20170807 15:13:42.802"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:13:42.806" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:13:42.806" starttime="20170807 15:13:42.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:13:42.807" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:13:42.807" starttime="20170807 15:13:42.807"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:13:42.807" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:13:42.807" starttime="20170807 15:13:42.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:13:42.808" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:13:42.808" starttime="20170807 15:13:42.808"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.028" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:13:43.029" starttime="20170807 15:13:42.809"></status>
</kw>
<msg timestamp="20170807 15:13:43.029" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:43.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.029" starttime="20170807 15:13:42.808"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.029" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.030" starttime="20170807 15:13:43.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.030" starttime="20170807 15:13:43.030"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.030" starttime="20170807 15:13:42.805"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.030" starttime="20170807 15:13:42.804"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.031" starttime="20170807 15:13:42.804"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:13:43.031" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170807 15:13:43.031" starttime="20170807 15:13:43.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:43.032" starttime="20170807 15:13:43.032"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:13:43.255" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 15:13:43.255" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.255" starttime="20170807 15:13:43.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:43.256" starttime="20170807 15:13:43.255"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:13:43.256" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:13:43.256" starttime="20170807 15:13:43.256"></status>
</kw>
<msg timestamp="20170807 15:13:43.257" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.257" starttime="20170807 15:13:42.803"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.258" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.258" starttime="20170807 15:13:43.257"></status>
</kw>
<msg timestamp="20170807 15:13:43.258" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170807 15:13:43.258" starttime="20170807 15:13:43.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:43.258" starttime="20170807 15:13:43.258"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170807 15:13:43.259" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:13:43.259" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170807 15:13:43.259" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170807 15:13:43.259" starttime="20170807 15:13:43.259"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.261" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:43.261" starttime="20170807 15:13:43.260"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.261" starttime="20170807 15:13:43.260"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.261" starttime="20170807 15:13:42.802"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 15:13:43.262" level="INFO">${logpath} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_led.txt</msg>
<status status="PASS" endtime="20170807 15:13:43.262" starttime="20170807 15:13:43.261"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:13:43.265" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:13:43.265" starttime="20170807 15:13:43.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:13:43.266" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:13:43.266" starttime="20170807 15:13:43.265"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:13:43.266" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:13:43.266" starttime="20170807 15:13:43.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:13:43.267" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:13:43.267" starttime="20170807 15:13:43.267"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.445" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:13:43.445" starttime="20170807 15:13:43.268"></status>
</kw>
<msg timestamp="20170807 15:13:43.445" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:43.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.445" starttime="20170807 15:13:43.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.446" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.446" starttime="20170807 15:13:43.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.447" starttime="20170807 15:13:43.446"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.447" starttime="20170807 15:13:43.264"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.447" starttime="20170807 15:13:43.263"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.447" starttime="20170807 15:13:43.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:13:43.448" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170807 15:13:43.448" starttime="20170807 15:13:43.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:43.448" starttime="20170807 15:13:43.448"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:13:43.503" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 15:13:43.504" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.504" starttime="20170807 15:13:43.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:43.504" starttime="20170807 15:13:43.504"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:13:43.505" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:13:43.505" starttime="20170807 15:13:43.505"></status>
</kw>
<msg timestamp="20170807 15:13:43.505" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.505" starttime="20170807 15:13:43.262"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 15:13:43.506" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170807 15:13:43.506" starttime="20170807 15:13:43.506"></status>
</kw>
<msg timestamp="20170807 15:13:43.507" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 15:13:43.507" starttime="20170807 15:13:43.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170807 15:13:43.508" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 15:13:43.508" starttime="20170807 15:13:43.507"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.508" starttime="20170807 15:13:43.507"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.508" starttime="20170807 15:13:43.261"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 15:13:43.509" level="INFO">${logpath} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170807 15:13:43.509" starttime="20170807 15:13:43.508"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:13:43.512" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:13:43.512" starttime="20170807 15:13:43.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:13:43.513" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:13:43.513" starttime="20170807 15:13:43.512"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:13:43.513" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:13:43.513" starttime="20170807 15:13:43.513"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:13:43.514" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:13:43.514" starttime="20170807 15:13:43.514"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.731" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:13:43.731" starttime="20170807 15:13:43.515"></status>
</kw>
<msg timestamp="20170807 15:13:43.731" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:43.731" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.732" starttime="20170807 15:13:43.514"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.732" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.732" starttime="20170807 15:13:43.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.733" starttime="20170807 15:13:43.733"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.733" starttime="20170807 15:13:43.511"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.733" starttime="20170807 15:13:43.510"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.733" starttime="20170807 15:13:43.510"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:13:43.734" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170807 15:13:43.734" starttime="20170807 15:13:43.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:43.735" starttime="20170807 15:13:43.734"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:13:43.780" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170807 15:13:43.780" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.780" starttime="20170807 15:13:43.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:43.781" starttime="20170807 15:13:43.781"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:13:43.781" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:13:43.781" starttime="20170807 15:13:43.781"></status>
</kw>
<msg timestamp="20170807 15:13:43.782" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:43.782" starttime="20170807 15:13:43.509"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:43.783" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170807 15:13:43.783" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170807 15:13:43.783" starttime="20170807 15:13:43.782"></status>
</kw>
<msg timestamp="20170807 15:13:43.783" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 15:13:43.783" starttime="20170807 15:13:43.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170807 15:13:43.784" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 15:13:43.784" starttime="20170807 15:13:43.784"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.784" starttime="20170807 15:13:43.783"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.784" starttime="20170807 15:13:43.508"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.784" starttime="20170807 15:13:42.071"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.785" starttime="20170807 15:13:42.070"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.785" starttime="20170807 15:13:42.070"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.785" starttime="20170807 15:13:42.070"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.785" starttime="20170807 15:13:42.069"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.785" starttime="20170807 15:13:42.041"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.785" starttime="20170807 15:13:42.038"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:43.785" starttime="20170807 15:13:42.038"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:43.787" starttime="20170807 15:13:43.787"></status>
</kw>
<msg timestamp="20170807 15:13:43.787" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:43.787" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 15:13:43.787" starttime="20170807 15:13:43.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:43.788" starttime="20170807 15:13:43.787"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170807 15:13:43.854" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:43.854" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170807 15:13:43.903" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170807 15:13:43.917" level="INFO">${core_files} = None</msg>
<msg timestamp="20170807 15:13:43.917" level="INFO">${stderr} = None</msg>
<msg timestamp="20170807 15:13:43.917" level="INFO">${rc} = None</msg>
<msg timestamp="20170807 15:13:43.917" level="FAIL">#(UTC) 2017/08/07 15:13:43.915257 -    4.049334 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170807 15:13:43.917" starttime="20170807 15:13:43.818"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170807 15:13:43.918" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170807 15:13:43.918" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170807 15:13:43.918" starttime="20170807 15:13:43.917"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:43.940" starttime="20170807 15:13:43.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:44.674" starttime="20170807 15:13:43.943"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:44.674" starttime="20170807 15:13:43.942"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:44.674" starttime="20170807 15:13:43.929"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:44.674" starttime="20170807 15:13:43.918"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170807 15:13:44.674" starttime="20170807 15:13:44.674"></status>
</kw>
<status status="FAIL" endtime="20170807 15:13:44.674" starttime="20170807 15:13:43.816"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:44.675" starttime="20170807 15:13:43.788"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:44.675" starttime="20170807 15:13:43.785"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:44.675" starttime="20170807 15:13:43.785"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:44.677" starttime="20170807 15:13:44.677"></status>
</kw>
<msg timestamp="20170807 15:13:44.677" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:44.677" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 15:13:44.677" starttime="20170807 15:13:44.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:44.678" starttime="20170807 15:13:44.677"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170807 15:13:44.706" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170807 15:13:44.707" starttime="20170807 15:13:44.706"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170807 15:13:44.708" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170807 15:13:44.708" starttime="20170807 15:13:44.708"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 15:13:44.709" level="INFO">${logpath} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170807 15:13:44.709" starttime="20170807 15:13:44.708"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:44.710" starttime="20170807 15:13:44.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 15:13:44.711" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170807 15:13:44.711" starttime="20170807 15:13:44.710"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 15:13:44.791" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:44.792" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170807 15:13:45.292" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 15:13:45.293" starttime="20170807 15:13:44.745"></status>
</kw>
<msg timestamp="20170807 15:13:45.293" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:45.294" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:51 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:51 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170807 15:13:45.294" starttime="20170807 15:13:44.711"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 15:13:45.295" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:51 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:51 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170807 15:13:45.295" starttime="20170807 15:13:45.294"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:13:45.295" level="INFO">${stderr} = ls: /proc/1346/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170807 15:13:45.296" starttime="20170807 15:13:45.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:45.303" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:45.303" starttime="20170807 15:13:45.302"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:45.303" starttime="20170807 15:13:45.301"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:45.303" starttime="20170807 15:13:45.296"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:45.303" starttime="20170807 15:13:44.709"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:45.303" starttime="20170807 15:13:44.708"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 15:13:45.304" level="INFO">${logpath} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170807 15:13:45.304" starttime="20170807 15:13:45.303"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:45.305" starttime="20170807 15:13:45.305"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 15:13:45.306" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170807 15:13:45.306" starttime="20170807 15:13:45.306"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 15:13:45.385" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:45.386" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170807 15:13:45.442" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 15:13:45.442" starttime="20170807 15:13:45.343"></status>
</kw>
<msg timestamp="20170807 15:13:45.443" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:45.443" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170807 15:13:45.443" starttime="20170807 15:13:45.306"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 15:13:45.443" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170807 15:13:45.443" starttime="20170807 15:13:45.443"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:13:45.444" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:13:45.444" starttime="20170807 15:13:45.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:45.452" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:45.453" starttime="20170807 15:13:45.452"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:45.453" starttime="20170807 15:13:45.451"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:45.453" starttime="20170807 15:13:45.444"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:45.453" starttime="20170807 15:13:45.304"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:45.453" starttime="20170807 15:13:45.303"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 15:13:45.454" level="INFO">${logpath} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170807 15:13:45.454" starttime="20170807 15:13:45.453"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:45.455" starttime="20170807 15:13:45.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 15:13:45.456" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170807 15:13:45.456" starttime="20170807 15:13:45.455"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 15:13:45.534" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:45.535" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170807 15:13:45.602" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 15:13:45.603" starttime="20170807 15:13:45.491"></status>
</kw>
<msg timestamp="20170807 15:13:45.603" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:45.603" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          279920 kB\nMemAvailable:     326408 kB\nBuffers:           11284 kB\nCached:            52232 kB\nSwapCached:            0 kB\nActive:            9647...</msg>
<status status="PASS" endtime="20170807 15:13:45.603" starttime="20170807 15:13:45.456"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 15:13:45.604" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          279920 kB
MemAvailable:     326408 kB
Buffers:           11284 kB
Cached:            52232 kB
SwapCached:            0 kB
Active:            96472 kB
Inac...</msg>
<status status="PASS" endtime="20170807 15:13:45.604" starttime="20170807 15:13:45.603"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:13:45.605" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:13:45.605" starttime="20170807 15:13:45.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:45.611" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:45.611" starttime="20170807 15:13:45.611"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:45.612" starttime="20170807 15:13:45.610"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:45.612" starttime="20170807 15:13:45.605"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:45.612" starttime="20170807 15:13:45.454"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:45.612" starttime="20170807 15:13:45.453"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 15:13:45.613" level="INFO">${logpath} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170807 15:13:45.613" starttime="20170807 15:13:45.612"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:45.614" starttime="20170807 15:13:45.614"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 15:13:45.615" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170807 15:13:45.615" starttime="20170807 15:13:45.614"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 15:13:45.693" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:45.694" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170807 15:13:46.073" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 15:13:46.074" starttime="20170807 15:13:45.649"></status>
</kw>
<msg timestamp="20170807 15:13:46.074" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:46.074" level="INFO">${ret_values} = (u'Mem: 152348K used, 279920K free, 14520K shrd, 11284K buff, 52236K cached\nCPU:   0% usr  15% sys   0% nic  84% idle   0% io   0% irq   0% sirq\nLoad average: 1.53 1.84 1.25 1/149 1349\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170807 15:13:46.074" starttime="20170807 15:13:45.615"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 15:13:46.075" level="INFO">${stdout} = Mem: 152348K used, 279920K free, 14520K shrd, 11284K buff, 52236K cached
CPU:   0% usr  15% sys   0% nic  84% idle   0% io   0% irq   0% sirq
Load average: 1.53 1.84 1.25 1/149 1349
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170807 15:13:46.075" starttime="20170807 15:13:46.075"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:13:46.076" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:13:46.076" starttime="20170807 15:13:46.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:46.086" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:46.086" starttime="20170807 15:13:46.085"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:46.087" starttime="20170807 15:13:46.084"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:46.087" starttime="20170807 15:13:46.077"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:46.087" starttime="20170807 15:13:45.613"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:46.087" starttime="20170807 15:13:45.612"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 15:13:46.088" level="INFO">${logpath} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170807 15:13:46.088" starttime="20170807 15:13:46.087"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:46.089" starttime="20170807 15:13:46.089"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 15:13:46.090" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170807 15:13:46.090" starttime="20170807 15:13:46.089"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 15:13:46.168" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:46.169" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170807 15:13:46.236" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 15:13:46.236" starttime="20170807 15:13:46.125"></status>
</kw>
<msg timestamp="20170807 15:13:46.236" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:46.236" level="INFO">${ret_values} = (u'[    0.000000]   Normal zone: 992 pages used for memmap\n[    0.000000]   Normal zone: 0 pages reserved\n[    0.000000]   Normal zone: 110592 pages, LIFO batch:31\n[    0.000000] pcpu-alloc: s0 r0 ...</msg>
<status status="PASS" endtime="20170807 15:13:46.236" starttime="20170807 15:13:46.090"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 15:13:46.237" level="INFO">${stdout} = [    0.000000]   Normal zone: 992 pages used for memmap
[    0.000000]   Normal zone: 0 pages reserved
[    0.000000]   Normal zone: 110592 pages, LIFO batch:31
[    0.000000] pcpu-alloc: s0 r0 d32768...</msg>
<status status="PASS" endtime="20170807 15:13:46.237" starttime="20170807 15:13:46.237"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:13:46.238" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:13:46.238" starttime="20170807 15:13:46.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:46.245" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:46.245" starttime="20170807 15:13:46.244"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:46.245" starttime="20170807 15:13:46.243"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:46.245" starttime="20170807 15:13:46.238"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:46.245" starttime="20170807 15:13:46.088"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:46.245" starttime="20170807 15:13:46.087"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 15:13:46.246" level="INFO">${logpath} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170807 15:13:46.246" starttime="20170807 15:13:46.245"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:46.247" starttime="20170807 15:13:46.247"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170807 15:13:46.248" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170807 15:13:46.248" starttime="20170807 15:13:46.247"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170807 15:13:46.325" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170807 15:13:46.326" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170807 15:13:47.544" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 15:13:47.545" starttime="20170807 15:13:46.283"></status>
</kw>
<msg timestamp="20170807 15:13:47.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:47.547" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:51:45 UTC. --\nAug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:59 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170807 15:13:47.547" starttime="20170807 15:13:46.248"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170807 15:13:47.548" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:51:45 UTC. --
Aug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:59 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170807 15:13:47.548" starttime="20170807 15:13:47.547"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170807 15:13:47.549" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170807 15:13:47.549" starttime="20170807 15:13:47.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170807 15:13:47.556" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:47.556" starttime="20170807 15:13:47.555"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.557" starttime="20170807 15:13:47.554"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.557" starttime="20170807 15:13:47.549"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.557" starttime="20170807 15:13:46.246"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.557" starttime="20170807 15:13:46.245"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.557" starttime="20170807 15:13:44.708"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.557" starttime="20170807 15:13:44.707"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.557" starttime="20170807 15:13:44.707"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.557" starttime="20170807 15:13:44.707"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.557" starttime="20170807 15:13:44.705"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.557" starttime="20170807 15:13:44.678"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.557" starttime="20170807 15:13:44.675"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.557" starttime="20170807 15:13:44.675"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:47.559" starttime="20170807 15:13:47.559"></status>
</kw>
<msg timestamp="20170807 15:13:47.559" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:47.559" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 15:13:47.559" starttime="20170807 15:13:47.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:47.560" starttime="20170807 15:13:47.560"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:13:47.592" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:13:47.593" starttime="20170807 15:13:47.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:13:47.593" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:13:47.594" starttime="20170807 15:13:47.593"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:13:47.594" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:13:47.594" starttime="20170807 15:13:47.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:13:47.595" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:13:47.595" starttime="20170807 15:13:47.594"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:13:47.822" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:13:47.822" starttime="20170807 15:13:47.596"></status>
</kw>
<msg timestamp="20170807 15:13:47.822" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:47.822" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:47.823" starttime="20170807 15:13:47.595"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:13:47.823" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:47.823" starttime="20170807 15:13:47.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:47.824" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:47.824" starttime="20170807 15:13:47.824"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.824" starttime="20170807 15:13:47.591"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.824" starttime="20170807 15:13:47.590"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:47.824" starttime="20170807 15:13:47.590"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:13:47.825" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170807 15:13:47.825" starttime="20170807 15:13:47.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:47.826" starttime="20170807 15:13:47.825"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:13:47.979" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170807 15:13:47.979" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:47.979" starttime="20170807 15:13:47.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:47.980" starttime="20170807 15:13:47.979"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:13:47.980" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:13:47.980" starttime="20170807 15:13:47.980"></status>
</kw>
<msg timestamp="20170807 15:13:47.980" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:47.980" starttime="20170807 15:13:47.588"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:47.981" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:47.981" starttime="20170807 15:13:47.981"></status>
</kw>
<msg timestamp="20170807 15:13:47.982" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170807 15:13:47.982" starttime="20170807 15:13:47.981"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:47.982" starttime="20170807 15:13:47.982"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:13:47.983" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775110652, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:13:47.983" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:13:47.983" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/2': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170807 15:13:47.983" starttime="20170807 15:13:47.982"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170807 15:13:47.984" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2']</msg>
<status status="PASS" endtime="20170807 15:13:47.984" starttime="20170807 15:13:47.983"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170807 15:13:47.984" level="INFO">${logpath} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_esel</msg>
<status status="PASS" endtime="20170807 15:13:47.984" starttime="20170807 15:13:47.984"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170807 15:13:47.985" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_esel"&gt;/home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/20170807151338854502_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:47.985" starttime="20170807 15:13:47.985"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:47.986" starttime="20170807 15:13:47.986"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170807 15:13:47.990" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 15:13:47.990" starttime="20170807 15:13:47.990"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170807 15:13:47.991" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 15:13:47.991" starttime="20170807 15:13:47.991"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170807 15:13:47.991" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 15:13:47.992" starttime="20170807 15:13:47.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170807 15:13:47.992" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 15:13:47.992" starttime="20170807 15:13:47.992"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170807 15:13:48.187" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 15:13:48.188" starttime="20170807 15:13:47.993"></status>
</kw>
<msg timestamp="20170807 15:13:48.188" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:48.188" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:48.188" starttime="20170807 15:13:47.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170807 15:13:48.188" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:48.189" starttime="20170807 15:13:48.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:48.189" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:48.189" starttime="20170807 15:13:48.189"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.189" starttime="20170807 15:13:47.989"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.189" starttime="20170807 15:13:47.989"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.190" starttime="20170807 15:13:47.988"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170807 15:13:48.190" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" endtime="20170807 15:13:48.190" starttime="20170807 15:13:48.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:48.191" starttime="20170807 15:13:48.191"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170807 15:13:48.272" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170807 15:13:48.272" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:48.272" starttime="20170807 15:13:48.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:48.273" starttime="20170807 15:13:48.273"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170807 15:13:48.274" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 15:13:48.274" starttime="20170807 15:13:48.273"></status>
</kw>
<msg timestamp="20170807 15:13:48.274" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 15:13:48.274" starttime="20170807 15:13:47.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170807 15:13:48.274" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 15:13:48.275" starttime="20170807 15:13:48.274"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170807 15:13:48.275" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170807 15:13:48.275" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170807 15:13:48.275" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170807 15:13:48.275" starttime="20170807 15:13:48.275"></status>
</kw>
<msg timestamp="20170807 15:13:48.276" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170807 15:13:48.276" starttime="20170807 15:13:47.986"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170807 15:13:48.276" level="INFO">Length is 0</msg>
<msg timestamp="20170807 15:13:48.276" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170807 15:13:48.276" starttime="20170807 15:13:48.276"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170807 15:13:48.277" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 15:13:48.277" starttime="20170807 15:13:48.277"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.277" starttime="20170807 15:13:47.985"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.277" starttime="20170807 15:13:47.985"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170807 15:13:48.282" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170807 15:13:48.285" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170807 15:13:48.285" starttime="20170807 15:13:48.277"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170807 15:13:48.290" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170807 15:13:48.290" starttime="20170807 15:13:48.289"></status>
</kw>
<msg timestamp="20170807 15:13:48.290" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170807 15:13:48.291" starttime="20170807 15:13:48.288"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170807 15:13:48.291" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170807 15:13:48.292" starttime="20170807 15:13:48.291"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.292" starttime="20170807 15:13:47.587"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.292" starttime="20170807 15:13:47.560"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.292" starttime="20170807 15:13:47.558"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.292" starttime="20170807 15:13:47.557"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:48.296" starttime="20170807 15:13:48.296"></status>
</kw>
<msg timestamp="20170807 15:13:48.297" level="INFO">${status} = PASS</msg>
<msg timestamp="20170807 15:13:48.297" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 15:13:48.297" starttime="20170807 15:13:48.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:48.297" starttime="20170807 15:13:48.297"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170807 15:13:48.327" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170807 15:13:48.327" starttime="20170807 15:13:48.327"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.328" starttime="20170807 15:13:48.326"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.328" starttime="20170807 15:13:48.298"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.328" starttime="20170807 15:13:48.293"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.328" starttime="20170807 15:13:48.292"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.328" starttime="20170807 15:13:39.896"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.328" starttime="20170807 15:13:39.893"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.328" starttime="20170807 15:13:39.890"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.328" starttime="20170807 15:13:39.890"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170807 15:13:48.337" starttime="20170807 15:13:48.337"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.337" starttime="20170807 15:13:48.329"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.338" starttime="20170807 15:13:39.889"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.338" starttime="20170807 15:13:35.793"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.338" starttime="20170807 15:13:35.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:48.339" starttime="20170807 15:13:48.338"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170807 15:13:48.349" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170807 15:13:48.349" starttime="20170807 15:13:48.339"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170807 15:13:48.350" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170807151338854502_CodeUpdate/20170807151338854502_RESTPNORCodeUpdate/</msg>
<status status="PASS" endtime="20170807 15:13:48.350" starttime="20170807 15:13:48.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:48.351" starttime="20170807 15:13:48.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:48.352" starttime="20170807 15:13:48.351"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170807 15:13:48.352" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170807 15:13:48.352" starttime="20170807 15:13:48.352"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170807 15:13:48.353" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170807 15:13:48.353" starttime="20170807 15:13:48.353"></status>
</kw>
<msg timestamp="20170807 15:13:48.353" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170807 15:13:48.353" starttime="20170807 15:13:48.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:48.354" starttime="20170807 15:13:48.354"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170807 15:13:48.355" starttime="20170807 15:13:48.354"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170807 15:13:48.356" level="INFO">${cur_time} = 2017-08-07 15:13:48:355475</msg>
<status status="PASS" endtime="20170807 15:13:48.356" starttime="20170807 15:13:48.355"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170807 15:13:48.356" level="INFO">${cur_time} = 20170807151348355475</msg>
<status status="PASS" endtime="20170807 15:13:48.356" starttime="20170807 15:13:48.356"></status>
</kw>
<msg timestamp="20170807 15:13:48.357" level="INFO">${cur_time} = 20170807151348355475</msg>
<status status="PASS" endtime="20170807 15:13:48.357" starttime="20170807 15:13:48.355"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170807 15:13:48.358" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 15:13:48.358" starttime="20170807 15:13:48.357"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.358" starttime="20170807 15:13:48.339"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.358" starttime="20170807 15:13:35.125"></status>
</kw>
<status status="PASS" endtime="20170807 15:13:48.358" starttime="20170807 15:13:33.232"></status>
</kw>
<doc>Do a PNOR code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_PNOR_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170807 15:13:48.358" critical="yes" starttime="20170807 15:06:56.130">xyz.openbmc_project.Software.Activation.Activations.Invalid != xyz.openbmc_project.Software.Activation.Activations.Active</status>
</test>
<doc>Code update to a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v DELETE_OLD_PNOR_IMAGES:&lt;"true" or "false"&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; code_update.robot

Code update method BMC
Update work flow sequence:
- Upload image via REST
- Verify that the file exists on the BMC
- Check software "Activation" status to be "Ready"
- Set "Requested Activation" to "Active"
- Wait for code update to complete
- Verify the new version</doc>
<status status="FAIL" endtime="20170807 15:13:48.360" starttime="20170807 15:06:55.529"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_PNOR_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Code Update" pass="0">Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
