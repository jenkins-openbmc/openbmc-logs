<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170707 22:05:06.062" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170707 22:05:07.023" level="INFO">Length is 41</msg>
<status status="PASS" endtime="20170707 22:05:07.023" starttime="20170707 22:05:07.022"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170707 22:05:07.025" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon_20170704n.pnor"&gt;/home/fspcibld/witherspoon_20170704n.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170707 22:05:07.025" starttime="20170707 22:05:07.024"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:07.025" starttime="20170707 22:05:07.021"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170707 22:05:07.044" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 22:05:07.090" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170707 22:05:07.090" starttime="20170707 22:05:07.089"></status>
</kw>
<msg timestamp="20170707 22:05:07.090" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170707 22:05:07.090" starttime="20170707 22:05:07.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:07.091" starttime="20170707 22:05:07.091"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:07.091" starttime="20170707 22:05:07.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:07.092" starttime="20170707 22:05:07.091"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 22:05:07.093" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170707 22:05:07.093" starttime="20170707 22:05:07.093"></status>
</kw>
<msg timestamp="20170707 22:05:07.093" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170707 22:05:07.093" starttime="20170707 22:05:07.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:07.095" starttime="20170707 22:05:07.095"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:07.095" starttime="20170707 22:05:07.094"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:07.095" starttime="20170707 22:05:07.093"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 22:05:07.096" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170707 22:05:08.840" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170707 22:05:08.841" starttime="20170707 22:05:07.096"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:08.841" starttime="20170707 22:05:07.087"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:05:08.842" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170707 22:05:08.919" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 22:05:08.919" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170707 22:05:08.919" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170707 22:05:08.919" starttime="20170707 22:05:08.841"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170707 22:05:08.919" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170707 22:05:08.920" starttime="20170707 22:05:08.919"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170707 22:05:08.920" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170707 22:05:08.920" starttime="20170707 22:05:08.920"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:08.920" starttime="20170707 22:05:07.086"></status>
</kw>
<msg timestamp="20170707 22:05:08.921" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170707 22:05:09.236" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170707 22:05:09.254" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170707 22:05:09.254" starttime="20170707 22:05:09.252"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:05:09.255" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170707 22:05:09.255" starttime="20170707 22:05:09.255"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:05:09.258" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:05:09.263" starttime="20170707 22:05:09.258"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:05:09.264" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:05:09.264" starttime="20170707 22:05:09.264"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:05:09.265" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:05:09.265" starttime="20170707 22:05:09.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:05:09.265" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:05:09.265" starttime="20170707 22:05:09.265"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:05:09.468" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:05:09.469" starttime="20170707 22:05:09.266"></status>
</kw>
<msg timestamp="20170707 22:05:09.469" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:05:09.469" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.469" starttime="20170707 22:05:09.266"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:05:09.469" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.470" starttime="20170707 22:05:09.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:09.470" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.470" starttime="20170707 22:05:09.470"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:09.470" starttime="20170707 22:05:09.257"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:09.470" starttime="20170707 22:05:09.257"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:09.471" starttime="20170707 22:05:09.256"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:05:09.471" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170707 22:05:09.471" starttime="20170707 22:05:09.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:05:09.472" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:05:09.472" starttime="20170707 22:05:09.471"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:09.472" starttime="20170707 22:05:09.472"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 22:05:09.474" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170707 22:05:09.474" starttime="20170707 22:05:09.473"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 22:05:09.475" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170707 22:05:09.475" starttime="20170707 22:05:09.475"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:09.475" starttime="20170707 22:05:09.474"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:09.476" starttime="20170707 22:05:09.473"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:05:09.683" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170707 22:05:09.683" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.683" starttime="20170707 22:05:09.476"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 22:05:09.684" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170707 22:05:09.684" starttime="20170707 22:05:09.684"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 22:05:09.685" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170707 22:05:09.685" starttime="20170707 22:05:09.685"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:09.685" starttime="20170707 22:05:09.684"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:09.685" starttime="20170707 22:05:09.683"></status>
</kw>
<msg timestamp="20170707 22:05:09.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.686" starttime="20170707 22:05:09.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:09.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.687" starttime="20170707 22:05:09.686"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170707 22:05:09.687" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 22:05:09.687" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:05:09.687" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170707 22:05:09.687" starttime="20170707 22:05:09.687"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:09.687" starttime="20170707 22:05:09.254"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:05:09.690" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:05:09.691" starttime="20170707 22:05:09.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:05:09.691" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:05:09.691" starttime="20170707 22:05:09.691"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:05:09.692" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:05:09.692" starttime="20170707 22:05:09.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:05:09.693" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:05:09.693" starttime="20170707 22:05:09.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:05:09.901" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:05:09.901" starttime="20170707 22:05:09.693"></status>
</kw>
<msg timestamp="20170707 22:05:09.902" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:05:09.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.902" starttime="20170707 22:05:09.693"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:05:09.902" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.903" starttime="20170707 22:05:09.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:09.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.903" starttime="20170707 22:05:09.903"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:09.903" starttime="20170707 22:05:09.690"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:09.903" starttime="20170707 22:05:09.689"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:09.904" starttime="20170707 22:05:09.689"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:05:09.904" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170707 22:05:09.904" starttime="20170707 22:05:09.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:09.905" starttime="20170707 22:05:09.905"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:05:09.987" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170707 22:05:09.987" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.987" starttime="20170707 22:05:09.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:09.988" starttime="20170707 22:05:09.987"></status>
</kw>
<msg timestamp="20170707 22:05:09.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.988" starttime="20170707 22:05:09.688"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:09.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.988" starttime="20170707 22:05:09.988"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:05:09.989" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 22:05:09.989" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:05:09.989" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170707 22:05:09.989" starttime="20170707 22:05:09.989"></status>
</kw>
<msg timestamp="20170707 22:05:09.989" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170707 22:05:09.990" starttime="20170707 22:05:09.688"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170707 22:05:09.990" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:09.990" starttime="20170707 22:05:09.990"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:09.990" starttime="20170707 22:05:09.251"></status>
</kw>
<msg timestamp="20170707 22:05:10.046" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170707 22:05:10.064" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170707 22:05:10.068" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170707 22:05:10.068" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 22:05:10.071" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170707 22:05:10.071" starttime="20170707 22:05:10.071"></status>
</kw>
<msg timestamp="20170707 22:05:10.071" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170707 22:05:10.071" starttime="20170707 22:05:10.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:10.073" starttime="20170707 22:05:10.072"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:10.073" starttime="20170707 22:05:10.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:10.074" starttime="20170707 22:05:10.073"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 22:05:10.075" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170707 22:05:10.075" starttime="20170707 22:05:10.074"></status>
</kw>
<msg timestamp="20170707 22:05:10.075" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170707 22:05:10.075" starttime="20170707 22:05:10.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:10.077" starttime="20170707 22:05:10.076"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:10.077" starttime="20170707 22:05:10.076"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:10.077" starttime="20170707 22:05:10.075"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 22:05:10.077" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170707 22:05:11.870" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170707 22:05:11.870" starttime="20170707 22:05:10.077"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:11.871" starttime="20170707 22:05:10.070"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:05:11.903" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:05:11.904" starttime="20170707 22:05:11.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:05:11.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:05:11.904" starttime="20170707 22:05:11.904"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:05:11.905" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:05:11.905" starttime="20170707 22:05:11.905"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:05:11.906" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:05:11.906" starttime="20170707 22:05:11.905"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.105" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:05:12.105" starttime="20170707 22:05:11.907"></status>
</kw>
<msg timestamp="20170707 22:05:12.105" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:05:12.105" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.105" starttime="20170707 22:05:11.906"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.106" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.106" starttime="20170707 22:05:12.105"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.106" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.107" starttime="20170707 22:05:12.106"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.107" starttime="20170707 22:05:11.901"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.107" starttime="20170707 22:05:11.900"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.107" starttime="20170707 22:05:11.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:05:12.107" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170707 22:05:12.108" starttime="20170707 22:05:12.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:12.108" starttime="20170707 22:05:12.108"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:05:12.170" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170707 22:05:12.170" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.170" starttime="20170707 22:05:12.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:12.171" starttime="20170707 22:05:12.171"></status>
</kw>
<msg timestamp="20170707 22:05:12.171" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.171" starttime="20170707 22:05:11.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.172" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.172" starttime="20170707 22:05:12.171"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:05:12.172" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 22:05:12.172" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:05:12.173" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170707 22:05:12.173" starttime="20170707 22:05:12.172"></status>
</kw>
<msg timestamp="20170707 22:05:12.173" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170707 22:05:12.173" starttime="20170707 22:05:11.898"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.174" starttime="20170707 22:05:11.896"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:05:12.179" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:05:12.179" starttime="20170707 22:05:12.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:05:12.180" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:05:12.180" starttime="20170707 22:05:12.180"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:05:12.181" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:05:12.181" starttime="20170707 22:05:12.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:05:12.181" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:05:12.181" starttime="20170707 22:05:12.181"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.369" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:05:12.369" starttime="20170707 22:05:12.182"></status>
</kw>
<msg timestamp="20170707 22:05:12.369" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:05:12.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.369" starttime="20170707 22:05:12.182"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.370" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.370" starttime="20170707 22:05:12.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.370" starttime="20170707 22:05:12.370"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.371" starttime="20170707 22:05:12.178"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.371" starttime="20170707 22:05:12.177"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.371" starttime="20170707 22:05:12.177"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:05:12.371" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170707 22:05:12.371" starttime="20170707 22:05:12.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:12.372" starttime="20170707 22:05:12.372"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:05:12.433" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170707 22:05:12.433" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.434" starttime="20170707 22:05:12.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:12.434" starttime="20170707 22:05:12.434"></status>
</kw>
<msg timestamp="20170707 22:05:12.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.434" starttime="20170707 22:05:12.175"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.435" starttime="20170707 22:05:12.435"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:05:12.436" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 22:05:12.436" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:05:12.436" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170707 22:05:12.436" starttime="20170707 22:05:12.435"></status>
</kw>
<msg timestamp="20170707 22:05:12.436" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170707 22:05:12.436" starttime="20170707 22:05:12.175"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.436" starttime="20170707 22:05:12.174"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:05:12.440" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:05:12.441" starttime="20170707 22:05:12.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:05:12.441" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:05:12.441" starttime="20170707 22:05:12.441"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:05:12.442" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:05:12.442" starttime="20170707 22:05:12.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:05:12.443" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:05:12.443" starttime="20170707 22:05:12.442"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.717" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:05:12.718" starttime="20170707 22:05:12.443"></status>
</kw>
<msg timestamp="20170707 22:05:12.718" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:05:12.718" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.718" starttime="20170707 22:05:12.443"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.719" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.719" starttime="20170707 22:05:12.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.719" starttime="20170707 22:05:12.719"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.720" starttime="20170707 22:05:12.439"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.720" starttime="20170707 22:05:12.439"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.720" starttime="20170707 22:05:12.438"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:05:12.720" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170707 22:05:12.720" starttime="20170707 22:05:12.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:12.721" starttime="20170707 22:05:12.721"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:05:12.810" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170707 22:05:12.810" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.810" starttime="20170707 22:05:12.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:12.811" starttime="20170707 22:05:12.811"></status>
</kw>
<msg timestamp="20170707 22:05:12.811" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.811" starttime="20170707 22:05:12.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.812" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.812" starttime="20170707 22:05:12.812"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:05:12.813" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 22:05:12.813" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:05:12.813" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170707 22:05:12.813" starttime="20170707 22:05:12.812"></status>
</kw>
<msg timestamp="20170707 22:05:12.813" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170707 22:05:12.813" starttime="20170707 22:05:12.437"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.813" starttime="20170707 22:05:12.437"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:05:12.817" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:05:12.818" starttime="20170707 22:05:12.817"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:05:12.818" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:05:12.819" starttime="20170707 22:05:12.818"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:05:12.819" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:05:12.819" starttime="20170707 22:05:12.819"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:05:12.820" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:05:12.820" starttime="20170707 22:05:12.819"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.994" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:05:12.994" starttime="20170707 22:05:12.820"></status>
</kw>
<msg timestamp="20170707 22:05:12.994" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:05:12.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.994" starttime="20170707 22:05:12.820"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.995" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.995" starttime="20170707 22:05:12.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:12.996" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:12.996" starttime="20170707 22:05:12.995"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.996" starttime="20170707 22:05:12.816"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.996" starttime="20170707 22:05:12.816"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:12.996" starttime="20170707 22:05:12.815"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:05:12.997" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170707 22:05:12.997" starttime="20170707 22:05:12.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:12.997" starttime="20170707 22:05:12.997"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:05:13.082" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 22:05:13.083" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:13.083" starttime="20170707 22:05:12.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:13.083" starttime="20170707 22:05:13.083"></status>
</kw>
<msg timestamp="20170707 22:05:13.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:13.084" starttime="20170707 22:05:12.815"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:13.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:13.084" starttime="20170707 22:05:13.084"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:05:13.085" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 22:05:13.085" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:05:13.085" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170707 22:05:13.085" starttime="20170707 22:05:13.085"></status>
</kw>
<msg timestamp="20170707 22:05:13.085" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170707 22:05:13.085" starttime="20170707 22:05:12.814"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:13.086" starttime="20170707 22:05:12.814"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:13.126" starttime="20170707 22:05:07.044"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170707 22:05:13.132" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170707 22:05:13.133" starttime="20170707 22:05:13.127"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:13.133" starttime="20170707 22:05:07.044"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:13.133" starttime="20170707 22:05:07.026"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Delete Error logs</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:05:13.145" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:05:13.146" starttime="20170707 22:05:13.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:05:13.146" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:05:13.146" starttime="20170707 22:05:13.146"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:05:13.147" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:05:13.147" starttime="20170707 22:05:13.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:05:13.148" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:05:13.148" starttime="20170707 22:05:13.147"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:05:13.336" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:05:13.337" starttime="20170707 22:05:13.148"></status>
</kw>
<msg timestamp="20170707 22:05:13.337" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:05:13.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:13.337" starttime="20170707 22:05:13.148"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:05:13.338" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:13.338" starttime="20170707 22:05:13.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:13.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:13.338" starttime="20170707 22:05:13.338"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:13.338" starttime="20170707 22:05:13.144"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:13.339" starttime="20170707 22:05:13.144"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:13.339" starttime="20170707 22:05:13.143"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:05:13.339" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170707 22:05:13.339" starttime="20170707 22:05:13.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:13.340" starttime="20170707 22:05:13.340"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:05:13.382" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170707 22:05:13.382" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:13.383" starttime="20170707 22:05:13.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:13.383" starttime="20170707 22:05:13.383"></status>
</kw>
<msg timestamp="20170707 22:05:13.383" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:13.383" starttime="20170707 22:05:13.143"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170707 22:05:13.384" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170707 22:05:13.384" starttime="20170707 22:05:13.384"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:13.384" starttime="20170707 22:05:13.142"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:13.384" starttime="20170707 22:05:13.134"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:13.385" starttime="20170707 22:05:07.026"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:13.402" starttime="20170707 22:05:13.394"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:13.404" starttime="20170707 22:05:13.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:14.172" starttime="20170707 22:05:13.405"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:14.172" starttime="20170707 22:05:13.404"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:14.172" starttime="20170707 22:05:13.403"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170707 22:05:14.173" level="INFO">Copying /home/fspcibld/witherspoon_20170704n.pnor to /tmp</msg>
<status status="PASS" endtime="20170707 22:05:14.173" starttime="20170707 22:05:14.173"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:45.855" starttime="20170707 22:05:14.173"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:45.856" starttime="20170707 22:05:13.394"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:45.856" starttime="20170707 22:05:13.386"></status>
</kw>
<kw name="Split Path" library="OperatingSystem">
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
</arguments>
<assign>
<var>${pnor_path}</var>
<var>${pnor_basename}</var>
</assign>
<msg timestamp="20170707 22:05:45.858" level="INFO">${pnor_path} = /home/fspcibld</msg>
<msg timestamp="20170707 22:05:45.858" level="INFO">${pnor_basename} = witherspoon_20170704n.pnor</msg>
<status status="PASS" endtime="20170707 22:05:45.858" starttime="20170707 22:05:45.857"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Flash PNOR \ /tmp/${pnor_basename}</arg>
</arguments>
<kw name="Flash PNOR" library="utils">
<doc>Calls flash bios update method to flash PNOR image</doc>
<arguments>
<arg>/tmp/witherspoon_20170704n.pnor</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pnor_image}</arg>
</arguments>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170707 22:05:45.869" level="INFO">@{arglist} = [ /tmp/witherspoon_20170704n.pnor ]</msg>
<status status="PASS" endtime="20170707 22:05:45.869" starttime="20170707 22:05:45.869"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170707 22:05:45.870" level="INFO">${args} = {u'data': [u'/tmp/witherspoon_20170704n.pnor']}</msg>
<status status="PASS" endtime="20170707 22:05:45.870" starttime="20170707 22:05:45.870"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios/</arg>
<arg>update</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:05:45.871" level="INFO">${base_uri} = /org/openbmc/control/flash/bios/</msg>
<status status="PASS" endtime="20170707 22:05:45.871" starttime="20170707 22:05:45.871"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:05:45.875" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:05:45.875" starttime="20170707 22:05:45.875"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:05:45.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:05:45.876" starttime="20170707 22:05:45.876"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:05:45.877" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:05:45.877" starttime="20170707 22:05:45.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:05:45.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:05:45.877" starttime="20170707 22:05:45.877"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:05:46.098" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:05:46.098" starttime="20170707 22:05:45.878"></status>
</kw>
<msg timestamp="20170707 22:05:46.098" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:05:46.098" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.098" starttime="20170707 22:05:45.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:05:46.099" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.099" starttime="20170707 22:05:46.098"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:46.099" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.100" starttime="20170707 22:05:46.099"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:46.100" starttime="20170707 22:05:45.874"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:46.100" starttime="20170707 22:05:45.873"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:46.100" starttime="20170707 22:05:45.873"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:05:46.100" level="INFO">${base_uri} = /org/openbmc/control/flash/bios//action/update</msg>
<status status="PASS" endtime="20170707 22:05:46.101" starttime="20170707 22:05:46.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:05:46.101" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:05:46.101" starttime="20170707 22:05:46.101"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:46.102" starttime="20170707 22:05:46.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:46.102" starttime="20170707 22:05:46.102"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:05:46.352" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios//action/update, data={"data": ["/tmp/witherspoon_20170704n.pnor"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170707 22:05:46.352" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.352" starttime="20170707 22:05:46.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:46.353" starttime="20170707 22:05:46.352"></status>
</kw>
<msg timestamp="20170707 22:05:46.353" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.353" starttime="20170707 22:05:45.871"></status>
</kw>
<msg timestamp="20170707 22:05:46.353" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.353" starttime="20170707 22:05:45.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:46.354" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.354" starttime="20170707 22:05:46.353"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>2 min</arg>
<arg>10 sec</arg>
<arg>Is PNOR Flashing</arg>
</arguments>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:05:46.359" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:05:46.359" starttime="20170707 22:05:46.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:05:46.360" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:05:46.360" starttime="20170707 22:05:46.360"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:05:46.361" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:05:46.361" starttime="20170707 22:05:46.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:05:46.362" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:05:46.362" starttime="20170707 22:05:46.361"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:05:46.832" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:05:46.832" starttime="20170707 22:05:46.363"></status>
</kw>
<msg timestamp="20170707 22:05:46.832" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:05:46.832" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.832" starttime="20170707 22:05:46.362"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:05:46.833" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.833" starttime="20170707 22:05:46.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:46.833" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.833" starttime="20170707 22:05:46.833"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:46.834" starttime="20170707 22:05:46.358"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:46.834" starttime="20170707 22:05:46.357"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:46.834" starttime="20170707 22:05:46.357"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:05:46.834" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:05:46.834" starttime="20170707 22:05:46.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:46.835" starttime="20170707 22:05:46.835"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:05:46.927" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:05:46.927" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.927" starttime="20170707 22:05:46.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:46.928" starttime="20170707 22:05:46.927"></status>
</kw>
<msg timestamp="20170707 22:05:46.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.928" starttime="20170707 22:05:46.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:46.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:46.928" starttime="20170707 22:05:46.928"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:05:46.929" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:05:46.929" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:05:46.929" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:05:46.929" starttime="20170707 22:05:46.929"></status>
</kw>
<msg timestamp="20170707 22:05:46.930" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:05:46.930" starttime="20170707 22:05:46.355"></status>
</kw>
<status status="FAIL" endtime="20170707 22:05:46.930" starttime="20170707 22:05:46.355"></status>
</kw>
<status status="FAIL" endtime="20170707 22:05:46.930" starttime="20170707 22:05:46.355"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:05:56.935" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:05:56.935" starttime="20170707 22:05:56.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:05:56.936" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:05:56.936" starttime="20170707 22:05:56.936"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:05:56.937" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:05:56.937" starttime="20170707 22:05:56.936"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:05:56.937" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:05:56.937" starttime="20170707 22:05:56.937"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:05:57.458" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:05:57.458" starttime="20170707 22:05:56.938"></status>
</kw>
<msg timestamp="20170707 22:05:57.458" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:05:57.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:57.458" starttime="20170707 22:05:56.938"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:05:57.459" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:57.459" starttime="20170707 22:05:57.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:57.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:57.460" starttime="20170707 22:05:57.459"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:57.460" starttime="20170707 22:05:56.934"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:57.460" starttime="20170707 22:05:56.933"></status>
</kw>
<status status="PASS" endtime="20170707 22:05:57.460" starttime="20170707 22:05:56.933"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:05:57.461" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:05:57.461" starttime="20170707 22:05:57.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:57.461" starttime="20170707 22:05:57.461"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:05:57.540" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:05:57.541" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:57.541" starttime="20170707 22:05:57.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:05:57.541" starttime="20170707 22:05:57.541"></status>
</kw>
<msg timestamp="20170707 22:05:57.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:05:57.542" starttime="20170707 22:05:56.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:05:57.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:05:57.542" starttime="20170707 22:05:57.542"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:05:57.543" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:05:57.543" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:05:57.543" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:05:57.543" starttime="20170707 22:05:57.542"></status>
</kw>
<msg timestamp="20170707 22:05:57.543" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:05:57.543" starttime="20170707 22:05:56.932"></status>
</kw>
<status status="FAIL" endtime="20170707 22:05:57.544" starttime="20170707 22:05:56.931"></status>
</kw>
<status status="FAIL" endtime="20170707 22:05:57.544" starttime="20170707 22:05:56.931"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:06:07.548" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:06:07.549" starttime="20170707 22:06:07.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:06:07.549" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:06:07.550" starttime="20170707 22:06:07.549"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:06:07.550" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:06:07.550" starttime="20170707 22:06:07.550"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:06:07.551" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:06:07.551" starttime="20170707 22:06:07.550"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:06:07.733" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:06:07.733" starttime="20170707 22:06:07.552"></status>
</kw>
<msg timestamp="20170707 22:06:07.733" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:06:07.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:07.733" starttime="20170707 22:06:07.551"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:06:07.734" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:07.734" starttime="20170707 22:06:07.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:06:07.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:07.735" starttime="20170707 22:06:07.734"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:07.735" starttime="20170707 22:06:07.547"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:07.735" starttime="20170707 22:06:07.547"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:07.735" starttime="20170707 22:06:07.546"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:06:07.736" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:06:07.736" starttime="20170707 22:06:07.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:06:07.736" starttime="20170707 22:06:07.736"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:06:07.821" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:06:07.821" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:07.821" starttime="20170707 22:06:07.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:06:07.822" starttime="20170707 22:06:07.822"></status>
</kw>
<msg timestamp="20170707 22:06:07.822" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:07.822" starttime="20170707 22:06:07.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:06:07.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:07.823" starttime="20170707 22:06:07.823"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:06:07.823" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:06:07.824" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:06:07.824" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:06:07.824" starttime="20170707 22:06:07.823"></status>
</kw>
<msg timestamp="20170707 22:06:07.824" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:06:07.824" starttime="20170707 22:06:07.545"></status>
</kw>
<status status="FAIL" endtime="20170707 22:06:07.824" starttime="20170707 22:06:07.545"></status>
</kw>
<status status="FAIL" endtime="20170707 22:06:07.825" starttime="20170707 22:06:07.544"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:06:17.829" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:06:17.830" starttime="20170707 22:06:17.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:06:17.831" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:06:17.831" starttime="20170707 22:06:17.831"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:06:17.832" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:06:17.832" starttime="20170707 22:06:17.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:06:17.832" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:06:17.832" starttime="20170707 22:06:17.832"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:06:18.010" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:06:18.010" starttime="20170707 22:06:17.833"></status>
</kw>
<msg timestamp="20170707 22:06:18.010" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:06:18.010" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:18.010" starttime="20170707 22:06:17.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:06:18.011" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:18.011" starttime="20170707 22:06:18.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:06:18.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:18.012" starttime="20170707 22:06:18.011"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:18.012" starttime="20170707 22:06:17.829"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:18.012" starttime="20170707 22:06:17.828"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:18.012" starttime="20170707 22:06:17.827"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:06:18.012" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:06:18.013" starttime="20170707 22:06:18.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:06:18.013" starttime="20170707 22:06:18.013"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:06:18.762" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:06:18.762" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:18.762" starttime="20170707 22:06:18.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:06:18.763" starttime="20170707 22:06:18.762"></status>
</kw>
<msg timestamp="20170707 22:06:18.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:18.763" starttime="20170707 22:06:17.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:06:18.764" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:18.764" starttime="20170707 22:06:18.763"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:06:18.764" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:06:18.764" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:06:18.764" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:06:18.765" starttime="20170707 22:06:18.764"></status>
</kw>
<msg timestamp="20170707 22:06:18.765" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:06:18.765" starttime="20170707 22:06:17.826"></status>
</kw>
<status status="FAIL" endtime="20170707 22:06:18.765" starttime="20170707 22:06:17.826"></status>
</kw>
<status status="FAIL" endtime="20170707 22:06:18.765" starttime="20170707 22:06:17.825"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:06:28.770" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:06:28.771" starttime="20170707 22:06:28.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:06:28.772" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:06:28.772" starttime="20170707 22:06:28.772"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:06:28.773" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:06:28.773" starttime="20170707 22:06:28.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:06:28.773" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:06:28.773" starttime="20170707 22:06:28.773"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:06:28.949" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:06:28.949" starttime="20170707 22:06:28.774"></status>
</kw>
<msg timestamp="20170707 22:06:28.949" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:06:28.949" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:28.949" starttime="20170707 22:06:28.774"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:06:28.950" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:28.950" starttime="20170707 22:06:28.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:06:28.951" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:28.951" starttime="20170707 22:06:28.951"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:28.951" starttime="20170707 22:06:28.770"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:28.952" starttime="20170707 22:06:28.769"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:28.952" starttime="20170707 22:06:28.768"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:06:28.953" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:06:28.953" starttime="20170707 22:06:28.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:06:28.954" starttime="20170707 22:06:28.953"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:06:29.705" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:06:29.705" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:29.706" starttime="20170707 22:06:28.954"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:06:29.706" starttime="20170707 22:06:29.706"></status>
</kw>
<msg timestamp="20170707 22:06:29.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:29.706" starttime="20170707 22:06:28.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:06:29.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:29.707" starttime="20170707 22:06:29.707"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:06:29.708" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:06:29.708" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:06:29.708" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:06:29.708" starttime="20170707 22:06:29.707"></status>
</kw>
<msg timestamp="20170707 22:06:29.708" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:06:29.708" starttime="20170707 22:06:28.767"></status>
</kw>
<status status="FAIL" endtime="20170707 22:06:29.709" starttime="20170707 22:06:28.766"></status>
</kw>
<status status="FAIL" endtime="20170707 22:06:29.709" starttime="20170707 22:06:28.766"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:06:39.714" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:06:39.715" starttime="20170707 22:06:39.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:06:39.715" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:06:39.715" starttime="20170707 22:06:39.715"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:06:39.716" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:06:39.716" starttime="20170707 22:06:39.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:06:39.716" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:06:39.717" starttime="20170707 22:06:39.716"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:06:39.894" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:06:39.894" starttime="20170707 22:06:39.717"></status>
</kw>
<msg timestamp="20170707 22:06:39.894" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:06:39.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:39.894" starttime="20170707 22:06:39.717"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:06:39.895" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:39.895" starttime="20170707 22:06:39.894"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:06:39.896" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:39.896" starttime="20170707 22:06:39.895"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:39.896" starttime="20170707 22:06:39.713"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:39.896" starttime="20170707 22:06:39.712"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:39.896" starttime="20170707 22:06:39.712"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:06:39.897" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:06:39.897" starttime="20170707 22:06:39.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:06:39.897" starttime="20170707 22:06:39.897"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:06:39.979" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:06:39.979" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:39.979" starttime="20170707 22:06:39.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:06:39.980" starttime="20170707 22:06:39.980"></status>
</kw>
<msg timestamp="20170707 22:06:39.980" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:39.980" starttime="20170707 22:06:39.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:06:39.981" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:39.981" starttime="20170707 22:06:39.980"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:06:39.982" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:06:39.982" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:06:39.982" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:06:39.982" starttime="20170707 22:06:39.981"></status>
</kw>
<msg timestamp="20170707 22:06:39.982" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:06:39.982" starttime="20170707 22:06:39.710"></status>
</kw>
<status status="FAIL" endtime="20170707 22:06:39.982" starttime="20170707 22:06:39.710"></status>
</kw>
<status status="FAIL" endtime="20170707 22:06:39.982" starttime="20170707 22:06:39.709"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:06:49.987" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:06:49.988" starttime="20170707 22:06:49.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:06:49.988" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:06:49.989" starttime="20170707 22:06:49.988"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:06:49.989" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:06:49.989" starttime="20170707 22:06:49.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:06:49.990" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:06:49.990" starttime="20170707 22:06:49.990"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:06:51.037" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:06:51.037" starttime="20170707 22:06:49.991"></status>
</kw>
<msg timestamp="20170707 22:06:51.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:06:51.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:51.037" starttime="20170707 22:06:49.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:06:51.038" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:51.038" starttime="20170707 22:06:51.038"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:06:51.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:51.039" starttime="20170707 22:06:51.038"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:51.039" starttime="20170707 22:06:49.986"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:51.039" starttime="20170707 22:06:49.986"></status>
</kw>
<status status="PASS" endtime="20170707 22:06:51.039" starttime="20170707 22:06:49.985"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:06:51.040" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:06:51.040" starttime="20170707 22:06:51.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:06:51.040" starttime="20170707 22:06:51.040"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:06:51.196" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:06:51.196" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:51.196" starttime="20170707 22:06:51.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:06:51.197" starttime="20170707 22:06:51.196"></status>
</kw>
<msg timestamp="20170707 22:06:51.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:06:51.197" starttime="20170707 22:06:49.984"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:06:51.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:06:51.198" starttime="20170707 22:06:51.197"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:06:51.198" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:06:51.198" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:06:51.198" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:06:51.198" starttime="20170707 22:06:51.198"></status>
</kw>
<msg timestamp="20170707 22:06:51.199" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:06:51.199" starttime="20170707 22:06:49.984"></status>
</kw>
<status status="FAIL" endtime="20170707 22:06:51.199" starttime="20170707 22:06:49.984"></status>
</kw>
<status status="FAIL" endtime="20170707 22:06:51.199" starttime="20170707 22:06:49.983"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:07:01.204" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:07:01.205" starttime="20170707 22:07:01.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:07:01.205" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:07:01.205" starttime="20170707 22:07:01.205"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:07:01.206" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:07:01.206" starttime="20170707 22:07:01.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:07:01.207" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:07:01.207" starttime="20170707 22:07:01.206"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:07:01.384" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:07:01.384" starttime="20170707 22:07:01.208"></status>
</kw>
<msg timestamp="20170707 22:07:01.384" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:07:01.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:01.384" starttime="20170707 22:07:01.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:07:01.385" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:01.385" starttime="20170707 22:07:01.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:01.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:01.385" starttime="20170707 22:07:01.385"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:01.385" starttime="20170707 22:07:01.203"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:01.386" starttime="20170707 22:07:01.202"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:01.386" starttime="20170707 22:07:01.202"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:07:01.386" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:07:01.386" starttime="20170707 22:07:01.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:01.387" starttime="20170707 22:07:01.387"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:07:01.474" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:07:01.474" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:01.474" starttime="20170707 22:07:01.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:01.475" starttime="20170707 22:07:01.475"></status>
</kw>
<msg timestamp="20170707 22:07:01.475" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:01.475" starttime="20170707 22:07:01.201"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:01.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:01.476" starttime="20170707 22:07:01.476"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:07:01.477" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:07:01.477" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:07:01.477" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:07:01.477" starttime="20170707 22:07:01.476"></status>
</kw>
<msg timestamp="20170707 22:07:01.477" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:07:01.477" starttime="20170707 22:07:01.201"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:01.477" starttime="20170707 22:07:01.200"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:01.478" starttime="20170707 22:07:01.200"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:07:11.482" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:07:11.483" starttime="20170707 22:07:11.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:07:11.483" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:07:11.483" starttime="20170707 22:07:11.483"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:07:11.484" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:07:11.484" starttime="20170707 22:07:11.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:07:11.485" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:07:11.485" starttime="20170707 22:07:11.484"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:07:11.661" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:07:11.661" starttime="20170707 22:07:11.485"></status>
</kw>
<msg timestamp="20170707 22:07:11.661" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:07:11.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:11.661" starttime="20170707 22:07:11.485"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:07:11.662" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:11.662" starttime="20170707 22:07:11.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:11.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:11.663" starttime="20170707 22:07:11.662"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:11.663" starttime="20170707 22:07:11.481"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:11.663" starttime="20170707 22:07:11.481"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:11.663" starttime="20170707 22:07:11.480"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:07:11.664" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:07:11.664" starttime="20170707 22:07:11.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:11.664" starttime="20170707 22:07:11.664"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:07:12.711" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:07:12.712" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:12.712" starttime="20170707 22:07:11.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:12.712" starttime="20170707 22:07:12.712"></status>
</kw>
<msg timestamp="20170707 22:07:12.713" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:12.713" starttime="20170707 22:07:11.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:12.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:12.713" starttime="20170707 22:07:12.713"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:07:12.714" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:07:12.714" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:07:12.714" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:07:12.714" starttime="20170707 22:07:12.714"></status>
</kw>
<msg timestamp="20170707 22:07:12.714" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:07:12.715" starttime="20170707 22:07:11.479"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:12.715" starttime="20170707 22:07:11.479"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:12.715" starttime="20170707 22:07:11.478"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:07:22.719" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:07:22.720" starttime="20170707 22:07:22.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:07:22.721" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:07:22.721" starttime="20170707 22:07:22.721"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:07:22.722" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:07:22.722" starttime="20170707 22:07:22.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:07:22.723" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:07:22.723" starttime="20170707 22:07:22.722"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:07:22.899" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:07:22.899" starttime="20170707 22:07:22.724"></status>
</kw>
<msg timestamp="20170707 22:07:22.899" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:07:22.899" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:22.899" starttime="20170707 22:07:22.723"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:07:22.900" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:22.900" starttime="20170707 22:07:22.899"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:22.900" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:22.900" starttime="20170707 22:07:22.900"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:22.901" starttime="20170707 22:07:22.718"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:22.901" starttime="20170707 22:07:22.718"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:22.901" starttime="20170707 22:07:22.717"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:07:22.901" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:07:22.901" starttime="20170707 22:07:22.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:22.902" starttime="20170707 22:07:22.902"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:07:22.984" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:07:22.984" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:22.984" starttime="20170707 22:07:22.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:22.985" starttime="20170707 22:07:22.984"></status>
</kw>
<msg timestamp="20170707 22:07:22.985" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:22.985" starttime="20170707 22:07:22.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:22.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:22.986" starttime="20170707 22:07:22.985"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:07:22.986" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:07:22.986" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:07:22.986" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:07:22.986" starttime="20170707 22:07:22.986"></status>
</kw>
<msg timestamp="20170707 22:07:22.987" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:07:22.987" starttime="20170707 22:07:22.716"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:22.987" starttime="20170707 22:07:22.716"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:22.987" starttime="20170707 22:07:22.715"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:07:32.992" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:07:32.992" starttime="20170707 22:07:32.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:07:32.993" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:07:32.993" starttime="20170707 22:07:32.993"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:07:32.994" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:07:32.994" starttime="20170707 22:07:32.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:07:32.994" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:07:32.994" starttime="20170707 22:07:32.994"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:07:33.171" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:07:33.171" starttime="20170707 22:07:32.996"></status>
</kw>
<msg timestamp="20170707 22:07:33.171" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:07:33.171" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:33.171" starttime="20170707 22:07:32.995"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:07:33.172" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:33.172" starttime="20170707 22:07:33.171"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:33.172" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:33.172" starttime="20170707 22:07:33.172"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:33.173" starttime="20170707 22:07:32.991"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:33.173" starttime="20170707 22:07:32.990"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:33.173" starttime="20170707 22:07:32.990"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:07:33.173" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:07:33.173" starttime="20170707 22:07:33.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:33.174" starttime="20170707 22:07:33.174"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:07:34.315" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:07:34.315" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:34.315" starttime="20170707 22:07:33.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:34.316" starttime="20170707 22:07:34.316"></status>
</kw>
<msg timestamp="20170707 22:07:34.316" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:34.316" starttime="20170707 22:07:32.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:34.317" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:34.317" starttime="20170707 22:07:34.316"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:07:34.317" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:07:34.317" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:07:34.318" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:07:34.318" starttime="20170707 22:07:34.317"></status>
</kw>
<msg timestamp="20170707 22:07:34.318" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:07:34.318" starttime="20170707 22:07:32.989"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:34.318" starttime="20170707 22:07:32.988"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:34.318" starttime="20170707 22:07:32.988"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:07:44.323" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:07:44.327" starttime="20170707 22:07:44.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:07:44.328" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:07:44.328" starttime="20170707 22:07:44.328"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:07:44.329" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:07:44.329" starttime="20170707 22:07:44.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:07:44.329" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:07:44.329" starttime="20170707 22:07:44.329"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:07:44.505" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:07:44.505" starttime="20170707 22:07:44.330"></status>
</kw>
<msg timestamp="20170707 22:07:44.506" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:07:44.506" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:44.506" starttime="20170707 22:07:44.330"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:07:44.506" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:44.506" starttime="20170707 22:07:44.506"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:44.507" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:44.507" starttime="20170707 22:07:44.507"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:44.507" starttime="20170707 22:07:44.322"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:44.507" starttime="20170707 22:07:44.322"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:44.507" starttime="20170707 22:07:44.321"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:07:44.508" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:07:44.508" starttime="20170707 22:07:44.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:44.509" starttime="20170707 22:07:44.508"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:07:44.590" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:07:44.590" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:44.590" starttime="20170707 22:07:44.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:44.591" starttime="20170707 22:07:44.590"></status>
</kw>
<msg timestamp="20170707 22:07:44.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:44.591" starttime="20170707 22:07:44.320"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:44.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:44.592" starttime="20170707 22:07:44.591"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:07:44.592" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:07:44.592" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:07:44.592" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:07:44.592" starttime="20170707 22:07:44.592"></status>
</kw>
<msg timestamp="20170707 22:07:44.593" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:07:44.593" starttime="20170707 22:07:44.320"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:44.593" starttime="20170707 22:07:44.320"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:44.593" starttime="20170707 22:07:44.319"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:07:54.598" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:07:54.599" starttime="20170707 22:07:54.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:07:54.599" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:07:54.599" starttime="20170707 22:07:54.599"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:07:54.600" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:07:54.600" starttime="20170707 22:07:54.600"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:07:54.601" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:07:54.601" starttime="20170707 22:07:54.600"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:07:56.147" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:07:56.148" starttime="20170707 22:07:54.601"></status>
</kw>
<msg timestamp="20170707 22:07:56.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:07:56.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:56.148" starttime="20170707 22:07:54.601"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:07:56.149" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:56.149" starttime="20170707 22:07:56.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:56.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:56.149" starttime="20170707 22:07:56.149"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:56.150" starttime="20170707 22:07:54.597"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:56.150" starttime="20170707 22:07:54.596"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:56.150" starttime="20170707 22:07:54.596"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:07:56.150" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170707 22:07:56.150" starttime="20170707 22:07:56.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:56.151" starttime="20170707 22:07:56.151"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:07:56.240" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170707 22:07:56.240" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:56.240" starttime="20170707 22:07:56.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:56.241" starttime="20170707 22:07:56.240"></status>
</kw>
<msg timestamp="20170707 22:07:56.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:56.241" starttime="20170707 22:07:54.595"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:56.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:56.242" starttime="20170707 22:07:56.241"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:07:56.242" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170707 22:07:56.242" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:07:56.242" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170707 22:07:56.242" starttime="20170707 22:07:56.242"></status>
</kw>
<msg timestamp="20170707 22:07:56.243" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:07:56.243" starttime="20170707 22:07:54.595"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:56.243" starttime="20170707 22:07:54.594"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:56.243" starttime="20170707 22:07:54.594"></status>
</kw>
<msg timestamp="20170707 22:07:56.243" level="FAIL">Keyword 'Is PNOR Flashing' failed after retrying for 2 minutes. The last error was: Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:07:56.243" starttime="20170707 22:05:46.354"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:56.243" starttime="20170707 22:05:45.868"></status>
</kw>
<msg timestamp="20170707 22:07:56.245" level="FAIL">Keyword 'Is PNOR Flashing' failed after retrying for 2 minutes. The last error was: Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170707 22:07:56.245" starttime="20170707 22:05:45.858"></status>
</kw>
<status status="FAIL" endtime="20170707 22:07:56.245" starttime="20170707 22:05:13.385"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170707 22:07:56.247" starttime="20170707 22:07:56.246"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:07:56.264" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:07:56.265" starttime="20170707 22:07:56.263"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:07:56.266" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:07:56.266" starttime="20170707 22:07:56.265"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:07:56.266" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:07:56.266" starttime="20170707 22:07:56.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:07:56.267" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:07:56.267" starttime="20170707 22:07:56.267"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:07:56.442" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:07:56.443" starttime="20170707 22:07:56.268"></status>
</kw>
<msg timestamp="20170707 22:07:56.443" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:07:56.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:56.443" starttime="20170707 22:07:56.268"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:07:56.444" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:56.444" starttime="20170707 22:07:56.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:56.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:56.444" starttime="20170707 22:07:56.444"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:56.445" starttime="20170707 22:07:56.263"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:56.445" starttime="20170707 22:07:56.262"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:56.445" starttime="20170707 22:07:56.261"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:07:56.445" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170707 22:07:56.445" starttime="20170707 22:07:56.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:56.446" starttime="20170707 22:07:56.446"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:07:56.509" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 22:07:56.509" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:56.509" starttime="20170707 22:07:56.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:56.510" starttime="20170707 22:07:56.510"></status>
</kw>
<msg timestamp="20170707 22:07:56.510" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:07:56.510" starttime="20170707 22:07:56.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:07:56.511" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:07:56.511" starttime="20170707 22:07:56.510"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:07:56.511" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 22:07:56.511" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:07:56.511" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170707 22:07:56.512" starttime="20170707 22:07:56.511"></status>
</kw>
<msg timestamp="20170707 22:07:56.512" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170707 22:07:56.512" starttime="20170707 22:07:56.259"></status>
</kw>
<msg timestamp="20170707 22:07:56.512" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170707 22:07:56.512" starttime="20170707 22:07:56.259"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170707 22:07:56.513" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170707 22:07:56.513" starttime="20170707 22:07:56.513"></status>
</kw>
<msg timestamp="20170707 22:07:56.513" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170707 22:07:56.513" starttime="20170707 22:07:56.512"></status>
</kw>
<msg timestamp="20170707 22:07:56.514" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170707 22:07:56.514" starttime="20170707 22:07:56.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170707 22:07:56.529" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170707 22:07:56.529" starttime="20170707 22:07:56.529"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170707 22:07:56.535" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170707 22:07:59.538" level="INFO">${RC} = 0</msg>
<msg timestamp="20170707 22:07:59.538" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.653 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.641 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170707 22:07:59.538" starttime="20170707 22:07:56.530"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.544" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.653 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.641 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.499 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.489 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.489/0.570/0.653/0.080 ms</msg>
<status status="PASS" endtime="20170707 22:07:59.544" starttime="20170707 22:07:59.541"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:59.545" starttime="20170707 22:07:59.544"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.545" starttime="20170707 22:07:56.529"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 22:07:59.562" level="INFO">${cur_time} = 2017-07-07 22:07:59:561256</msg>
<status status="PASS" endtime="20170707 22:07:59.562" starttime="20170707 22:07:59.561"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 22:07:59.562" level="INFO">${cur_time} = 20170707220759561256</msg>
<status status="PASS" endtime="20170707 22:07:59.562" starttime="20170707 22:07:59.562"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.563" starttime="20170707 22:07:59.559"></status>
</kw>
<msg timestamp="20170707 22:07:59.567" level="INFO">${FFDC_TIME} = 20170707220759561256</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170707 22:07:59.569" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170707 22:07:59.569" starttime="20170707 22:07:59.568"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170707 22:07:59.570" level="INFO">${suite_name} = 20170707220759561256_TestBiosUpdate</msg>
<status status="PASS" endtime="20170707 22:07:59.570" starttime="20170707 22:07:59.569"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170707 22:07:59.570" level="INFO">${test_name} = HostBIOSUpdate</msg>
<status status="PASS" endtime="20170707 22:07:59.570" starttime="20170707 22:07:59.570"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170707 22:07:59.571" level="INFO">${test_name} = 20170707220759561256_HostBIOSUpdate</msg>
<status status="PASS" endtime="20170707 22:07:59.571" starttime="20170707 22:07:59.570"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.571" starttime="20170707 22:07:59.568"></status>
</kw>
<msg timestamp="20170707 22:07:59.571" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/</msg>
<msg timestamp="20170707 22:07:59.572" level="INFO">${FFDC_PREFIX} = 20170707220759561256_</msg>
<msg timestamp="20170707 22:07:59.598" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/</arg>
</arguments>
<msg timestamp="20170707 22:07:59.599" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.599" starttime="20170707 22:07:59.598"></status>
</kw>
<msg timestamp="20170707 22:07:59.604" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.620" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.620" starttime="20170707 22:07:59.620"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.620" starttime="20170707 22:07:59.619"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.622" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.622" starttime="20170707 22:07:59.621"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.622" starttime="20170707 22:07:59.621"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.623" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.623" starttime="20170707 22:07:59.623"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.623" starttime="20170707 22:07:59.622"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.624" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.625" starttime="20170707 22:07:59.624"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.625" starttime="20170707 22:07:59.623"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.626" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.626" starttime="20170707 22:07:59.625"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.626" starttime="20170707 22:07:59.625"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.627" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.627" starttime="20170707 22:07:59.627"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.627" starttime="20170707 22:07:59.626"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.630" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.630" starttime="20170707 22:07:59.630"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.630" starttime="20170707 22:07:59.628"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.632" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.632" starttime="20170707 22:07:59.631"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.632" starttime="20170707 22:07:59.630"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.633" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.633" starttime="20170707 22:07:59.633"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.633" starttime="20170707 22:07:59.632"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.635" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.635" starttime="20170707 22:07:59.634"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.635" starttime="20170707 22:07:59.634"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.636" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.636" starttime="20170707 22:07:59.635"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.636" starttime="20170707 22:07:59.635"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.637" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.637" starttime="20170707 22:07:59.637"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.637" starttime="20170707 22:07:59.636"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.638" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:07:59.639" starttime="20170707 22:07:59.638"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.639" starttime="20170707 22:07:59.638"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 22:07:59.641" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170707 22:07:59.641" starttime="20170707 22:07:59.641"></status>
</kw>
<msg timestamp="20170707 22:07:59.641" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170707 22:07:59.641" starttime="20170707 22:07:59.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:59.642" starttime="20170707 22:07:59.642"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.643" starttime="20170707 22:07:59.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:59.643" starttime="20170707 22:07:59.643"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 22:07:59.644" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170707 22:07:59.644" starttime="20170707 22:07:59.644"></status>
</kw>
<msg timestamp="20170707 22:07:59.644" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170707 22:07:59.645" starttime="20170707 22:07:59.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:07:59.646" starttime="20170707 22:07:59.646"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.646" starttime="20170707 22:07:59.646"></status>
</kw>
<status status="PASS" endtime="20170707 22:07:59.647" starttime="20170707 22:07:59.645"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 22:07:59.647" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170707 22:08:02.257" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170707 22:08:02.260" starttime="20170707 22:07:59.647"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.260" starttime="20170707 22:07:59.639"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:08:02.261" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170707 22:08:02.912" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 22:08:02.912" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170707 22:08:02.912" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170707 22:08:02.912" starttime="20170707 22:08:02.260"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170707 22:08:02.913" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170707 22:08:02.913" starttime="20170707 22:08:02.913"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170707 22:08:02.913" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170707 22:08:02.913" starttime="20170707 22:08:02.913"></status>
</kw>
<msg timestamp="20170707 22:08:02.914" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170707 22:08:02.914" starttime="20170707 22:07:59.639"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:02.915" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:02.915" starttime="20170707 22:08:02.915"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.915" starttime="20170707 22:08:02.914"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.915" starttime="20170707 22:07:59.633"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:02.917" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:02.917" starttime="20170707 22:08:02.916"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.917" starttime="20170707 22:08:02.916"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170707 22:08:02.917" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170707 22:08:02.917" starttime="20170707 22:08:02.917"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:02.919" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:02.919" starttime="20170707 22:08:02.919"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.919" starttime="20170707 22:08:02.918"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:02.921" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:02.921" starttime="20170707 22:08:02.920"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.921" starttime="20170707 22:08:02.920"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.921" starttime="20170707 22:08:02.918"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:02.922" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:02.922" starttime="20170707 22:08:02.922"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.922" starttime="20170707 22:08:02.921"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:02.923" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:02.923" starttime="20170707 22:08:02.923"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.923" starttime="20170707 22:08:02.922"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.923" starttime="20170707 22:08:02.921"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:02.925" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:02.925" starttime="20170707 22:08:02.924"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.925" starttime="20170707 22:08:02.924"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:02.926" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:02.926" starttime="20170707 22:08:02.926"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.926" starttime="20170707 22:08:02.925"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.926" starttime="20170707 22:08:02.924"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.926" starttime="20170707 22:08:02.917"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:02.927" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:02.927" starttime="20170707 22:08:02.927"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.927" starttime="20170707 22:08:02.926"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.928" starttime="20170707 22:07:59.618"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170707 22:08:02.937" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170707 22:08:02.937" starttime="20170707 22:08:02.937"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170707 22:08:02.938" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170707 22:08:02.938" starttime="20170707 22:08:02.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:02.940" starttime="20170707 22:08:02.939"></status>
</kw>
<msg timestamp="20170707 22:08:02.940" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170707 22:08:02.940" starttime="20170707 22:08:02.938"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:02.942" starttime="20170707 22:08:02.942"></status>
</kw>
<msg timestamp="20170707 22:08:02.942" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:02.942" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170707 22:08:02.942" starttime="20170707 22:08:02.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:02.943" starttime="20170707 22:08:02.942"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 22:08:02.965" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170707 22:08:02.966" starttime="20170707 22:08:02.965"></status>
</kw>
<msg timestamp="20170707 22:08:02.966" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170707 22:08:02.966" starttime="20170707 22:08:02.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:02.967" starttime="20170707 22:08:02.967"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.967" starttime="20170707 22:08:02.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:02.968" starttime="20170707 22:08:02.967"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 22:08:02.969" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170707 22:08:02.970" starttime="20170707 22:08:02.969"></status>
</kw>
<msg timestamp="20170707 22:08:02.970" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170707 22:08:02.970" starttime="20170707 22:08:02.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:02.971" starttime="20170707 22:08:02.971"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.972" starttime="20170707 22:08:02.971"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:02.972" starttime="20170707 22:08:02.970"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 22:08:02.972" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170707 22:08:04.450" level="INFO">Read output:</msg>
<status status="PASS" endtime="20170707 22:08:04.450" starttime="20170707 22:08:02.972"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:04.450" starttime="20170707 22:08:02.964"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170707 22:08:04.452" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170707 22:08:04.452" starttime="20170707 22:08:04.451"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170707 22:08:04.453" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170707 22:08:04.453" starttime="20170707 22:08:04.453"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170707 22:08:04.459" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170707 22:08:04.459" starttime="20170707 22:08:04.454"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:04.462" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:04.462" starttime="20170707 22:08:04.461"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:04.462" starttime="20170707 22:08:04.461"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:04.463" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:04.463" starttime="20170707 22:08:04.463"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:04.464" starttime="20170707 22:08:04.462"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:04.465" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:04.465" starttime="20170707 22:08:04.464"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:04.465" starttime="20170707 22:08:04.464"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:04.466" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:04.466" starttime="20170707 22:08:04.466"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:04.466" starttime="20170707 22:08:04.465"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:04.466" starttime="20170707 22:08:04.460"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:04.466" starttime="20170707 22:08:04.460"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:08:04.467" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170707 22:08:07.706" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 22:08:07.706" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170707 22:08:07.707" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170707 22:08:07.707" starttime="20170707 22:08:04.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:07.713" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:07.713" starttime="20170707 22:08:07.713"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.714" starttime="20170707 22:08:07.712"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.714" starttime="20170707 22:08:07.707"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.714" starttime="20170707 22:08:04.459"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.714" starttime="20170707 22:08:04.459"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.714" starttime="20170707 22:08:04.459"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.714" starttime="20170707 22:08:04.452"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.714" starttime="20170707 22:08:04.452"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170707 22:08:07.715" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170707 22:08:07.715" starttime="20170707 22:08:07.715"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170707 22:08:07.716" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170707 22:08:07.717" starttime="20170707 22:08:07.716"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:07.721" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:07.721" starttime="20170707 22:08:07.721"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.721" starttime="20170707 22:08:07.720"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:07.723" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:07.723" starttime="20170707 22:08:07.722"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.723" starttime="20170707 22:08:07.722"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:07.724" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:07.724" starttime="20170707 22:08:07.724"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.724" starttime="20170707 22:08:07.723"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:07.725" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:07.725" starttime="20170707 22:08:07.725"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.725" starttime="20170707 22:08:07.724"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.726" starttime="20170707 22:08:07.719"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.726" starttime="20170707 22:08:07.719"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:08:07.726" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170707 22:08:07.987" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170707 22:08:07.987" level="INFO">${stdout} = </msg>
<msg timestamp="20170707 22:08:07.987" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170707 22:08:07.987" starttime="20170707 22:08:07.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:07.993" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:07.994" starttime="20170707 22:08:07.993"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.994" starttime="20170707 22:08:07.992"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.994" starttime="20170707 22:08:07.987"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.994" starttime="20170707 22:08:07.717"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.994" starttime="20170707 22:08:07.717"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:07.997" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:07.997" starttime="20170707 22:08:07.997"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.997" starttime="20170707 22:08:07.996"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:07.999" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:07.999" starttime="20170707 22:08:07.998"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:07.999" starttime="20170707 22:08:07.998"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:08.000" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:08.000" starttime="20170707 22:08:08.000"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.001" starttime="20170707 22:08:07.999"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:08.002" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:08.002" starttime="20170707 22:08:08.001"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.002" starttime="20170707 22:08:08.001"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.002" starttime="20170707 22:08:07.996"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.002" starttime="20170707 22:08:07.995"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:08:08.003" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170707 22:08:08.319" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 22:08:08.320" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-97"
VERSION_ID="v1.99.7-97-gf40b1ce"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170707 22:08:08.320" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170707 22:08:08.320" starttime="20170707 22:08:08.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:08.327" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:08.327" starttime="20170707 22:08:08.326"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.327" starttime="20170707 22:08:08.326"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.327" starttime="20170707 22:08:08.320"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.327" starttime="20170707 22:08:07.995"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.327" starttime="20170707 22:08:07.994"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.327" starttime="20170707 22:08:07.717"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.327" starttime="20170707 22:08:07.714"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.327" starttime="20170707 22:08:07.714"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170707 22:08:08.328" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170707 22:08:08.329" starttime="20170707 22:08:08.328"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170707 22:08:08.329" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170707 22:08:08.329" starttime="20170707 22:08:08.329"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:08.332" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:08.332" starttime="20170707 22:08:08.332"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.332" starttime="20170707 22:08:08.331"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:08.334" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:08.334" starttime="20170707 22:08:08.333"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.334" starttime="20170707 22:08:08.333"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:08.335" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:08.335" starttime="20170707 22:08:08.335"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.335" starttime="20170707 22:08:08.334"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:08.336" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:08.336" starttime="20170707 22:08:08.336"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.337" starttime="20170707 22:08:08.335"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.337" starttime="20170707 22:08:08.331"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:08.337" starttime="20170707 22:08:08.330"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:08:08.337" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170707 22:08:09.903" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 22:08:09.903" level="INFO">${stdout} =  17:34:27 up 5 min,  load average: 1.71, 1.96, 1.00</msg>
<msg timestamp="20170707 22:08:09.903" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170707 22:08:09.903" starttime="20170707 22:08:08.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:09.910" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:09.910" starttime="20170707 22:08:09.910"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:09.911" starttime="20170707 22:08:09.909"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:09.911" starttime="20170707 22:08:09.904"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:09.911" starttime="20170707 22:08:08.330"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:09.911" starttime="20170707 22:08:08.329"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:09.914" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:09.914" starttime="20170707 22:08:09.913"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:09.914" starttime="20170707 22:08:09.913"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:09.915" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:09.915" starttime="20170707 22:08:09.915"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:09.915" starttime="20170707 22:08:09.914"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:09.916" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:09.917" starttime="20170707 22:08:09.916"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:09.917" starttime="20170707 22:08:09.916"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:09.918" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:09.918" starttime="20170707 22:08:09.917"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:09.918" starttime="20170707 22:08:09.917"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:09.918" starttime="20170707 22:08:09.912"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:09.918" starttime="20170707 22:08:09.912"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:08:09.919" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170707 22:08:10.272" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 22:08:10.272" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg timestamp="20170707 22:08:10.272" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170707 22:08:10.272" starttime="20170707 22:08:09.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:10.279" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:10.279" starttime="20170707 22:08:10.278"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.279" starttime="20170707 22:08:10.278"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.279" starttime="20170707 22:08:10.273"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.279" starttime="20170707 22:08:09.911"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.279" starttime="20170707 22:08:09.911"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:10.282" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:10.282" starttime="20170707 22:08:10.282"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.282" starttime="20170707 22:08:10.281"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:10.285" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:10.285" starttime="20170707 22:08:10.283"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.285" starttime="20170707 22:08:10.282"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:10.286" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:10.286" starttime="20170707 22:08:10.286"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.286" starttime="20170707 22:08:10.285"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:10.288" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:10.288" starttime="20170707 22:08:10.287"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.288" starttime="20170707 22:08:10.287"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.288" starttime="20170707 22:08:10.281"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.288" starttime="20170707 22:08:10.280"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:08:10.288" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170707 22:08:10.647" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 22:08:10.647" level="INFO">${stdout} = Linux witherspoon 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b #1 Fri Jul 7 18:38:12 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170707 22:08:10.647" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170707 22:08:10.647" starttime="20170707 22:08:10.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:10.654" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:10.654" starttime="20170707 22:08:10.653"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.654" starttime="20170707 22:08:10.653"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.654" starttime="20170707 22:08:10.648"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.654" starttime="20170707 22:08:10.279"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.654" starttime="20170707 22:08:10.279"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.654" starttime="20170707 22:08:08.329"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.654" starttime="20170707 22:08:08.328"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.654" starttime="20170707 22:08:08.327"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.654" starttime="20170707 22:08:04.452"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.654" starttime="20170707 22:08:02.963"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.655" starttime="20170707 22:08:02.943"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.655" starttime="20170707 22:08:02.940"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.655" starttime="20170707 22:08:02.940"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:10.657" starttime="20170707 22:08:10.656"></status>
</kw>
<msg timestamp="20170707 22:08:10.657" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:10.657" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170707 22:08:10.657" starttime="20170707 22:08:10.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:10.657" starttime="20170707 22:08:10.657"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 22:08:10.679" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170707 22:08:10.680" starttime="20170707 22:08:10.679"></status>
</kw>
<msg timestamp="20170707 22:08:10.680" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170707 22:08:10.680" starttime="20170707 22:08:10.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:10.681" starttime="20170707 22:08:10.681"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.681" starttime="20170707 22:08:10.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:10.682" starttime="20170707 22:08:10.681"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 22:08:10.683" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170707 22:08:10.683" starttime="20170707 22:08:10.682"></status>
</kw>
<msg timestamp="20170707 22:08:10.683" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170707 22:08:10.683" starttime="20170707 22:08:10.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:10.685" starttime="20170707 22:08:10.685"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.686" starttime="20170707 22:08:10.684"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:10.686" starttime="20170707 22:08:10.683"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 22:08:10.686" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170707 22:08:12.194" level="INFO">Read output:</msg>
<status status="PASS" endtime="20170707 22:08:12.195" starttime="20170707 22:08:10.686"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:12.195" starttime="20170707 22:08:10.678"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170707 22:08:12.196" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170707 22:08:12.196" starttime="20170707 22:08:12.195"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170707 22:08:12.198" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170707 22:08:12.198" starttime="20170707 22:08:12.197"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 22:08:12.199" level="INFO">${logpath} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_elog.txt</msg>
<status status="PASS" endtime="20170707 22:08:12.199" starttime="20170707 22:08:12.198"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:08:12.203" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:08:12.204" starttime="20170707 22:08:12.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:08:12.205" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:08:12.205" starttime="20170707 22:08:12.204"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:08:12.205" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:08:12.205" starttime="20170707 22:08:12.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:08:12.206" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:08:12.206" starttime="20170707 22:08:12.206"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:08:12.388" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:08:12.388" starttime="20170707 22:08:12.207"></status>
</kw>
<msg timestamp="20170707 22:08:12.388" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:12.388" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:12.388" starttime="20170707 22:08:12.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:08:12.389" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:12.389" starttime="20170707 22:08:12.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:12.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:12.389" starttime="20170707 22:08:12.389"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:12.390" starttime="20170707 22:08:12.202"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:12.390" starttime="20170707 22:08:12.201"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:12.390" starttime="20170707 22:08:12.200"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:08:12.390" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170707 22:08:12.390" starttime="20170707 22:08:12.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:12.391" starttime="20170707 22:08:12.391"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:08:12.435" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170707 22:08:12.435" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:12.435" starttime="20170707 22:08:12.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:12.436" starttime="20170707 22:08:12.435"></status>
</kw>
<msg timestamp="20170707 22:08:12.436" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:12.436" starttime="20170707 22:08:12.199"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:12.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170707 22:08:12.437" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170707 22:08:12.437" starttime="20170707 22:08:12.437"></status>
</kw>
<msg timestamp="20170707 22:08:12.437" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170707 22:08:12.437" starttime="20170707 22:08:12.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170707 22:08:12.438" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170707 22:08:12.438" starttime="20170707 22:08:12.438"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:12.439" starttime="20170707 22:08:12.438"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:12.439" starttime="20170707 22:08:12.198"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 22:08:12.439" level="INFO">${logpath} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170707 22:08:12.439" starttime="20170707 22:08:12.439"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:08:12.442" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:08:12.443" starttime="20170707 22:08:12.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:08:12.443" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:08:12.443" starttime="20170707 22:08:12.443"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:08:12.444" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:08:12.444" starttime="20170707 22:08:12.443"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:08:12.445" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:08:12.445" starttime="20170707 22:08:12.444"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:08:12.621" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:08:12.621" starttime="20170707 22:08:12.445"></status>
</kw>
<msg timestamp="20170707 22:08:12.621" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:12.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:12.621" starttime="20170707 22:08:12.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:08:12.622" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:12.622" starttime="20170707 22:08:12.621"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:12.622" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:12.622" starttime="20170707 22:08:12.622"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:12.622" starttime="20170707 22:08:12.441"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:12.623" starttime="20170707 22:08:12.441"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:12.623" starttime="20170707 22:08:12.440"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:08:12.623" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170707 22:08:12.623" starttime="20170707 22:08:12.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:12.624" starttime="20170707 22:08:12.624"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:08:12.842" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170707 22:08:12.842" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:12.842" starttime="20170707 22:08:12.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:12.843" starttime="20170707 22:08:12.843"></status>
</kw>
<msg timestamp="20170707 22:08:12.843" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:12.843" starttime="20170707 22:08:12.440"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:12.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:12.845" starttime="20170707 22:08:12.844"></status>
</kw>
<msg timestamp="20170707 22:08:12.845" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170707 22:08:12.845" starttime="20170707 22:08:12.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:12.845" starttime="20170707 22:08:12.845"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170707 22:08:12.846" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 22:08:12.846" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170707 22:08:12.846" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170707 22:08:12.846" starttime="20170707 22:08:12.846"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:12.848" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:12.848" starttime="20170707 22:08:12.848"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:12.848" starttime="20170707 22:08:12.847"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:12.848" starttime="20170707 22:08:12.439"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 22:08:12.849" level="INFO">${logpath} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170707 22:08:12.849" starttime="20170707 22:08:12.849"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:08:12.852" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:08:12.852" starttime="20170707 22:08:12.852"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:08:12.853" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:08:12.853" starttime="20170707 22:08:12.853"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:08:12.854" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:08:12.854" starttime="20170707 22:08:12.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:08:12.854" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:08:12.854" starttime="20170707 22:08:12.854"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:08:13.031" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:08:13.031" starttime="20170707 22:08:12.855"></status>
</kw>
<msg timestamp="20170707 22:08:13.031" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:13.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:13.031" starttime="20170707 22:08:12.855"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:08:13.032" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:13.032" starttime="20170707 22:08:13.032"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:13.033" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:13.033" starttime="20170707 22:08:13.032"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:13.033" starttime="20170707 22:08:12.851"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:13.033" starttime="20170707 22:08:12.851"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:13.033" starttime="20170707 22:08:12.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:08:13.034" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170707 22:08:13.034" starttime="20170707 22:08:13.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:13.035" starttime="20170707 22:08:13.034"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:08:13.188" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170707 22:08:13.189" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:13.189" starttime="20170707 22:08:13.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:13.189" starttime="20170707 22:08:13.189"></status>
</kw>
<msg timestamp="20170707 22:08:13.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:13.190" starttime="20170707 22:08:12.849"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:13.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:13.191" starttime="20170707 22:08:13.190"></status>
</kw>
<msg timestamp="20170707 22:08:13.191" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170707 22:08:13.191" starttime="20170707 22:08:13.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:13.191" starttime="20170707 22:08:13.191"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170707 22:08:13.192" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 22:08:13.192" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170707 22:08:13.192" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170707 22:08:13.192" starttime="20170707 22:08:13.192"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:13.194" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:13.194" starttime="20170707 22:08:13.193"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:13.194" starttime="20170707 22:08:13.193"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:13.194" starttime="20170707 22:08:12.849"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 22:08:13.195" level="INFO">${logpath} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_led.txt</msg>
<status status="PASS" endtime="20170707 22:08:13.195" starttime="20170707 22:08:13.195"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:08:13.198" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:08:13.198" starttime="20170707 22:08:13.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:08:13.199" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:08:13.199" starttime="20170707 22:08:13.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:08:13.200" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:08:13.200" starttime="20170707 22:08:13.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:08:13.200" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:08:13.201" starttime="20170707 22:08:13.200"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:08:13.385" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:08:13.385" starttime="20170707 22:08:13.201"></status>
</kw>
<msg timestamp="20170707 22:08:13.385" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:13.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:13.385" starttime="20170707 22:08:13.201"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:08:13.386" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:13.386" starttime="20170707 22:08:13.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:13.387" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:13.387" starttime="20170707 22:08:13.386"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:13.387" starttime="20170707 22:08:13.197"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:13.387" starttime="20170707 22:08:13.197"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:13.387" starttime="20170707 22:08:13.196"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:08:13.388" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170707 22:08:13.388" starttime="20170707 22:08:13.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:13.388" starttime="20170707 22:08:13.388"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:08:14.735" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170707 22:08:14.735" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:14.735" starttime="20170707 22:08:13.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:14.736" starttime="20170707 22:08:14.736"></status>
</kw>
<msg timestamp="20170707 22:08:14.736" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:14.736" starttime="20170707 22:08:13.195"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:14.737" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170707 22:08:14.738" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170707 22:08:14.738" starttime="20170707 22:08:14.737"></status>
</kw>
<msg timestamp="20170707 22:08:14.738" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170707 22:08:14.738" starttime="20170707 22:08:14.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170707 22:08:14.739" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170707 22:08:14.739" starttime="20170707 22:08:14.739"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:14.739" starttime="20170707 22:08:14.738"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:14.739" starttime="20170707 22:08:13.195"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 22:08:14.740" level="INFO">${logpath} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170707 22:08:14.740" starttime="20170707 22:08:14.739"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:08:14.742" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:08:14.743" starttime="20170707 22:08:14.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:08:14.743" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:08:14.744" starttime="20170707 22:08:14.743"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:08:14.744" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:08:14.744" starttime="20170707 22:08:14.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:08:14.745" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:08:14.745" starttime="20170707 22:08:14.744"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:08:14.978" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:08:14.978" starttime="20170707 22:08:14.746"></status>
</kw>
<msg timestamp="20170707 22:08:14.979" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:14.979" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:14.979" starttime="20170707 22:08:14.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:08:14.979" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:14.979" starttime="20170707 22:08:14.979"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:14.980" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:14.980" starttime="20170707 22:08:14.980"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:14.980" starttime="20170707 22:08:14.742"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:14.980" starttime="20170707 22:08:14.741"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:14.980" starttime="20170707 22:08:14.740"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:08:14.981" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170707 22:08:14.981" starttime="20170707 22:08:14.981"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:14.982" starttime="20170707 22:08:14.981"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:08:15.024" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170707 22:08:15.024" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:15.024" starttime="20170707 22:08:14.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:15.025" starttime="20170707 22:08:15.024"></status>
</kw>
<msg timestamp="20170707 22:08:15.025" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:15.025" starttime="20170707 22:08:14.740"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:15.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170707 22:08:15.026" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170707 22:08:15.026" starttime="20170707 22:08:15.026"></status>
</kw>
<msg timestamp="20170707 22:08:15.026" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170707 22:08:15.026" starttime="20170707 22:08:15.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170707 22:08:15.027" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170707 22:08:15.027" starttime="20170707 22:08:15.027"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.027" starttime="20170707 22:08:15.027"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.028" starttime="20170707 22:08:14.739"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.028" starttime="20170707 22:08:12.198"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.028" starttime="20170707 22:08:12.196"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.028" starttime="20170707 22:08:12.196"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.028" starttime="20170707 22:08:12.196"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.028" starttime="20170707 22:08:10.678"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.028" starttime="20170707 22:08:10.658"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.028" starttime="20170707 22:08:10.655"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.028" starttime="20170707 22:08:10.655"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:15.030" starttime="20170707 22:08:15.030"></status>
</kw>
<msg timestamp="20170707 22:08:15.030" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:15.030" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170707 22:08:15.030" starttime="20170707 22:08:15.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:15.031" starttime="20170707 22:08:15.031"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 22:08:15.054" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170707 22:08:15.055" starttime="20170707 22:08:15.054"></status>
</kw>
<msg timestamp="20170707 22:08:15.055" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170707 22:08:15.055" starttime="20170707 22:08:15.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:15.056" starttime="20170707 22:08:15.056"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.057" starttime="20170707 22:08:15.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:15.058" starttime="20170707 22:08:15.057"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 22:08:15.059" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170707 22:08:15.059" starttime="20170707 22:08:15.059"></status>
</kw>
<msg timestamp="20170707 22:08:15.060" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170707 22:08:15.060" starttime="20170707 22:08:15.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:15.064" starttime="20170707 22:08:15.063"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.064" starttime="20170707 22:08:15.062"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:15.064" starttime="20170707 22:08:15.061"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 22:08:15.065" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170707 22:08:18.380" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170707 22:08:18.380" starttime="20170707 22:08:15.064"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:18.381" starttime="20170707 22:08:15.051"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170707 22:08:18.381" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170707 22:08:19.610" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170707 22:08:19.610" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170707 22:08:19.610" starttime="20170707 22:08:18.381"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170707 22:08:19.611" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170707 22:08:19.611" starttime="20170707 22:08:19.611"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:19.613" starttime="20170707 22:08:19.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:20.782" starttime="20170707 22:08:19.614"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:20.782" starttime="20170707 22:08:19.614"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:20.782" starttime="20170707 22:08:19.612"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170707 22:08:20.783" starttime="20170707 22:08:20.783"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:20.783" starttime="20170707 22:08:15.051"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:20.783" starttime="20170707 22:08:15.031"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:20.783" starttime="20170707 22:08:15.029"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:20.783" starttime="20170707 22:08:15.028"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:20.785" starttime="20170707 22:08:20.785"></status>
</kw>
<msg timestamp="20170707 22:08:20.785" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:20.785" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170707 22:08:20.785" starttime="20170707 22:08:20.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:20.786" starttime="20170707 22:08:20.786"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 22:08:20.822" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170707 22:08:20.823" starttime="20170707 22:08:20.822"></status>
</kw>
<msg timestamp="20170707 22:08:20.823" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170707 22:08:20.823" starttime="20170707 22:08:20.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:20.824" starttime="20170707 22:08:20.824"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:20.824" starttime="20170707 22:08:20.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:20.825" starttime="20170707 22:08:20.824"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 22:08:20.826" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170707 22:08:20.826" starttime="20170707 22:08:20.825"></status>
</kw>
<msg timestamp="20170707 22:08:20.826" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170707 22:08:20.826" starttime="20170707 22:08:20.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:20.828" starttime="20170707 22:08:20.827"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:20.828" starttime="20170707 22:08:20.827"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:20.828" starttime="20170707 22:08:20.826"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 22:08:20.829" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170707 22:08:24.006" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170707 22:08:24.007" starttime="20170707 22:08:20.828"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:24.007" starttime="20170707 22:08:20.821"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170707 22:08:24.008" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170707 22:08:24.008" starttime="20170707 22:08:24.007"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170707 22:08:24.010" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170707 22:08:24.010" starttime="20170707 22:08:24.009"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 22:08:24.011" level="INFO">${logpath} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170707 22:08:24.011" starttime="20170707 22:08:24.011"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:24.013" starttime="20170707 22:08:24.013"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:08:24.014" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170707 22:08:27.213" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 22:08:27.213" level="INFO">${stdout} = Mem: 219552K used, 212780K free, 79964K shrd, 10764K buff, 115700K cached
CPU:   0% usr 100% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 1.87 1.99 1.03 16/150 1149
  PID  PPID USER...</msg>
<msg timestamp="20170707 22:08:27.213" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170707 22:08:27.213" starttime="20170707 22:08:24.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:27.222" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:27.222" starttime="20170707 22:08:27.221"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:27.222" starttime="20170707 22:08:27.220"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:27.222" starttime="20170707 22:08:27.214"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:27.222" starttime="20170707 22:08:24.012"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:27.222" starttime="20170707 22:08:24.010"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 22:08:27.223" level="INFO">${logpath} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170707 22:08:27.223" starttime="20170707 22:08:27.223"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:27.225" starttime="20170707 22:08:27.224"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:08:27.226" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170707 22:08:28.396" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 22:08:28.396" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Fri Jul 7 18:38:...</msg>
<msg timestamp="20170707 22:08:28.396" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170707 22:08:28.396" starttime="20170707 22:08:27.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:28.403" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:28.403" starttime="20170707 22:08:28.402"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:28.403" starttime="20170707 22:08:28.402"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:28.403" starttime="20170707 22:08:28.397"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:28.403" starttime="20170707 22:08:27.224"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:28.403" starttime="20170707 22:08:27.223"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 22:08:28.404" level="INFO">${logpath} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170707 22:08:28.404" starttime="20170707 22:08:28.404"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:28.406" starttime="20170707 22:08:28.405"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:08:28.406" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170707 22:08:28.691" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 22:08:28.691" level="INFO">${stdout} = MemTotal:         432332 kB
MemFree:          212196 kB
MemAvailable:     255836 kB
Buffers:           10764 kB
Cached:           115712 kB
SwapCached:            0 kB
Active:           108952 kB
Inac...</msg>
<msg timestamp="20170707 22:08:28.691" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170707 22:08:28.691" starttime="20170707 22:08:28.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:28.699" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:28.699" starttime="20170707 22:08:28.699"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:28.700" starttime="20170707 22:08:28.698"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:28.700" starttime="20170707 22:08:28.691"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:28.700" starttime="20170707 22:08:28.404"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:28.700" starttime="20170707 22:08:28.404"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 22:08:28.701" level="INFO">${logpath} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170707 22:08:28.701" starttime="20170707 22:08:28.700"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:28.702" starttime="20170707 22:08:28.702"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:08:28.702" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170707 22:08:29.009" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 22:08:29.010" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170707 22:08:29.010" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170707 22:08:29.010" starttime="20170707 22:08:28.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:29.019" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:29.019" starttime="20170707 22:08:29.019"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:29.020" starttime="20170707 22:08:29.018"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:29.020" starttime="20170707 22:08:29.010"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:29.020" starttime="20170707 22:08:28.701"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:29.020" starttime="20170707 22:08:28.700"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 22:08:29.021" level="INFO">${logpath} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170707 22:08:29.021" starttime="20170707 22:08:29.020"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:29.022" starttime="20170707 22:08:29.022"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 22:08:29.023" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170707 22:08:30.213" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 22:08:30.214" level="INFO">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:23 UTC, end at Thu 2017-04-20 17:34:46 UTC. --
Apr 20 17:29:23 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:23 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170707 22:08:30.214" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170707 22:08:30.214" starttime="20170707 22:08:29.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170707 22:08:30.222" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/20170707220759561256_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:30.222"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:30.220"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:30.215"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:29.021"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:29.020"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:24.010"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:24.008"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:24.008"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:24.008"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:20.821"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:20.786"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:20.783"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.223" starttime="20170707 22:08:20.783"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:30.225" starttime="20170707 22:08:30.225"></status>
</kw>
<msg timestamp="20170707 22:08:30.226" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:30.226" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170707 22:08:30.226" starttime="20170707 22:08:30.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:30.227" starttime="20170707 22:08:30.226"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:08:30.253" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:08:30.253" starttime="20170707 22:08:30.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:08:30.254" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:08:30.254" starttime="20170707 22:08:30.253"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:08:30.254" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:08:30.254" starttime="20170707 22:08:30.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:08:30.255" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:08:30.255" starttime="20170707 22:08:30.255"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:08:30.437" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:08:30.437" starttime="20170707 22:08:30.256"></status>
</kw>
<msg timestamp="20170707 22:08:30.437" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:30.437" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:30.437" starttime="20170707 22:08:30.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:08:30.438" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:30.438" starttime="20170707 22:08:30.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:30.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:30.439" starttime="20170707 22:08:30.439"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.439" starttime="20170707 22:08:30.252"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.439" starttime="20170707 22:08:30.251"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.439" starttime="20170707 22:08:30.250"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:08:30.440" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170707 22:08:30.440" starttime="20170707 22:08:30.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:30.441" starttime="20170707 22:08:30.440"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:08:30.484" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170707 22:08:30.484" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:30.484" starttime="20170707 22:08:30.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:30.485" starttime="20170707 22:08:30.485"></status>
</kw>
<msg timestamp="20170707 22:08:30.485" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:30.485" starttime="20170707 22:08:30.250"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:30.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170707 22:08:30.487" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170707 22:08:30.487" starttime="20170707 22:08:30.486"></status>
</kw>
<msg timestamp="20170707 22:08:30.487" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170707 22:08:30.487" starttime="20170707 22:08:30.486"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170707 22:08:30.488" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170707 22:08:30.488" starttime="20170707 22:08:30.487"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.488" starttime="20170707 22:08:30.249"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.488" starttime="20170707 22:08:30.227"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.489" starttime="20170707 22:08:30.224"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.489" starttime="20170707 22:08:30.224"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:30.491" starttime="20170707 22:08:30.490"></status>
</kw>
<msg timestamp="20170707 22:08:30.491" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:30.491" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170707 22:08:30.491" starttime="20170707 22:08:30.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:30.491" starttime="20170707 22:08:30.491"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170707 22:08:30.514" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170707 22:08:30.514" starttime="20170707 22:08:30.513"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.514" starttime="20170707 22:08:30.512"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.514" starttime="20170707 22:08:30.492"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.514" starttime="20170707 22:08:30.489"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.514" starttime="20170707 22:08:30.489"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.514" starttime="20170707 22:08:02.940"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.514" starttime="20170707 22:08:02.937"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.514" starttime="20170707 22:08:02.937"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.514" starttime="20170707 22:08:02.937"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170707 22:08:30.809" starttime="20170707 22:08:30.515"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.809" starttime="20170707 22:08:02.936"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.810" starttime="20170707 22:07:56.515"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.810" starttime="20170707 22:07:56.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:30.811" starttime="20170707 22:08:30.810"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170707 22:08:30.812" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170707 22:08:30.812" starttime="20170707 22:08:30.811"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170707 22:08:30.812" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170707 22:08:30.812" starttime="20170707 22:08:30.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:30.813" starttime="20170707 22:08:30.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:30.814" starttime="20170707 22:08:30.813"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170707 22:08:30.814" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170707 22:08:30.814" starttime="20170707 22:08:30.814"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170707 22:08:30.815" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170707 22:08:30.815" starttime="20170707 22:08:30.815"></status>
</kw>
<msg timestamp="20170707 22:08:30.815" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170707 22:08:30.815" starttime="20170707 22:08:30.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:30.816" starttime="20170707 22:08:30.816"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:30.817" starttime="20170707 22:08:30.816"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 22:08:30.818" level="INFO">${cur_time} = 2017-07-07 22:08:30:817409</msg>
<status status="PASS" endtime="20170707 22:08:30.818" starttime="20170707 22:08:30.817"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 22:08:30.818" level="INFO">${cur_time} = 20170707220830817409</msg>
<status status="PASS" endtime="20170707 22:08:30.818" starttime="20170707 22:08:30.818"></status>
</kw>
<msg timestamp="20170707 22:08:30.818" level="INFO">${cur_time} = 20170707220830817409</msg>
<status status="PASS" endtime="20170707 22:08:30.819" starttime="20170707 22:08:30.817"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170707 22:08:30.819" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:30.820" starttime="20170707 22:08:30.819"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.820" starttime="20170707 22:08:30.811"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.820" starttime="20170707 22:07:56.258"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.820" starttime="20170707 22:07:56.248"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:30.820" starttime="20170707 22:07:56.245"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>BIOS_Code_Update</tag>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="FAIL" endtime="20170707 22:08:30.820" critical="yes" starttime="20170707 22:05:07.019">Keyword 'Is PNOR Flashing' failed after retrying for 2 minutes. The last error was: Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:30.822" starttime="20170707 22:08:30.822"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170707 22:08:30.823" starttime="20170707 22:08:30.823"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 22:08:30.838" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170707 22:08:30.839" starttime="20170707 22:08:30.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 22:08:30.839" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170707 22:08:30.839" starttime="20170707 22:08:30.839"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 22:08:30.840" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170707 22:08:30.841" starttime="20170707 22:08:30.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 22:08:30.842" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170707 22:08:30.842" starttime="20170707 22:08:30.841"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 22:08:31.016" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170707 22:08:31.016" starttime="20170707 22:08:30.842"></status>
</kw>
<msg timestamp="20170707 22:08:31.016" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 22:08:31.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:31.016" starttime="20170707 22:08:30.842"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 22:08:31.017" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:31.017" starttime="20170707 22:08:31.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:31.018" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:31.018" starttime="20170707 22:08:31.017"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:31.018" starttime="20170707 22:08:30.837"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:31.018" starttime="20170707 22:08:30.835"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:31.018" starttime="20170707 22:08:30.834"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 22:08:31.019" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170707 22:08:31.019" starttime="20170707 22:08:31.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:31.019" starttime="20170707 22:08:31.019"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 22:08:31.087" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 22:08:31.088" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:31.088" starttime="20170707 22:08:31.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:31.088" starttime="20170707 22:08:31.088"></status>
</kw>
<msg timestamp="20170707 22:08:31.089" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170707 22:08:31.089" starttime="20170707 22:08:30.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 22:08:31.090" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170707 22:08:31.090" starttime="20170707 22:08:31.089"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 22:08:31.090" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 22:08:31.091" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 22:08:31.091" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170707 22:08:31.091" starttime="20170707 22:08:31.090"></status>
</kw>
<msg timestamp="20170707 22:08:31.091" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170707 22:08:31.091" starttime="20170707 22:08:30.833"></status>
</kw>
<msg timestamp="20170707 22:08:31.092" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170707 22:08:31.092" starttime="20170707 22:08:30.833"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170707 22:08:31.093" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170707 22:08:31.093" starttime="20170707 22:08:31.093"></status>
</kw>
<msg timestamp="20170707 22:08:31.093" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170707 22:08:31.093" starttime="20170707 22:08:31.092"></status>
</kw>
<msg timestamp="20170707 22:08:31.094" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170707 22:08:31.094" starttime="20170707 22:08:30.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:31.094" starttime="20170707 22:08:31.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:31.095" starttime="20170707 22:08:31.094"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170707 22:08:31.096" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170707 22:08:31.096" starttime="20170707 22:08:31.095"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170707 22:08:31.096" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170707220759561256_TestBiosUpdate/20170707220759561256_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170707 22:08:31.096" starttime="20170707 22:08:31.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:31.097" starttime="20170707 22:08:31.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:31.098" starttime="20170707 22:08:31.097"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170707 22:08:31.098" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170707 22:08:31.098" starttime="20170707 22:08:31.098"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170707 22:08:31.099" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170707 22:08:31.099" starttime="20170707 22:08:31.099"></status>
</kw>
<msg timestamp="20170707 22:08:31.099" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170707 22:08:31.099" starttime="20170707 22:08:31.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:31.100" starttime="20170707 22:08:31.100"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170707 22:08:31.101" starttime="20170707 22:08:31.100"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 22:08:31.102" level="INFO">${cur_time} = 2017-07-07 22:08:31:102180</msg>
<status status="PASS" endtime="20170707 22:08:31.102" starttime="20170707 22:08:31.102"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 22:08:31.103" level="INFO">${cur_time} = 20170707220831102180</msg>
<status status="PASS" endtime="20170707 22:08:31.103" starttime="20170707 22:08:31.103"></status>
</kw>
<msg timestamp="20170707 22:08:31.103" level="INFO">${cur_time} = 20170707220831102180</msg>
<status status="PASS" endtime="20170707 22:08:31.103" starttime="20170707 22:08:31.101"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170707 22:08:31.104" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170707 22:08:31.104" starttime="20170707 22:08:31.104"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:31.104" starttime="20170707 22:08:31.095"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:31.104" starttime="20170707 22:08:30.832"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:31.105" starttime="20170707 22:08:30.823"></status>
</kw>
<status status="PASS" endtime="20170707 22:08:31.105" starttime="20170707 22:08:30.822"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>BIOS_Code_Update</tag>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170707 22:08:31.105" critical="yes" starttime="20170707 22:08:30.821"></status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="FAIL" endtime="20170707 22:08:31.106" starttime="20170707 22:05:06.064"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="1">BIOS_Code_Update</stat>
<stat fail="0" pass="1">Host_BIOS_Power_On</stat>
<stat fail="1" pass="0">Host_BIOS_Update</stat>
<stat fail="1" pass="1">open-power</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Test Bios Update" pass="1">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
