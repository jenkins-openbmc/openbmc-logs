<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171025 18:31:58.841" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<kw type="setup" name="Suite Setup Execution">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:31:59.789" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:31:59.790" starttime="20171025 18:31:59.789"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:31:59.791" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:31:59.791" starttime="20171025 18:31:59.790"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:31:59.791" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:31:59.791" starttime="20171025 18:31:59.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:31:59.792" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:31:59.792" starttime="20171025 18:31:59.792"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:00.019" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:00.019" starttime="20171025 18:31:59.793"></status>
</kw>
<msg timestamp="20171025 18:32:00.020" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:00.020" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:00.020" starttime="20171025 18:31:59.793"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:00.020" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:00.020" starttime="20171025 18:32:00.020"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:00.021" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:00.021" starttime="20171025 18:32:00.021"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:00.021" starttime="20171025 18:31:59.788"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:00.021" starttime="20171025 18:31:59.787"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:00.022" starttime="20171025 18:31:59.785"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:00.022" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status status="PASS" endtime="20171025 18:32:00.022" starttime="20171025 18:32:00.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:00.023" starttime="20171025 18:32:00.023"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:00.067" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171025 18:32:00.067" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:00.067" starttime="20171025 18:32:00.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:00.068" starttime="20171025 18:32:00.067"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:00.068" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:00.068" starttime="20171025 18:32:00.068"></status>
</kw>
<msg timestamp="20171025 18:32:00.068" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:00.069" starttime="20171025 18:31:59.784"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171025 18:32:00.069" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171025 18:32:00.069" starttime="20171025 18:32:00.069"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:00.069" starttime="20171025 18:31:59.784"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Smart Power Off</arg>
</arguments>
<kw name="Smart Power Off" library="boot_utils">
<doc>Do a smart power off.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${quiet}</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171025 18:32:00.071" level="INFO">${loc_quiet} = 0</msg>
<status status="PASS" endtime="20171025 18:32:00.071" starttime="20171025 18:32:00.071"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>REST Power Off \ stack_mode=skip</arg>
<arg>\ \ quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:32:00.072" level="INFO">${cmd_buf} = REST Power Off  stack_mode=skip   quiet=0</msg>
<status status="PASS" endtime="20171025 18:32:00.072" starttime="20171025 18:32:00.071"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
<arg>quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="REST Power Off" library="boot_utils">
<doc>Do "REST Power Off" boot test.</doc>
<arguments>
<arg>stack_mode=skip</arg>
<arg>quiet=0</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=REST Power Off</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:32:00.074" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=REST Power Off  loc_stack_mode=skip  loc_quiet=0</msg>
<status status="PASS" endtime="20171025 18:32:00.074" starttime="20171025 18:32:00.073"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=REST Power Off</arg>
<arg>loc_stack_mode=skip</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:00.083" starttime="20171025 18:32:00.082"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171025 18:32:00.084" level="INFO">${boot_stack} = REST Power Off</msg>
<msg timestamp="20171025 18:32:00.085" level="INFO">${stack_mode} = skip</msg>
<msg timestamp="20171025 18:32:00.085" level="INFO">${quiet} = 0</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171025 18:32:00.179" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:32:00.180" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171025 18:32:00.931" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171025 18:32:00.932" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171025 18:32:01.030" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171025 18:32:01.040" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171025 18:32:01.040" level="INFO">${stderr} = </msg>
<msg timestamp="20171025 18:32:01.041" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171025 18:32:01.041" starttime="20171025 18:32:00.168"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171025 18:32:01.041" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171025 18:32:01.041" starttime="20171025 18:32:01.041"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171025 18:32:01.042" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171025 18:32:01.042" starttime="20171025 18:32:01.042"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.042" starttime="20171025 18:32:00.167"></status>
</kw>
<msg timestamp="20171025 18:32:01.042" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20171025 18:32:01.262" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171025 18:32:01.273" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:32:01.302" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:32:01.303" starttime="20171025 18:32:01.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:01.304" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:01.304" starttime="20171025 18:32:01.303"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:32:01.304" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:32:01.304" starttime="20171025 18:32:01.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:32:01.305" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:32:01.305" starttime="20171025 18:32:01.305"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:01.486" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:01.486" starttime="20171025 18:32:01.306"></status>
</kw>
<msg timestamp="20171025 18:32:01.487" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:01.487" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:01.487" starttime="20171025 18:32:01.305"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:01.487" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:01.488" starttime="20171025 18:32:01.487"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:01.488" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:01.488" starttime="20171025 18:32:01.488"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.488" starttime="20171025 18:32:01.301"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.489" starttime="20171025 18:32:01.300"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.489" starttime="20171025 18:32:01.300"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:01.489" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171025 18:32:01.489" starttime="20171025 18:32:01.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:01.492" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:01.492" starttime="20171025 18:32:01.491"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:01.493" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:01.493" starttime="20171025 18:32:01.492"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.493" starttime="20171025 18:32:01.492"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.493" starttime="20171025 18:32:01.490"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.493" starttime="20171025 18:32:01.490"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:01.567" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171025 18:32:01.568" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:01.568" starttime="20171025 18:32:01.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:01.570" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:01.570" starttime="20171025 18:32:01.569"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:01.571" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:01.571" starttime="20171025 18:32:01.570"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.571" starttime="20171025 18:32:01.570"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.571" starttime="20171025 18:32:01.569"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.571" starttime="20171025 18:32:01.568"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:01.572" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:01.572" starttime="20171025 18:32:01.572"></status>
</kw>
<msg timestamp="20171025 18:32:01.572" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:01.572" starttime="20171025 18:32:01.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:01.573" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:01.573" starttime="20171025 18:32:01.572"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:32:01.573" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:32:01.573" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:32:01.574" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171025 18:32:01.574" starttime="20171025 18:32:01.573"></status>
</kw>
<msg timestamp="20171025 18:32:01.574" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171025 18:32:01.574" starttime="20171025 18:32:01.297"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.574" starttime="20171025 18:32:01.297"></status>
</kw>
<msg timestamp="20171025 18:32:01.591" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20171025 18:32:01.591" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20171025 18:32:01.591" starttime="20171025 18:32:01.289"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:01.593" starttime="20171025 18:32:01.593"></status>
</kw>
<msg timestamp="20171025 18:32:01.593" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171025 18:32:01.593" starttime="20171025 18:32:01.592"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171025 18:32:01.611" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171025 18:32:01.611" starttime="20171025 18:32:01.610"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:01.612" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171025 18:32:01.612" starttime="20171025 18:32:01.612"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:32:01.615" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:32:01.616" starttime="20171025 18:32:01.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:01.616" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:01.616" starttime="20171025 18:32:01.616"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:32:01.617" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:32:01.617" starttime="20171025 18:32:01.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:32:01.618" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:32:01.618" starttime="20171025 18:32:01.617"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:01.837" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:01.837" starttime="20171025 18:32:01.619"></status>
</kw>
<msg timestamp="20171025 18:32:01.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:01.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:01.837" starttime="20171025 18:32:01.618"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:01.838" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:01.838" starttime="20171025 18:32:01.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:01.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:01.839" starttime="20171025 18:32:01.838"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.839" starttime="20171025 18:32:01.614"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.839" starttime="20171025 18:32:01.614"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.839" starttime="20171025 18:32:01.613"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:01.840" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171025 18:32:01.840" starttime="20171025 18:32:01.839"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:01.840" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:01.840" starttime="20171025 18:32:01.840"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:01.841" starttime="20171025 18:32:01.841"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:01.842" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171025 18:32:01.843" starttime="20171025 18:32:01.842"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:01.843" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171025 18:32:01.844" starttime="20171025 18:32:01.843"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.844" starttime="20171025 18:32:01.843"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:01.844" starttime="20171025 18:32:01.841"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:02.000" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171025 18:32:02.000" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.000" starttime="20171025 18:32:01.844"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:02.001" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:02.001" starttime="20171025 18:32:02.001"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:02.002" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:02.002" starttime="20171025 18:32:02.002"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.002" starttime="20171025 18:32:02.001"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.003" starttime="20171025 18:32:02.000"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:02.003" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:02.003" starttime="20171025 18:32:02.003"></status>
</kw>
<msg timestamp="20171025 18:32:02.003" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.003" starttime="20171025 18:32:01.613"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:02.004" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.004" starttime="20171025 18:32:02.004"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171025 18:32:02.005" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171025 18:32:02.005" starttime="20171025 18:32:02.004"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.005" starttime="20171025 18:32:01.611"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.005" starttime="20171025 18:32:01.610"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.005" starttime="20171025 18:32:01.593"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171025 18:32:02.006" starttime="20171025 18:32:02.006"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:32:02.007" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171025 18:32:02.007" starttime="20171025 18:32:02.007"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:32:02.011" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:32:02.012" starttime="20171025 18:32:02.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:02.012" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:02.012" starttime="20171025 18:32:02.012"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:32:02.013" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:32:02.013" starttime="20171025 18:32:02.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:32:02.014" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:32:02.014" starttime="20171025 18:32:02.013"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:02.195" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:02.195" starttime="20171025 18:32:02.015"></status>
</kw>
<msg timestamp="20171025 18:32:02.195" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:02.195" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.195" starttime="20171025 18:32:02.014"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:02.196" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.196" starttime="20171025 18:32:02.196"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:02.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.197" starttime="20171025 18:32:02.196"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.197" starttime="20171025 18:32:02.011"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.197" starttime="20171025 18:32:02.010"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.197" starttime="20171025 18:32:02.009"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:02.198" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171025 18:32:02.198" starttime="20171025 18:32:02.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:02.200" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:02.200" starttime="20171025 18:32:02.199"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:02.201" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:02.202" starttime="20171025 18:32:02.201"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.202" starttime="20171025 18:32:02.201"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.202" starttime="20171025 18:32:02.199"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.202" starttime="20171025 18:32:02.198"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:02.272" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171025 18:32:02.272" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.272" starttime="20171025 18:32:02.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:02.274" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:02.274" starttime="20171025 18:32:02.273"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:02.275" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:02.275" starttime="20171025 18:32:02.275"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.275" starttime="20171025 18:32:02.274"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.275" starttime="20171025 18:32:02.273"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.275" starttime="20171025 18:32:02.272"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:02.276" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:02.276" starttime="20171025 18:32:02.276"></status>
</kw>
<msg timestamp="20171025 18:32:02.276" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.276" starttime="20171025 18:32:02.009"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:02.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.277" starttime="20171025 18:32:02.276"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:32:02.278" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:32:02.278" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:32:02.278" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171025 18:32:02.278" starttime="20171025 18:32:02.277"></status>
</kw>
<msg timestamp="20171025 18:32:02.278" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171025 18:32:02.278" starttime="20171025 18:32:02.008"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.278" starttime="20171025 18:32:02.008"></status>
</kw>
<msg timestamp="20171025 18:32:02.278" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171025 18:32:02.278" starttime="20171025 18:32:02.007"></status>
</kw>
<msg timestamp="20171025 18:32:02.279" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171025 18:32:02.279" starttime="20171025 18:32:02.005"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171025 18:32:02.279" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.279" starttime="20171025 18:32:02.279"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.279" starttime="20171025 18:32:01.288"></status>
</kw>
<msg timestamp="20171025 18:32:02.322" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171025 18:32:02.370" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171025 18:32:02.379" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171025 18:32:02.380" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:32:02.424" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:32:02.425" starttime="20171025 18:32:02.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:02.426" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:02.426" starttime="20171025 18:32:02.425"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:32:02.427" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:32:02.427" starttime="20171025 18:32:02.426"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:32:02.427" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:32:02.427" starttime="20171025 18:32:02.427"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:02.637" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:02.637" starttime="20171025 18:32:02.428"></status>
</kw>
<msg timestamp="20171025 18:32:02.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:02.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.637" starttime="20171025 18:32:02.428"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:02.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.638" starttime="20171025 18:32:02.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:02.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.639" starttime="20171025 18:32:02.638"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.639" starttime="20171025 18:32:02.423"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.639" starttime="20171025 18:32:02.422"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.639" starttime="20171025 18:32:02.420"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:02.640" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171025 18:32:02.640" starttime="20171025 18:32:02.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:02.642" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:02.642" starttime="20171025 18:32:02.641"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:02.643" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:02.643" starttime="20171025 18:32:02.643"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.643" starttime="20171025 18:32:02.642"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.643" starttime="20171025 18:32:02.640"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.643" starttime="20171025 18:32:02.640"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:02.852" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:32:02.852" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.852" starttime="20171025 18:32:02.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:02.854" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171025 18:32:02.854" starttime="20171025 18:32:02.854"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:02.855" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:02.856" starttime="20171025 18:32:02.855"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.856" starttime="20171025 18:32:02.854"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.856" starttime="20171025 18:32:02.853"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.856" starttime="20171025 18:32:02.852"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:02.856" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:02.857" starttime="20171025 18:32:02.856"></status>
</kw>
<msg timestamp="20171025 18:32:02.857" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.857" starttime="20171025 18:32:02.419"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:02.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:02.858" starttime="20171025 18:32:02.857"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:32:02.858" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:32:02.858" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:32:02.858" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171025 18:32:02.858" starttime="20171025 18:32:02.858"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.859" starttime="20171025 18:32:02.417"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.920" starttime="20171025 18:32:00.083"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171025 18:32:02.926" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171025 18:32:02.937" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171025 18:32:02.937" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171025 18:32:02.937" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171025 18:32:02.937" starttime="20171025 18:32:02.921"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.938" starttime="20171025 18:32:00.081"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.938" starttime="20171025 18:32:00.074"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.938" starttime="20171025 18:32:00.073"></status>
</kw>
<msg timestamp="20171025 18:32:02.938" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:02.938" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171025 18:32:02.938" starttime="20171025 18:32:00.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171025 18:32:02.939" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171025 18:32:02.939" starttime="20171025 18:32:02.939"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.939" starttime="20171025 18:32:02.938"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.939" starttime="20171025 18:32:00.070"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.940" starttime="20171025 18:32:00.070"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:02.940" starttime="20171025 18:31:59.783"></status>
</kw>
<test id="s1-t1" name="REST BMC Code Update">
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20171025 18:32:02.942" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171025 18:32:02.942" starttime="20171025 18:32:02.942"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20171025 18:32:02.968" level="INFO">${image_version} = v1.99.10-201-g8ebdd03</msg>
<status status="PASS" endtime="20171025 18:32:02.968" starttime="20171025 18:32:02.942"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20171025 18:32:02.969" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20171025 18:32:16.238" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20171025 18:32:16.239" starttime="20171025 18:32:02.968"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:32:16.243" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:32:16.244" starttime="20171025 18:32:16.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:16.245" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:16.245" starttime="20171025 18:32:16.245"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:32:16.246" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:32:16.246" starttime="20171025 18:32:16.245"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:32:16.246" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:32:16.246" starttime="20171025 18:32:16.246"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:16.470" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:16.470" starttime="20171025 18:32:16.247"></status>
</kw>
<msg timestamp="20171025 18:32:16.470" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:16.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:16.470" starttime="20171025 18:32:16.247"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:16.471" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:16.471" starttime="20171025 18:32:16.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:16.472" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:16.472" starttime="20171025 18:32:16.471"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:16.472" starttime="20171025 18:32:16.242"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:16.472" starttime="20171025 18:32:16.241"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:16.472" starttime="20171025 18:32:16.240"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:16.473" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20171025 18:32:16.473" starttime="20171025 18:32:16.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:16.473" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20171025 18:32:16.473" starttime="20171025 18:32:16.473"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:16.474" starttime="20171025 18:32:16.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:16.475" starttime="20171025 18:32:16.474"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:22.383" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20171025 18:32:22.383" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:22.383" starttime="20171025 18:32:16.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:22.384" starttime="20171025 18:32:22.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:22.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:22.385" starttime="20171025 18:32:22.384"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:22.385" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:22.385" starttime="20171025 18:32:22.385"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:22.386" starttime="20171025 18:32:16.239"></status>
</kw>
<kw name="Verify Image Upload" library="code_update_utils">
<doc>Verify the image was uploaded correctly and that it created</doc>
<arguments>
<arg>${image_version}</arg>
</arguments>
<assign>
<var>${ret}</var>
<var>${version_id}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171025 18:32:22.392" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171025 18:32:22.392" starttime="20171025 18:32:22.392"></status>
</kw>
<msg timestamp="20171025 18:32:22.393" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171025 18:32:22.393" starttime="20171025 18:32:22.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:22.394" starttime="20171025 18:32:22.394"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:22.394" starttime="20171025 18:32:22.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:22.395" starttime="20171025 18:32:22.394"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171025 18:32:22.396" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171025 18:32:22.396" starttime="20171025 18:32:22.396"></status>
</kw>
<msg timestamp="20171025 18:32:22.396" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171025 18:32:22.396" starttime="20171025 18:32:22.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:22.399" starttime="20171025 18:32:22.398"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:22.399" starttime="20171025 18:32:22.397"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:22.399" starttime="20171025 18:32:22.396"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171025 18:32:22.399" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171025 18:32:24.609" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171025 18:32:24.609" starttime="20171025 18:32:22.399"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:24.609" starttime="20171025 18:32:22.391"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:32:24.618" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20171025 18:32:24.664" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171025 18:32:24.664" level="INFO">${stdout} = /tmp/images/a5f1f9de/</msg>
<msg timestamp="20171025 18:32:24.664" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:32:24.664" starttime="20171025 18:32:24.617"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171025 18:32:24.665" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171025 18:32:24.665" starttime="20171025 18:32:24.665"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:24.665" starttime="20171025 18:32:24.616"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171025 18:32:24.671" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171025 18:32:24.671" starttime="20171025 18:32:24.670"></status>
</kw>
<msg timestamp="20171025 18:32:24.671" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171025 18:32:24.671" starttime="20171025 18:32:24.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:24.672" starttime="20171025 18:32:24.672"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:24.672" starttime="20171025 18:32:24.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:24.673" starttime="20171025 18:32:24.673"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171025 18:32:24.674" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171025 18:32:24.674" starttime="20171025 18:32:24.674"></status>
</kw>
<msg timestamp="20171025 18:32:24.674" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171025 18:32:24.674" starttime="20171025 18:32:24.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:24.676" starttime="20171025 18:32:24.676"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:24.676" starttime="20171025 18:32:24.676"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:24.676" starttime="20171025 18:32:24.675"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171025 18:32:24.677" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171025 18:32:26.421" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171025 18:32:26.421" starttime="20171025 18:32:24.677"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:26.421" starttime="20171025 18:32:24.669"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/a5f1f9de/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:32:26.430" level="INFO">Executing command 'cat /tmp/images/a5f1f9de/MANIFEST | grep "version="'.</msg>
<msg timestamp="20171025 18:32:26.517" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171025 18:32:26.517" level="INFO">${stdout} = version=v1.99.10-201-g8ebdd03</msg>
<msg timestamp="20171025 18:32:26.517" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:32:26.517" starttime="20171025 18:32:26.430"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171025 18:32:26.518" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171025 18:32:26.518" starttime="20171025 18:32:26.518"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:26.518" starttime="20171025 18:32:26.429"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171025 18:32:26.524" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171025 18:32:26.524" starttime="20171025 18:32:26.523"></status>
</kw>
<msg timestamp="20171025 18:32:26.524" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171025 18:32:26.524" starttime="20171025 18:32:26.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:26.525" starttime="20171025 18:32:26.525"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:26.525" starttime="20171025 18:32:26.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:26.526" starttime="20171025 18:32:26.526"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171025 18:32:26.527" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171025 18:32:26.527" starttime="20171025 18:32:26.527"></status>
</kw>
<msg timestamp="20171025 18:32:26.527" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171025 18:32:26.527" starttime="20171025 18:32:26.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:26.529" starttime="20171025 18:32:26.529"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:26.529" starttime="20171025 18:32:26.529"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:26.529" starttime="20171025 18:32:26.528"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171025 18:32:26.530" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171025 18:32:28.276" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171025 18:32:28.277" starttime="20171025 18:32:26.530"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:28.277" starttime="20171025 18:32:26.522"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171025 18:32:28.283" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171025 18:32:28.283" starttime="20171025 18:32:28.282"></status>
</kw>
<msg timestamp="20171025 18:32:28.283" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171025 18:32:28.283" starttime="20171025 18:32:28.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:28.284" starttime="20171025 18:32:28.284"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:28.284" starttime="20171025 18:32:28.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:28.285" starttime="20171025 18:32:28.285"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171025 18:32:28.286" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171025 18:32:28.286" starttime="20171025 18:32:28.286"></status>
</kw>
<msg timestamp="20171025 18:32:28.286" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171025 18:32:28.286" starttime="20171025 18:32:28.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:28.288" starttime="20171025 18:32:28.288"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:28.288" starttime="20171025 18:32:28.287"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:28.288" starttime="20171025 18:32:28.287"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171025 18:32:28.289" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171025 18:32:29.969" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171025 18:32:29.969" starttime="20171025 18:32:28.289"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:29.970" starttime="20171025 18:32:28.281"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/a5f1f9de/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:32:29.978" level="INFO">Executing command 'cat /tmp/images/a5f1f9de/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20171025 18:32:30.055" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171025 18:32:30.055" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<msg timestamp="20171025 18:32:30.055" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:32:30.055" starttime="20171025 18:32:29.978"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.056" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171025 18:32:30.056" starttime="20171025 18:32:30.056"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.057" starttime="20171025 18:32:29.977"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:32:30.067" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:32:30.068" starttime="20171025 18:32:30.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:30.069" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:30.069" starttime="20171025 18:32:30.069"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:32:30.070" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:32:30.070" starttime="20171025 18:32:30.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:32:30.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:32:30.071" starttime="20171025 18:32:30.071"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.325" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:30.325" starttime="20171025 18:32:30.072"></status>
</kw>
<msg timestamp="20171025 18:32:30.325" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:30.325" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.325" starttime="20171025 18:32:30.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.326" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.326" starttime="20171025 18:32:30.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.327" starttime="20171025 18:32:30.326"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.327" starttime="20171025 18:32:30.067"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.327" starttime="20171025 18:32:30.066"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.327" starttime="20171025 18:32:30.065"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:30.328" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de/attr/Activation</msg>
<status status="PASS" endtime="20171025 18:32:30.328" starttime="20171025 18:32:30.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:30.330" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:30.330" starttime="20171025 18:32:30.329"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:30.331" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:30.331" starttime="20171025 18:32:30.331"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.331" starttime="20171025 18:32:30.330"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.331" starttime="20171025 18:32:30.329"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.332" starttime="20171025 18:32:30.328"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:30.448" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de/attr/Activation, headers=None json=None</msg>
<msg timestamp="20171025 18:32:30.449" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.449" starttime="20171025 18:32:30.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:30.451" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:30.451" starttime="20171025 18:32:30.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:30.452" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:30.452" starttime="20171025 18:32:30.451"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.452" starttime="20171025 18:32:30.451"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.452" starttime="20171025 18:32:30.450"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.453" starttime="20171025 18:32:30.449"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:30.453" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:30.453" starttime="20171025 18:32:30.453"></status>
</kw>
<msg timestamp="20171025 18:32:30.454" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.454" starttime="20171025 18:32:30.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.455" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.455" starttime="20171025 18:32:30.454"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:32:30.456" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:32:30.456" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:32:30.456" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20171025 18:32:30.456" starttime="20171025 18:32:30.455"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.456" starttime="20171025 18:32:30.064"></status>
</kw>
<msg timestamp="20171025 18:32:30.457" level="INFO">${ret} = True</msg>
<msg timestamp="20171025 18:32:30.457" level="INFO">${version_id} = a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:32:30.457" starttime="20171025 18:32:22.386"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:30.458" starttime="20171025 18:32:30.457"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:32:30.463" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:32:30.463" starttime="20171025 18:32:30.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:30.464" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:30.464" starttime="20171025 18:32:30.464"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:32:30.465" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:32:30.465" starttime="20171025 18:32:30.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:32:30.466" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:32:30.466" starttime="20171025 18:32:30.466"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.657" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:30.657" starttime="20171025 18:32:30.468"></status>
</kw>
<msg timestamp="20171025 18:32:30.657" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:30.657" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.657" starttime="20171025 18:32:30.467"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.658" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.658" starttime="20171025 18:32:30.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.659" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.659" starttime="20171025 18:32:30.658"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.659" starttime="20171025 18:32:30.461"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.659" starttime="20171025 18:32:30.461"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.659" starttime="20171025 18:32:30.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:30.660" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:32:30.660" starttime="20171025 18:32:30.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:30.663" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:30.663" starttime="20171025 18:32:30.662"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:30.664" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:30.664" starttime="20171025 18:32:30.663"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.664" starttime="20171025 18:32:30.663"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.664" starttime="20171025 18:32:30.661"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.664" starttime="20171025 18:32:30.660"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:30.789" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:32:30.790" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.790" starttime="20171025 18:32:30.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:30.792" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/a5f1f9de", 
    "Purpose": "xyz.openbmc_project.Softwa...</msg>
<status status="PASS" endtime="20171025 18:32:30.792" starttime="20171025 18:32:30.791"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:30.793" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/a5f1f9de", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:30.793" starttime="20171025 18:32:30.792"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.793" starttime="20171025 18:32:30.792"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.793" starttime="20171025 18:32:30.791"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.793" starttime="20171025 18:32:30.790"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:30.794" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:30.794" starttime="20171025 18:32:30.793"></status>
</kw>
<msg timestamp="20171025 18:32:30.794" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.794" starttime="20171025 18:32:30.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.795" starttime="20171025 18:32:30.794"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:32:30.795" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/a5f1f9de", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:32:30.795" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:32:30.796" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:32:30.796" starttime="20171025 18:32:30.795"></status>
</kw>
<msg timestamp="20171025 18:32:30.796" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready...</msg>
<status status="PASS" endtime="20171025 18:32:30.796" starttime="20171025 18:32:30.458"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
</arguments>
<assign>
<var>${activation}</var>
</assign>
<msg timestamp="20171025 18:32:30.797" level="INFO">${activation} = xyz.openbmc_project.Software.Activation.Activations.Ready</msg>
<status status="PASS" endtime="20171025 18:32:30.797" starttime="20171025 18:32:30.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${skip_if_active}' == 'true' and '${activation}' == '${ACTIVE}'</arg>
<arg>Switch To Active Image And Pass</arg>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:30.797" starttime="20171025 18:32:30.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.798" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.798" starttime="20171025 18:32:30.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171025 18:32:30.799" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20171025 18:32:30.799" starttime="20171025 18:32:30.799"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:30.800" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:32:30.800" starttime="20171025 18:32:30.800"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:32:30.803" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:32:30.804" starttime="20171025 18:32:30.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:30.805" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:30.805" starttime="20171025 18:32:30.804"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:32:30.805" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:32:30.805" starttime="20171025 18:32:30.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:32:30.806" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:32:30.806" starttime="20171025 18:32:30.806"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.983" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:30.983" starttime="20171025 18:32:30.807"></status>
</kw>
<msg timestamp="20171025 18:32:30.983" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:30.983" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.983" starttime="20171025 18:32:30.806"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.984" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.984" starttime="20171025 18:32:30.984"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:30.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:30.985" starttime="20171025 18:32:30.984"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.985" starttime="20171025 18:32:30.802"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.985" starttime="20171025 18:32:30.802"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.985" starttime="20171025 18:32:30.801"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:30.986" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de/attr/RequestedActivation</msg>
<status status="PASS" endtime="20171025 18:32:30.986" starttime="20171025 18:32:30.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:30.986" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:30.986" starttime="20171025 18:32:30.986"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:30.987" starttime="20171025 18:32:30.987"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:30.989" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'he...</msg>
<status status="PASS" endtime="20171025 18:32:30.989" starttime="20171025 18:32:30.988"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:30.990" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171025 18:32:30.990" starttime="20171025 18:32:30.990"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.990" starttime="20171025 18:32:30.989"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:30.990" starttime="20171025 18:32:30.987"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:31.602" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171025 18:32:31.602" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:31.602" starttime="20171025 18:32:30.991"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:31.604" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:31.604" starttime="20171025 18:32:31.603"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:31.605" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:31.605" starttime="20171025 18:32:31.604"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:31.605" starttime="20171025 18:32:31.604"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:31.605" starttime="20171025 18:32:31.602"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:31.605" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:31.606" starttime="20171025 18:32:31.605"></status>
</kw>
<msg timestamp="20171025 18:32:31.606" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:31.606" starttime="20171025 18:32:30.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:31.606" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:31.606" starttime="20171025 18:32:31.606"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171025 18:32:31.607" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171025 18:32:31.607" starttime="20171025 18:32:31.607"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:31.607" starttime="20171025 18:32:30.799"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:32:31.611" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:32:31.612" starttime="20171025 18:32:31.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:31.612" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:31.613" starttime="20171025 18:32:31.612"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:32:31.613" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:32:31.613" starttime="20171025 18:32:31.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:32:31.614" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:32:31.614" starttime="20171025 18:32:31.614"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:32.279" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:32.279" starttime="20171025 18:32:31.615"></status>
</kw>
<msg timestamp="20171025 18:32:32.280" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:32.280" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:32.280" starttime="20171025 18:32:31.614"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:32.281" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:32.281" starttime="20171025 18:32:32.280"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:32.281" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:32.281" starttime="20171025 18:32:32.281"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:32.282" starttime="20171025 18:32:31.611"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:32.282" starttime="20171025 18:32:31.610"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:32.282" starttime="20171025 18:32:31.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:32.282" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:32:32.282" starttime="20171025 18:32:32.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:32.285" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:32.285" starttime="20171025 18:32:32.284"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:32.286" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:32.286" starttime="20171025 18:32:32.285"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:32.286" starttime="20171025 18:32:32.285"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:32.286" starttime="20171025 18:32:32.283"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:32.286" starttime="20171025 18:32:32.283"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:32.804" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:32:32.804" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:32.804" starttime="20171025 18:32:32.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:32.807" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:32:32.807" starttime="20171025 18:32:32.806"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:32.808" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:32.808" starttime="20171025 18:32:32.808"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:32.808" starttime="20171025 18:32:32.807"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:32.808" starttime="20171025 18:32:32.805"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:32.809" starttime="20171025 18:32:32.805"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:32.809" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:32.809" starttime="20171025 18:32:32.809"></status>
</kw>
<msg timestamp="20171025 18:32:32.810" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:32.810" starttime="20171025 18:32:31.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:32.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:32.810" starttime="20171025 18:32:32.810"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:32:32.811" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:32:32.811" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:32:32.811" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:32:32.811" starttime="20171025 18:32:32.811"></status>
</kw>
<msg timestamp="20171025 18:32:32.812" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20171025 18:32:32.812" starttime="20171025 18:32:31.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20171025 18:32:32.812" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:32.812" starttime="20171025 18:32:32.812"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>${version_id}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:32.813" starttime="20171025 18:32:32.813"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update_utils">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171025 18:32:32.820" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171025 18:32:32.820" starttime="20171025 18:32:32.819"></status>
</kw>
<msg timestamp="20171025 18:32:32.820" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171025 18:32:32.821" starttime="20171025 18:32:32.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:32.822" starttime="20171025 18:32:32.822"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:32.822" starttime="20171025 18:32:32.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:32.824" starttime="20171025 18:32:32.823"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171025 18:32:32.825" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171025 18:32:32.825" starttime="20171025 18:32:32.825"></status>
</kw>
<msg timestamp="20171025 18:32:32.825" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171025 18:32:32.825" starttime="20171025 18:32:32.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:32:32.828" starttime="20171025 18:32:32.828"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:32.828" starttime="20171025 18:32:32.827"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:32.828" starttime="20171025 18:32:32.826"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171025 18:32:32.829" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171025 18:32:34.939" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171025 18:32:34.939" starttime="20171025 18:32:32.829"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:34.939" starttime="20171025 18:32:32.817"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:32:34.950" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:32:34.951" starttime="20171025 18:32:34.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:34.952" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:34.952" starttime="20171025 18:32:34.951"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:32:34.953" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:32:34.953" starttime="20171025 18:32:34.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:32:34.954" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:32:34.954" starttime="20171025 18:32:34.953"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:35.162" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:35.162" starttime="20171025 18:32:34.954"></status>
</kw>
<msg timestamp="20171025 18:32:35.163" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:35.163" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:35.163" starttime="20171025 18:32:34.954"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:35.163" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:35.164" starttime="20171025 18:32:35.163"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:35.164" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:35.164" starttime="20171025 18:32:35.164"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:35.164" starttime="20171025 18:32:34.949"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:35.165" starttime="20171025 18:32:34.949"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:35.165" starttime="20171025 18:32:34.948"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:35.165" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:32:35.165" starttime="20171025 18:32:35.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:35.168" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:35.168" starttime="20171025 18:32:35.167"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:35.169" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:35.169" starttime="20171025 18:32:35.168"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:35.169" starttime="20171025 18:32:35.168"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:35.169" starttime="20171025 18:32:35.166"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:35.169" starttime="20171025 18:32:35.166"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:35.383" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:32:35.383" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:35.383" starttime="20171025 18:32:35.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:35.386" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:32:35.386" starttime="20171025 18:32:35.385"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:35.387" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:35.387" starttime="20171025 18:32:35.387"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:35.387" starttime="20171025 18:32:35.386"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:35.387" starttime="20171025 18:32:35.385"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:35.388" starttime="20171025 18:32:35.384"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:35.388" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:35.388" starttime="20171025 18:32:35.388"></status>
</kw>
<msg timestamp="20171025 18:32:35.389" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:35.389" starttime="20171025 18:32:34.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:35.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:35.389" starttime="20171025 18:32:35.389"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:32:35.390" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:32:35.390" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:32:35.390" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:32:35.390" starttime="20171025 18:32:35.390"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:35.391" starttime="20171025 18:32:34.946"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:32:45.412" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:32:45.412" starttime="20171025 18:32:45.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:45.413" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:45.414" starttime="20171025 18:32:45.413"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:32:45.414" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:32:45.414" starttime="20171025 18:32:45.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:32:45.415" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:32:45.415" starttime="20171025 18:32:45.414"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:46.021" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:46.021" starttime="20171025 18:32:45.416"></status>
</kw>
<msg timestamp="20171025 18:32:46.021" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:46.021" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:46.021" starttime="20171025 18:32:45.415"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:46.022" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:46.022" starttime="20171025 18:32:46.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:46.023" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:46.023" starttime="20171025 18:32:46.022"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:46.023" starttime="20171025 18:32:45.411"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:46.023" starttime="20171025 18:32:45.410"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:46.023" starttime="20171025 18:32:45.410"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:46.024" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:32:46.024" starttime="20171025 18:32:46.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:46.027" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:46.027" starttime="20171025 18:32:46.026"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:46.028" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:46.028" starttime="20171025 18:32:46.027"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:46.028" starttime="20171025 18:32:46.027"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:46.028" starttime="20171025 18:32:46.025"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:46.028" starttime="20171025 18:32:46.024"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:46.394" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:32:46.395" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:46.395" starttime="20171025 18:32:46.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:46.397" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:32:46.397" starttime="20171025 18:32:46.396"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:46.398" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:46.398" starttime="20171025 18:32:46.397"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:46.398" starttime="20171025 18:32:46.397"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:46.398" starttime="20171025 18:32:46.396"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:46.398" starttime="20171025 18:32:46.395"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:46.399" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:46.399" starttime="20171025 18:32:46.398"></status>
</kw>
<msg timestamp="20171025 18:32:46.399" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:46.399" starttime="20171025 18:32:45.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:46.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:46.400" starttime="20171025 18:32:46.399"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:32:46.401" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:32:46.401" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:32:46.401" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:32:46.401" starttime="20171025 18:32:46.400"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:46.401" starttime="20171025 18:32:45.408"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:32:56.422" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:32:56.423" starttime="20171025 18:32:56.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:32:56.423" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:32:56.423" starttime="20171025 18:32:56.423"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:32:56.424" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:32:56.424" starttime="20171025 18:32:56.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:32:56.425" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:32:56.425" starttime="20171025 18:32:56.424"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:32:57.636" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:32:57.637" starttime="20171025 18:32:56.425"></status>
</kw>
<msg timestamp="20171025 18:32:57.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:32:57.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:57.637" starttime="20171025 18:32:56.425"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:32:57.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:57.638" starttime="20171025 18:32:57.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:57.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:57.638" starttime="20171025 18:32:57.638"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:57.639" starttime="20171025 18:32:56.421"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:57.639" starttime="20171025 18:32:56.421"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:57.639" starttime="20171025 18:32:56.420"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:32:57.639" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:32:57.639" starttime="20171025 18:32:57.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:57.642" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:57.642" starttime="20171025 18:32:57.641"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:57.643" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:32:57.643" starttime="20171025 18:32:57.642"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:57.643" starttime="20171025 18:32:57.642"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:57.643" starttime="20171025 18:32:57.640"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:57.643" starttime="20171025 18:32:57.640"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:32:57.795" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:32:57.795" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:57.795" starttime="20171025 18:32:57.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:32:57.797" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:32:57.797" starttime="20171025 18:32:57.797"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:32:57.799" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:32:57.799" starttime="20171025 18:32:57.798"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:57.799" starttime="20171025 18:32:57.798"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:57.799" starttime="20171025 18:32:57.796"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:57.799" starttime="20171025 18:32:57.796"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:32:57.799" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:32:57.800" starttime="20171025 18:32:57.799"></status>
</kw>
<msg timestamp="20171025 18:32:57.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:32:57.800" starttime="20171025 18:32:56.419"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:32:57.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:32:57.801" starttime="20171025 18:32:57.800"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:32:57.801" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:32:57.801" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:32:57.801" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:32:57.801" starttime="20171025 18:32:57.801"></status>
</kw>
<status status="PASS" endtime="20171025 18:32:57.802" starttime="20171025 18:32:56.418"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:33:07.823" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:33:07.828" starttime="20171025 18:33:07.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:33:07.828" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:33:07.828" starttime="20171025 18:33:07.828"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:33:07.829" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:33:07.829" starttime="20171025 18:33:07.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:33:07.830" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:33:07.830" starttime="20171025 18:33:07.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:33:08.660" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:33:08.660" starttime="20171025 18:33:07.831"></status>
</kw>
<msg timestamp="20171025 18:33:08.661" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:33:08.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:08.661" starttime="20171025 18:33:07.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:33:08.661" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:08.662" starttime="20171025 18:33:08.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:33:08.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:08.662" starttime="20171025 18:33:08.662"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:08.663" starttime="20171025 18:33:07.822"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:08.663" starttime="20171025 18:33:07.822"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:08.663" starttime="20171025 18:33:07.821"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:33:08.663" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:33:08.663" starttime="20171025 18:33:08.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:33:08.666" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:33:08.666" starttime="20171025 18:33:08.665"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:33:08.667" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:33:08.667" starttime="20171025 18:33:08.667"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:08.667" starttime="20171025 18:33:08.666"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:08.667" starttime="20171025 18:33:08.664"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:08.667" starttime="20171025 18:33:08.664"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:33:08.799" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:33:08.799" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:08.799" starttime="20171025 18:33:08.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:33:08.801" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:33:08.802" starttime="20171025 18:33:08.801"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:33:08.802" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:33:08.803" starttime="20171025 18:33:08.802"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:08.803" starttime="20171025 18:33:08.802"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:08.803" starttime="20171025 18:33:08.800"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:08.803" starttime="20171025 18:33:08.800"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:33:08.803" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:33:08.804" starttime="20171025 18:33:08.803"></status>
</kw>
<msg timestamp="20171025 18:33:08.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:08.804" starttime="20171025 18:33:07.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:33:08.808" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:08.808" starttime="20171025 18:33:08.804"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:33:08.809" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:33:08.809" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:33:08.809" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:33:08.809" starttime="20171025 18:33:08.808"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:08.809" starttime="20171025 18:33:07.819"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:33:18.831" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:33:18.831" starttime="20171025 18:33:18.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:33:18.832" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:33:18.832" starttime="20171025 18:33:18.832"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:33:18.833" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:33:18.833" starttime="20171025 18:33:18.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:33:18.833" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:33:18.833" starttime="20171025 18:33:18.833"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:33:19.973" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:33:19.973" starttime="20171025 18:33:18.834"></status>
</kw>
<msg timestamp="20171025 18:33:19.973" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:33:19.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:19.973" starttime="20171025 18:33:18.834"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:33:19.974" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:19.974" starttime="20171025 18:33:19.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:33:19.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:19.975" starttime="20171025 18:33:19.974"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:19.975" starttime="20171025 18:33:18.830"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:19.975" starttime="20171025 18:33:18.830"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:19.975" starttime="20171025 18:33:18.828"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:33:19.976" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:33:19.976" starttime="20171025 18:33:19.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:33:19.978" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:33:19.978" starttime="20171025 18:33:19.977"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:33:19.979" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:33:19.979" starttime="20171025 18:33:19.979"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:19.979" starttime="20171025 18:33:19.978"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:19.979" starttime="20171025 18:33:19.977"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:19.980" starttime="20171025 18:33:19.976"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:33:20.263" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:33:20.263" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:20.263" starttime="20171025 18:33:19.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:33:20.265" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:33:20.265" starttime="20171025 18:33:20.265"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:33:20.266" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:33:20.267" starttime="20171025 18:33:20.266"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:20.267" starttime="20171025 18:33:20.266"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:20.267" starttime="20171025 18:33:20.264"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:20.267" starttime="20171025 18:33:20.263"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:33:20.267" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:33:20.267" starttime="20171025 18:33:20.267"></status>
</kw>
<msg timestamp="20171025 18:33:20.268" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:20.268" starttime="20171025 18:33:18.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:33:20.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:20.268" starttime="20171025 18:33:20.268"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:33:20.269" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:33:20.269" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:33:20.269" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:33:20.269" starttime="20171025 18:33:20.269"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:20.270" starttime="20171025 18:33:18.827"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:33:30.291" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:33:30.291" starttime="20171025 18:33:30.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:33:30.292" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:33:30.292" starttime="20171025 18:33:30.291"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:33:30.292" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:33:30.292" starttime="20171025 18:33:30.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:33:30.293" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:33:30.293" starttime="20171025 18:33:30.293"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:33:30.470" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:33:30.470" starttime="20171025 18:33:30.294"></status>
</kw>
<msg timestamp="20171025 18:33:30.471" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:33:30.471" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:30.471" starttime="20171025 18:33:30.294"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:33:30.471" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:30.472" starttime="20171025 18:33:30.471"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:33:30.472" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:30.472" starttime="20171025 18:33:30.472"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:30.472" starttime="20171025 18:33:30.290"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:30.473" starttime="20171025 18:33:30.289"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:30.473" starttime="20171025 18:33:30.288"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:33:30.473" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:33:30.473" starttime="20171025 18:33:30.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:33:30.476" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:33:30.476" starttime="20171025 18:33:30.475"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:33:30.477" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:33:30.477" starttime="20171025 18:33:30.477"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:30.477" starttime="20171025 18:33:30.476"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:30.477" starttime="20171025 18:33:30.474"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:30.477" starttime="20171025 18:33:30.474"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:33:30.985" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:33:30.986" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:30.986" starttime="20171025 18:33:30.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:33:30.988" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:33:30.988" starttime="20171025 18:33:30.987"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:33:30.989" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:33:30.989" starttime="20171025 18:33:30.988"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:30.989" starttime="20171025 18:33:30.988"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:30.989" starttime="20171025 18:33:30.987"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:30.989" starttime="20171025 18:33:30.986"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:33:30.994" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:33:30.994" starttime="20171025 18:33:30.994"></status>
</kw>
<msg timestamp="20171025 18:33:30.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:30.994" starttime="20171025 18:33:30.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:33:30.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:30.995" starttime="20171025 18:33:30.995"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:33:30.996" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:33:30.996" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:33:30.996" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:33:30.996" starttime="20171025 18:33:30.996"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:30.996" starttime="20171025 18:33:30.287"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:33:41.011" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:33:41.012" starttime="20171025 18:33:41.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:33:41.012" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:33:41.013" starttime="20171025 18:33:41.012"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:33:41.013" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:33:41.013" starttime="20171025 18:33:41.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:33:41.014" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:33:41.014" starttime="20171025 18:33:41.014"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:33:41.192" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:33:41.192" starttime="20171025 18:33:41.015"></status>
</kw>
<msg timestamp="20171025 18:33:41.192" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:33:41.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:41.192" starttime="20171025 18:33:41.014"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:33:41.193" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:41.193" starttime="20171025 18:33:41.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:33:41.194" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:41.194" starttime="20171025 18:33:41.194"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:41.194" starttime="20171025 18:33:41.010"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:41.194" starttime="20171025 18:33:41.010"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:41.194" starttime="20171025 18:33:41.009"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:33:41.195" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:33:41.195" starttime="20171025 18:33:41.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:33:41.197" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:33:41.197" starttime="20171025 18:33:41.197"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:33:41.198" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:33:41.198" starttime="20171025 18:33:41.198"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:41.199" starttime="20171025 18:33:41.197"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:41.199" starttime="20171025 18:33:41.196"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:41.199" starttime="20171025 18:33:41.195"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:33:41.344" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:33:41.345" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:41.345" starttime="20171025 18:33:41.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:33:41.347" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:33:41.347" starttime="20171025 18:33:41.346"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:33:41.348" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:33:41.348" starttime="20171025 18:33:41.347"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:41.348" starttime="20171025 18:33:41.347"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:41.348" starttime="20171025 18:33:41.345"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:41.348" starttime="20171025 18:33:41.345"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:33:41.349" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:33:41.349" starttime="20171025 18:33:41.349"></status>
</kw>
<msg timestamp="20171025 18:33:41.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:41.349" starttime="20171025 18:33:41.008"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:33:41.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:41.350" starttime="20171025 18:33:41.350"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:33:41.351" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:33:41.351" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:33:41.351" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:33:41.351" starttime="20171025 18:33:41.351"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:41.351" starttime="20171025 18:33:41.008"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:33:51.372" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:33:51.373" starttime="20171025 18:33:51.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:33:51.374" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:33:51.375" starttime="20171025 18:33:51.374"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:33:51.375" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:33:51.375" starttime="20171025 18:33:51.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:33:51.376" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:33:51.376" starttime="20171025 18:33:51.376"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:33:51.561" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:33:51.561" starttime="20171025 18:33:51.377"></status>
</kw>
<msg timestamp="20171025 18:33:51.561" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:33:51.561" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:51.561" starttime="20171025 18:33:51.376"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:33:51.562" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:51.562" starttime="20171025 18:33:51.562"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:33:51.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:51.563" starttime="20171025 18:33:51.562"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:51.563" starttime="20171025 18:33:51.372"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:51.563" starttime="20171025 18:33:51.371"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:51.563" starttime="20171025 18:33:51.370"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:33:51.564" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:33:51.564" starttime="20171025 18:33:51.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:33:51.566" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:33:51.566" starttime="20171025 18:33:51.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:33:51.567" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:33:51.567" starttime="20171025 18:33:51.567"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:51.567" starttime="20171025 18:33:51.566"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:51.567" starttime="20171025 18:33:51.565"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:51.567" starttime="20171025 18:33:51.564"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:33:51.706" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:33:51.706" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:51.706" starttime="20171025 18:33:51.568"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:33:51.708" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:33:51.708" starttime="20171025 18:33:51.708"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:33:51.709" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:33:51.709" starttime="20171025 18:33:51.709"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:51.710" starttime="20171025 18:33:51.708"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:51.710" starttime="20171025 18:33:51.707"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:51.710" starttime="20171025 18:33:51.707"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:33:51.714" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:33:51.714" starttime="20171025 18:33:51.710"></status>
</kw>
<msg timestamp="20171025 18:33:51.714" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:33:51.715" starttime="20171025 18:33:51.370"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:33:51.715" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:33:51.715" starttime="20171025 18:33:51.715"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:33:51.716" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:33:51.716" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:33:51.716" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:33:51.716" starttime="20171025 18:33:51.716"></status>
</kw>
<status status="PASS" endtime="20171025 18:33:51.716" starttime="20171025 18:33:51.369"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:34:01.735" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:34:01.736" starttime="20171025 18:34:01.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:34:01.737" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:34:01.737" starttime="20171025 18:34:01.736"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:34:01.737" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:34:01.737" starttime="20171025 18:34:01.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:34:01.738" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:34:01.738" starttime="20171025 18:34:01.738"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:34:01.920" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:34:01.920" starttime="20171025 18:34:01.739"></status>
</kw>
<msg timestamp="20171025 18:34:01.920" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:34:01.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:01.920" starttime="20171025 18:34:01.739"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:34:01.921" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:01.921" starttime="20171025 18:34:01.921"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:34:01.922" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:01.922" starttime="20171025 18:34:01.922"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:01.922" starttime="20171025 18:34:01.734"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:01.922" starttime="20171025 18:34:01.734"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:01.922" starttime="20171025 18:34:01.733"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:34:01.923" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:34:01.923" starttime="20171025 18:34:01.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:34:01.925" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:34:01.925" starttime="20171025 18:34:01.925"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:34:01.926" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:34:01.926" starttime="20171025 18:34:01.926"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:01.927" starttime="20171025 18:34:01.925"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:01.927" starttime="20171025 18:34:01.924"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:01.927" starttime="20171025 18:34:01.923"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:34:02.065" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:34:02.066" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:02.066" starttime="20171025 18:34:01.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:34:02.068" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:34:02.068" starttime="20171025 18:34:02.067"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:34:02.069" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:34:02.069" starttime="20171025 18:34:02.069"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:02.069" starttime="20171025 18:34:02.068"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:02.070" starttime="20171025 18:34:02.067"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:02.070" starttime="20171025 18:34:02.066"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:34:02.070" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:34:02.070" starttime="20171025 18:34:02.070"></status>
</kw>
<msg timestamp="20171025 18:34:02.070" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:02.070" starttime="20171025 18:34:01.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:34:02.071" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:02.071" starttime="20171025 18:34:02.071"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:34:02.072" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:34:02.072" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:34:02.072" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:34:02.072" starttime="20171025 18:34:02.071"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:02.072" starttime="20171025 18:34:01.731"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:34:12.093" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:34:12.094" starttime="20171025 18:34:12.093"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:34:12.094" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:34:12.094" starttime="20171025 18:34:12.094"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:34:12.095" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:34:12.095" starttime="20171025 18:34:12.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:34:12.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:34:12.096" starttime="20171025 18:34:12.096"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:34:12.273" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:34:12.273" starttime="20171025 18:34:12.097"></status>
</kw>
<msg timestamp="20171025 18:34:12.273" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:34:12.273" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:12.273" starttime="20171025 18:34:12.096"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:34:12.274" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:12.274" starttime="20171025 18:34:12.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:34:12.275" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:12.275" starttime="20171025 18:34:12.275"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:12.275" starttime="20171025 18:34:12.092"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:12.275" starttime="20171025 18:34:12.092"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:12.275" starttime="20171025 18:34:12.091"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:34:12.276" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:34:12.276" starttime="20171025 18:34:12.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:34:12.279" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:34:12.279" starttime="20171025 18:34:12.278"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:34:12.280" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:34:12.281" starttime="20171025 18:34:12.280"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:12.281" starttime="20171025 18:34:12.279"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:12.281" starttime="20171025 18:34:12.277"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:12.281" starttime="20171025 18:34:12.276"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:34:13.145" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:34:13.146" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:13.146" starttime="20171025 18:34:12.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:34:13.148" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:34:13.148" starttime="20171025 18:34:13.148"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:34:13.149" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:34:13.149" starttime="20171025 18:34:13.149"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:13.149" starttime="20171025 18:34:13.148"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:13.150" starttime="20171025 18:34:13.147"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:13.150" starttime="20171025 18:34:13.146"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:34:13.150" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:34:13.150" starttime="20171025 18:34:13.150"></status>
</kw>
<msg timestamp="20171025 18:34:13.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:13.150" starttime="20171025 18:34:12.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:34:13.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:13.151" starttime="20171025 18:34:13.151"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:34:13.152" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:34:13.152" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:34:13.152" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:34:13.152" starttime="20171025 18:34:13.152"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:13.152" starttime="20171025 18:34:12.090"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:34:23.174" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:34:23.175" starttime="20171025 18:34:23.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:34:23.176" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:34:23.176" starttime="20171025 18:34:23.175"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:34:23.177" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:34:23.177" starttime="20171025 18:34:23.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:34:23.178" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:34:23.178" starttime="20171025 18:34:23.177"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:34:23.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:34:23.357" starttime="20171025 18:34:23.179"></status>
</kw>
<msg timestamp="20171025 18:34:23.357" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:34:23.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:23.357" starttime="20171025 18:34:23.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:34:23.358" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:23.358" starttime="20171025 18:34:23.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:34:23.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:23.358" starttime="20171025 18:34:23.358"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:23.359" starttime="20171025 18:34:23.173"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:23.359" starttime="20171025 18:34:23.172"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:23.359" starttime="20171025 18:34:23.171"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:34:23.359" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:34:23.359" starttime="20171025 18:34:23.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:34:23.362" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:34:23.362" starttime="20171025 18:34:23.361"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:34:23.363" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:34:23.363" starttime="20171025 18:34:23.362"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:23.363" starttime="20171025 18:34:23.362"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:23.363" starttime="20171025 18:34:23.360"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:23.363" starttime="20171025 18:34:23.360"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:34:23.503" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:34:23.503" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:23.503" starttime="20171025 18:34:23.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:34:23.505" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:34:23.505" starttime="20171025 18:34:23.505"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:34:23.506" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:34:23.507" starttime="20171025 18:34:23.506"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:23.507" starttime="20171025 18:34:23.506"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:23.507" starttime="20171025 18:34:23.504"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:23.507" starttime="20171025 18:34:23.504"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:34:23.507" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:34:23.507" starttime="20171025 18:34:23.507"></status>
</kw>
<msg timestamp="20171025 18:34:23.512" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:23.512" starttime="20171025 18:34:23.171"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:34:23.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:23.513" starttime="20171025 18:34:23.513"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:34:23.514" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:34:23.514" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:34:23.514" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:34:23.514" starttime="20171025 18:34:23.514"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:23.514" starttime="20171025 18:34:23.170"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:34:33.536" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:34:33.537" starttime="20171025 18:34:33.535"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:34:33.537" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:34:33.537" starttime="20171025 18:34:33.537"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:34:33.538" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:34:33.538" starttime="20171025 18:34:33.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:34:33.539" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:34:33.539" starttime="20171025 18:34:33.538"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:34:33.716" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:34:33.716" starttime="20171025 18:34:33.540"></status>
</kw>
<msg timestamp="20171025 18:34:33.716" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:34:33.716" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:33.716" starttime="20171025 18:34:33.539"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:34:33.717" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:33.717" starttime="20171025 18:34:33.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:34:33.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:33.718" starttime="20171025 18:34:33.717"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:33.718" starttime="20171025 18:34:33.535"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:33.718" starttime="20171025 18:34:33.534"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:33.718" starttime="20171025 18:34:33.533"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:34:33.719" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:34:33.719" starttime="20171025 18:34:33.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:34:33.721" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:34:33.721" starttime="20171025 18:34:33.721"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:34:33.722" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:34:33.722" starttime="20171025 18:34:33.722"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:33.723" starttime="20171025 18:34:33.721"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:33.723" starttime="20171025 18:34:33.720"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:33.723" starttime="20171025 18:34:33.719"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:34:34.810" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:34:34.810" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:34.810" starttime="20171025 18:34:33.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:34:34.812" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:34:34.813" starttime="20171025 18:34:34.812"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:34:34.814" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:34:34.814" starttime="20171025 18:34:34.813"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:34.814" starttime="20171025 18:34:34.813"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:34.814" starttime="20171025 18:34:34.811"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:34.814" starttime="20171025 18:34:34.811"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:34:34.814" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:34:34.815" starttime="20171025 18:34:34.814"></status>
</kw>
<msg timestamp="20171025 18:34:34.815" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:34.815" starttime="20171025 18:34:33.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:34:34.816" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:34.816" starttime="20171025 18:34:34.816"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:34:34.817" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:34:34.817" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:34:34.817" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:34:34.817" starttime="20171025 18:34:34.817"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:34.818" starttime="20171025 18:34:33.532"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:34:44.839" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:34:44.840" starttime="20171025 18:34:44.839"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:34:44.840" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:34:44.840" starttime="20171025 18:34:44.840"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:34:44.841" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:34:44.841" starttime="20171025 18:34:44.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:34:44.842" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:34:44.842" starttime="20171025 18:34:44.841"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:34:45.357" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:34:45.357" starttime="20171025 18:34:44.843"></status>
</kw>
<msg timestamp="20171025 18:34:45.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:34:45.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:45.358" starttime="20171025 18:34:44.842"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:34:45.358" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:45.359" starttime="20171025 18:34:45.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:34:45.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:45.359" starttime="20171025 18:34:45.359"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:45.360" starttime="20171025 18:34:44.838"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:45.360" starttime="20171025 18:34:44.838"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:45.360" starttime="20171025 18:34:44.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:34:45.360" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:34:45.361" starttime="20171025 18:34:45.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:34:45.363" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:34:45.363" starttime="20171025 18:34:45.362"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:34:45.364" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:34:45.364" starttime="20171025 18:34:45.364"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:45.364" starttime="20171025 18:34:45.363"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:45.364" starttime="20171025 18:34:45.361"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:45.364" starttime="20171025 18:34:45.361"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:34:45.848" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:34:45.848" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:45.848" starttime="20171025 18:34:45.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:34:45.853" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:34:45.853" starttime="20171025 18:34:45.850"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:34:45.854" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:34:45.854" starttime="20171025 18:34:45.854"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:45.854" starttime="20171025 18:34:45.853"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:45.855" starttime="20171025 18:34:45.849"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:45.855" starttime="20171025 18:34:45.848"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:34:45.860" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:34:45.860" starttime="20171025 18:34:45.860"></status>
</kw>
<msg timestamp="20171025 18:34:45.861" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:45.861" starttime="20171025 18:34:44.836"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:34:45.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:45.861" starttime="20171025 18:34:45.861"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:34:45.862" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:34:45.862" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:34:45.862" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:34:45.862" starttime="20171025 18:34:45.862"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:45.863" starttime="20171025 18:34:44.835"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:34:55.884" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:34:55.885" starttime="20171025 18:34:55.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:34:55.885" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:34:55.885" starttime="20171025 18:34:55.885"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:34:55.886" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:34:55.886" starttime="20171025 18:34:55.886"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:34:55.887" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:34:55.887" starttime="20171025 18:34:55.886"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:34:56.574" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:34:56.574" starttime="20171025 18:34:55.888"></status>
</kw>
<msg timestamp="20171025 18:34:56.574" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:34:56.574" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:56.574" starttime="20171025 18:34:55.887"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:34:56.575" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:56.575" starttime="20171025 18:34:56.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:34:56.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:56.576" starttime="20171025 18:34:56.576"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:56.576" starttime="20171025 18:34:55.883"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:56.576" starttime="20171025 18:34:55.883"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:56.576" starttime="20171025 18:34:55.882"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:34:56.577" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:34:56.577" starttime="20171025 18:34:56.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:34:56.580" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:34:56.580" starttime="20171025 18:34:56.579"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:34:56.581" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:34:56.581" starttime="20171025 18:34:56.581"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:56.581" starttime="20171025 18:34:56.580"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:56.581" starttime="20171025 18:34:56.578"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:56.581" starttime="20171025 18:34:56.577"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:34:56.715" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:34:56.715" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:56.715" starttime="20171025 18:34:56.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:34:56.717" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:34:56.717" starttime="20171025 18:34:56.716"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:34:56.718" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:34:56.718" starttime="20171025 18:34:56.718"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:56.718" starttime="20171025 18:34:56.717"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:56.718" starttime="20171025 18:34:56.716"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:56.718" starttime="20171025 18:34:56.715"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:34:56.719" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:34:56.719" starttime="20171025 18:34:56.719"></status>
</kw>
<msg timestamp="20171025 18:34:56.719" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:34:56.719" starttime="20171025 18:34:55.881"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:34:56.720" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:34:56.720" starttime="20171025 18:34:56.719"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:34:56.721" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:34:56.721" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:34:56.721" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:34:56.721" starttime="20171025 18:34:56.720"></status>
</kw>
<status status="PASS" endtime="20171025 18:34:56.721" starttime="20171025 18:34:55.880"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:35:06.742" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:35:06.742" starttime="20171025 18:35:06.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:35:06.744" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:35:06.745" starttime="20171025 18:35:06.744"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:35:06.745" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:35:06.745" starttime="20171025 18:35:06.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:35:06.746" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:35:06.746" starttime="20171025 18:35:06.746"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:35:06.927" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:35:06.927" starttime="20171025 18:35:06.747"></status>
</kw>
<msg timestamp="20171025 18:35:06.927" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:35:06.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:06.927" starttime="20171025 18:35:06.746"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:35:06.928" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:06.928" starttime="20171025 18:35:06.928"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:06.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:06.929" starttime="20171025 18:35:06.929"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:06.929" starttime="20171025 18:35:06.741"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:06.929" starttime="20171025 18:35:06.741"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:06.929" starttime="20171025 18:35:06.740"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:35:06.930" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:35:06.930" starttime="20171025 18:35:06.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:06.932" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:06.932" starttime="20171025 18:35:06.932"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:06.933" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:06.933" starttime="20171025 18:35:06.933"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:06.934" starttime="20171025 18:35:06.933"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:06.934" starttime="20171025 18:35:06.931"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:06.934" starttime="20171025 18:35:06.930"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:35:07.068" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:35:07.068" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:07.069" starttime="20171025 18:35:06.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:07.071" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:35:07.071" starttime="20171025 18:35:07.070"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:07.072" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:35:07.072" starttime="20171025 18:35:07.071"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:07.072" starttime="20171025 18:35:07.071"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:07.072" starttime="20171025 18:35:07.069"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:07.072" starttime="20171025 18:35:07.069"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:35:07.073" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:35:07.073" starttime="20171025 18:35:07.073"></status>
</kw>
<msg timestamp="20171025 18:35:07.073" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:07.073" starttime="20171025 18:35:06.739"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:07.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:07.074" starttime="20171025 18:35:07.073"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:35:07.074" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:35:07.075" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:35:07.075" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:35:07.075" starttime="20171025 18:35:07.074"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:07.075" starttime="20171025 18:35:06.738"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:35:17.096" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:35:17.098" starttime="20171025 18:35:17.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:35:17.099" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:35:17.099" starttime="20171025 18:35:17.098"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:35:17.099" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:35:17.099" starttime="20171025 18:35:17.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:35:17.100" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:35:17.100" starttime="20171025 18:35:17.100"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:35:18.054" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:35:18.054" starttime="20171025 18:35:17.101"></status>
</kw>
<msg timestamp="20171025 18:35:18.054" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:35:18.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:18.055" starttime="20171025 18:35:17.100"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:35:18.055" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:18.055" starttime="20171025 18:35:18.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:18.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:18.056" starttime="20171025 18:35:18.056"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:18.057" starttime="20171025 18:35:17.095"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:18.057" starttime="20171025 18:35:17.095"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:18.057" starttime="20171025 18:35:17.094"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:35:18.058" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:35:18.058" starttime="20171025 18:35:18.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:18.061" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:18.061" starttime="20171025 18:35:18.060"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:18.063" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:18.063" starttime="20171025 18:35:18.062"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:18.063" starttime="20171025 18:35:18.062"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:18.063" starttime="20171025 18:35:18.059"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:18.063" starttime="20171025 18:35:18.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:35:18.823" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:35:18.823" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:18.823" starttime="20171025 18:35:18.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:18.825" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:35:18.825" starttime="20171025 18:35:18.825"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:18.826" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:35:18.827" starttime="20171025 18:35:18.826"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:18.827" starttime="20171025 18:35:18.826"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:18.827" starttime="20171025 18:35:18.824"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:18.827" starttime="20171025 18:35:18.824"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:35:18.827" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:35:18.827" starttime="20171025 18:35:18.827"></status>
</kw>
<msg timestamp="20171025 18:35:18.828" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:18.828" starttime="20171025 18:35:17.093"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:18.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:18.828" starttime="20171025 18:35:18.828"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:35:18.829" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:35:18.829" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:35:18.829" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:35:18.829" starttime="20171025 18:35:18.829"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:18.830" starttime="20171025 18:35:17.093"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:35:28.851" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:35:28.852" starttime="20171025 18:35:28.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:35:28.853" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:35:28.853" starttime="20171025 18:35:28.852"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:35:28.853" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:35:28.853" starttime="20171025 18:35:28.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:35:28.854" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:35:28.854" starttime="20171025 18:35:28.854"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:35:29.031" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:35:29.032" starttime="20171025 18:35:28.855"></status>
</kw>
<msg timestamp="20171025 18:35:29.032" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:35:29.032" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:29.032" starttime="20171025 18:35:28.854"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:35:29.033" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:29.033" starttime="20171025 18:35:29.032"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:29.033" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:29.033" starttime="20171025 18:35:29.033"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:29.033" starttime="20171025 18:35:28.850"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:29.034" starttime="20171025 18:35:28.850"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:29.034" starttime="20171025 18:35:28.848"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:35:29.034" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:35:29.034" starttime="20171025 18:35:29.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:29.037" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:29.037" starttime="20171025 18:35:29.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:29.038" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:29.038" starttime="20171025 18:35:29.037"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:29.038" starttime="20171025 18:35:29.037"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:29.038" starttime="20171025 18:35:29.035"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:29.038" starttime="20171025 18:35:29.035"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:35:29.170" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:35:29.170" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:29.170" starttime="20171025 18:35:29.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:29.173" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:35:29.173" starttime="20171025 18:35:29.172"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:29.174" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:35:29.174" starttime="20171025 18:35:29.173"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:29.174" starttime="20171025 18:35:29.173"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:29.174" starttime="20171025 18:35:29.171"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:29.174" starttime="20171025 18:35:29.171"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:35:29.175" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:35:29.175" starttime="20171025 18:35:29.175"></status>
</kw>
<msg timestamp="20171025 18:35:29.175" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:29.175" starttime="20171025 18:35:28.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:29.176" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:29.176" starttime="20171025 18:35:29.176"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:35:29.177" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:35:29.177" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:35:29.177" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:35:29.177" starttime="20171025 18:35:29.176"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:29.177" starttime="20171025 18:35:28.847"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:35:39.199" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:35:39.199" starttime="20171025 18:35:39.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:35:39.200" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:35:39.200" starttime="20171025 18:35:39.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:35:39.201" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:35:39.201" starttime="20171025 18:35:39.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:35:39.201" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:35:39.202" starttime="20171025 18:35:39.201"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:35:39.377" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:35:39.377" starttime="20171025 18:35:39.202"></status>
</kw>
<msg timestamp="20171025 18:35:39.377" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:35:39.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:39.377" starttime="20171025 18:35:39.202"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:35:39.378" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:39.378" starttime="20171025 18:35:39.378"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:39.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:39.379" starttime="20171025 18:35:39.378"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:39.379" starttime="20171025 18:35:39.198"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:39.379" starttime="20171025 18:35:39.197"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:39.379" starttime="20171025 18:35:39.196"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:35:39.380" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:35:39.380" starttime="20171025 18:35:39.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:39.383" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:39.383" starttime="20171025 18:35:39.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:39.384" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:39.384" starttime="20171025 18:35:39.383"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:39.384" starttime="20171025 18:35:39.383"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:39.384" starttime="20171025 18:35:39.381"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:39.384" starttime="20171025 18:35:39.380"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:35:39.517" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:35:39.517" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:39.517" starttime="20171025 18:35:39.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:39.519" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171025 18:35:39.519" starttime="20171025 18:35:39.519"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:39.520" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:35:39.520" starttime="20171025 18:35:39.520"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:39.520" starttime="20171025 18:35:39.519"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:39.520" starttime="20171025 18:35:39.518"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:39.521" starttime="20171025 18:35:39.517"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:35:39.521" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:35:39.521" starttime="20171025 18:35:39.521"></status>
</kw>
<msg timestamp="20171025 18:35:39.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:39.521" starttime="20171025 18:35:39.196"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:39.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:39.522" starttime="20171025 18:35:39.522"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:35:39.523" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/a5f1f9de", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:35:39.523" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:35:39.523" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:35:39.523" starttime="20171025 18:35:39.522"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:39.523" starttime="20171025 18:35:39.195"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/a5f1f9de</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:35:49.545" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:35:49.545" starttime="20171025 18:35:49.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:35:49.546" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:35:49.546" starttime="20171025 18:35:49.545"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:35:49.547" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:35:49.547" starttime="20171025 18:35:49.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:35:49.547" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:35:49.547" starttime="20171025 18:35:49.547"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:35:49.727" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:35:49.727" starttime="20171025 18:35:49.548"></status>
</kw>
<msg timestamp="20171025 18:35:49.727" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:35:49.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:49.727" starttime="20171025 18:35:49.548"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:35:49.728" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:49.728" starttime="20171025 18:35:49.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:49.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:49.729" starttime="20171025 18:35:49.728"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:49.729" starttime="20171025 18:35:49.544"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:49.729" starttime="20171025 18:35:49.543"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:49.729" starttime="20171025 18:35:49.542"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:35:49.730" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:35:49.730" starttime="20171025 18:35:49.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:49.732" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:49.732" starttime="20171025 18:35:49.731"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:49.733" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:49.733" starttime="20171025 18:35:49.733"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:49.733" starttime="20171025 18:35:49.732"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:49.734" starttime="20171025 18:35:49.731"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:49.734" starttime="20171025 18:35:49.730"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:35:49.846" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:35:49.846" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:49.846" starttime="20171025 18:35:49.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:49.848" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/a5f1f9de", 
    "Priority": 0, 
    "Purpose": "xyz.o...</msg>
<status status="PASS" endtime="20171025 18:35:49.848" starttime="20171025 18:35:49.847"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:49.849" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/a5f1f9de", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:35:49.849" starttime="20171025 18:35:49.849"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:49.849" starttime="20171025 18:35:49.848"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:49.849" starttime="20171025 18:35:49.847"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:49.849" starttime="20171025 18:35:49.846"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:35:49.854" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:35:49.854" starttime="20171025 18:35:49.850"></status>
</kw>
<msg timestamp="20171025 18:35:49.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:49.854" starttime="20171025 18:35:49.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:49.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:49.855" starttime="20171025 18:35:49.854"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:35:49.855" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/a5f1f9de", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:35:49.855" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:35:49.856" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:35:49.856" starttime="20171025 18:35:49.855"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:49.856" starttime="20171025 18:35:49.541"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:49.856" starttime="20171025 18:32:32.813"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:35:49.859" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:35:49.860" starttime="20171025 18:35:49.859"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:35:49.861" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:35:49.861" starttime="20171025 18:35:49.860"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:35:49.862" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:35:49.862" starttime="20171025 18:35:49.861"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:35:49.862" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:35:49.862" starttime="20171025 18:35:49.862"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:35:50.059" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:35:50.059" starttime="20171025 18:35:49.863"></status>
</kw>
<msg timestamp="20171025 18:35:50.060" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:35:50.060" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.060" starttime="20171025 18:35:49.863"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:35:50.060" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.061" starttime="20171025 18:35:50.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:50.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.061" starttime="20171025 18:35:50.061"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.061" starttime="20171025 18:35:49.858"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.062" starttime="20171025 18:35:49.858"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.062" starttime="20171025 18:35:49.857"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:35:50.062" level="INFO">${base_uri} = /xyz/openbmc_project/software/a5f1f9de</msg>
<status status="PASS" endtime="20171025 18:35:50.062" starttime="20171025 18:35:50.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:50.065" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:50.065" starttime="20171025 18:35:50.064"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:50.066" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/a5f1f9de, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:50.066" starttime="20171025 18:35:50.065"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.066" starttime="20171025 18:35:50.065"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.066" starttime="20171025 18:35:50.063"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.066" starttime="20171025 18:35:50.063"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:35:50.206" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/a5f1f9de, headers=None json=None</msg>
<msg timestamp="20171025 18:35:50.207" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.207" starttime="20171025 18:35:50.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:50.209" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/a5f1f9de", 
    "Priority": 0, 
    "Purpose": "xyz.o...</msg>
<status status="PASS" endtime="20171025 18:35:50.209" starttime="20171025 18:35:50.208"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:50.210" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/a5f1f9de", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:35:50.210" starttime="20171025 18:35:50.209"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.210" starttime="20171025 18:35:50.209"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.210" starttime="20171025 18:35:50.208"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.210" starttime="20171025 18:35:50.207"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:35:50.211" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:35:50.211" starttime="20171025 18:35:50.210"></status>
</kw>
<msg timestamp="20171025 18:35:50.211" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.211" starttime="20171025 18:35:49.857"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:50.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.212" starttime="20171025 18:35:50.212"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:35:50.213" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/a5f1f9de", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-201-g8ebdd03", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:35:50.213" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:35:50.213" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171025 18:35:50.213" starttime="20171025 18:35:50.212"></status>
</kw>
<msg timestamp="20171025 18:35:50.213" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20171025 18:35:50.213" starttime="20171025 18:35:49.856"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20171025 18:35:50.214" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.214" starttime="20171025 18:35:50.213"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.214" starttime="20171025 18:32:02.941"></status>
</kw>
<kw name="OBMC Reboot (off)" library="boot_utils">
<doc>Do "OBMC Reboot (off)" boot test.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=OBMC Reboot (off)</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:35:50.215" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=OBMC Reboot (off)  loc_stack_mode=normal  loc_quiet=0</msg>
<status status="PASS" endtime="20171025 18:35:50.216" starttime="20171025 18:35:50.215"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=OBMC Reboot (off)</arg>
<arg>loc_stack_mode=normal</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:35:50.222" starttime="20171025 18:35:50.222"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171025 18:35:50.224" level="INFO">${boot_stack} = OBMC Reboot (off)</msg>
<msg timestamp="20171025 18:35:50.224" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171025 18:35:50.225" level="INFO">${quiet} = 0</msg>
<msg timestamp="20171025 18:35:50.505" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171025 18:35:50.514" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171025 18:35:50.537" starttime="20171025 18:35:50.535"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:35:50.538" starttime="20171025 18:35:50.538"></status>
</kw>
<msg timestamp="20171025 18:35:50.538" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171025 18:35:50.538" starttime="20171025 18:35:50.537"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171025 18:35:50.550" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171025 18:35:50.550" starttime="20171025 18:35:50.550"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:35:50.552" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171025 18:35:50.552" starttime="20171025 18:35:50.552"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:35:50.557" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:35:50.561" starttime="20171025 18:35:50.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:35:50.562" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:35:50.562" starttime="20171025 18:35:50.561"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:35:50.562" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:35:50.563" starttime="20171025 18:35:50.562"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:35:50.563" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:35:50.563" starttime="20171025 18:35:50.563"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:35:50.747" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:35:50.747" starttime="20171025 18:35:50.564"></status>
</kw>
<msg timestamp="20171025 18:35:50.747" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:35:50.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.748" starttime="20171025 18:35:50.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:35:50.748" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.749" starttime="20171025 18:35:50.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:50.749" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.749" starttime="20171025 18:35:50.749"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.750" starttime="20171025 18:35:50.555"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.750" starttime="20171025 18:35:50.554"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.750" starttime="20171025 18:35:50.553"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:35:50.750" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171025 18:35:50.750" starttime="20171025 18:35:50.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:35:50.751" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:35:50.751" starttime="20171025 18:35:50.751"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:35:50.752" starttime="20171025 18:35:50.751"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:50.754" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171025 18:35:50.754" starttime="20171025 18:35:50.753"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:50.755" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171025 18:35:50.755" starttime="20171025 18:35:50.754"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.755" starttime="20171025 18:35:50.754"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.755" starttime="20171025 18:35:50.752"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:35:50.893" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171025 18:35:50.893" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.893" starttime="20171025 18:35:50.755"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:50.894" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:35:50.894" starttime="20171025 18:35:50.894"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:50.900" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:35:50.900" starttime="20171025 18:35:50.899"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.900" starttime="20171025 18:35:50.894"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.900" starttime="20171025 18:35:50.893"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:35:50.901" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:35:50.901" starttime="20171025 18:35:50.901"></status>
</kw>
<msg timestamp="20171025 18:35:50.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.901" starttime="20171025 18:35:50.552"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:50.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:50.902" starttime="20171025 18:35:50.902"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171025 18:35:50.903" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171025 18:35:50.903" starttime="20171025 18:35:50.902"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.903" starttime="20171025 18:35:50.551"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.903" starttime="20171025 18:35:50.549"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:50.903" starttime="20171025 18:35:50.539"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171025 18:35:50.905" starttime="20171025 18:35:50.904"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:35:50.906" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171025 18:35:50.906" starttime="20171025 18:35:50.905"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:35:50.910" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:35:50.910" starttime="20171025 18:35:50.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:35:50.911" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:35:50.911" starttime="20171025 18:35:50.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:35:50.912" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:35:50.912" starttime="20171025 18:35:50.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:35:50.913" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:35:50.913" starttime="20171025 18:35:50.913"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:35:51.113" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:35:51.113" starttime="20171025 18:35:50.914"></status>
</kw>
<msg timestamp="20171025 18:35:51.113" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:35:51.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.113" starttime="20171025 18:35:50.913"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:35:51.114" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.114" starttime="20171025 18:35:51.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:51.115" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.115" starttime="20171025 18:35:51.114"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.115" starttime="20171025 18:35:50.909"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.115" starttime="20171025 18:35:50.909"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.115" starttime="20171025 18:35:50.908"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:35:51.116" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171025 18:35:51.116" starttime="20171025 18:35:51.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:51.119" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:51.119" starttime="20171025 18:35:51.118"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:51.121" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:51.121" starttime="20171025 18:35:51.120"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.121" starttime="20171025 18:35:51.119"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.121" starttime="20171025 18:35:51.117"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.121" starttime="20171025 18:35:51.116"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:35:51.186" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171025 18:35:51.186" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.186" starttime="20171025 18:35:51.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:51.188" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:35:51.188" starttime="20171025 18:35:51.188"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:51.189" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:35:51.189" starttime="20171025 18:35:51.189"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.190" starttime="20171025 18:35:51.188"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.190" starttime="20171025 18:35:51.187"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.190" starttime="20171025 18:35:51.187"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:35:51.191" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:35:51.191" starttime="20171025 18:35:51.191"></status>
</kw>
<msg timestamp="20171025 18:35:51.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.191" starttime="20171025 18:35:50.907"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:51.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.192" starttime="20171025 18:35:51.192"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:35:51.193" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:35:51.193" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:35:51.194" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171025 18:35:51.194" starttime="20171025 18:35:51.193"></status>
</kw>
<msg timestamp="20171025 18:35:51.194" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171025 18:35:51.194" starttime="20171025 18:35:50.907"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.194" starttime="20171025 18:35:50.906"></status>
</kw>
<msg timestamp="20171025 18:35:51.194" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171025 18:35:51.194" starttime="20171025 18:35:50.906"></status>
</kw>
<msg timestamp="20171025 18:35:51.195" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171025 18:35:51.195" starttime="20171025 18:35:50.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171025 18:35:51.196" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.196" starttime="20171025 18:35:51.195"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.196" starttime="20171025 18:35:50.531"></status>
</kw>
<msg timestamp="20171025 18:35:51.205" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171025 18:35:51.210" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171025 18:35:51.210" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171025 18:35:51.210" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:35:51.250" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:35:51.251" starttime="20171025 18:35:51.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:35:51.251" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:35:51.251" starttime="20171025 18:35:51.251"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:35:51.252" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:35:51.252" starttime="20171025 18:35:51.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:35:51.253" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:35:51.253" starttime="20171025 18:35:51.253"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:35:51.498" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:35:51.498" starttime="20171025 18:35:51.254"></status>
</kw>
<msg timestamp="20171025 18:35:51.498" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:35:51.498" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.499" starttime="20171025 18:35:51.253"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:35:51.499" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.499" starttime="20171025 18:35:51.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:51.500" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.500" starttime="20171025 18:35:51.500"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.500" starttime="20171025 18:35:51.248"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.500" starttime="20171025 18:35:51.248"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.500" starttime="20171025 18:35:51.247"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:35:51.501" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171025 18:35:51.501" starttime="20171025 18:35:51.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:51.503" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:51.503" starttime="20171025 18:35:51.503"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:51.504" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171025 18:35:51.505" starttime="20171025 18:35:51.504"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.505" starttime="20171025 18:35:51.504"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.505" starttime="20171025 18:35:51.502"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.505" starttime="20171025 18:35:51.502"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:35:51.711" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:35:51.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.711" starttime="20171025 18:35:51.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:35:51.713" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171025 18:35:51.713" starttime="20171025 18:35:51.713"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:35:51.714" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:35:51.714" starttime="20171025 18:35:51.714"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.714" starttime="20171025 18:35:51.713"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.715" starttime="20171025 18:35:51.712"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.715" starttime="20171025 18:35:51.711"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:35:51.715" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:35:51.715" starttime="20171025 18:35:51.715"></status>
</kw>
<msg timestamp="20171025 18:35:51.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.715" starttime="20171025 18:35:51.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:35:51.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:35:51.716" starttime="20171025 18:35:51.716"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:35:51.717" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:35:51.717" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:35:51.717" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171025 18:35:51.717" starttime="20171025 18:35:51.717"></status>
</kw>
<status status="PASS" endtime="20171025 18:35:51.717" starttime="20171025 18:35:51.241"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<msg timestamp="20171025 18:35:51.760" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/sbin/reboot</arg>
<arg>fork=${1}</arg>
</arguments>
<msg timestamp="20171025 18:35:51.777" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:35:51.777" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20171025 18:35:51.788" starttime="20171025 18:35:51.761"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:35:55.824" level="FAIL">
#(UTC) 2017/10/25 18:35:55.821304 -    4.021512 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171025 18:35:55.825" starttime="20171025 18:35:51.811"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:35:59.843" level="FAIL">
#(UTC) 2017/10/25 18:35:59.840429 -    4.019125 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171025 18:35:59.844" starttime="20171025 18:35:55.828"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:36:03.877" level="FAIL">
#(UTC) 2017/10/25 18:36:03.865805 -    4.025376 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171025 18:36:03.880" starttime="20171025 18:35:59.847"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:36:07.907" level="FAIL">
#(UTC) 2017/10/25 18:36:07.904588 -    4.038783 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171025 18:36:07.909" starttime="20171025 18:36:03.892"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:36:12.928" level="FAIL">
#(UTC) 2017/10/25 18:36:12.925453 -    5.020865 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             60
</msg>
<status status="FAIL" endtime="20171025 18:36:12.929" starttime="20171025 18:36:07.911"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:36:17.945" starttime="20171025 18:36:12.931"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:36:22.998" level="FAIL">
#(UTC) 2017/10/25 18:36:22.995589 -    5.028230 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171025 18:36:22.998" starttime="20171025 18:36:17.977"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:36:28.041" level="FAIL">
#(UTC) 2017/10/25 18:36:28.028201 -    5.032612 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171025 18:36:28.047" starttime="20171025 18:36:23.000"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:36:33.105" level="FAIL">
#(UTC) 2017/10/25 18:36:33.090860 -    5.062659 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171025 18:36:33.109" starttime="20171025 18:36:28.060"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:36:38.141" level="FAIL">
#(UTC) 2017/10/25 18:36:38.138152 -    5.047292 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171025 18:36:38.142" starttime="20171025 18:36:33.123"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:36:43.158" level="FAIL">
#(UTC) 2017/10/25 18:36:43.155447 -    5.017295 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171025 18:36:43.159" starttime="20171025 18:36:38.144"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:36:48.175" level="FAIL">
#(UTC) 2017/10/25 18:36:48.171998 -    5.016551 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171025 18:36:48.176" starttime="20171025 18:36:43.162"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:36:53.193" level="FAIL">
#(UTC) 2017/10/25 18:36:53.189897 -    5.017899 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171025 18:36:53.194" starttime="20171025 18:36:48.178"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:36:58.236" level="FAIL">
#(UTC) 2017/10/25 18:36:58.223361 -    5.033464 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171025 18:36:58.241" starttime="20171025 18:36:53.197"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:37:03.294" level="FAIL">
#(UTC) 2017/10/25 18:37:03.281263 -    5.057902 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171025 18:37:03.300" starttime="20171025 18:36:58.254"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:37:08.332" level="FAIL">
#(UTC) 2017/10/25 18:37:08.329497 -    5.048234 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171025 18:37:08.333" starttime="20171025 18:37:03.313"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:37:13.353" level="FAIL">
#(UTC) 2017/10/25 18:37:13.346882 -    5.017385 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             80
</msg>
<status status="FAIL" endtime="20171025 18:37:13.361" starttime="20171025 18:37:08.336"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171025 18:37:18.390" level="FAIL">
#(UTC) 2017/10/25 18:37:18.386753 -    5.039871 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             80
</msg>
<status status="FAIL" endtime="20171025 18:37:18.391" starttime="20171025 18:37:13.373"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:37:22.408" starttime="20171025 18:37:18.393"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>read uptime filler 2&gt;/dev/null &lt; /proc/uptime &amp;&amp; [ ! -z "\${uptime}" ] &amp;&amp; echo \${uptime}</arg>
<arg>quiet=1</arg>
</arguments>
<msg timestamp="20171025 18:37:22.436" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:37:22.437" level="INFO">Executing command 'read uptime filler 2&gt;/dev/null &lt; /proc/uptime &amp;&amp; [ ! -z "${uptime}" ] &amp;&amp; echo ${uptime}'.</msg>
<msg timestamp="20171025 18:37:22.438" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:37:22.438" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171025 18:37:29.239" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171025 18:37:29.239" level="INFO">Executing command 'read uptime filler 2&gt;/dev/null &lt; /proc/uptime &amp;&amp; [ ! -z "${uptime}" ] &amp;&amp; echo ${uptime}'.</msg>
<msg timestamp="20171025 18:37:29.286" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:37:29.294" starttime="20171025 18:37:22.427"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:37:29.419" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:37:29.420" starttime="20171025 18:37:29.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:37:29.420" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:37:29.420" starttime="20171025 18:37:29.420"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:37:29.421" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:37:29.421" starttime="20171025 18:37:29.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:37:29.422" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:37:29.422" starttime="20171025 18:37:29.421"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:37:39.434" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171025 18:37:39.434" starttime="20171025 18:37:29.423"></status>
</kw>
<msg timestamp="20171025 18:37:39.434" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171025 18:37:39.434" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171025 18:37:39.434" starttime="20171025 18:37:29.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:37:39.435" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171025 18:37:39.435" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171025 18:37:39.435" starttime="20171025 18:37:39.435"></status>
</kw>
<status status="FAIL" endtime="20171025 18:37:39.436" starttime="20171025 18:37:29.418"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:37:59.438" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:37:59.438" starttime="20171025 18:37:59.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:37:59.439" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:37:59.439" starttime="20171025 18:37:59.439"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:37:59.440" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:37:59.440" starttime="20171025 18:37:59.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:37:59.440" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:37:59.440" starttime="20171025 18:37:59.440"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:38:09.457" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171025 18:38:09.457" starttime="20171025 18:37:59.441"></status>
</kw>
<msg timestamp="20171025 18:38:09.457" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171025 18:38:09.457" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171025 18:38:09.457" starttime="20171025 18:37:59.441"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:38:09.458" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171025 18:38:09.459" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171025 18:38:09.459" starttime="20171025 18:38:09.458"></status>
</kw>
<status status="FAIL" endtime="20171025 18:38:09.459" starttime="20171025 18:37:59.436"></status>
</kw>
<msg timestamp="20171025 18:38:09.459" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171025 18:38:09.459" starttime="20171025 18:37:29.417"></status>
</kw>
<status status="FAIL" endtime="20171025 18:38:09.459" starttime="20171025 18:37:29.417"></status>
</kw>
<status status="FAIL" endtime="20171025 18:38:09.459" starttime="20171025 18:37:29.416"></status>
</kw>
<status status="FAIL" endtime="20171025 18:38:09.460" starttime="20171025 18:37:29.415"></status>
</kw>
<msg timestamp="20171025 18:38:09.460" level="FAIL">
#(UTC) 2017/10/25 18:38:09.459815 -   40.057695 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    0
</msg>
<status status="FAIL" endtime="20171025 18:38:09.460" starttime="20171025 18:37:29.413"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:38:11.468" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:38:11.468" starttime="20171025 18:38:11.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:38:11.469" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:38:11.469" starttime="20171025 18:38:11.468"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:38:11.469" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:38:11.469" starttime="20171025 18:38:11.469"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:38:11.470" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:38:11.470" starttime="20171025 18:38:11.470"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:38:21.481" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171025 18:38:21.481" starttime="20171025 18:38:11.471"></status>
</kw>
<msg timestamp="20171025 18:38:21.482" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171025 18:38:21.482" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171025 18:38:21.482" starttime="20171025 18:38:11.470"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:38:21.483" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171025 18:38:21.483" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171025 18:38:21.483" starttime="20171025 18:38:21.482"></status>
</kw>
<status status="FAIL" endtime="20171025 18:38:21.483" starttime="20171025 18:38:11.466"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:38:41.485" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:38:41.486" starttime="20171025 18:38:41.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:38:41.486" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:38:41.486" starttime="20171025 18:38:41.486"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:38:41.487" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:38:41.487" starttime="20171025 18:38:41.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:38:41.488" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:38:41.488" starttime="20171025 18:38:41.487"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:38:42.695" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:38:42.695" starttime="20171025 18:38:41.489"></status>
</kw>
<msg timestamp="20171025 18:38:42.695" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:38:42.695" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:38:42.695" starttime="20171025 18:38:41.488"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:38:42.696" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:38:42.696" starttime="20171025 18:38:42.696"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:38:42.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:38:42.697" starttime="20171025 18:38:42.696"></status>
</kw>
<status status="PASS" endtime="20171025 18:38:42.697" starttime="20171025 18:38:41.484"></status>
</kw>
<status status="PASS" endtime="20171025 18:38:42.697" starttime="20171025 18:38:11.465"></status>
</kw>
<status status="PASS" endtime="20171025 18:38:42.698" starttime="20171025 18:38:11.465"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:38:42.698" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171025 18:38:42.698" starttime="20171025 18:38:42.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:38:42.699" starttime="20171025 18:38:42.699"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:38:43.515" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:38:43.515" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171025 18:38:43.515" starttime="20171025 18:38:42.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:38:43.516" starttime="20171025 18:38:43.516"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:38:43.517" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:38:43.517" starttime="20171025 18:38:43.517"></status>
</kw>
<msg timestamp="20171025 18:38:43.517" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171025 18:38:43.517" starttime="20171025 18:38:11.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:38:43.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171025 18:38:43.518" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171025 18:38:43.518" starttime="20171025 18:38:43.517"></status>
</kw>
<status status="FAIL" endtime="20171025 18:38:43.518" starttime="20171025 18:38:11.463"></status>
</kw>
<msg timestamp="20171025 18:38:43.519" level="FAIL">
#(UTC) 2017/10/25 18:38:43.518483 -   34.058668 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    0
</msg>
<status status="FAIL" endtime="20171025 18:38:43.519" starttime="20171025 18:38:11.461"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:38:45.525" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:38:45.525" starttime="20171025 18:38:45.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:38:45.527" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:38:45.527" starttime="20171025 18:38:45.527"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:38:45.528" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:38:45.528" starttime="20171025 18:38:45.527"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:38:45.528" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:38:45.529" starttime="20171025 18:38:45.528"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:38:46.624" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:38:46.624" starttime="20171025 18:38:45.529"></status>
</kw>
<msg timestamp="20171025 18:38:46.625" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:38:46.625" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:38:46.625" starttime="20171025 18:38:45.529"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:38:46.625" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:38:46.626" starttime="20171025 18:38:46.625"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:38:46.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:38:46.626" starttime="20171025 18:38:46.626"></status>
</kw>
<status status="PASS" endtime="20171025 18:38:46.626" starttime="20171025 18:38:45.524"></status>
</kw>
<status status="PASS" endtime="20171025 18:38:46.626" starttime="20171025 18:38:45.523"></status>
</kw>
<status status="PASS" endtime="20171025 18:38:46.627" starttime="20171025 18:38:45.523"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:38:46.627" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171025 18:38:46.627" starttime="20171025 18:38:46.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:38:46.628" starttime="20171025 18:38:46.628"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:38:48.577" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:38:48.577" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:38:48.577" starttime="20171025 18:38:46.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:38:48.578" starttime="20171025 18:38:48.578"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:38:48.579" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:38:48.579" starttime="20171025 18:38:48.578"></status>
</kw>
<msg timestamp="20171025 18:38:48.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:38:48.579" starttime="20171025 18:38:45.522"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:38:48.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:38:48.580" starttime="20171025 18:38:48.579"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:38:48.580" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:38:48.580" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:38:48.581" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/chassis0': {u'CurrentPowerState': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'RequestedPowerTransition': u'x...</msg>
<status status="PASS" endtime="20171025 18:38:48.581" starttime="20171025 18:38:48.580"></status>
</kw>
<status status="PASS" endtime="20171025 18:38:48.581" starttime="20171025 18:38:45.521"></status>
</kw>
<status status="PASS" endtime="20171025 18:38:48.581" starttime="20171025 18:38:45.520"></status>
</kw>
<msg timestamp="20171025 18:38:48.596" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'host': u'^Off$', u'chassis': u'^Off$', u'operating_system': u'^Inactive$', u'rest': u'^1$', u'boot_progress': u'^Off|Unspecified$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:38:48.618" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:38:48.618" starttime="20171025 18:38:48.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:38:48.619" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:38:48.619" starttime="20171025 18:38:48.619"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:38:48.620" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:38:48.620" starttime="20171025 18:38:48.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:38:48.621" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:38:48.621" starttime="20171025 18:38:48.620"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:38:48.962" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:38:48.962" starttime="20171025 18:38:48.621"></status>
</kw>
<msg timestamp="20171025 18:38:48.962" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:38:48.962" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:38:48.962" starttime="20171025 18:38:48.621"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:38:48.963" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:38:48.963" starttime="20171025 18:38:48.963"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:38:48.964" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:38:48.964" starttime="20171025 18:38:48.963"></status>
</kw>
<status status="PASS" endtime="20171025 18:38:48.964" starttime="20171025 18:38:48.617"></status>
</kw>
<status status="PASS" endtime="20171025 18:38:48.964" starttime="20171025 18:38:48.617"></status>
</kw>
<status status="PASS" endtime="20171025 18:38:48.964" starttime="20171025 18:38:48.616"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:38:48.965" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171025 18:38:48.965" starttime="20171025 18:38:48.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:38:48.966" starttime="20171025 18:38:48.965"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:38:49.557" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:38:49.557" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:38:49.557" starttime="20171025 18:38:48.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:38:49.558" starttime="20171025 18:38:49.558"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:38:49.559" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:38:49.559" starttime="20171025 18:38:49.558"></status>
</kw>
<msg timestamp="20171025 18:38:49.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:38:49.559" starttime="20171025 18:38:48.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:38:49.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:38:49.560" starttime="20171025 18:38:49.559"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:38:49.560" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:38:49.560" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:38:49.561" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/chassis0': {u'CurrentPowerState': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'RequestedPowerTransition': u'x...</msg>
<status status="PASS" endtime="20171025 18:38:49.561" starttime="20171025 18:38:49.560"></status>
</kw>
<status status="PASS" endtime="20171025 18:38:49.561" starttime="20171025 18:38:48.615"></status>
</kw>
<msg timestamp="20171025 18:38:49.562" level="FAIL">
#(UTC) 2017/10/25 18:38:49.561200 -    0.958663 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[host]:                                    
  state[operating_system]:                        
  state[boot_progress]:                           
</msg>
<status status="FAIL" endtime="20171025 18:38:49.562" starttime="20171025 18:38:48.613"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'host': u'^Off$', u'chassis': u'^Off$', u'operating_system': u'^Inactive$', u'rest': u'^1$', u'boot_progress': u'^Off|Unspecified$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:38:59.568" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:38:59.569" starttime="20171025 18:38:59.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:38:59.569" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:38:59.569" starttime="20171025 18:38:59.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:38:59.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:38:59.570" starttime="20171025 18:38:59.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:38:59.571" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:38:59.571" starttime="20171025 18:38:59.570"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:00.528" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:00.528" starttime="20171025 18:38:59.572"></status>
</kw>
<msg timestamp="20171025 18:39:00.528" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:00.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:00.528" starttime="20171025 18:38:59.571"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:00.529" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:00.529" starttime="20171025 18:39:00.529"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:00.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:00.530" starttime="20171025 18:39:00.530"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:00.530" starttime="20171025 18:38:59.567"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:00.530" starttime="20171025 18:38:59.567"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:00.530" starttime="20171025 18:38:59.566"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:00.531" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171025 18:39:00.531" starttime="20171025 18:39:00.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:00.532" starttime="20171025 18:39:00.532"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:04.297" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:39:04.297" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:04.297" starttime="20171025 18:39:00.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:04.298" starttime="20171025 18:39:04.298"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:04.299" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:04.299" starttime="20171025 18:39:04.299"></status>
</kw>
<msg timestamp="20171025 18:39:04.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:04.299" starttime="20171025 18:38:59.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:04.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:04.300" starttime="20171025 18:39:04.299"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:39:04.301" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:39:04.301" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:39:04.301" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171025 18:39:04.301" starttime="20171025 18:39:04.300"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:04.301" starttime="20171025 18:38:59.564"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:04.301" starttime="20171025 18:38:59.562"></status>
</kw>
<msg timestamp="20171025 18:39:04.316" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20171025 18:39:04.316" starttime="20171025 18:35:51.748"></status>
</kw>
<msg timestamp="20171025 18:39:04.333" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171025 18:39:04.338" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171025 18:39:04.344" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171025 18:39:04.350" starttime="20171025 18:39:04.349"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:04.353" starttime="20171025 18:35:50.223"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171025 18:39:04.358" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171025 18:39:04.368" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171025 18:39:04.368" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171025 18:39:04.368" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171025 18:39:04.369" starttime="20171025 18:39:04.354"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:04.369" starttime="20171025 18:35:50.220"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:04.369" starttime="20171025 18:35:50.216"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:04.369" starttime="20171025 18:35:50.214"></status>
</kw>
<kw name="Verify Running BMC Image" library="code_update_utils">
<doc>Verify that the version on the BMC is the same as the</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${tar_version}</var>
</assign>
<msg timestamp="20171025 18:39:04.395" level="INFO">${tar_version} = v1.99.10-201-g8ebdd03</msg>
<status status="PASS" endtime="20171025 18:39:04.396" starttime="20171025 18:39:04.370"></status>
</kw>
<kw name="Get BMC Version" library="utils">
<doc>Returns BMC version from /etc/os-release.</doc>
<assign>
<var>${bmc_version}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171025 18:39:04.398" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171025 18:39:04.398" starttime="20171025 18:39:04.398"></status>
</kw>
<msg timestamp="20171025 18:39:04.398" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171025 18:39:04.398" starttime="20171025 18:39:04.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:04.400" starttime="20171025 18:39:04.399"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:04.400" starttime="20171025 18:39:04.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:04.400" starttime="20171025 18:39:04.400"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171025 18:39:04.402" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171025 18:39:04.402" starttime="20171025 18:39:04.401"></status>
</kw>
<msg timestamp="20171025 18:39:04.402" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171025 18:39:04.402" starttime="20171025 18:39:04.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:04.404" starttime="20171025 18:39:04.403"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:04.404" starttime="20171025 18:39:04.403"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:04.404" starttime="20171025 18:39:04.402"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171025 18:39:04.404" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171025 18:39:06.821" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171025 18:39:06.821" starttime="20171025 18:39:04.404"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:06.821" starttime="20171025 18:39:04.396"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>grep ^VERSION_ID= /etc/os-release | cut -f 2 -d '='</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20171025 18:39:06.822" level="INFO">${cmd} = grep ^VERSION_ID= /etc/os-release | cut -f 2 -d '='</msg>
<status status="PASS" endtime="20171025 18:39:06.822" starttime="20171025 18:39:06.822"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:06.823" level="INFO">Executing command 'grep ^VERSION_ID= /etc/os-release | cut -f 2 -d '=''.</msg>
<msg timestamp="20171025 18:39:07.323" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171025 18:39:07.323" level="INFO">${stdout} = "v1.99.10-196-g61caed6"</msg>
<msg timestamp="20171025 18:39:07.323" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:07.323" starttime="20171025 18:39:06.823"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171025 18:39:07.324" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171025 18:39:07.324" starttime="20171025 18:39:07.324"></status>
</kw>
<msg timestamp="20171025 18:39:07.325" level="INFO">${output} = "v1.99.10-196-g61caed6"</msg>
<status status="PASS" endtime="20171025 18:39:07.325" starttime="20171025 18:39:06.822"></status>
</kw>
<msg timestamp="20171025 18:39:07.325" level="INFO">${bmc_version} = "v1.99.10-196-g61caed6"</msg>
<status status="PASS" endtime="20171025 18:39:07.325" starttime="20171025 18:39:04.396"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${bmc_version}</arg>
<arg>"</arg>
</arguments>
<assign>
<var>${bmc_version}</var>
</assign>
<msg timestamp="20171025 18:39:07.326" level="INFO">${bmc_version} = v1.99.10-196-g61caed6</msg>
<status status="PASS" endtime="20171025 18:39:07.326" starttime="20171025 18:39:07.325"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${tar_version}</arg>
<arg>${bmc_version}</arg>
</arguments>
<msg timestamp="20171025 18:39:07.326" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171025 18:39:07.327" level="FAIL">v1.99.10-201-g8ebdd03 != v1.99.10-196-g61caed6</msg>
<status status="FAIL" endtime="20171025 18:39:07.327" starttime="20171025 18:39:07.326"></status>
</kw>
<status status="FAIL" endtime="20171025 18:39:07.327" starttime="20171025 18:39:04.369"></status>
</kw>
<kw type="teardown" name="REST BMC Code Update Teardown">
<doc>Do code update test teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171025 18:39:07.340" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171025 18:39:07.340" starttime="20171025 18:39:07.340"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171025 18:39:07.350" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171025 18:39:10.351" level="INFO">${RC} = 0</msg>
<msg timestamp="20171025 18:39:10.351" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.835 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.636 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20171025 18:39:10.351" starttime="20171025 18:39:07.341"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.355" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.835 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.636 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.611 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.616 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.611/0.674/0.835/0.096 ms</msg>
<status status="PASS" endtime="20171025 18:39:10.356" starttime="20171025 18:39:10.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:10.356" starttime="20171025 18:39:10.356"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.357" starttime="20171025 18:39:07.339"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171025 18:39:10.371" level="INFO">${cur_time} = 2017-10-25 18:39:10:370675</msg>
<status status="PASS" endtime="20171025 18:39:10.371" starttime="20171025 18:39:10.370"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171025 18:39:10.372" level="INFO">${cur_time} = 20171025183910370675</msg>
<status status="PASS" endtime="20171025 18:39:10.372" starttime="20171025 18:39:10.371"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.372" starttime="20171025 18:39:10.370"></status>
</kw>
<msg timestamp="20171025 18:39:10.378" level="INFO">${FFDC_TIME} = 20171025183910370675</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171025 18:39:10.380" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20171025 18:39:10.380" starttime="20171025 18:39:10.379"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171025 18:39:10.380" level="INFO">${suite_name} = 20171025183910370675_BmcCodeUpdate</msg>
<status status="PASS" endtime="20171025 18:39:10.381" starttime="20171025 18:39:10.380"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171025 18:39:10.381" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171025 18:39:10.381" starttime="20171025 18:39:10.381"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171025 18:39:10.382" level="INFO">${test_name} = 20171025183910370675_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171025 18:39:10.382" starttime="20171025 18:39:10.381"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.382" starttime="20171025 18:39:10.379"></status>
</kw>
<msg timestamp="20171025 18:39:10.382" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/</msg>
<msg timestamp="20171025 18:39:10.383" level="INFO">${FFDC_PREFIX} = 20171025183910370675_</msg>
<msg timestamp="20171025 18:39:10.404" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20171025 18:39:10.405" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.405" starttime="20171025 18:39:10.404"></status>
</kw>
<msg timestamp="20171025 18:39:10.411" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.421" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.421" starttime="20171025 18:39:10.421"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.422" starttime="20171025 18:39:10.420"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.423" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.423" starttime="20171025 18:39:10.422"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.423" starttime="20171025 18:39:10.422"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.424" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.425" starttime="20171025 18:39:10.424"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.425" starttime="20171025 18:39:10.423"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.426" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.426" starttime="20171025 18:39:10.426"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.426" starttime="20171025 18:39:10.425"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.427" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.427" starttime="20171025 18:39:10.427"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.428" starttime="20171025 18:39:10.426"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.429" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.429" starttime="20171025 18:39:10.428"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.429" starttime="20171025 18:39:10.428"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.430" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.430" starttime="20171025 18:39:10.430"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.430" starttime="20171025 18:39:10.429"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.432" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.432" starttime="20171025 18:39:10.432"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.432" starttime="20171025 18:39:10.431"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.434" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.434" starttime="20171025 18:39:10.434"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.434" starttime="20171025 18:39:10.433"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.436" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.436" starttime="20171025 18:39:10.436"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.436" starttime="20171025 18:39:10.435"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.438" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.438" starttime="20171025 18:39:10.437"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.438" starttime="20171025 18:39:10.437"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.439" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.439" starttime="20171025 18:39:10.439"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.439" starttime="20171025 18:39:10.438"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.440" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.440" starttime="20171025 18:39:10.440"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.441" starttime="20171025 18:39:10.439"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171025 18:39:10.451" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:10.451" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:10.451" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171025 18:39:10.682" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171025 18:39:10.691" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171025 18:39:10.691" level="INFO">${stderr} = </msg>
<msg timestamp="20171025 18:39:10.691" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171025 18:39:10.691" starttime="20171025 18:39:10.441"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.692" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171025 18:39:10.692" starttime="20171025 18:39:10.692"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.692" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171025 18:39:10.693" starttime="20171025 18:39:10.692"></status>
</kw>
<msg timestamp="20171025 18:39:10.693" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20171025 18:39:10.693" starttime="20171025 18:39:10.441"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.694" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.694" starttime="20171025 18:39:10.694"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.694" starttime="20171025 18:39:10.693"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.694" starttime="20171025 18:39:10.435"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.696" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.696" starttime="20171025 18:39:10.695"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.696" starttime="20171025 18:39:10.695"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171025 18:39:10.697" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171025 18:39:10.697" starttime="20171025 18:39:10.696"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.699" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.699" starttime="20171025 18:39:10.698"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.699" starttime="20171025 18:39:10.697"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.700" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.700" starttime="20171025 18:39:10.700"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.700" starttime="20171025 18:39:10.699"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.700" starttime="20171025 18:39:10.697"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.701" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.702" starttime="20171025 18:39:10.701"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.702" starttime="20171025 18:39:10.700"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.703" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.703" starttime="20171025 18:39:10.702"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.703" starttime="20171025 18:39:10.702"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.703" starttime="20171025 18:39:10.700"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.704" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.704" starttime="20171025 18:39:10.704"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.705" starttime="20171025 18:39:10.703"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.706" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.706" starttime="20171025 18:39:10.705"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.706" starttime="20171025 18:39:10.705"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.706" starttime="20171025 18:39:10.703"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.706" starttime="20171025 18:39:10.697"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.707" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.707" starttime="20171025 18:39:10.707"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.707" starttime="20171025 18:39:10.706"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.707" starttime="20171025 18:39:10.420"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171025 18:39:10.714" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20171025 18:39:10.714" starttime="20171025 18:39:10.713"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171025 18:39:10.715" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20171025 18:39:10.715" starttime="20171025 18:39:10.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:10.717" starttime="20171025 18:39:10.717"></status>
</kw>
<msg timestamp="20171025 18:39:10.717" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20171025 18:39:10.717" starttime="20171025 18:39:10.716"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:10.719" starttime="20171025 18:39:10.719"></status>
</kw>
<msg timestamp="20171025 18:39:10.720" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:10.720" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171025 18:39:10.720" starttime="20171025 18:39:10.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:10.720" starttime="20171025 18:39:10.720"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171025 18:39:10.736" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171025 18:39:10.736" starttime="20171025 18:39:10.736"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171025 18:39:10.738" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20171025 18:39:10.738" starttime="20171025 18:39:10.737"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.744" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20171025 18:39:10.744" starttime="20171025 18:39:10.738"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.748" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.748" starttime="20171025 18:39:10.747"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.748" starttime="20171025 18:39:10.747"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.749" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.749" starttime="20171025 18:39:10.749"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.750" starttime="20171025 18:39:10.748"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.751" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.751" starttime="20171025 18:39:10.750"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.751" starttime="20171025 18:39:10.750"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:10.752" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:10.753" starttime="20171025 18:39:10.752"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.753" starttime="20171025 18:39:10.751"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.753" starttime="20171025 18:39:10.746"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:10.753" starttime="20171025 18:39:10.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:10.754" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:10.754" starttime="20171025 18:39:10.753"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:10.796" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:10.796" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:10.796" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171025 18:39:15.171" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:15.171" starttime="20171025 18:39:10.772"></status>
</kw>
<msg timestamp="20171025 18:39:15.172" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:15.172" level="INFO">${ret_values} = (u'CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState    : xyz.openbmc_project.State.Host.Host...</msg>
<status status="PASS" endtime="20171025 18:39:15.172" starttime="20171025 18:39:10.754"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:15.173" level="INFO">${stdout} = CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState    : xyz.openbmc_project.State.Host.HostState...</msg>
<status status="PASS" endtime="20171025 18:39:15.173" starttime="20171025 18:39:15.172"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:15.173" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:15.173" starttime="20171025 18:39:15.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.182" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.182" starttime="20171025 18:39:15.181"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.182" starttime="20171025 18:39:15.180"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.182" starttime="20171025 18:39:15.174"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.182" starttime="20171025 18:39:10.745"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.182" starttime="20171025 18:39:10.745"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.182" starttime="20171025 18:39:10.744"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.182" starttime="20171025 18:39:10.737"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.182" starttime="20171025 18:39:10.737"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171025 18:39:15.183" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20171025 18:39:15.183" starttime="20171025 18:39:15.183"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.184" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20171025 18:39:15.184" starttime="20171025 18:39:15.184"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.188" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.188" starttime="20171025 18:39:15.187"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.188" starttime="20171025 18:39:15.187"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.189" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.189" starttime="20171025 18:39:15.189"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.189" starttime="20171025 18:39:15.188"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.191" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.191" starttime="20171025 18:39:15.190"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.191" starttime="20171025 18:39:15.190"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.192" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.193" starttime="20171025 18:39:15.192"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.193" starttime="20171025 18:39:15.191"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.193" starttime="20171025 18:39:15.186"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.193" starttime="20171025 18:39:15.186"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:15.194" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:15.194" starttime="20171025 18:39:15.193"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:15.236" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:15.236" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:15.238" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171025 18:39:15.329" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:15.329" starttime="20171025 18:39:15.212"></status>
</kw>
<msg timestamp="20171025 18:39:15.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:15.330" level="INFO">${ret_values} = (u'20171025175536', u'', 0)</msg>
<status status="PASS" endtime="20171025 18:39:15.330" starttime="20171025 18:39:15.194"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:15.330" level="INFO">${stdout} = 20171025175536</msg>
<status status="PASS" endtime="20171025 18:39:15.331" starttime="20171025 18:39:15.330"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:15.331" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:15.331" starttime="20171025 18:39:15.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.341" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.341" starttime="20171025 18:39:15.340"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.341" starttime="20171025 18:39:15.339"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.341" starttime="20171025 18:39:15.331"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.341" starttime="20171025 18:39:15.185"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.341" starttime="20171025 18:39:15.185"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.345" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.345" starttime="20171025 18:39:15.344"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.345" starttime="20171025 18:39:15.344"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.346" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.346" starttime="20171025 18:39:15.346"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.346" starttime="20171025 18:39:15.345"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.348" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.348" starttime="20171025 18:39:15.347"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.348" starttime="20171025 18:39:15.347"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.349" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.349" starttime="20171025 18:39:15.349"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.349" starttime="20171025 18:39:15.348"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.349" starttime="20171025 18:39:15.343"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.349" starttime="20171025 18:39:15.343"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:15.350" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:15.350" starttime="20171025 18:39:15.350"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:15.391" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:15.391" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:15.392" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171025 18:39:15.815" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:15.816" starttime="20171025 18:39:15.368"></status>
</kw>
<msg timestamp="20171025 18:39:15.816" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:15.816" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-196"\nVERSION_ID="v1.99.10-196-g61caed6"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status status="PASS" endtime="20171025 18:39:15.816" starttime="20171025 18:39:15.350"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:15.817" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-196"
VERSION_ID="v1.99.10-196-g61caed6"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status status="PASS" endtime="20171025 18:39:15.817" starttime="20171025 18:39:15.816"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:15.817" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:15.817" starttime="20171025 18:39:15.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.825" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.825" starttime="20171025 18:39:15.825"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.826" starttime="20171025 18:39:15.824"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.826" starttime="20171025 18:39:15.818"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.826" starttime="20171025 18:39:15.342"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.826" starttime="20171025 18:39:15.341"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.826" starttime="20171025 18:39:15.184"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.826" starttime="20171025 18:39:15.182"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.826" starttime="20171025 18:39:15.182"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171025 18:39:15.827" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20171025 18:39:15.827" starttime="20171025 18:39:15.827"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.828" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20171025 18:39:15.828" starttime="20171025 18:39:15.828"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.831" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.831" starttime="20171025 18:39:15.831"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.831" starttime="20171025 18:39:15.830"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.833" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.833" starttime="20171025 18:39:15.832"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.833" starttime="20171025 18:39:15.832"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.834" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.834" starttime="20171025 18:39:15.834"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.834" starttime="20171025 18:39:15.833"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:15.836" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:15.836" starttime="20171025 18:39:15.835"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.836" starttime="20171025 18:39:15.834"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.836" starttime="20171025 18:39:15.830"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:15.836" starttime="20171025 18:39:15.829"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:15.837" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:15.837" starttime="20171025 18:39:15.836"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:15.878" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:15.878" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:15.879" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171025 18:39:16.358" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:16.359" starttime="20171025 18:39:15.855"></status>
</kw>
<msg timestamp="20171025 18:39:16.359" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:16.359" level="INFO">${ret_values} = (u' 18:39:35 up 2 min,  load average: 5.32, 2.73, 1.07', u'', 0)</msg>
<status status="PASS" endtime="20171025 18:39:16.359" starttime="20171025 18:39:15.837"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:16.360" level="INFO">${stdout} =  18:39:35 up 2 min,  load average: 5.32, 2.73, 1.07</msg>
<status status="PASS" endtime="20171025 18:39:16.360" starttime="20171025 18:39:16.359"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:16.360" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:16.360" starttime="20171025 18:39:16.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:16.368" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:16.369" starttime="20171025 18:39:16.368"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.369" starttime="20171025 18:39:16.367"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.369" starttime="20171025 18:39:16.361"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.369" starttime="20171025 18:39:15.828"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.369" starttime="20171025 18:39:15.828"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:16.372" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:16.372" starttime="20171025 18:39:16.372"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.372" starttime="20171025 18:39:16.371"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:16.374" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:16.374" starttime="20171025 18:39:16.373"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.374" starttime="20171025 18:39:16.372"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:16.375" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:16.375" starttime="20171025 18:39:16.375"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.375" starttime="20171025 18:39:16.374"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:16.376" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:16.376" starttime="20171025 18:39:16.376"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.377" starttime="20171025 18:39:16.375"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.377" starttime="20171025 18:39:16.370"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.377" starttime="20171025 18:39:16.370"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:16.378" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:16.378" starttime="20171025 18:39:16.377"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:16.419" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:16.419" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:16.419" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171025 18:39:16.929" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:16.929" starttime="20171025 18:39:16.395"></status>
</kw>
<msg timestamp="20171025 18:39:16.929" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:16.929" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20171025 18:39:16.929" starttime="20171025 18:39:16.378"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:16.930" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20171025 18:39:16.930" starttime="20171025 18:39:16.930"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:16.931" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:16.931" starttime="20171025 18:39:16.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:16.939" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:16.939" starttime="20171025 18:39:16.939"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.940" starttime="20171025 18:39:16.938"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.940" starttime="20171025 18:39:16.931"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.940" starttime="20171025 18:39:16.369"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.940" starttime="20171025 18:39:16.369"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:16.943" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:16.943" starttime="20171025 18:39:16.943"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.943" starttime="20171025 18:39:16.942"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:16.944" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:16.945" starttime="20171025 18:39:16.944"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.945" starttime="20171025 18:39:16.943"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:16.946" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:16.946" starttime="20171025 18:39:16.946"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.946" starttime="20171025 18:39:16.945"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:16.947" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:16.947" starttime="20171025 18:39:16.947"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.947" starttime="20171025 18:39:16.946"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.948" starttime="20171025 18:39:16.941"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:16.948" starttime="20171025 18:39:16.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:16.948" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:16.948" starttime="20171025 18:39:16.948"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:16.989" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:16.989" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:16.990" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171025 18:39:17.490" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:17.490" starttime="20171025 18:39:16.966"></status>
</kw>
<msg timestamp="20171025 18:39:17.490" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:17.491" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-da78428ac543d6d9ac2493dfa77364eb300a47cb #1 Mon Oct 23 15:28:01 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20171025 18:39:17.491" starttime="20171025 18:39:16.949"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:17.491" level="INFO">${stdout} = Linux witherspoon 4.10.17-da78428ac543d6d9ac2493dfa77364eb300a47cb #1 Mon Oct 23 15:28:01 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20171025 18:39:17.491" starttime="20171025 18:39:17.491"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:17.492" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:17.492" starttime="20171025 18:39:17.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:17.500" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:17.500" starttime="20171025 18:39:17.500"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.500" starttime="20171025 18:39:17.499"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.500" starttime="20171025 18:39:17.492"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.501" starttime="20171025 18:39:16.940"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.501" starttime="20171025 18:39:16.940"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.501" starttime="20171025 18:39:15.828"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.501" starttime="20171025 18:39:15.826"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.501" starttime="20171025 18:39:15.826"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.501" starttime="20171025 18:39:10.736"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.501" starttime="20171025 18:39:10.735"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.501" starttime="20171025 18:39:10.721"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.501" starttime="20171025 18:39:10.717"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.501" starttime="20171025 18:39:10.717"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:17.503" starttime="20171025 18:39:17.503"></status>
</kw>
<msg timestamp="20171025 18:39:17.503" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:17.503" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171025 18:39:17.503" starttime="20171025 18:39:17.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:17.504" starttime="20171025 18:39:17.504"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171025 18:39:17.519" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20171025 18:39:17.519" starttime="20171025 18:39:17.519"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171025 18:39:17.520" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20171025 18:39:17.521" starttime="20171025 18:39:17.520"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:17.521" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20171025 18:39:17.521" starttime="20171025 18:39:17.521"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:17.524" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:17.525" starttime="20171025 18:39:17.524"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:17.526" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:17.526" starttime="20171025 18:39:17.525"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:17.526" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:17.526" starttime="20171025 18:39:17.526"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:17.527" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:17.527" starttime="20171025 18:39:17.527"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:17.707" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:17.707" starttime="20171025 18:39:17.528"></status>
</kw>
<msg timestamp="20171025 18:39:17.707" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:17.707" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:17.707" starttime="20171025 18:39:17.527"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:17.708" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:17.708" starttime="20171025 18:39:17.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:17.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:17.709" starttime="20171025 18:39:17.709"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.710" starttime="20171025 18:39:17.523"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.710" starttime="20171025 18:39:17.523"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:17.710" starttime="20171025 18:39:17.522"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:17.711" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20171025 18:39:17.711" starttime="20171025 18:39:17.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:17.711" starttime="20171025 18:39:17.711"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:22.021" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:39:22.021" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:22.022" starttime="20171025 18:39:17.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:22.022" starttime="20171025 18:39:22.022"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:22.023" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:22.023" starttime="20171025 18:39:22.023"></status>
</kw>
<msg timestamp="20171025 18:39:22.023" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:22.023" starttime="20171025 18:39:17.522"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:22.024" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:22.025" starttime="20171025 18:39:22.024"></status>
</kw>
<msg timestamp="20171025 18:39:22.025" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171025 18:39:22.025" starttime="20171025 18:39:22.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:22.025" starttime="20171025 18:39:22.025"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171025 18:39:22.027" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 6000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 35000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27400, 
      "WarningAlarmHigh": 1, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 25000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 207000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 343, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 1, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 1, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:39:22.027" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171025 18:39:22.027" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "CriticalAlarmHigh": 0,
            "CriticalAlarmLow": 0,
            "CriticalHigh": 180000,
        ...</msg>
<status status="PASS" endtime="20171025 18:39:22.027" starttime="20171025 18:39:22.026"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:22.029" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:22.029" starttime="20171025 18:39:22.028"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:22.029" starttime="20171025 18:39:22.028"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:22.029" starttime="20171025 18:39:17.521"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:22.030" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_OCC_state.txt</msg>
<status status="PASS" endtime="20171025 18:39:22.030" starttime="20171025 18:39:22.030"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:22.033" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:22.033" starttime="20171025 18:39:22.033"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:22.034" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:22.034" starttime="20171025 18:39:22.034"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:22.035" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:22.035" starttime="20171025 18:39:22.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:22.036" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:22.036" starttime="20171025 18:39:22.035"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:22.371" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:22.371" starttime="20171025 18:39:22.036"></status>
</kw>
<msg timestamp="20171025 18:39:22.371" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:22.371" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:22.371" starttime="20171025 18:39:22.036"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:22.372" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:22.372" starttime="20171025 18:39:22.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:22.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:22.373" starttime="20171025 18:39:22.372"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:22.373" starttime="20171025 18:39:22.032"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:22.373" starttime="20171025 18:39:22.032"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:22.373" starttime="20171025 18:39:22.031"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:22.374" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20171025 18:39:22.374" starttime="20171025 18:39:22.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:22.374" starttime="20171025 18:39:22.374"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:23.017" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:39:23.018" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:23.018" starttime="20171025 18:39:22.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:23.019" starttime="20171025 18:39:23.018"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:23.019" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:23.019" starttime="20171025 18:39:23.019"></status>
</kw>
<msg timestamp="20171025 18:39:23.020" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:23.020" starttime="20171025 18:39:22.030"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:23.021" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:23.021" starttime="20171025 18:39:23.020"></status>
</kw>
<msg timestamp="20171025 18:39:23.021" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171025 18:39:23.021" starttime="20171025 18:39:23.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:23.022" starttime="20171025 18:39:23.021"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171025 18:39:23.022" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:39:23.022" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171025 18:39:23.023" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0,
            "ThrottleMemTemp": 0,
            "ThrottleProcPower": 0,...</msg>
<status status="PASS" endtime="20171025 18:39:23.023" starttime="20171025 18:39:23.022"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:23.024" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_OCC_state.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:23.024" starttime="20171025 18:39:23.024"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:23.024" starttime="20171025 18:39:23.023"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:23.024" starttime="20171025 18:39:22.029"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:23.025" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_control_list.txt</msg>
<status status="PASS" endtime="20171025 18:39:23.025" starttime="20171025 18:39:23.025"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:23.028" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:23.029" starttime="20171025 18:39:23.028"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:23.029" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:23.029" starttime="20171025 18:39:23.029"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:23.030" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:23.030" starttime="20171025 18:39:23.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:23.031" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:23.031" starttime="20171025 18:39:23.030"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:23.221" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:23.221" starttime="20171025 18:39:23.032"></status>
</kw>
<msg timestamp="20171025 18:39:23.221" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:23.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:23.221" starttime="20171025 18:39:23.031"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:23.222" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:23.222" starttime="20171025 18:39:23.222"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:23.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:23.223" starttime="20171025 18:39:23.222"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:23.223" starttime="20171025 18:39:23.027"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:23.223" starttime="20171025 18:39:23.027"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:23.223" starttime="20171025 18:39:23.026"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:23.224" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20171025 18:39:23.224" starttime="20171025 18:39:23.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:23.224" starttime="20171025 18:39:23.224"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:23.486" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:39:23.486" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:23.486" starttime="20171025 18:39:23.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:23.487" starttime="20171025 18:39:23.487"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:23.487" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:23.487" starttime="20171025 18:39:23.487"></status>
</kw>
<msg timestamp="20171025 18:39:23.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:23.488" starttime="20171025 18:39:23.026"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:23.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:23.489" starttime="20171025 18:39:23.488"></status>
</kw>
<msg timestamp="20171025 18:39:23.489" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171025 18:39:23.489" starttime="20171025 18:39:23.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:23.490" starttime="20171025 18:39:23.489"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171025 18:39:23.490" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:39:23.491" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171025 18:39:23.491" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20171025 18:39:23.491" starttime="20171025 18:39:23.490"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:23.492" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_control_list.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:23.492" starttime="20171025 18:39:23.492"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:23.493" starttime="20171025 18:39:23.491"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:23.493" starttime="20171025 18:39:23.025"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:23.493" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_led.txt</msg>
<status status="PASS" endtime="20171025 18:39:23.493" starttime="20171025 18:39:23.493"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:23.496" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:23.497" starttime="20171025 18:39:23.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:23.497" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:23.497" starttime="20171025 18:39:23.497"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:23.498" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:23.498" starttime="20171025 18:39:23.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:23.499" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:23.499" starttime="20171025 18:39:23.498"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:23.713" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:23.713" starttime="20171025 18:39:23.500"></status>
</kw>
<msg timestamp="20171025 18:39:23.713" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:23.713" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:23.713" starttime="20171025 18:39:23.499"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:23.714" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:23.714" starttime="20171025 18:39:23.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:23.714" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:23.715" starttime="20171025 18:39:23.714"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:23.715" starttime="20171025 18:39:23.495"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:23.715" starttime="20171025 18:39:23.495"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:23.715" starttime="20171025 18:39:23.494"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:23.716" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20171025 18:39:23.716" starttime="20171025 18:39:23.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:23.716" starttime="20171025 18:39:23.716"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:25.339" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:39:25.339" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:25.339" starttime="20171025 18:39:23.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:25.340" starttime="20171025 18:39:25.340"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:25.341" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:25.341" starttime="20171025 18:39:25.340"></status>
</kw>
<msg timestamp="20171025 18:39:25.341" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:25.341" starttime="20171025 18:39:23.494"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:25.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:25.342" starttime="20171025 18:39:25.342"></status>
</kw>
<msg timestamp="20171025 18:39:25.342" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171025 18:39:25.342" starttime="20171025 18:39:25.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:25.343" starttime="20171025 18:39:25.343"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171025 18:39:25.345" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:39:25.345" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171025 18:39:25.346" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20171025 18:39:25.346" starttime="20171025 18:39:25.343"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:25.347" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_led.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:25.347" starttime="20171025 18:39:25.347"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:25.347" starttime="20171025 18:39:25.346"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:25.347" starttime="20171025 18:39:23.493"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:25.348" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20171025 18:39:25.348" starttime="20171025 18:39:25.348"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:25.351" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:25.352" starttime="20171025 18:39:25.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:25.352" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:25.352" starttime="20171025 18:39:25.352"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:25.353" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:25.353" starttime="20171025 18:39:25.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:25.354" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:25.354" starttime="20171025 18:39:25.353"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:25.544" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:25.544" starttime="20171025 18:39:25.355"></status>
</kw>
<msg timestamp="20171025 18:39:25.544" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:25.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:25.544" starttime="20171025 18:39:25.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:25.545" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:25.545" starttime="20171025 18:39:25.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:25.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:25.546" starttime="20171025 18:39:25.545"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:25.546" starttime="20171025 18:39:25.350"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:25.546" starttime="20171025 18:39:25.350"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:25.546" starttime="20171025 18:39:25.349"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:25.547" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20171025 18:39:25.547" starttime="20171025 18:39:25.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:25.548" starttime="20171025 18:39:25.547"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:25.969" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:39:25.970" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:25.970" starttime="20171025 18:39:25.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:25.970" starttime="20171025 18:39:25.970"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:25.971" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:25.971" starttime="20171025 18:39:25.971"></status>
</kw>
<msg timestamp="20171025 18:39:25.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:25.971" starttime="20171025 18:39:25.349"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:25.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:25.972" starttime="20171025 18:39:25.972"></status>
</kw>
<msg timestamp="20171025 18:39:25.973" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171025 18:39:25.973" starttime="20171025 18:39:25.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:25.973" starttime="20171025 18:39:25.973"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171025 18:39:25.974" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/96ad31f1": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-196-g61caed6", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/96ad31f1/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/96ad31f1/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/a5f1f9de": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-201-g8ebdd03", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/a5f1f9de/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/a5f1f9de/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/96ad31f1", 
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/a5f1f9de", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/96ad31f1", 
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:39:25.974" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171025 18:39:25.975" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/7a9ef57c": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-57a...</msg>
<status status="PASS" endtime="20171025 18:39:25.975" starttime="20171025 18:39:25.973"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:25.976" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:25.977" starttime="20171025 18:39:25.976"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:25.977" starttime="20171025 18:39:25.975"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:25.977" starttime="20171025 18:39:25.347"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:25.977" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_elog.txt</msg>
<status status="PASS" endtime="20171025 18:39:25.978" starttime="20171025 18:39:25.977"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:25.980" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:25.981" starttime="20171025 18:39:25.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:25.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:25.981" starttime="20171025 18:39:25.981"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:25.982" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:25.982" starttime="20171025 18:39:25.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:25.983" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:25.983" starttime="20171025 18:39:25.982"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:26.183" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:26.183" starttime="20171025 18:39:25.984"></status>
</kw>
<msg timestamp="20171025 18:39:26.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:26.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:26.183" starttime="20171025 18:39:25.983"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:26.184" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:26.184" starttime="20171025 18:39:26.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:26.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:26.185" starttime="20171025 18:39:26.184"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:26.185" starttime="20171025 18:39:25.979"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:26.185" starttime="20171025 18:39:25.979"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:26.185" starttime="20171025 18:39:25.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:26.186" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20171025 18:39:26.186" starttime="20171025 18:39:26.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:26.186" starttime="20171025 18:39:26.186"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:26.307" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:39:26.307" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:26.307" starttime="20171025 18:39:26.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:26.308" starttime="20171025 18:39:26.307"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:26.308" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:26.308" starttime="20171025 18:39:26.308"></status>
</kw>
<msg timestamp="20171025 18:39:26.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:26.309" starttime="20171025 18:39:25.978"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:26.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:26.310" starttime="20171025 18:39:26.309"></status>
</kw>
<msg timestamp="20171025 18:39:26.310" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171025 18:39:26.310" starttime="20171025 18:39:26.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:26.311" starttime="20171025 18:39:26.310"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171025 18:39:26.311" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1320"
      ], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1508956747733, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:39:26.311" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171025 18:39:26.312" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "_PID=1320"
            ],
            "Id": 1,
            "Message": "xyz.openbmc_pr...</msg>
<status status="PASS" endtime="20171025 18:39:26.312" starttime="20171025 18:39:26.311"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:26.313" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_elog.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:26.313" starttime="20171025 18:39:26.313"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:26.313" starttime="20171025 18:39:26.312"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:26.313" starttime="20171025 18:39:25.977"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:26.314" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_inventory.txt</msg>
<status status="PASS" endtime="20171025 18:39:26.314" starttime="20171025 18:39:26.314"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:26.317" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:26.317" starttime="20171025 18:39:26.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:26.318" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:26.318" starttime="20171025 18:39:26.318"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:26.319" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:26.319" starttime="20171025 18:39:26.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:26.320" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:26.320" starttime="20171025 18:39:26.319"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:26.515" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:26.515" starttime="20171025 18:39:26.321"></status>
</kw>
<msg timestamp="20171025 18:39:26.516" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:26.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:26.516" starttime="20171025 18:39:26.320"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:26.517" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:26.517" starttime="20171025 18:39:26.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:26.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:26.517" starttime="20171025 18:39:26.517"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:26.518" starttime="20171025 18:39:26.316"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:26.518" starttime="20171025 18:39:26.316"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:26.518" starttime="20171025 18:39:26.315"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:26.518" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20171025 18:39:26.518" starttime="20171025 18:39:26.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:26.519" starttime="20171025 18:39:26.519"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:29.974" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:39:29.974" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:29.974" starttime="20171025 18:39:26.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:29.975" starttime="20171025 18:39:29.975"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:29.976" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:29.976" starttime="20171025 18:39:29.976"></status>
</kw>
<msg timestamp="20171025 18:39:29.976" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:29.976" starttime="20171025 18:39:26.314"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:29.977" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:29.977" starttime="20171025 18:39:29.977"></status>
</kw>
<msg timestamp="20171025 18:39:29.977" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171025 18:39:29.977" starttime="20171025 18:39:29.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:29.978" starttime="20171025 18:39:29.978"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171025 18:39:29.981" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/96ad31f1", 
        "/xyz/openbmc_project/software/a5f1f9de"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 0, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 0, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:39:29.982" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171025 18:39:29.982" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20171025 18:39:29.982" starttime="20171025 18:39:29.978"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:29.984" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_inventory.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:29.984" starttime="20171025 18:39:29.983"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:29.984" starttime="20171025 18:39:29.982"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:29.984" starttime="20171025 18:39:26.313"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:29.984" starttime="20171025 18:39:17.521"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:29.984" starttime="20171025 18:39:17.520"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:29.984" starttime="20171025 18:39:17.519"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:29.984" starttime="20171025 18:39:17.519"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:29.984" starttime="20171025 18:39:17.517"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:29.984" starttime="20171025 18:39:17.504"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:29.984" starttime="20171025 18:39:17.501"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:29.985" starttime="20171025 18:39:17.501"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:29.987" starttime="20171025 18:39:29.986"></status>
</kw>
<msg timestamp="20171025 18:39:29.987" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:29.987" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171025 18:39:29.987" starttime="20171025 18:39:29.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:29.987" starttime="20171025 18:39:29.987"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:30.003" starttime="20171025 18:39:30.001"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20171025 18:39:30.004" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20171025 18:39:30.004" starttime="20171025 18:39:30.003"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.004" starttime="20171025 18:39:30.001"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.004" starttime="20171025 18:39:29.988"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.004" starttime="20171025 18:39:29.985"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.004" starttime="20171025 18:39:29.985"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:30.007" starttime="20171025 18:39:30.006"></status>
</kw>
<msg timestamp="20171025 18:39:30.007" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:30.007" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171025 18:39:30.007" starttime="20171025 18:39:30.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:30.007" starttime="20171025 18:39:30.007"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171025 18:39:30.041" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:30.041" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:30.042" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171025 18:39:30.089" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171025 18:39:30.099" level="INFO">${core_files} = None</msg>
<msg timestamp="20171025 18:39:30.099" level="INFO">${stderr} = None</msg>
<msg timestamp="20171025 18:39:30.099" level="INFO">${rc} = None</msg>
<msg timestamp="20171025 18:39:30.100" level="FAIL">#(UTC) 2017/10/25 18:39:30.098499 -    0.057760 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20171025 18:39:30.100" starttime="20171025 18:39:30.022"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171025 18:39:30.100" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171025 18:39:30.101" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20171025 18:39:30.101" starttime="20171025 18:39:30.100"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:30.114" starttime="20171025 18:39:30.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:30.789" starttime="20171025 18:39:30.115"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.789" starttime="20171025 18:39:30.115"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.789" starttime="20171025 18:39:30.109"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.789" starttime="20171025 18:39:30.101"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20171025 18:39:30.790" starttime="20171025 18:39:30.789"></status>
</kw>
<status status="FAIL" endtime="20171025 18:39:30.790" starttime="20171025 18:39:30.021"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.790" starttime="20171025 18:39:30.008"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.790" starttime="20171025 18:39:30.004"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.790" starttime="20171025 18:39:30.004"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:30.793" starttime="20171025 18:39:30.793"></status>
</kw>
<msg timestamp="20171025 18:39:30.793" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:30.793" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171025 18:39:30.793" starttime="20171025 18:39:30.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:30.794" starttime="20171025 18:39:30.794"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171025 18:39:30.809" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20171025 18:39:30.809" starttime="20171025 18:39:30.809"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171025 18:39:30.811" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20171025 18:39:30.811" starttime="20171025 18:39:30.810"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:30.812" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20171025 18:39:30.812" starttime="20171025 18:39:30.812"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:30.814" starttime="20171025 18:39:30.813"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:30.814" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:30.814" starttime="20171025 18:39:30.814"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:30.855" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:30.856" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:30.856" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171025 18:39:30.934" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:30.934" starttime="20171025 18:39:30.832"></status>
</kw>
<msg timestamp="20171025 18:39:30.934" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:30.934" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20171025 18:39:30.934" starttime="20171025 18:39:30.815"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:30.935" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20171025 18:39:30.935" starttime="20171025 18:39:30.935"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:30.936" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:30.936" starttime="20171025 18:39:30.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:30.944" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:30.944" starttime="20171025 18:39:30.943"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.944" starttime="20171025 18:39:30.943"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.944" starttime="20171025 18:39:30.936"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.944" starttime="20171025 18:39:30.812"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:30.944" starttime="20171025 18:39:30.811"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:30.945" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20171025 18:39:30.945" starttime="20171025 18:39:30.945"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:30.947" starttime="20171025 18:39:30.946"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:30.947" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:30.948" starttime="20171025 18:39:30.947"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:30.989" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:30.989" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:30.990" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171025 18:39:31.521" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:31.521" starttime="20171025 18:39:30.965"></status>
</kw>
<msg timestamp="20171025 18:39:31.522" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:31.523" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct 25 18:39 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct 25 18:39 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20171025 18:39:31.523" starttime="20171025 18:39:30.948"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:31.524" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct 25 18:39 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct 25 18:39 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20171025 18:39:31.524" starttime="20171025 18:39:31.523"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:31.525" level="INFO">${stderr} = ls: /proc/1466/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20171025 18:39:31.525" starttime="20171025 18:39:31.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:31.538" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:31.539" starttime="20171025 18:39:31.538"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:31.539" starttime="20171025 18:39:31.536"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:31.539" starttime="20171025 18:39:31.526"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:31.539" starttime="20171025 18:39:30.945"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:31.539" starttime="20171025 18:39:30.945"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:31.540" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20171025 18:39:31.540" starttime="20171025 18:39:31.539"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:31.541" starttime="20171025 18:39:31.541"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:31.542" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:31.542" starttime="20171025 18:39:31.542"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:31.583" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:31.583" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:31.584" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171025 18:39:32.934" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:32.934" starttime="20171025 18:39:31.560"></status>
</kw>
<msg timestamp="20171025 18:39:32.934" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:32.936" level="INFO">${ret_values} = (u'-- Logs begin at Wed 2017-10-25 18:37:03 UTC, end at Wed 2017-10-25 18:39:50 UTC. --\nOct 25 18:37:03 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 25 18:37:03 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20171025 18:39:32.936" starttime="20171025 18:39:31.542"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:32.937" level="INFO">${stdout} = -- Logs begin at Wed 2017-10-25 18:37:03 UTC, end at Wed 2017-10-25 18:39:50 UTC. --
Oct 25 18:37:03 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 25 18:37:03 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20171025 18:39:32.937" starttime="20171025 18:39:32.937"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:32.938" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:32.938" starttime="20171025 18:39:32.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:32.947" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:32.947" starttime="20171025 18:39:32.946"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:32.947" starttime="20171025 18:39:32.945"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:32.947" starttime="20171025 18:39:32.938"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:32.947" starttime="20171025 18:39:31.540"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:32.947" starttime="20171025 18:39:31.539"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:32.948" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20171025 18:39:32.948" starttime="20171025 18:39:32.948"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:32.949" starttime="20171025 18:39:32.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:32.950" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:32.950" starttime="20171025 18:39:32.950"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:32.992" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:32.992" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:32.992" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171025 18:39:36.203" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:36.207" starttime="20171025 18:39:32.968"></status>
</kw>
<msg timestamp="20171025 18:39:36.207" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:36.224" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=03f85ac0cad241e1b6128c3c1f1eeb04;i=1;b=1f9b5d69d96a497399aeac00bab86b14;m=1530cfe;t=55c635785a71c;x=6a6eb82d174d713c",\n\t"__REALTIME_TIMESTAMP" : "1508956623447836",\n\t"__MON...</msg>
<status status="PASS" endtime="20171025 18:39:36.224" starttime="20171025 18:39:32.951"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:36.229" level="INFO">${stdout} = {
	"__CURSOR" : "s=03f85ac0cad241e1b6128c3c1f1eeb04;i=1;b=1f9b5d69d96a497399aeac00bab86b14;m=1530cfe;t=55c635785a71c;x=6a6eb82d174d713c",
	"__REALTIME_TIMESTAMP" : "1508956623447836",
	"__MONOTONIC_TI...</msg>
<status status="PASS" endtime="20171025 18:39:36.230" starttime="20171025 18:39:36.225"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:36.230" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:36.230" starttime="20171025 18:39:36.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:36.247" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:36.248" starttime="20171025 18:39:36.244"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.248" starttime="20171025 18:39:36.237"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.248" starttime="20171025 18:39:36.231"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.248" starttime="20171025 18:39:32.948"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.248" starttime="20171025 18:39:32.947"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:36.249" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20171025 18:39:36.249" starttime="20171025 18:39:36.249"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:36.251" starttime="20171025 18:39:36.250"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:36.251" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:36.251" starttime="20171025 18:39:36.251"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:36.293" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:36.293" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:36.294" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171025 18:39:36.370" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:36.371" starttime="20171025 18:39:36.270"></status>
</kw>
<msg timestamp="20171025 18:39:36.371" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:36.371" level="INFO">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          285384 kB\nMemAvailable:     328852 kB\nBuffers:           11868 kB\nCached:            43488 kB\nSwapCached:            0 kB\nActive:            9336...</msg>
<status status="PASS" endtime="20171025 18:39:36.371" starttime="20171025 18:39:36.252"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:36.372" level="INFO">${stdout} = MemTotal:         432252 kB
MemFree:          285384 kB
MemAvailable:     328852 kB
Buffers:           11868 kB
Cached:            43488 kB
SwapCached:            0 kB
Active:            93364 kB
Inac...</msg>
<status status="PASS" endtime="20171025 18:39:36.372" starttime="20171025 18:39:36.371"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:36.373" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:36.373" starttime="20171025 18:39:36.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:36.385" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:36.385" starttime="20171025 18:39:36.385"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.386" starttime="20171025 18:39:36.384"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.386" starttime="20171025 18:39:36.374"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.386" starttime="20171025 18:39:36.249"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.386" starttime="20171025 18:39:36.248"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:36.387" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20171025 18:39:36.387" starttime="20171025 18:39:36.386"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:36.388" starttime="20171025 18:39:36.388"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:36.389" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:36.389" starttime="20171025 18:39:36.388"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:36.430" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:36.430" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:36.430" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171025 18:39:36.734" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:36.734" starttime="20171025 18:39:36.407"></status>
</kw>
<msg timestamp="20171025 18:39:36.734" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:36.735" level="INFO">${ret_values} = (u'Mem: 146868K used, 285384K free, 8868K shrd, 11868K buff, 43492K cached\nCPU:  15% usr  15% sys   0% nic  69% idle   0% io   0% irq   0% sirq\nLoad average: 4.52 2.72 1.11 1/161 1470\n  PID  PPID U...</msg>
<status status="PASS" endtime="20171025 18:39:36.735" starttime="20171025 18:39:36.389"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:36.736" level="INFO">${stdout} = Mem: 146868K used, 285384K free, 8868K shrd, 11868K buff, 43492K cached
CPU:  15% usr  15% sys   0% nic  69% idle   0% io   0% irq   0% sirq
Load average: 4.52 2.72 1.11 1/161 1470
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20171025 18:39:36.736" starttime="20171025 18:39:36.735"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:36.736" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:36.736" starttime="20171025 18:39:36.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:36.745" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:36.745" starttime="20171025 18:39:36.744"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.745" starttime="20171025 18:39:36.743"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.745" starttime="20171025 18:39:36.737"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.745" starttime="20171025 18:39:36.387"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.745" starttime="20171025 18:39:36.386"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:36.746" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20171025 18:39:36.746" starttime="20171025 18:39:36.745"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:36.747" starttime="20171025 18:39:36.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171025 18:39:36.748" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20171025 18:39:36.748" starttime="20171025 18:39:36.748"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171025 18:39:36.790" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:36.790" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171025 18:39:36.791" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171025 18:39:36.892" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171025 18:39:36.892" starttime="20171025 18:39:36.766"></status>
</kw>
<msg timestamp="20171025 18:39:36.892" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:36.893" level="INFO">${ret_values} = (u'[    0.300000] 1e784000.serial: ttyS4 at MMIO 0x1e784000 (irq = 25, base_baud = 1500000) is a 16550A\n[    0.650000] console [ttyS4] enabled\n[    0.790000] timeriomem_rng 1e6e2078.hwrng: 32bits fr...</msg>
<status status="PASS" endtime="20171025 18:39:36.893" starttime="20171025 18:39:36.749"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171025 18:39:36.893" level="INFO">${stdout} = [    0.300000] 1e784000.serial: ttyS4 at MMIO 0x1e784000 (irq = 25, base_baud = 1500000) is a 16550A
[    0.650000] console [ttyS4] enabled
[    0.790000] timeriomem_rng 1e6e2078.hwrng: 32bits from 0x...</msg>
<status status="PASS" endtime="20171025 18:39:36.893" starttime="20171025 18:39:36.893"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171025 18:39:36.894" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171025 18:39:36.894" starttime="20171025 18:39:36.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171025 18:39:36.902" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:36.902" starttime="20171025 18:39:36.902"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.902" starttime="20171025 18:39:36.901"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.902" starttime="20171025 18:39:36.894"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.903" starttime="20171025 18:39:36.746"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.903" starttime="20171025 18:39:36.745"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.903" starttime="20171025 18:39:30.811"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.903" starttime="20171025 18:39:30.809"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.903" starttime="20171025 18:39:30.809"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.903" starttime="20171025 18:39:30.809"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.903" starttime="20171025 18:39:30.808"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.903" starttime="20171025 18:39:30.794"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.903" starttime="20171025 18:39:30.791"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:36.903" starttime="20171025 18:39:30.790"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:36.905" starttime="20171025 18:39:36.905"></status>
</kw>
<msg timestamp="20171025 18:39:36.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:36.905" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171025 18:39:36.906" starttime="20171025 18:39:36.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:36.906" starttime="20171025 18:39:36.906"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:36.923" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:36.924" starttime="20171025 18:39:36.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:36.925" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:36.925" starttime="20171025 18:39:36.924"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:36.925" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:36.925" starttime="20171025 18:39:36.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:36.926" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:36.926" starttime="20171025 18:39:36.926"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.163" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:37.163" starttime="20171025 18:39:36.927"></status>
</kw>
<msg timestamp="20171025 18:39:37.163" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:37.163" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.163" starttime="20171025 18:39:36.926"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.164" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.164" starttime="20171025 18:39:37.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.165" starttime="20171025 18:39:37.164"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.165" starttime="20171025 18:39:36.922"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.165" starttime="20171025 18:39:36.922"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.165" starttime="20171025 18:39:36.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:37.166" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20171025 18:39:37.166" starttime="20171025 18:39:37.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:37.167" starttime="20171025 18:39:37.166"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:37.292" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171025 18:39:37.292" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.292" starttime="20171025 18:39:37.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:37.293" starttime="20171025 18:39:37.292"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:37.293" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:37.293" starttime="20171025 18:39:37.293"></status>
</kw>
<msg timestamp="20171025 18:39:37.294" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.294" starttime="20171025 18:39:36.920"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.295" starttime="20171025 18:39:37.294"></status>
</kw>
<msg timestamp="20171025 18:39:37.295" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171025 18:39:37.295" starttime="20171025 18:39:37.294"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:37.296" starttime="20171025 18:39:37.295"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:39:37.296" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1320"
      ], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1508956747733, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:39:37.296" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:39:37.296" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [u'_PID=1320'], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level....</msg>
<status status="PASS" endtime="20171025 18:39:37.296" starttime="20171025 18:39:37.296"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20171025 18:39:37.297" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20171025 18:39:37.297" starttime="20171025 18:39:37.297"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171025 18:39:37.298" level="INFO">${logpath} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_esel</msg>
<status status="PASS" endtime="20171025 18:39:37.298" starttime="20171025 18:39:37.297"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.298" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_esel"&gt;/home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/20171025183910370675_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:37.299" starttime="20171025 18:39:37.298"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:37.300" starttime="20171025 18:39:37.299"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:37.306" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:37.306" starttime="20171025 18:39:37.306"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:37.307" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:37.307" starttime="20171025 18:39:37.307"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:37.308" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:37.308" starttime="20171025 18:39:37.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:37.309" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:37.309" starttime="20171025 18:39:37.308"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.535" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:37.536" starttime="20171025 18:39:37.310"></status>
</kw>
<msg timestamp="20171025 18:39:37.536" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:37.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.536" starttime="20171025 18:39:37.309"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.537" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.537" starttime="20171025 18:39:37.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.537" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.537" starttime="20171025 18:39:37.537"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.538" starttime="20171025 18:39:37.302"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.538" starttime="20171025 18:39:37.302"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.538" starttime="20171025 18:39:37.301"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:37.538" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20171025 18:39:37.538" starttime="20171025 18:39:37.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:37.539" starttime="20171025 18:39:37.539"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:37.639" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171025 18:39:37.639" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.639" starttime="20171025 18:39:37.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:37.639" starttime="20171025 18:39:37.639"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:37.640" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:37.640" starttime="20171025 18:39:37.640"></status>
</kw>
<msg timestamp="20171025 18:39:37.640" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.640" starttime="20171025 18:39:37.301"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.641" starttime="20171025 18:39:37.641"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:39:37.642" level="INFO">To JSON using : content={
  "data": [
    "_PID=1320"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:39:37.642" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:39:37.642" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'_PID=1320']}</msg>
<status status="PASS" endtime="20171025 18:39:37.642" starttime="20171025 18:39:37.641"></status>
</kw>
<msg timestamp="20171025 18:39:37.642" level="INFO">${esel_data} = [u'_PID=1320']</msg>
<status status="PASS" endtime="20171025 18:39:37.642" starttime="20171025 18:39:37.300"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171025 18:39:37.644" level="FAIL">[ _PID=1320 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" endtime="20171025 18:39:37.644" starttime="20171025 18:39:37.643"></status>
</kw>
<msg timestamp="20171025 18:39:37.644" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171025 18:39:37.644" starttime="20171025 18:39:37.642"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.644" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171025 18:39:37.645" starttime="20171025 18:39:37.644"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.645" starttime="20171025 18:39:37.299"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.645" starttime="20171025 18:39:37.299"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20171025 18:39:37.653" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20171025 18:39:37.656" level="INFO">${out} = </msg>
<status status="PASS" endtime="20171025 18:39:37.657" starttime="20171025 18:39:37.645"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20171025 18:39:37.662" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20171025 18:39:37.662" starttime="20171025 18:39:37.661"></status>
</kw>
<msg timestamp="20171025 18:39:37.662" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171025 18:39:37.662" starttime="20171025 18:39:37.660"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171025 18:39:37.663" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171025 18:39:37.663" starttime="20171025 18:39:37.662"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.663" starttime="20171025 18:39:36.920"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.663" starttime="20171025 18:39:36.906"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.664" starttime="20171025 18:39:36.904"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.664" starttime="20171025 18:39:36.903"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:37.666" starttime="20171025 18:39:37.666"></status>
</kw>
<msg timestamp="20171025 18:39:37.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:37.666" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171025 18:39:37.667" starttime="20171025 18:39:37.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:37.667" starttime="20171025 18:39:37.667"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171025 18:39:37.728" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171025 18:39:37.728" starttime="20171025 18:39:37.727"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.728" starttime="20171025 18:39:37.681"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.728" starttime="20171025 18:39:37.668"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.728" starttime="20171025 18:39:37.664"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.728" starttime="20171025 18:39:37.664"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.728" starttime="20171025 18:39:10.717"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.729" starttime="20171025 18:39:10.714"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.729" starttime="20171025 18:39:10.714"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.729" starttime="20171025 18:39:10.714"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171025 18:39:37.739" starttime="20171025 18:39:37.735"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.739" starttime="20171025 18:39:37.729"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.739" starttime="20171025 18:39:10.712"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.739" starttime="20171025 18:39:07.329"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.740" starttime="20171025 18:39:07.329"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171025 18:39:37.741" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20171025 18:39:37.741" starttime="20171025 18:39:37.741"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171025 18:39:37.742" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171025183910370675_BmcCodeUpdate/20171025183910370675_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20171025 18:39:37.742" starttime="20171025 18:39:37.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:37.743" starttime="20171025 18:39:37.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:37.743" starttime="20171025 18:39:37.743"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.744" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171025 18:39:37.744" starttime="20171025 18:39:37.744"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.745" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171025 18:39:37.745" starttime="20171025 18:39:37.745"></status>
</kw>
<msg timestamp="20171025 18:39:37.745" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20171025 18:39:37.745" starttime="20171025 18:39:37.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.747" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:37.747" starttime="20171025 18:39:37.746"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.747" starttime="20171025 18:39:37.746"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:37.748" starttime="20171025 18:39:37.747"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171025 18:39:37.749" level="INFO">${cur_time} = 2017-10-25 18:39:37:748629</msg>
<status status="PASS" endtime="20171025 18:39:37.749" starttime="20171025 18:39:37.748"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171025 18:39:37.750" level="INFO">${cur_time} = 20171025183937748629</msg>
<status status="PASS" endtime="20171025 18:39:37.750" starttime="20171025 18:39:37.749"></status>
</kw>
<msg timestamp="20171025 18:39:37.750" level="INFO">${cur_time} = 20171025183937748629</msg>
<status status="PASS" endtime="20171025 18:39:37.750" starttime="20171025 18:39:37.748"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.751" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171025 18:39:37.751" starttime="20171025 18:39:37.750"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.751" starttime="20171025 18:39:37.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:37.755" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:37.756" starttime="20171025 18:39:37.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:37.757" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:37.757" starttime="20171025 18:39:37.756"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:37.757" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:37.757" starttime="20171025 18:39:37.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:37.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:37.758" starttime="20171025 18:39:37.758"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:37.988" starttime="20171025 18:39:37.759"></status>
</kw>
<msg timestamp="20171025 18:39:37.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:37.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.989" starttime="20171025 18:39:37.758"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.990" starttime="20171025 18:39:37.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:37.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:37.990" starttime="20171025 18:39:37.990"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.990" starttime="20171025 18:39:37.754"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.991" starttime="20171025 18:39:37.754"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:37.991" starttime="20171025 18:39:37.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:37.991" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171025 18:39:37.991" starttime="20171025 18:39:37.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:37.992" starttime="20171025 18:39:37.992"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:38.054" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171025 18:39:38.055" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.055" starttime="20171025 18:39:37.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:38.055" starttime="20171025 18:39:38.055"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:38.056" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:38.056" starttime="20171025 18:39:38.056"></status>
</kw>
<msg timestamp="20171025 18:39:38.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.056" starttime="20171025 18:39:37.753"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:38.057" starttime="20171025 18:39:38.057"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:38.061" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:38.062" starttime="20171025 18:39:38.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:38.062" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:38.062" starttime="20171025 18:39:38.062"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:38.063" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:38.063" starttime="20171025 18:39:38.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:38.064" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:38.064" starttime="20171025 18:39:38.063"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:38.382" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:38.382" starttime="20171025 18:39:38.064"></status>
</kw>
<msg timestamp="20171025 18:39:38.382" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:38.382" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.383" starttime="20171025 18:39:38.064"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:38.383" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.383" starttime="20171025 18:39:38.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:38.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.384" starttime="20171025 18:39:38.384"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.384" starttime="20171025 18:39:38.060"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.384" starttime="20171025 18:39:38.059"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.385" starttime="20171025 18:39:38.059"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:38.385" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171025 18:39:38.385" starttime="20171025 18:39:38.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:38.386" starttime="20171025 18:39:38.386"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:38.463" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171025 18:39:38.463" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.463" starttime="20171025 18:39:38.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:38.464" starttime="20171025 18:39:38.463"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:38.464" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:38.464" starttime="20171025 18:39:38.464"></status>
</kw>
<msg timestamp="20171025 18:39:38.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.464" starttime="20171025 18:39:38.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:38.465" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.465" starttime="20171025 18:39:38.465"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171025 18:39:38.466" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171025 18:39:38.466" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171025 18:39:38.466" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/logging/entry/1']}</msg>
<status status="PASS" endtime="20171025 18:39:38.466" starttime="20171025 18:39:38.465"></status>
</kw>
<msg timestamp="20171025 18:39:38.466" level="INFO">${url_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20171025 18:39:38.466" starttime="20171025 18:39:38.058"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:38.467" starttime="20171025 18:39:38.467"></status>
</kw>
<msg timestamp="20171025 18:39:38.467" level="INFO">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20171025 18:39:38.467" starttime="20171025 18:39:38.057"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/1">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:38.468" starttime="20171025 18:39:38.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:38.469" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20171025 18:39:38.469" starttime="20171025 18:39:38.469"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:38.472" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:38.473" starttime="20171025 18:39:38.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:38.473" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:38.473" starttime="20171025 18:39:38.473"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:38.474" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:38.474" starttime="20171025 18:39:38.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:38.475" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:38.475" starttime="20171025 18:39:38.474"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:38.691" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:38.692" starttime="20171025 18:39:38.476"></status>
</kw>
<msg timestamp="20171025 18:39:38.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:38.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.692" starttime="20171025 18:39:38.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:38.693" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.693" starttime="20171025 18:39:38.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:38.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.693" starttime="20171025 18:39:38.693"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.694" starttime="20171025 18:39:38.471"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.694" starttime="20171025 18:39:38.471"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.694" starttime="20171025 18:39:38.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:38.694" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1</msg>
<status status="PASS" endtime="20171025 18:39:38.694" starttime="20171025 18:39:38.694"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:39:38.696" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171025 18:39:38.696" starttime="20171025 18:39:38.695"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:39:38.697" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171025 18:39:38.697" starttime="20171025 18:39:38.697"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.698" starttime="20171025 18:39:38.696"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.698" starttime="20171025 18:39:38.695"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:38.809" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171025 18:39:38.809" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.809" starttime="20171025 18:39:38.698"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171025 18:39:38.811" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:39:38.811" starttime="20171025 18:39:38.810"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171025 18:39:38.812" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171025 18:39:38.812" starttime="20171025 18:39:38.812"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.812" starttime="20171025 18:39:38.811"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.813" starttime="20171025 18:39:38.810"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:38.814" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:38.814" starttime="20171025 18:39:38.814"></status>
</kw>
<msg timestamp="20171025 18:39:38.815" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.815" starttime="20171025 18:39:38.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:38.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:38.816" starttime="20171025 18:39:38.815"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.816" starttime="20171025 18:39:38.467"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.816" starttime="20171025 18:39:38.467"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.816" starttime="20171025 18:39:38.467"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:38.816" starttime="20171025 18:39:37.752"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171025 18:39:38.820" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171025 18:39:38.820" starttime="20171025 18:39:38.820"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171025 18:39:38.821" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171025 18:39:38.821" starttime="20171025 18:39:38.821"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171025 18:39:38.822" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171025 18:39:38.822" starttime="20171025 18:39:38.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171025 18:39:38.822" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171025 18:39:38.822" starttime="20171025 18:39:38.822"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171025 18:39:39.011" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171025 18:39:39.011" starttime="20171025 18:39:38.823"></status>
</kw>
<msg timestamp="20171025 18:39:39.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20171025 18:39:39.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:39.011" starttime="20171025 18:39:38.823"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171025 18:39:39.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:39.012" starttime="20171025 18:39:39.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171025 18:39:39.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171025 18:39:39.013" starttime="20171025 18:39:39.013"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:39.013" starttime="20171025 18:39:38.819"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:39.013" starttime="20171025 18:39:38.819"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:39.013" starttime="20171025 18:39:38.817"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171025 18:39:39.014" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status status="PASS" endtime="20171025 18:39:39.014" starttime="20171025 18:39:39.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:39.015" starttime="20171025 18:39:39.014"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171025 18:39:39.059" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171025 18:39:39.059" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:39.059" starttime="20171025 18:39:39.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171025 18:39:39.060" starttime="20171025 18:39:39.059"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171025 18:39:39.060" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171025 18:39:39.060" starttime="20171025 18:39:39.060"></status>
</kw>
<msg timestamp="20171025 18:39:39.061" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171025 18:39:39.061" starttime="20171025 18:39:38.817"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171025 18:39:39.061" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171025 18:39:39.061" starttime="20171025 18:39:39.061"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:39.062" starttime="20171025 18:39:38.816"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:39.062" starttime="20171025 18:39:37.752"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:39.062" starttime="20171025 18:39:37.751"></status>
</kw>
<status status="PASS" endtime="20171025 18:39:39.062" starttime="20171025 18:39:07.328"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Fatal Error</arg>
<arg>msg=Code update failed.</arg>
</arguments>
<kw name="Fatal Error" library="BuiltIn">
<doc>Stops the whole test execution.</doc>
<arguments>
<arg>msg=Code update failed.</arg>
</arguments>
<msg timestamp="20171025 18:39:39.063" level="FAIL">Code update failed.</msg>
<status status="FAIL" endtime="20171025 18:39:39.063" starttime="20171025 18:39:39.063"></status>
</kw>
<status status="FAIL" endtime="20171025 18:39:39.063" starttime="20171025 18:39:39.062"></status>
</kw>
<status status="FAIL" endtime="20171025 18:39:39.063" starttime="20171025 18:39:07.327">Code update failed.</status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>BMC_Code_Update</tag>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20171025 18:39:39.064" critical="yes" starttime="20171025 18:32:02.940">v1.99.10-201-g8ebdd03 != v1.99.10-196-g61caed6

Also teardown failed:
Code update failed.</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20171025 18:39:39.065" starttime="20171025 18:31:58.843"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">BMC_Code_Update</stat>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
