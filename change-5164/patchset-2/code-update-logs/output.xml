<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170708 06:17:24.287" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170708 06:17:25.506" level="INFO">Length is 41</msg>
<status status="PASS" endtime="20170708 06:17:25.506" starttime="20170708 06:17:25.505"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170708 06:17:25.507" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon_20170704n.pnor"&gt;/home/fspcibld/witherspoon_20170704n.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170708 06:17:25.507" starttime="20170708 06:17:25.506"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:25.508" starttime="20170708 06:17:25.505"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170708 06:17:25.518" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 06:17:25.566" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 06:17:25.566" starttime="20170708 06:17:25.565"></status>
</kw>
<msg timestamp="20170708 06:17:25.566" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 06:17:25.566" starttime="20170708 06:17:25.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:25.567" starttime="20170708 06:17:25.567"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:25.567" starttime="20170708 06:17:25.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:25.568" starttime="20170708 06:17:25.568"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 06:17:25.569" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 06:17:25.569" starttime="20170708 06:17:25.569"></status>
</kw>
<msg timestamp="20170708 06:17:25.569" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 06:17:25.569" starttime="20170708 06:17:25.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:25.572" starttime="20170708 06:17:25.571"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:25.572" starttime="20170708 06:17:25.571"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:25.572" starttime="20170708 06:17:25.570"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 06:17:25.572" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 06:17:27.335" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 06:17:27.336" starttime="20170708 06:17:25.572"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:27.336" starttime="20170708 06:17:25.563"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:17:27.337" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170708 06:17:27.478" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 06:17:27.478" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170708 06:17:27.479" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 06:17:27.479" starttime="20170708 06:17:27.336"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 06:17:27.479" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 06:17:27.479" starttime="20170708 06:17:27.479"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170708 06:17:27.480" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170708 06:17:27.480" starttime="20170708 06:17:27.480"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:27.480" starttime="20170708 06:17:25.563"></status>
</kw>
<msg timestamp="20170708 06:17:27.481" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170708 06:17:27.841" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170708 06:17:27.858" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170708 06:17:27.858" starttime="20170708 06:17:27.857"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:17:27.860" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170708 06:17:27.860" starttime="20170708 06:17:27.859"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:17:27.863" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:17:27.867" starttime="20170708 06:17:27.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:17:27.868" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:17:27.868" starttime="20170708 06:17:27.868"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:17:27.869" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:17:27.869" starttime="20170708 06:17:27.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:17:27.869" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:17:27.869" starttime="20170708 06:17:27.869"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:17:28.059" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:17:28.059" starttime="20170708 06:17:27.870"></status>
</kw>
<msg timestamp="20170708 06:17:28.060" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:17:28.060" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.060" starttime="20170708 06:17:27.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:17:28.061" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.061" starttime="20170708 06:17:28.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:28.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.061" starttime="20170708 06:17:28.061"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.062" starttime="20170708 06:17:27.862"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.062" starttime="20170708 06:17:27.861"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.062" starttime="20170708 06:17:27.860"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:17:28.062" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170708 06:17:28.062" starttime="20170708 06:17:28.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:17:28.063" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:17:28.063" starttime="20170708 06:17:28.063"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:28.064" starttime="20170708 06:17:28.063"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 06:17:28.065" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 06:17:28.065" starttime="20170708 06:17:28.064"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 06:17:28.067" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 06:17:28.067" starttime="20170708 06:17:28.066"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.067" starttime="20170708 06:17:28.066"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.067" starttime="20170708 06:17:28.064"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:17:28.261" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 06:17:28.262" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.262" starttime="20170708 06:17:28.067"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 06:17:28.263" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 06:17:28.263" starttime="20170708 06:17:28.263"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 06:17:28.264" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 06:17:28.264" starttime="20170708 06:17:28.264"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.265" starttime="20170708 06:17:28.263"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.265" starttime="20170708 06:17:28.262"></status>
</kw>
<msg timestamp="20170708 06:17:28.265" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.265" starttime="20170708 06:17:27.860"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:28.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.266" starttime="20170708 06:17:28.265"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 06:17:28.266" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 06:17:28.267" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:17:28.267" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 06:17:28.267" starttime="20170708 06:17:28.266"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.267" starttime="20170708 06:17:27.859"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:17:28.270" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:17:28.271" starttime="20170708 06:17:28.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:17:28.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:17:28.271" starttime="20170708 06:17:28.271"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:17:28.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:17:28.272" starttime="20170708 06:17:28.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:17:28.272" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:17:28.272" starttime="20170708 06:17:28.272"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:17:28.514" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:17:28.515" starttime="20170708 06:17:28.273"></status>
</kw>
<msg timestamp="20170708 06:17:28.515" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:17:28.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.515" starttime="20170708 06:17:28.273"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:17:28.516" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.516" starttime="20170708 06:17:28.515"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:28.516" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.516" starttime="20170708 06:17:28.516"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.517" starttime="20170708 06:17:28.269"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.517" starttime="20170708 06:17:28.269"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.517" starttime="20170708 06:17:28.268"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:17:28.517" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170708 06:17:28.517" starttime="20170708 06:17:28.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:28.518" starttime="20170708 06:17:28.518"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:17:28.685" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170708 06:17:28.686" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.686" starttime="20170708 06:17:28.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:28.687" starttime="20170708 06:17:28.686"></status>
</kw>
<msg timestamp="20170708 06:17:28.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.687" starttime="20170708 06:17:28.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:28.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.688" starttime="20170708 06:17:28.687"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:17:28.688" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 06:17:28.688" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:17:28.688" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170708 06:17:28.688" starttime="20170708 06:17:28.688"></status>
</kw>
<msg timestamp="20170708 06:17:28.689" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170708 06:17:28.689" starttime="20170708 06:17:28.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170708 06:17:28.689" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:28.689" starttime="20170708 06:17:28.689"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.689" starttime="20170708 06:17:27.856"></status>
</kw>
<msg timestamp="20170708 06:17:28.732" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170708 06:17:28.749" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170708 06:17:28.754" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170708 06:17:28.754" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 06:17:28.757" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 06:17:28.757" starttime="20170708 06:17:28.757"></status>
</kw>
<msg timestamp="20170708 06:17:28.757" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 06:17:28.757" starttime="20170708 06:17:28.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:28.758" starttime="20170708 06:17:28.758"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.758" starttime="20170708 06:17:28.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:28.760" starttime="20170708 06:17:28.759"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 06:17:28.761" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 06:17:28.761" starttime="20170708 06:17:28.760"></status>
</kw>
<msg timestamp="20170708 06:17:28.761" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 06:17:28.761" starttime="20170708 06:17:28.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:28.763" starttime="20170708 06:17:28.762"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.763" starttime="20170708 06:17:28.762"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:28.763" starttime="20170708 06:17:28.761"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 06:17:28.764" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 06:17:30.422" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 06:17:30.423" starttime="20170708 06:17:28.763"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:30.423" starttime="20170708 06:17:28.756"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:17:30.460" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:17:30.461" starttime="20170708 06:17:30.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:17:30.462" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:17:30.462" starttime="20170708 06:17:30.462"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:17:30.463" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:17:30.463" starttime="20170708 06:17:30.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:17:30.464" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:17:30.464" starttime="20170708 06:17:30.463"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:17:30.664" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:17:30.664" starttime="20170708 06:17:30.465"></status>
</kw>
<msg timestamp="20170708 06:17:30.664" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:17:30.664" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:30.664" starttime="20170708 06:17:30.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:17:30.665" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:30.665" starttime="20170708 06:17:30.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:30.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:30.666" starttime="20170708 06:17:30.665"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:30.666" starttime="20170708 06:17:30.459"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:30.666" starttime="20170708 06:17:30.458"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:30.666" starttime="20170708 06:17:30.457"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:17:30.667" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170708 06:17:30.667" starttime="20170708 06:17:30.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:30.669" starttime="20170708 06:17:30.668"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:17:30.742" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170708 06:17:30.743" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:30.743" starttime="20170708 06:17:30.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:30.743" starttime="20170708 06:17:30.743"></status>
</kw>
<msg timestamp="20170708 06:17:30.744" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:30.744" starttime="20170708 06:17:30.456"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:30.744" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:30.744" starttime="20170708 06:17:30.744"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:17:30.745" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 06:17:30.745" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:17:30.745" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170708 06:17:30.745" starttime="20170708 06:17:30.745"></status>
</kw>
<msg timestamp="20170708 06:17:30.745" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170708 06:17:30.745" starttime="20170708 06:17:30.455"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:30.746" starttime="20170708 06:17:30.450"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:17:30.750" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:17:30.751" starttime="20170708 06:17:30.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:17:30.751" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:17:30.751" starttime="20170708 06:17:30.751"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:17:30.752" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:17:30.752" starttime="20170708 06:17:30.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:17:30.752" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:17:30.753" starttime="20170708 06:17:30.752"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.054" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:17:31.055" starttime="20170708 06:17:30.753"></status>
</kw>
<msg timestamp="20170708 06:17:31.055" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:17:31.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.055" starttime="20170708 06:17:30.753"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.055" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.056" starttime="20170708 06:17:31.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.056" starttime="20170708 06:17:31.056"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.057" starttime="20170708 06:17:30.749"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.057" starttime="20170708 06:17:30.749"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.057" starttime="20170708 06:17:30.748"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:17:31.057" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170708 06:17:31.057" starttime="20170708 06:17:31.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:31.058" starttime="20170708 06:17:31.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:17:31.121" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170708 06:17:31.121" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.121" starttime="20170708 06:17:31.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:31.122" starttime="20170708 06:17:31.122"></status>
</kw>
<msg timestamp="20170708 06:17:31.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.122" starttime="20170708 06:17:30.747"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.123" starttime="20170708 06:17:31.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:17:31.123" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 06:17:31.123" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:17:31.124" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170708 06:17:31.124" starttime="20170708 06:17:31.123"></status>
</kw>
<msg timestamp="20170708 06:17:31.124" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170708 06:17:31.124" starttime="20170708 06:17:30.747"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.124" starttime="20170708 06:17:30.746"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:17:31.128" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:17:31.129" starttime="20170708 06:17:31.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:17:31.129" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:17:31.129" starttime="20170708 06:17:31.129"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:17:31.130" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:17:31.130" starttime="20170708 06:17:31.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:17:31.130" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:17:31.130" starttime="20170708 06:17:31.130"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.310" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:17:31.310" starttime="20170708 06:17:31.131"></status>
</kw>
<msg timestamp="20170708 06:17:31.310" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:17:31.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.311" starttime="20170708 06:17:31.131"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.311" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.311" starttime="20170708 06:17:31.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.312" starttime="20170708 06:17:31.312"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.312" starttime="20170708 06:17:31.127"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.312" starttime="20170708 06:17:31.127"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.312" starttime="20170708 06:17:31.126"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:17:31.313" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170708 06:17:31.313" starttime="20170708 06:17:31.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:31.314" starttime="20170708 06:17:31.313"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:17:31.382" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170708 06:17:31.382" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.382" starttime="20170708 06:17:31.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:31.383" starttime="20170708 06:17:31.382"></status>
</kw>
<msg timestamp="20170708 06:17:31.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.383" starttime="20170708 06:17:31.125"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.384" starttime="20170708 06:17:31.384"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:17:31.385" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 06:17:31.385" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:17:31.385" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170708 06:17:31.386" starttime="20170708 06:17:31.385"></status>
</kw>
<msg timestamp="20170708 06:17:31.386" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170708 06:17:31.386" starttime="20170708 06:17:31.125"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.386" starttime="20170708 06:17:31.124"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:17:31.392" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:17:31.392" starttime="20170708 06:17:31.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:17:31.393" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:17:31.393" starttime="20170708 06:17:31.393"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:17:31.394" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:17:31.394" starttime="20170708 06:17:31.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:17:31.395" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:17:31.395" starttime="20170708 06:17:31.395"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.581" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:17:31.581" starttime="20170708 06:17:31.397"></status>
</kw>
<msg timestamp="20170708 06:17:31.581" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:17:31.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.581" starttime="20170708 06:17:31.396"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.582" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.582" starttime="20170708 06:17:31.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.583" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.583" starttime="20170708 06:17:31.583"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.583" starttime="20170708 06:17:31.390"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.583" starttime="20170708 06:17:31.390"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.583" starttime="20170708 06:17:31.389"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:17:31.584" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 06:17:31.584" starttime="20170708 06:17:31.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:31.585" starttime="20170708 06:17:31.584"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:17:31.655" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 06:17:31.655" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.655" starttime="20170708 06:17:31.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:31.656" starttime="20170708 06:17:31.656"></status>
</kw>
<msg timestamp="20170708 06:17:31.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.656" starttime="20170708 06:17:31.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.657" starttime="20170708 06:17:31.657"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:17:31.658" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 06:17:31.658" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:17:31.658" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170708 06:17:31.658" starttime="20170708 06:17:31.657"></status>
</kw>
<msg timestamp="20170708 06:17:31.658" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170708 06:17:31.658" starttime="20170708 06:17:31.387"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.658" starttime="20170708 06:17:31.387"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.699" starttime="20170708 06:17:25.518"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170708 06:17:31.706" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170708 06:17:31.707" starttime="20170708 06:17:31.700"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.707" starttime="20170708 06:17:25.517"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.708" starttime="20170708 06:17:25.508"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Delete Error logs</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:17:31.721" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:17:31.721" starttime="20170708 06:17:31.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:17:31.722" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:17:31.722" starttime="20170708 06:17:31.722"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:17:31.723" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:17:31.723" starttime="20170708 06:17:31.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:17:31.724" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:17:31.724" starttime="20170708 06:17:31.723"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.937" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:17:31.937" starttime="20170708 06:17:31.725"></status>
</kw>
<msg timestamp="20170708 06:17:31.937" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:17:31.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.937" starttime="20170708 06:17:31.725"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.938" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.938" starttime="20170708 06:17:31.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:17:31.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.939" starttime="20170708 06:17:31.938"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.939" starttime="20170708 06:17:31.719"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.939" starttime="20170708 06:17:31.719"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:31.939" starttime="20170708 06:17:31.718"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:17:31.940" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170708 06:17:31.940" starttime="20170708 06:17:31.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:31.940" starttime="20170708 06:17:31.940"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:17:31.999" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170708 06:17:31.999" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:31.999" starttime="20170708 06:17:31.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:32.000" starttime="20170708 06:17:32.000"></status>
</kw>
<msg timestamp="20170708 06:17:32.000" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 06:17:32.000" starttime="20170708 06:17:31.718"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170708 06:17:32.001" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170708 06:17:32.001" starttime="20170708 06:17:32.001"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:32.001" starttime="20170708 06:17:31.717"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:32.001" starttime="20170708 06:17:31.708"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:32.002" starttime="20170708 06:17:25.508"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:32.022" starttime="20170708 06:17:32.013"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:32.023" starttime="20170708 06:17:32.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:17:32.761" starttime="20170708 06:17:32.025"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:32.761" starttime="20170708 06:17:32.024"></status>
</kw>
<status status="PASS" endtime="20170708 06:17:32.761" starttime="20170708 06:17:32.022"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170708 06:17:32.762" level="INFO">Copying /home/fspcibld/witherspoon_20170704n.pnor to /tmp</msg>
<status status="PASS" endtime="20170708 06:17:32.762" starttime="20170708 06:17:32.762"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:06.955" starttime="20170708 06:17:32.762"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:06.955" starttime="20170708 06:17:32.012"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:06.956" starttime="20170708 06:17:32.002"></status>
</kw>
<kw name="Split Path" library="OperatingSystem">
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
</arguments>
<assign>
<var>${pnor_path}</var>
<var>${pnor_basename}</var>
</assign>
<msg timestamp="20170708 06:18:06.958" level="INFO">${pnor_path} = /home/fspcibld</msg>
<msg timestamp="20170708 06:18:06.958" level="INFO">${pnor_basename} = witherspoon_20170704n.pnor</msg>
<status status="PASS" endtime="20170708 06:18:06.958" starttime="20170708 06:18:06.957"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Flash PNOR \ /tmp/${pnor_basename}</arg>
</arguments>
<kw name="Flash PNOR" library="utils">
<doc>Calls flash bios update method to flash PNOR image</doc>
<arguments>
<arg>/tmp/witherspoon_20170704n.pnor</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pnor_image}</arg>
</arguments>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170708 06:18:06.971" level="INFO">@{arglist} = [ /tmp/witherspoon_20170704n.pnor ]</msg>
<status status="PASS" endtime="20170708 06:18:06.971" starttime="20170708 06:18:06.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170708 06:18:06.972" level="INFO">${args} = {u'data': [u'/tmp/witherspoon_20170704n.pnor']}</msg>
<status status="PASS" endtime="20170708 06:18:06.972" starttime="20170708 06:18:06.972"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios/</arg>
<arg>update</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:18:06.974" level="INFO">${base_uri} = /org/openbmc/control/flash/bios/</msg>
<status status="PASS" endtime="20170708 06:18:06.974" starttime="20170708 06:18:06.973"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:18:06.976" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:18:06.977" starttime="20170708 06:18:06.976"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:18:06.978" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:18:06.978" starttime="20170708 06:18:06.977"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:18:06.978" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:18:06.978" starttime="20170708 06:18:06.978"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:18:06.979" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:18:06.979" starttime="20170708 06:18:06.979"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:18:07.165" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:18:07.165" starttime="20170708 06:18:06.980"></status>
</kw>
<msg timestamp="20170708 06:18:07.165" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:18:07.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:07.165" starttime="20170708 06:18:06.979"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:18:07.166" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:07.166" starttime="20170708 06:18:07.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:18:07.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:07.167" starttime="20170708 06:18:07.166"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:07.167" starttime="20170708 06:18:06.976"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:07.167" starttime="20170708 06:18:06.975"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:07.167" starttime="20170708 06:18:06.974"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:18:07.168" level="INFO">${base_uri} = /org/openbmc/control/flash/bios//action/update</msg>
<status status="PASS" endtime="20170708 06:18:07.168" starttime="20170708 06:18:07.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:18:07.168" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:18:07.169" starttime="20170708 06:18:07.168"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:07.169" starttime="20170708 06:18:07.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:07.170" starttime="20170708 06:18:07.169"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:18:07.552" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios//action/update, data={"data": ["/tmp/witherspoon_20170704n.pnor"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170708 06:18:07.552" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:07.552" starttime="20170708 06:18:07.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:07.553" starttime="20170708 06:18:07.553"></status>
</kw>
<msg timestamp="20170708 06:18:07.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:07.554" starttime="20170708 06:18:06.974"></status>
</kw>
<msg timestamp="20170708 06:18:07.554" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:07.554" starttime="20170708 06:18:06.972"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:18:07.554" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:07.554" starttime="20170708 06:18:07.554"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>2 min</arg>
<arg>10 sec</arg>
<arg>Is PNOR Flashing</arg>
</arguments>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:18:07.559" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:18:07.559" starttime="20170708 06:18:07.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:18:07.560" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:18:07.560" starttime="20170708 06:18:07.560"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:18:07.561" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:18:07.561" starttime="20170708 06:18:07.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:18:07.561" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:18:07.561" starttime="20170708 06:18:07.561"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:18:08.169" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:18:08.169" starttime="20170708 06:18:07.562"></status>
</kw>
<msg timestamp="20170708 06:18:08.169" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:18:08.169" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:08.169" starttime="20170708 06:18:07.562"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:18:08.170" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:08.170" starttime="20170708 06:18:08.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:18:08.171" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:08.171" starttime="20170708 06:18:08.170"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:08.171" starttime="20170708 06:18:07.558"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:08.171" starttime="20170708 06:18:07.558"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:08.171" starttime="20170708 06:18:07.557"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:18:08.172" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:18:08.172" starttime="20170708 06:18:08.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:08.173" starttime="20170708 06:18:08.172"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:18:08.386" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:18:08.387" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:08.387" starttime="20170708 06:18:08.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:08.387" starttime="20170708 06:18:08.387"></status>
</kw>
<msg timestamp="20170708 06:18:08.388" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:08.388" starttime="20170708 06:18:07.556"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:18:08.388" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:08.388" starttime="20170708 06:18:08.388"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:18:08.389" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:18:08.389" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:18:08.389" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:18:08.389" starttime="20170708 06:18:08.389"></status>
</kw>
<msg timestamp="20170708 06:18:08.389" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:18:08.389" starttime="20170708 06:18:07.556"></status>
</kw>
<status status="FAIL" endtime="20170708 06:18:08.390" starttime="20170708 06:18:07.556"></status>
</kw>
<status status="FAIL" endtime="20170708 06:18:08.390" starttime="20170708 06:18:07.555"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:18:18.394" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:18:18.395" starttime="20170708 06:18:18.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:18:18.396" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:18:18.396" starttime="20170708 06:18:18.395"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:18:18.396" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:18:18.396" starttime="20170708 06:18:18.396"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:18:18.397" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:18:18.397" starttime="20170708 06:18:18.397"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:18:19.064" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:18:19.064" starttime="20170708 06:18:18.398"></status>
</kw>
<msg timestamp="20170708 06:18:19.064" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:18:19.064" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:19.064" starttime="20170708 06:18:18.397"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:18:19.065" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:19.065" starttime="20170708 06:18:19.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:18:19.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:19.066" starttime="20170708 06:18:19.066"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:19.066" starttime="20170708 06:18:18.393"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:19.066" starttime="20170708 06:18:18.393"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:19.066" starttime="20170708 06:18:18.392"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:18:19.067" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:18:19.067" starttime="20170708 06:18:19.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:19.068" starttime="20170708 06:18:19.067"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:18:19.147" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:18:19.147" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:19.147" starttime="20170708 06:18:19.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:19.148" starttime="20170708 06:18:19.147"></status>
</kw>
<msg timestamp="20170708 06:18:19.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:19.148" starttime="20170708 06:18:18.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:18:19.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:19.149" starttime="20170708 06:18:19.148"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:18:19.149" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:18:19.149" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:18:19.149" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:18:19.149" starttime="20170708 06:18:19.149"></status>
</kw>
<msg timestamp="20170708 06:18:19.150" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:18:19.150" starttime="20170708 06:18:18.391"></status>
</kw>
<status status="FAIL" endtime="20170708 06:18:19.150" starttime="20170708 06:18:18.391"></status>
</kw>
<status status="FAIL" endtime="20170708 06:18:19.150" starttime="20170708 06:18:18.390"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:18:29.155" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:18:29.156" starttime="20170708 06:18:29.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:18:29.157" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:18:29.157" starttime="20170708 06:18:29.156"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:18:29.157" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:18:29.157" starttime="20170708 06:18:29.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:18:29.158" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:18:29.158" starttime="20170708 06:18:29.157"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:18:29.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:18:29.343" starttime="20170708 06:18:29.159"></status>
</kw>
<msg timestamp="20170708 06:18:29.343" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:18:29.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:29.343" starttime="20170708 06:18:29.158"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:18:29.344" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:29.344" starttime="20170708 06:18:29.343"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:18:29.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:29.345" starttime="20170708 06:18:29.344"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:29.345" starttime="20170708 06:18:29.154"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:29.345" starttime="20170708 06:18:29.154"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:29.345" starttime="20170708 06:18:29.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:18:29.345" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:18:29.346" starttime="20170708 06:18:29.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:29.346" starttime="20170708 06:18:29.346"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:18:29.944" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:18:29.944" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:29.944" starttime="20170708 06:18:29.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:29.945" starttime="20170708 06:18:29.945"></status>
</kw>
<msg timestamp="20170708 06:18:29.945" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:29.945" starttime="20170708 06:18:29.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:18:29.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:29.946" starttime="20170708 06:18:29.946"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:18:29.947" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:18:29.947" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:18:29.947" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:18:29.947" starttime="20170708 06:18:29.946"></status>
</kw>
<msg timestamp="20170708 06:18:29.947" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:18:29.947" starttime="20170708 06:18:29.152"></status>
</kw>
<status status="FAIL" endtime="20170708 06:18:29.948" starttime="20170708 06:18:29.151"></status>
</kw>
<status status="FAIL" endtime="20170708 06:18:29.948" starttime="20170708 06:18:29.151"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:18:39.954" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:18:39.954" starttime="20170708 06:18:39.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:18:39.955" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:18:39.955" starttime="20170708 06:18:39.955"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:18:39.956" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:18:39.956" starttime="20170708 06:18:39.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:18:39.957" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:18:39.957" starttime="20170708 06:18:39.956"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:18:40.783" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:18:40.784" starttime="20170708 06:18:39.957"></status>
</kw>
<msg timestamp="20170708 06:18:40.784" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:18:40.784" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:40.784" starttime="20170708 06:18:39.957"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:18:40.785" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:40.785" starttime="20170708 06:18:40.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:18:40.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:40.785" starttime="20170708 06:18:40.785"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:40.786" starttime="20170708 06:18:39.953"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:40.786" starttime="20170708 06:18:39.952"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:40.786" starttime="20170708 06:18:39.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:18:40.786" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:18:40.786" starttime="20170708 06:18:40.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:40.787" starttime="20170708 06:18:40.787"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:18:40.866" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:18:40.866" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:40.866" starttime="20170708 06:18:40.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:40.867" starttime="20170708 06:18:40.867"></status>
</kw>
<msg timestamp="20170708 06:18:40.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:40.867" starttime="20170708 06:18:39.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:18:40.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:40.868" starttime="20170708 06:18:40.867"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:18:40.868" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:18:40.868" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:18:40.869" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:18:40.869" starttime="20170708 06:18:40.868"></status>
</kw>
<msg timestamp="20170708 06:18:40.869" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:18:40.869" starttime="20170708 06:18:39.950"></status>
</kw>
<status status="FAIL" endtime="20170708 06:18:40.869" starttime="20170708 06:18:39.949"></status>
</kw>
<status status="FAIL" endtime="20170708 06:18:40.869" starttime="20170708 06:18:39.948"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:18:50.875" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:18:50.876" starttime="20170708 06:18:50.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:18:50.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:18:50.876" starttime="20170708 06:18:50.876"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:18:50.877" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:18:50.877" starttime="20170708 06:18:50.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:18:50.878" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:18:50.878" starttime="20170708 06:18:50.877"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:18:51.054" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:18:51.054" starttime="20170708 06:18:50.878"></status>
</kw>
<msg timestamp="20170708 06:18:51.054" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:18:51.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:51.054" starttime="20170708 06:18:50.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:18:51.055" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:51.055" starttime="20170708 06:18:51.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:18:51.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:51.056" starttime="20170708 06:18:51.055"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:51.057" starttime="20170708 06:18:50.874"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:51.057" starttime="20170708 06:18:50.873"></status>
</kw>
<status status="PASS" endtime="20170708 06:18:51.057" starttime="20170708 06:18:50.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:18:51.058" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:18:51.058" starttime="20170708 06:18:51.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:51.059" starttime="20170708 06:18:51.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:18:51.143" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:18:51.144" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:51.144" starttime="20170708 06:18:51.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:18:51.144" starttime="20170708 06:18:51.144"></status>
</kw>
<msg timestamp="20170708 06:18:51.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:18:51.145" starttime="20170708 06:18:50.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:18:51.145" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:18:51.145" starttime="20170708 06:18:51.145"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:18:51.146" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:18:51.146" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:18:51.146" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:18:51.146" starttime="20170708 06:18:51.146"></status>
</kw>
<msg timestamp="20170708 06:18:51.146" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:18:51.147" starttime="20170708 06:18:50.871"></status>
</kw>
<status status="FAIL" endtime="20170708 06:18:51.147" starttime="20170708 06:18:50.871"></status>
</kw>
<status status="FAIL" endtime="20170708 06:18:51.147" starttime="20170708 06:18:50.870"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:19:01.154" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:19:01.155" starttime="20170708 06:19:01.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:19:01.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:19:01.156" starttime="20170708 06:19:01.155"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:19:01.156" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:19:01.156" starttime="20170708 06:19:01.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:19:01.157" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:19:01.157" starttime="20170708 06:19:01.157"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:19:01.337" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:19:01.337" starttime="20170708 06:19:01.158"></status>
</kw>
<msg timestamp="20170708 06:19:01.337" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:19:01.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:01.337" starttime="20170708 06:19:01.157"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:19:01.338" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:01.338" starttime="20170708 06:19:01.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:19:01.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:01.338" starttime="20170708 06:19:01.338"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:01.339" starttime="20170708 06:19:01.153"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:01.339" starttime="20170708 06:19:01.153"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:01.339" starttime="20170708 06:19:01.152"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:19:01.339" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:19:01.339" starttime="20170708 06:19:01.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:19:01.340" starttime="20170708 06:19:01.340"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:19:01.421" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:19:01.421" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:01.421" starttime="20170708 06:19:01.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:19:01.422" starttime="20170708 06:19:01.422"></status>
</kw>
<msg timestamp="20170708 06:19:01.422" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:01.422" starttime="20170708 06:19:01.151"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:19:01.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:01.423" starttime="20170708 06:19:01.422"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:19:01.424" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:19:01.424" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:19:01.424" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:19:01.424" starttime="20170708 06:19:01.423"></status>
</kw>
<msg timestamp="20170708 06:19:01.424" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:19:01.424" starttime="20170708 06:19:01.149"></status>
</kw>
<status status="FAIL" endtime="20170708 06:19:01.424" starttime="20170708 06:19:01.148"></status>
</kw>
<status status="FAIL" endtime="20170708 06:19:01.424" starttime="20170708 06:19:01.147"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:19:11.430" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:19:11.431" starttime="20170708 06:19:11.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:19:11.431" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:19:11.431" starttime="20170708 06:19:11.431"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:19:11.432" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:19:11.432" starttime="20170708 06:19:11.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:19:11.433" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:19:11.433" starttime="20170708 06:19:11.432"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:19:11.609" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:19:11.609" starttime="20170708 06:19:11.433"></status>
</kw>
<msg timestamp="20170708 06:19:11.609" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:19:11.609" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:11.609" starttime="20170708 06:19:11.433"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:19:11.610" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:11.610" starttime="20170708 06:19:11.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:19:11.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:11.611" starttime="20170708 06:19:11.610"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:11.611" starttime="20170708 06:19:11.429"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:11.611" starttime="20170708 06:19:11.428"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:11.611" starttime="20170708 06:19:11.427"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:19:11.612" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:19:11.612" starttime="20170708 06:19:11.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:19:11.612" starttime="20170708 06:19:11.612"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:19:11.695" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:19:11.695" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:11.695" starttime="20170708 06:19:11.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:19:11.696" starttime="20170708 06:19:11.695"></status>
</kw>
<msg timestamp="20170708 06:19:11.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:11.696" starttime="20170708 06:19:11.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:19:11.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:11.697" starttime="20170708 06:19:11.696"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:19:11.697" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:19:11.697" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:19:11.697" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:19:11.697" starttime="20170708 06:19:11.697"></status>
</kw>
<msg timestamp="20170708 06:19:11.698" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:19:11.698" starttime="20170708 06:19:11.426"></status>
</kw>
<status status="FAIL" endtime="20170708 06:19:11.698" starttime="20170708 06:19:11.426"></status>
</kw>
<status status="FAIL" endtime="20170708 06:19:11.698" starttime="20170708 06:19:11.425"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:19:21.703" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:19:21.704" starttime="20170708 06:19:21.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:19:21.704" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:19:21.704" starttime="20170708 06:19:21.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:19:21.705" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:19:21.705" starttime="20170708 06:19:21.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:19:21.706" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:19:21.706" starttime="20170708 06:19:21.705"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:19:21.893" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:19:21.893" starttime="20170708 06:19:21.706"></status>
</kw>
<msg timestamp="20170708 06:19:21.893" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:19:21.893" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:21.893" starttime="20170708 06:19:21.706"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:19:21.894" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:21.894" starttime="20170708 06:19:21.894"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:19:21.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:21.895" starttime="20170708 06:19:21.895"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:21.895" starttime="20170708 06:19:21.702"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:21.895" starttime="20170708 06:19:21.702"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:21.895" starttime="20170708 06:19:21.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:19:21.896" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:19:21.896" starttime="20170708 06:19:21.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:19:21.897" starttime="20170708 06:19:21.896"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:19:21.984" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:19:21.985" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:21.985" starttime="20170708 06:19:21.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:19:21.985" starttime="20170708 06:19:21.985"></status>
</kw>
<msg timestamp="20170708 06:19:21.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:21.986" starttime="20170708 06:19:21.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:19:21.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:21.986" starttime="20170708 06:19:21.986"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:19:21.987" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:19:21.987" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:19:21.987" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:19:21.987" starttime="20170708 06:19:21.987"></status>
</kw>
<msg timestamp="20170708 06:19:21.987" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:19:21.988" starttime="20170708 06:19:21.700"></status>
</kw>
<status status="FAIL" endtime="20170708 06:19:21.988" starttime="20170708 06:19:21.699"></status>
</kw>
<status status="FAIL" endtime="20170708 06:19:21.988" starttime="20170708 06:19:21.699"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:19:31.995" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:19:31.996" starttime="20170708 06:19:31.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:19:31.996" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:19:31.997" starttime="20170708 06:19:31.996"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:19:31.998" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:19:31.998" starttime="20170708 06:19:31.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:19:31.999" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:19:31.999" starttime="20170708 06:19:31.998"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:19:32.179" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:19:32.179" starttime="20170708 06:19:32.000"></status>
</kw>
<msg timestamp="20170708 06:19:32.179" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:19:32.179" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:32.179" starttime="20170708 06:19:31.999"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:19:32.180" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:32.180" starttime="20170708 06:19:32.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:19:32.181" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:32.181" starttime="20170708 06:19:32.180"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:32.181" starttime="20170708 06:19:31.993"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:32.181" starttime="20170708 06:19:31.993"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:32.181" starttime="20170708 06:19:31.992"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:19:32.182" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:19:32.182" starttime="20170708 06:19:32.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:19:32.182" starttime="20170708 06:19:32.182"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:19:32.265" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:19:32.265" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:32.265" starttime="20170708 06:19:32.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:19:32.266" starttime="20170708 06:19:32.265"></status>
</kw>
<msg timestamp="20170708 06:19:32.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:32.266" starttime="20170708 06:19:31.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:19:32.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:32.267" starttime="20170708 06:19:32.266"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:19:32.267" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:19:32.267" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:19:32.267" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:19:32.267" starttime="20170708 06:19:32.267"></status>
</kw>
<msg timestamp="20170708 06:19:32.268" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:19:32.268" starttime="20170708 06:19:31.990"></status>
</kw>
<status status="FAIL" endtime="20170708 06:19:32.268" starttime="20170708 06:19:31.989"></status>
</kw>
<status status="FAIL" endtime="20170708 06:19:32.268" starttime="20170708 06:19:31.989"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:19:42.273" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:19:42.274" starttime="20170708 06:19:42.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:19:42.274" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:19:42.274" starttime="20170708 06:19:42.274"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:19:42.275" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:19:42.275" starttime="20170708 06:19:42.275"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:19:42.276" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:19:42.276" starttime="20170708 06:19:42.275"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:19:42.505" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:19:42.506" starttime="20170708 06:19:42.276"></status>
</kw>
<msg timestamp="20170708 06:19:42.506" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:19:42.506" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:42.506" starttime="20170708 06:19:42.276"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:19:42.507" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:42.507" starttime="20170708 06:19:42.506"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:19:42.507" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:42.507" starttime="20170708 06:19:42.507"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:42.508" starttime="20170708 06:19:42.272"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:42.508" starttime="20170708 06:19:42.272"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:42.508" starttime="20170708 06:19:42.271"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:19:42.508" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:19:42.508" starttime="20170708 06:19:42.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:19:42.509" starttime="20170708 06:19:42.509"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:19:42.597" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:19:42.598" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:42.598" starttime="20170708 06:19:42.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:19:42.598" starttime="20170708 06:19:42.598"></status>
</kw>
<msg timestamp="20170708 06:19:42.599" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:42.599" starttime="20170708 06:19:42.270"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:19:42.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:42.599" starttime="20170708 06:19:42.599"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:19:42.600" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:19:42.600" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:19:42.600" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:19:42.600" starttime="20170708 06:19:42.600"></status>
</kw>
<msg timestamp="20170708 06:19:42.600" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:19:42.600" starttime="20170708 06:19:42.270"></status>
</kw>
<status status="FAIL" endtime="20170708 06:19:42.601" starttime="20170708 06:19:42.269"></status>
</kw>
<status status="FAIL" endtime="20170708 06:19:42.601" starttime="20170708 06:19:42.269"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:19:52.606" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:19:52.607" starttime="20170708 06:19:52.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:19:52.608" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:19:52.608" starttime="20170708 06:19:52.607"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:19:52.608" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:19:52.608" starttime="20170708 06:19:52.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:19:52.609" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:19:52.609" starttime="20170708 06:19:52.609"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:19:52.788" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:19:52.788" starttime="20170708 06:19:52.610"></status>
</kw>
<msg timestamp="20170708 06:19:52.788" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:19:52.788" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:52.788" starttime="20170708 06:19:52.609"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:19:52.789" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:52.789" starttime="20170708 06:19:52.788"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:19:52.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:52.790" starttime="20170708 06:19:52.789"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:52.790" starttime="20170708 06:19:52.605"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:52.790" starttime="20170708 06:19:52.605"></status>
</kw>
<status status="PASS" endtime="20170708 06:19:52.790" starttime="20170708 06:19:52.604"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:19:52.790" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:19:52.791" starttime="20170708 06:19:52.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:19:52.791" starttime="20170708 06:19:52.791"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:19:52.873" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:19:52.873" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:52.873" starttime="20170708 06:19:52.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:19:52.873" starttime="20170708 06:19:52.873"></status>
</kw>
<msg timestamp="20170708 06:19:52.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:19:52.874" starttime="20170708 06:19:52.603"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:19:52.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:19:52.874" starttime="20170708 06:19:52.874"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:19:52.875" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:19:52.875" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:19:52.875" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:19:52.875" starttime="20170708 06:19:52.875"></status>
</kw>
<msg timestamp="20170708 06:19:52.875" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:19:52.876" starttime="20170708 06:19:52.603"></status>
</kw>
<status status="FAIL" endtime="20170708 06:19:52.876" starttime="20170708 06:19:52.602"></status>
</kw>
<status status="FAIL" endtime="20170708 06:19:52.876" starttime="20170708 06:19:52.601"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:20:02.881" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:20:02.884" starttime="20170708 06:20:02.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:20:02.884" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:20:02.884" starttime="20170708 06:20:02.884"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:20:02.885" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:20:02.885" starttime="20170708 06:20:02.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:20:02.886" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:20:02.886" starttime="20170708 06:20:02.885"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:20:04.429" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:20:04.429" starttime="20170708 06:20:02.886"></status>
</kw>
<msg timestamp="20170708 06:20:04.429" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:04.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:04.429" starttime="20170708 06:20:02.886"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:20:04.430" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:04.430" starttime="20170708 06:20:04.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:04.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:04.431" starttime="20170708 06:20:04.430"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:04.431" starttime="20170708 06:20:02.880"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:04.431" starttime="20170708 06:20:02.879"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:04.432" starttime="20170708 06:20:02.879"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:20:04.432" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:20:04.433" starttime="20170708 06:20:04.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:04.433" starttime="20170708 06:20:04.433"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:20:04.514" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:20:04.514" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:04.514" starttime="20170708 06:20:04.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:04.514" starttime="20170708 06:20:04.514"></status>
</kw>
<msg timestamp="20170708 06:20:04.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:04.515" starttime="20170708 06:20:02.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:04.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:04.515" starttime="20170708 06:20:04.515"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:20:04.516" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:20:04.516" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:20:04.516" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:20:04.516" starttime="20170708 06:20:04.516"></status>
</kw>
<msg timestamp="20170708 06:20:04.516" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:20:04.516" starttime="20170708 06:20:02.877"></status>
</kw>
<status status="FAIL" endtime="20170708 06:20:04.517" starttime="20170708 06:20:02.877"></status>
</kw>
<status status="FAIL" endtime="20170708 06:20:04.517" starttime="20170708 06:20:02.876"></status>
</kw>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:20:14.522" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:20:14.523" starttime="20170708 06:20:14.521"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:20:14.523" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:20:14.523" starttime="20170708 06:20:14.523"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:20:14.524" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:20:14.524" starttime="20170708 06:20:14.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:20:14.525" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:20:14.525" starttime="20170708 06:20:14.525"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:20:14.704" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:20:14.704" starttime="20170708 06:20:14.526"></status>
</kw>
<msg timestamp="20170708 06:20:14.704" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:14.704" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:14.704" starttime="20170708 06:20:14.525"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:20:14.705" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:14.705" starttime="20170708 06:20:14.705"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:14.706" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:14.706" starttime="20170708 06:20:14.705"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:14.706" starttime="20170708 06:20:14.521"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:14.706" starttime="20170708 06:20:14.520"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:14.706" starttime="20170708 06:20:14.520"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:20:14.707" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170708 06:20:14.707" starttime="20170708 06:20:14.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:14.707" starttime="20170708 06:20:14.707"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:20:14.799" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170708 06:20:14.799" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:14.799" starttime="20170708 06:20:14.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:14.800" starttime="20170708 06:20:14.800"></status>
</kw>
<msg timestamp="20170708 06:20:14.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:14.800" starttime="20170708 06:20:14.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:14.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:14.801" starttime="20170708 06:20:14.801"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:20:14.802" level="INFO">To JSON using : content={
  "filename": "/tmp/witherspoon_20170704n.pnor", 
  "flasher_instance": "bios", 
  "flasher_name": "flasher.exe", 
  "flasher_path": "/usr/sbin/flasher.exe", 
  "lock": 0, 
  "name": "", 
  "status": "Flashing"
} </msg>
<msg timestamp="20170708 06:20:14.802" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:20:14.802" level="INFO">${content} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_20170704n.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher....</msg>
<status status="PASS" endtime="20170708 06:20:14.802" starttime="20170708 06:20:14.801"></status>
</kw>
<msg timestamp="20170708 06:20:14.802" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:20:14.802" starttime="20170708 06:20:14.518"></status>
</kw>
<status status="FAIL" endtime="20170708 06:20:14.803" starttime="20170708 06:20:14.518"></status>
</kw>
<status status="FAIL" endtime="20170708 06:20:14.803" starttime="20170708 06:20:14.517"></status>
</kw>
<msg timestamp="20170708 06:20:14.803" level="FAIL">Keyword 'Is PNOR Flashing' failed after retrying for 2 minutes. The last error was: Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:20:14.803" starttime="20170708 06:18:07.555"></status>
</kw>
<status status="FAIL" endtime="20170708 06:20:14.803" starttime="20170708 06:18:06.970"></status>
</kw>
<msg timestamp="20170708 06:20:14.804" level="FAIL">Keyword 'Is PNOR Flashing' failed after retrying for 2 minutes. The last error was: Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 06:20:14.804" starttime="20170708 06:18:06.958"></status>
</kw>
<status status="FAIL" endtime="20170708 06:20:14.804" starttime="20170708 06:17:32.002"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170708 06:20:14.806" starttime="20170708 06:20:14.805"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:20:14.828" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:20:14.828" starttime="20170708 06:20:14.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:20:14.829" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:20:14.829" starttime="20170708 06:20:14.828"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:20:14.829" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:20:14.829" starttime="20170708 06:20:14.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:20:14.830" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:20:14.830" starttime="20170708 06:20:14.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:20:15.010" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:20:15.010" starttime="20170708 06:20:14.831"></status>
</kw>
<msg timestamp="20170708 06:20:15.010" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:15.010" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:15.011" starttime="20170708 06:20:14.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:20:15.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:15.012" starttime="20170708 06:20:15.011"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:15.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:15.013" starttime="20170708 06:20:15.012"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:15.013" starttime="20170708 06:20:14.826"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:15.013" starttime="20170708 06:20:14.826"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:15.013" starttime="20170708 06:20:14.825"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:20:15.014" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 06:20:15.014" starttime="20170708 06:20:15.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:15.015" starttime="20170708 06:20:15.015"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:20:15.078" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 06:20:15.079" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:15.079" starttime="20170708 06:20:15.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:15.079" starttime="20170708 06:20:15.079"></status>
</kw>
<msg timestamp="20170708 06:20:15.080" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:15.080" starttime="20170708 06:20:14.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:15.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:15.080" starttime="20170708 06:20:15.080"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:20:15.081" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 06:20:15.081" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:20:15.081" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170708 06:20:15.081" starttime="20170708 06:20:15.081"></status>
</kw>
<msg timestamp="20170708 06:20:15.081" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170708 06:20:15.081" starttime="20170708 06:20:14.823"></status>
</kw>
<msg timestamp="20170708 06:20:15.082" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170708 06:20:15.082" starttime="20170708 06:20:14.823"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170708 06:20:15.083" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170708 06:20:15.083" starttime="20170708 06:20:15.082"></status>
</kw>
<msg timestamp="20170708 06:20:15.083" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 06:20:15.083" starttime="20170708 06:20:15.082"></status>
</kw>
<msg timestamp="20170708 06:20:15.083" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 06:20:15.083" starttime="20170708 06:20:14.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 06:20:15.101" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170708 06:20:15.101" starttime="20170708 06:20:15.100"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 06:20:15.113" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 06:20:18.132" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 06:20:18.132" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.63 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=2.78 ms
64 bytes from 9.3.86.161: icmp_seq=...</msg>
<status status="PASS" endtime="20170708 06:20:18.132" starttime="20170708 06:20:15.101"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.138" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.63 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=2.78 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.701 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=1.27 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 0.701/1.598/2.780/0.759 ms</msg>
<status status="PASS" endtime="20170708 06:20:18.138" starttime="20170708 06:20:18.135"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:18.139" starttime="20170708 06:20:18.139"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.139" starttime="20170708 06:20:15.100"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 06:20:18.156" level="INFO">${cur_time} = 2017-07-08 06:20:18:155579</msg>
<status status="PASS" endtime="20170708 06:20:18.156" starttime="20170708 06:20:18.155"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 06:20:18.158" level="INFO">${cur_time} = 20170708062018155579</msg>
<status status="PASS" endtime="20170708 06:20:18.158" starttime="20170708 06:20:18.157"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.158" starttime="20170708 06:20:18.155"></status>
</kw>
<msg timestamp="20170708 06:20:18.164" level="INFO">${FFDC_TIME} = 20170708062018155579</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170708 06:20:18.165" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170708 06:20:18.165" starttime="20170708 06:20:18.165"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170708 06:20:18.166" level="INFO">${suite_name} = 20170708062018155579_TestBiosUpdate</msg>
<status status="PASS" endtime="20170708 06:20:18.166" starttime="20170708 06:20:18.166"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170708 06:20:18.167" level="INFO">${test_name} = HostBIOSUpdate</msg>
<status status="PASS" endtime="20170708 06:20:18.167" starttime="20170708 06:20:18.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170708 06:20:18.167" level="INFO">${test_name} = 20170708062018155579_HostBIOSUpdate</msg>
<status status="PASS" endtime="20170708 06:20:18.167" starttime="20170708 06:20:18.167"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.168" starttime="20170708 06:20:18.165"></status>
</kw>
<msg timestamp="20170708 06:20:18.168" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/</msg>
<msg timestamp="20170708 06:20:18.168" level="INFO">${FFDC_PREFIX} = 20170708062018155579_</msg>
<msg timestamp="20170708 06:20:18.193" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/</arg>
</arguments>
<msg timestamp="20170708 06:20:18.195" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.195" starttime="20170708 06:20:18.194"></status>
</kw>
<msg timestamp="20170708 06:20:18.201" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.217" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.217" starttime="20170708 06:20:18.215"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.217" starttime="20170708 06:20:18.215"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.219" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.219" starttime="20170708 06:20:18.218"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.219" starttime="20170708 06:20:18.217"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.221" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.221" starttime="20170708 06:20:18.220"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.221" starttime="20170708 06:20:18.219"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.222" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.222" starttime="20170708 06:20:18.222"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.222" starttime="20170708 06:20:18.221"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.224" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.224" starttime="20170708 06:20:18.223"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.224" starttime="20170708 06:20:18.222"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.225" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.225" starttime="20170708 06:20:18.225"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.225" starttime="20170708 06:20:18.224"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.226" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.226" starttime="20170708 06:20:18.226"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.227" starttime="20170708 06:20:18.225"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.228" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.228" starttime="20170708 06:20:18.227"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.228" starttime="20170708 06:20:18.227"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.229" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.229" starttime="20170708 06:20:18.229"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.229" starttime="20170708 06:20:18.228"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.231" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.231" starttime="20170708 06:20:18.230"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.231" starttime="20170708 06:20:18.230"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.232" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.232" starttime="20170708 06:20:18.232"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.232" starttime="20170708 06:20:18.231"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.234" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.234" starttime="20170708 06:20:18.234"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.234" starttime="20170708 06:20:18.233"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.235" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:18.235" starttime="20170708 06:20:18.235"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.236" starttime="20170708 06:20:18.234"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 06:20:18.238" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 06:20:18.238" starttime="20170708 06:20:18.238"></status>
</kw>
<msg timestamp="20170708 06:20:18.238" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 06:20:18.238" starttime="20170708 06:20:18.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:18.239" starttime="20170708 06:20:18.239"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.239" starttime="20170708 06:20:18.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:18.240" starttime="20170708 06:20:18.240"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 06:20:18.241" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 06:20:18.241" starttime="20170708 06:20:18.241"></status>
</kw>
<msg timestamp="20170708 06:20:18.241" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 06:20:18.241" starttime="20170708 06:20:18.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:18.243" starttime="20170708 06:20:18.243"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.243" starttime="20170708 06:20:18.242"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:18.243" starttime="20170708 06:20:18.242"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 06:20:18.244" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 06:20:20.794" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 06:20:20.794" starttime="20170708 06:20:18.244"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:20.795" starttime="20170708 06:20:18.236"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:20:20.795" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170708 06:20:21.688" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 06:20:21.689" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170708 06:20:21.689" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 06:20:21.689" starttime="20170708 06:20:20.795"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 06:20:21.689" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 06:20:21.690" starttime="20170708 06:20:21.689"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170708 06:20:21.690" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170708 06:20:21.690" starttime="20170708 06:20:21.690"></status>
</kw>
<msg timestamp="20170708 06:20:21.690" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170708 06:20:21.690" starttime="20170708 06:20:18.236"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:21.692" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:21.692" starttime="20170708 06:20:21.691"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.692" starttime="20170708 06:20:21.691"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.692" starttime="20170708 06:20:18.230"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:21.693" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:21.693" starttime="20170708 06:20:21.693"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.693" starttime="20170708 06:20:21.692"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 06:20:21.694" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170708 06:20:21.694" starttime="20170708 06:20:21.694"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:21.696" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:21.696" starttime="20170708 06:20:21.695"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.696" starttime="20170708 06:20:21.695"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:21.697" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:21.697" starttime="20170708 06:20:21.697"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.697" starttime="20170708 06:20:21.696"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.698" starttime="20170708 06:20:21.694"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:21.699" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:21.699" starttime="20170708 06:20:21.698"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.699" starttime="20170708 06:20:21.698"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:21.700" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:21.700" starttime="20170708 06:20:21.700"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.700" starttime="20170708 06:20:21.699"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.700" starttime="20170708 06:20:21.698"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:21.701" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:21.702" starttime="20170708 06:20:21.701"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.702" starttime="20170708 06:20:21.701"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:21.703" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:21.703" starttime="20170708 06:20:21.702"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.703" starttime="20170708 06:20:21.702"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.703" starttime="20170708 06:20:21.700"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.703" starttime="20170708 06:20:21.694"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:21.704" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:21.704" starttime="20170708 06:20:21.704"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.704" starttime="20170708 06:20:21.703"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.704" starttime="20170708 06:20:18.214"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 06:20:21.713" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170708 06:20:21.713" starttime="20170708 06:20:21.712"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170708 06:20:21.714" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170708 06:20:21.714" starttime="20170708 06:20:21.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:21.715" starttime="20170708 06:20:21.715"></status>
</kw>
<msg timestamp="20170708 06:20:21.715" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170708 06:20:21.715" starttime="20170708 06:20:21.714"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:21.718" starttime="20170708 06:20:21.717"></status>
</kw>
<msg timestamp="20170708 06:20:21.718" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:21.718" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 06:20:21.718" starttime="20170708 06:20:21.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:21.719" starttime="20170708 06:20:21.718"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 06:20:21.745" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 06:20:21.745" starttime="20170708 06:20:21.744"></status>
</kw>
<msg timestamp="20170708 06:20:21.745" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 06:20:21.745" starttime="20170708 06:20:21.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:21.747" starttime="20170708 06:20:21.746"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.747" starttime="20170708 06:20:21.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:21.748" starttime="20170708 06:20:21.747"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 06:20:21.750" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 06:20:21.750" starttime="20170708 06:20:21.749"></status>
</kw>
<msg timestamp="20170708 06:20:21.750" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 06:20:21.750" starttime="20170708 06:20:21.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:21.752" starttime="20170708 06:20:21.752"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.752" starttime="20170708 06:20:21.751"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:21.753" starttime="20170708 06:20:21.750"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 06:20:21.753" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 06:20:23.303" level="INFO">Read output:</msg>
<status status="PASS" endtime="20170708 06:20:23.303" starttime="20170708 06:20:21.753"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:23.303" starttime="20170708 06:20:21.743"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 06:20:23.304" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170708 06:20:23.304" starttime="20170708 06:20:23.304"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 06:20:23.306" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170708 06:20:23.306" starttime="20170708 06:20:23.306"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 06:20:23.312" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170708 06:20:23.312" starttime="20170708 06:20:23.307"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:23.315" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:23.315" starttime="20170708 06:20:23.314"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:23.315" starttime="20170708 06:20:23.314"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:23.316" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:23.316" starttime="20170708 06:20:23.316"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:23.316" starttime="20170708 06:20:23.315"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:23.318" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:23.318" starttime="20170708 06:20:23.317"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:23.318" starttime="20170708 06:20:23.317"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:23.319" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:23.319" starttime="20170708 06:20:23.319"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:23.319" starttime="20170708 06:20:23.318"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:23.319" starttime="20170708 06:20:23.313"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:23.319" starttime="20170708 06:20:23.313"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:20:23.320" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170708 06:20:26.896" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 06:20:26.897" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170708 06:20:26.897" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 06:20:26.897" starttime="20170708 06:20:23.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:26.904" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:26.904" starttime="20170708 06:20:26.903"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.904" starttime="20170708 06:20:26.903"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.904" starttime="20170708 06:20:26.897"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.905" starttime="20170708 06:20:23.312"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.905" starttime="20170708 06:20:23.312"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.905" starttime="20170708 06:20:23.312"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.905" starttime="20170708 06:20:23.305"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.905" starttime="20170708 06:20:23.305"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 06:20:26.906" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170708 06:20:26.906" starttime="20170708 06:20:26.906"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 06:20:26.907" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170708 06:20:26.907" starttime="20170708 06:20:26.906"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:26.910" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:26.910" starttime="20170708 06:20:26.909"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.910" starttime="20170708 06:20:26.909"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:26.911" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:26.911" starttime="20170708 06:20:26.911"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.911" starttime="20170708 06:20:26.910"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:26.913" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:26.913" starttime="20170708 06:20:26.912"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.913" starttime="20170708 06:20:26.912"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:26.914" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:26.914" starttime="20170708 06:20:26.913"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.914" starttime="20170708 06:20:26.913"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.914" starttime="20170708 06:20:26.908"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:26.914" starttime="20170708 06:20:26.908"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:20:26.915" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170708 06:20:27.184" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170708 06:20:27.184" level="INFO">${stdout} = </msg>
<msg timestamp="20170708 06:20:27.184" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170708 06:20:27.184" starttime="20170708 06:20:26.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.194" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.194" starttime="20170708 06:20:27.194"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.195" starttime="20170708 06:20:27.192"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.195" starttime="20170708 06:20:27.185"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.195" starttime="20170708 06:20:26.907"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.195" starttime="20170708 06:20:26.907"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.198" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.198" starttime="20170708 06:20:27.198"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.198" starttime="20170708 06:20:27.197"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.200" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.200" starttime="20170708 06:20:27.199"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.200" starttime="20170708 06:20:27.199"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.201" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.201" starttime="20170708 06:20:27.201"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.201" starttime="20170708 06:20:27.200"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.202" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.202" starttime="20170708 06:20:27.202"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.202" starttime="20170708 06:20:27.201"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.203" starttime="20170708 06:20:27.196"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.203" starttime="20170708 06:20:27.196"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:20:27.203" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170708 06:20:27.513" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 06:20:27.513" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-108"
VERSION_ID="v1.99.7-108-gc34efb9"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<msg timestamp="20170708 06:20:27.513" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 06:20:27.513" starttime="20170708 06:20:27.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.520" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.520" starttime="20170708 06:20:27.519"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.520" starttime="20170708 06:20:27.519"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.520" starttime="20170708 06:20:27.514"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.520" starttime="20170708 06:20:27.195"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.520" starttime="20170708 06:20:27.195"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.520" starttime="20170708 06:20:26.907"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.521" starttime="20170708 06:20:26.905"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.521" starttime="20170708 06:20:26.905"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 06:20:27.522" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170708 06:20:27.522" starttime="20170708 06:20:27.521"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.523" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170708 06:20:27.523" starttime="20170708 06:20:27.522"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.526" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.526" starttime="20170708 06:20:27.525"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.526" starttime="20170708 06:20:27.525"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.527" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.527" starttime="20170708 06:20:27.527"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.527" starttime="20170708 06:20:27.526"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.528" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.529" starttime="20170708 06:20:27.528"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.529" starttime="20170708 06:20:27.528"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.530" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.530" starttime="20170708 06:20:27.530"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.530" starttime="20170708 06:20:27.529"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.530" starttime="20170708 06:20:27.524"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.531" starttime="20170708 06:20:27.524"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:20:27.531" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170708 06:20:27.885" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 06:20:27.885" level="INFO">${stdout} =  06:20:40 up 5 min,  load average: 1.61, 2.10, 1.10</msg>
<msg timestamp="20170708 06:20:27.885" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 06:20:27.885" starttime="20170708 06:20:27.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.892" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.892" starttime="20170708 06:20:27.891"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.892" starttime="20170708 06:20:27.890"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.892" starttime="20170708 06:20:27.885"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.892" starttime="20170708 06:20:27.523"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.892" starttime="20170708 06:20:27.523"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.895" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.895" starttime="20170708 06:20:27.895"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.895" starttime="20170708 06:20:27.894"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.897" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.897" starttime="20170708 06:20:27.897"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.897" starttime="20170708 06:20:27.895"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.898" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.898" starttime="20170708 06:20:27.898"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.899" starttime="20170708 06:20:27.897"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:27.900" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:27.900" starttime="20170708 06:20:27.899"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.900" starttime="20170708 06:20:27.899"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.900" starttime="20170708 06:20:27.894"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:27.900" starttime="20170708 06:20:27.893"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:20:27.901" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170708 06:20:29.318" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 06:20:29.318" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg timestamp="20170708 06:20:29.318" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 06:20:29.318" starttime="20170708 06:20:27.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:29.325" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:29.325" starttime="20170708 06:20:29.325"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.325" starttime="20170708 06:20:29.324"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.325" starttime="20170708 06:20:29.319"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.326" starttime="20170708 06:20:27.892"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.326" starttime="20170708 06:20:27.892"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:29.331" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:29.331" starttime="20170708 06:20:29.330"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.331" starttime="20170708 06:20:29.328"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:29.332" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:29.332" starttime="20170708 06:20:29.332"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.332" starttime="20170708 06:20:29.331"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:29.333" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:29.334" starttime="20170708 06:20:29.333"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.334" starttime="20170708 06:20:29.333"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:29.335" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:29.335" starttime="20170708 06:20:29.334"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.335" starttime="20170708 06:20:29.334"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.335" starttime="20170708 06:20:29.327"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.335" starttime="20170708 06:20:29.327"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:20:29.336" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170708 06:20:29.690" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 06:20:29.690" level="INFO">${stdout} = Linux witherspoon 4.10.17-7858cdff46b6d8aa4a4f88884a0623ff50fb78c9 #1 Sat Jul 8 06:02:17 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170708 06:20:29.690" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 06:20:29.690" starttime="20170708 06:20:29.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:29.697" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:29.697" starttime="20170708 06:20:29.696"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.697" starttime="20170708 06:20:29.696"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.697" starttime="20170708 06:20:29.691"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.697" starttime="20170708 06:20:29.326"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.697" starttime="20170708 06:20:29.326"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.697" starttime="20170708 06:20:27.523"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.698" starttime="20170708 06:20:27.521"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.698" starttime="20170708 06:20:27.521"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.698" starttime="20170708 06:20:23.304"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.698" starttime="20170708 06:20:21.742"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.698" starttime="20170708 06:20:21.719"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.698" starttime="20170708 06:20:21.716"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.698" starttime="20170708 06:20:21.716"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:29.700" starttime="20170708 06:20:29.700"></status>
</kw>
<msg timestamp="20170708 06:20:29.700" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:29.700" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 06:20:29.700" starttime="20170708 06:20:29.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:29.701" starttime="20170708 06:20:29.700"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 06:20:29.724" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 06:20:29.724" starttime="20170708 06:20:29.724"></status>
</kw>
<msg timestamp="20170708 06:20:29.724" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 06:20:29.725" starttime="20170708 06:20:29.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:29.726" starttime="20170708 06:20:29.725"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.726" starttime="20170708 06:20:29.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:29.726" starttime="20170708 06:20:29.726"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 06:20:29.727" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 06:20:29.728" starttime="20170708 06:20:29.727"></status>
</kw>
<msg timestamp="20170708 06:20:29.728" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 06:20:29.728" starttime="20170708 06:20:29.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:29.731" starttime="20170708 06:20:29.731"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.731" starttime="20170708 06:20:29.731"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:29.732" starttime="20170708 06:20:29.728"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 06:20:29.732" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 06:20:31.075" level="INFO">Read output:</msg>
<status status="PASS" endtime="20170708 06:20:31.076" starttime="20170708 06:20:29.732"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:31.076" starttime="20170708 06:20:29.723"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 06:20:31.077" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170708 06:20:31.077" starttime="20170708 06:20:31.076"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 06:20:31.079" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170708 06:20:31.079" starttime="20170708 06:20:31.078"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 06:20:31.080" level="INFO">${logpath} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_elog.txt</msg>
<status status="PASS" endtime="20170708 06:20:31.080" starttime="20170708 06:20:31.080"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:20:31.084" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:20:31.085" starttime="20170708 06:20:31.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:20:31.086" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:20:31.086" starttime="20170708 06:20:31.085"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:20:31.086" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:20:31.086" starttime="20170708 06:20:31.086"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:20:31.087" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:20:31.087" starttime="20170708 06:20:31.087"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:20:31.264" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:20:31.264" starttime="20170708 06:20:31.088"></status>
</kw>
<msg timestamp="20170708 06:20:31.264" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:31.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:31.264" starttime="20170708 06:20:31.087"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:20:31.265" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:31.265" starttime="20170708 06:20:31.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:31.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:31.266" starttime="20170708 06:20:31.266"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:31.266" starttime="20170708 06:20:31.083"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:31.266" starttime="20170708 06:20:31.082"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:31.266" starttime="20170708 06:20:31.081"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:20:31.267" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170708 06:20:31.267" starttime="20170708 06:20:31.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:31.268" starttime="20170708 06:20:31.267"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:20:31.311" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 06:20:31.312" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:31.312" starttime="20170708 06:20:31.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:31.312" starttime="20170708 06:20:31.312"></status>
</kw>
<msg timestamp="20170708 06:20:31.313" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:31.313" starttime="20170708 06:20:31.081"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:31.314" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 06:20:31.314" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 06:20:31.314" starttime="20170708 06:20:31.313"></status>
</kw>
<msg timestamp="20170708 06:20:31.314" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 06:20:31.314" starttime="20170708 06:20:31.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 06:20:31.315" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 06:20:31.315" starttime="20170708 06:20:31.315"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:31.315" starttime="20170708 06:20:31.314"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:31.315" starttime="20170708 06:20:31.079"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 06:20:31.316" level="INFO">${logpath} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170708 06:20:31.316" starttime="20170708 06:20:31.316"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:20:31.319" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:20:31.319" starttime="20170708 06:20:31.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:20:31.320" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:20:31.320" starttime="20170708 06:20:31.319"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:20:31.320" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:20:31.320" starttime="20170708 06:20:31.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:20:31.321" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:20:31.321" starttime="20170708 06:20:31.321"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:20:31.500" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:20:31.500" starttime="20170708 06:20:31.322"></status>
</kw>
<msg timestamp="20170708 06:20:31.500" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:31.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:31.500" starttime="20170708 06:20:31.321"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:20:31.501" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:31.501" starttime="20170708 06:20:31.500"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:31.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:31.502" starttime="20170708 06:20:31.501"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:31.502" starttime="20170708 06:20:31.318"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:31.502" starttime="20170708 06:20:31.317"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:31.502" starttime="20170708 06:20:31.317"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:20:31.503" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170708 06:20:31.503" starttime="20170708 06:20:31.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:31.504" starttime="20170708 06:20:31.503"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:20:31.720" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 06:20:31.720" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:31.720" starttime="20170708 06:20:31.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:31.721" starttime="20170708 06:20:31.720"></status>
</kw>
<msg timestamp="20170708 06:20:31.721" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:31.721" starttime="20170708 06:20:31.316"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:31.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:31.722" starttime="20170708 06:20:31.722"></status>
</kw>
<msg timestamp="20170708 06:20:31.722" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170708 06:20:31.722" starttime="20170708 06:20:31.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:31.723" starttime="20170708 06:20:31.722"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170708 06:20:31.724" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 06:20:31.724" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170708 06:20:31.724" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170708 06:20:31.724" starttime="20170708 06:20:31.723"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:31.726" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:31.726" starttime="20170708 06:20:31.725"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:31.726" starttime="20170708 06:20:31.724"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:31.726" starttime="20170708 06:20:31.315"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 06:20:31.727" level="INFO">${logpath} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170708 06:20:31.727" starttime="20170708 06:20:31.726"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:20:31.730" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:20:31.730" starttime="20170708 06:20:31.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:20:31.731" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:20:31.731" starttime="20170708 06:20:31.730"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:20:31.731" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:20:31.731" starttime="20170708 06:20:31.731"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:20:31.732" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:20:31.732" starttime="20170708 06:20:31.731"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:20:33.470" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:20:33.470" starttime="20170708 06:20:31.733"></status>
</kw>
<msg timestamp="20170708 06:20:33.470" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:33.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:33.470" starttime="20170708 06:20:31.732"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:20:33.471" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:33.471" starttime="20170708 06:20:33.471"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:33.472" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:33.472" starttime="20170708 06:20:33.471"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:33.472" starttime="20170708 06:20:31.729"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:33.472" starttime="20170708 06:20:31.728"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:33.472" starttime="20170708 06:20:31.728"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:20:33.473" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170708 06:20:33.473" starttime="20170708 06:20:33.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:33.473" starttime="20170708 06:20:33.473"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:20:33.629" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 06:20:33.629" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:33.629" starttime="20170708 06:20:33.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:33.630" starttime="20170708 06:20:33.630"></status>
</kw>
<msg timestamp="20170708 06:20:33.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:33.630" starttime="20170708 06:20:31.727"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:33.631" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:33.631" starttime="20170708 06:20:33.631"></status>
</kw>
<msg timestamp="20170708 06:20:33.632" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170708 06:20:33.632" starttime="20170708 06:20:33.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:33.632" starttime="20170708 06:20:33.632"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170708 06:20:33.633" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 06:20:33.633" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170708 06:20:33.633" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170708 06:20:33.633" starttime="20170708 06:20:33.632"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:33.635" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:33.635" starttime="20170708 06:20:33.634"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:33.635" starttime="20170708 06:20:33.633"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:33.635" starttime="20170708 06:20:31.726"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 06:20:33.636" level="INFO">${logpath} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_led.txt</msg>
<status status="PASS" endtime="20170708 06:20:33.636" starttime="20170708 06:20:33.635"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:20:33.638" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:20:33.639" starttime="20170708 06:20:33.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:20:33.639" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:20:33.640" starttime="20170708 06:20:33.639"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:20:33.640" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:20:33.640" starttime="20170708 06:20:33.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:20:33.641" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:20:33.641" starttime="20170708 06:20:33.640"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:20:33.831" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:20:33.831" starttime="20170708 06:20:33.647"></status>
</kw>
<msg timestamp="20170708 06:20:33.831" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:33.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:33.831" starttime="20170708 06:20:33.646"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:20:33.832" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:33.832" starttime="20170708 06:20:33.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:33.833" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:33.833" starttime="20170708 06:20:33.832"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:33.833" starttime="20170708 06:20:33.638"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:33.833" starttime="20170708 06:20:33.637"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:33.833" starttime="20170708 06:20:33.636"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:20:33.834" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170708 06:20:33.834" starttime="20170708 06:20:33.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:33.834" starttime="20170708 06:20:33.834"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:20:33.877" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 06:20:33.877" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:33.877" starttime="20170708 06:20:33.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:33.877" starttime="20170708 06:20:33.877"></status>
</kw>
<msg timestamp="20170708 06:20:33.878" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:33.878" starttime="20170708 06:20:33.636"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:33.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 06:20:33.879" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 06:20:33.879" starttime="20170708 06:20:33.878"></status>
</kw>
<msg timestamp="20170708 06:20:33.879" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 06:20:33.879" starttime="20170708 06:20:33.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 06:20:33.880" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 06:20:33.881" starttime="20170708 06:20:33.880"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:33.881" starttime="20170708 06:20:33.880"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:33.881" starttime="20170708 06:20:33.635"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 06:20:33.882" level="INFO">${logpath} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170708 06:20:33.882" starttime="20170708 06:20:33.881"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:20:33.885" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:20:33.886" starttime="20170708 06:20:33.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:20:33.886" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:20:33.886" starttime="20170708 06:20:33.886"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:20:33.887" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:20:33.887" starttime="20170708 06:20:33.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:20:33.888" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:20:33.888" starttime="20170708 06:20:33.887"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:20:34.063" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:20:34.063" starttime="20170708 06:20:33.889"></status>
</kw>
<msg timestamp="20170708 06:20:34.064" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:34.064" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:34.064" starttime="20170708 06:20:33.888"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:20:34.064" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:34.064" starttime="20170708 06:20:34.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:34.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:34.065" starttime="20170708 06:20:34.065"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.065" starttime="20170708 06:20:33.885"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.065" starttime="20170708 06:20:33.884"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.066" starttime="20170708 06:20:33.883"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:20:34.066" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170708 06:20:34.066" starttime="20170708 06:20:34.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:34.067" starttime="20170708 06:20:34.066"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:20:34.110" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 06:20:34.110" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:34.110" starttime="20170708 06:20:34.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:34.110" starttime="20170708 06:20:34.110"></status>
</kw>
<msg timestamp="20170708 06:20:34.111" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:34.111" starttime="20170708 06:20:33.882"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:34.112" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 06:20:34.112" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 06:20:34.112" starttime="20170708 06:20:34.111"></status>
</kw>
<msg timestamp="20170708 06:20:34.112" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 06:20:34.112" starttime="20170708 06:20:34.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 06:20:34.113" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 06:20:34.113" starttime="20170708 06:20:34.113"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.113" starttime="20170708 06:20:34.112"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.113" starttime="20170708 06:20:33.881"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.113" starttime="20170708 06:20:31.079"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.114" starttime="20170708 06:20:31.078"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.114" starttime="20170708 06:20:31.077"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.114" starttime="20170708 06:20:31.077"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.114" starttime="20170708 06:20:29.722"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.114" starttime="20170708 06:20:29.701"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.114" starttime="20170708 06:20:29.698"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.114" starttime="20170708 06:20:29.698"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:34.116" starttime="20170708 06:20:34.116"></status>
</kw>
<msg timestamp="20170708 06:20:34.116" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:34.116" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 06:20:34.116" starttime="20170708 06:20:34.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:34.117" starttime="20170708 06:20:34.116"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 06:20:34.141" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 06:20:34.141" starttime="20170708 06:20:34.140"></status>
</kw>
<msg timestamp="20170708 06:20:34.142" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 06:20:34.142" starttime="20170708 06:20:34.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:34.143" starttime="20170708 06:20:34.142"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.143" starttime="20170708 06:20:34.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:34.144" starttime="20170708 06:20:34.143"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 06:20:34.145" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 06:20:34.145" starttime="20170708 06:20:34.144"></status>
</kw>
<msg timestamp="20170708 06:20:34.145" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 06:20:34.145" starttime="20170708 06:20:34.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:34.147" starttime="20170708 06:20:34.146"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.147" starttime="20170708 06:20:34.146"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:34.147" starttime="20170708 06:20:34.145"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 06:20:34.148" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 06:20:35.658" level="INFO">Read output:</msg>
<status status="PASS" endtime="20170708 06:20:35.658" starttime="20170708 06:20:34.147"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:35.658" starttime="20170708 06:20:34.139"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170708 06:20:35.659" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170708 06:20:35.851" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170708 06:20:35.851" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170708 06:20:35.851" starttime="20170708 06:20:35.659"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170708 06:20:35.857" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170708 06:20:35.857" starttime="20170708 06:20:35.852"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:35.860" starttime="20170708 06:20:35.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:36.928" starttime="20170708 06:20:35.861"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:36.929" starttime="20170708 06:20:35.860"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:36.929" starttime="20170708 06:20:35.857"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170708 06:20:36.929" starttime="20170708 06:20:36.929"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:36.929" starttime="20170708 06:20:34.138"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:36.929" starttime="20170708 06:20:34.117"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:36.929" starttime="20170708 06:20:34.114"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:36.929" starttime="20170708 06:20:34.114"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:36.932" starttime="20170708 06:20:36.931"></status>
</kw>
<msg timestamp="20170708 06:20:36.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:36.932" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 06:20:36.932" starttime="20170708 06:20:36.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:36.932" starttime="20170708 06:20:36.932"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 06:20:36.957" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 06:20:36.957" starttime="20170708 06:20:36.957"></status>
</kw>
<msg timestamp="20170708 06:20:36.958" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 06:20:36.958" starttime="20170708 06:20:36.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:36.959" starttime="20170708 06:20:36.959"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:36.960" starttime="20170708 06:20:36.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:36.961" starttime="20170708 06:20:36.960"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 06:20:36.962" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 06:20:36.962" starttime="20170708 06:20:36.962"></status>
</kw>
<msg timestamp="20170708 06:20:36.962" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 06:20:36.962" starttime="20170708 06:20:36.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:36.965" starttime="20170708 06:20:36.965"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:36.965" starttime="20170708 06:20:36.964"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:36.965" starttime="20170708 06:20:36.963"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 06:20:36.966" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 06:20:38.281" level="INFO">Read output:</msg>
<status status="PASS" endtime="20170708 06:20:38.281" starttime="20170708 06:20:36.966"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:38.281" starttime="20170708 06:20:36.955"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 06:20:38.282" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170708 06:20:38.282" starttime="20170708 06:20:38.282"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 06:20:38.284" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170708 06:20:38.284" starttime="20170708 06:20:38.284"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 06:20:38.285" level="INFO">${logpath} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170708 06:20:38.285" starttime="20170708 06:20:38.285"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:38.287" starttime="20170708 06:20:38.287"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:20:38.287" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170708 06:20:41.205" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 06:20:41.206" level="INFO">${stdout} = Mem: 219864K used, 212436K free, 79972K shrd, 10776K buff, 115716K cached
CPU:   0% usr 100% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 1.84 2.14 1.13 15/154 1156
  PID  PPID USER...</msg>
<msg timestamp="20170708 06:20:41.206" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 06:20:41.206" starttime="20170708 06:20:38.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:41.213" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:41.213" starttime="20170708 06:20:41.212"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:41.214" starttime="20170708 06:20:41.212"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:41.214" starttime="20170708 06:20:41.206"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:41.214" starttime="20170708 06:20:38.285"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:41.214" starttime="20170708 06:20:38.285"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 06:20:41.215" level="INFO">${logpath} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170708 06:20:41.215" starttime="20170708 06:20:41.214"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:41.216" starttime="20170708 06:20:41.216"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:20:41.217" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170708 06:20:42.564" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 06:20:42.564" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-7858cdff46b6d8aa4a4f88884a0623ff50fb78c9 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Sat Jul 8 06:02:...</msg>
<msg timestamp="20170708 06:20:42.564" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 06:20:42.564" starttime="20170708 06:20:41.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:42.572" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:42.572" starttime="20170708 06:20:42.571"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:42.572" starttime="20170708 06:20:42.570"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:42.572" starttime="20170708 06:20:42.565"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:42.572" starttime="20170708 06:20:41.215"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:42.572" starttime="20170708 06:20:41.214"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 06:20:42.573" level="INFO">${logpath} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170708 06:20:42.573" starttime="20170708 06:20:42.573"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:42.575" starttime="20170708 06:20:42.575"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:20:42.575" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170708 06:20:42.884" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 06:20:42.884" level="INFO">${stdout} = MemTotal:         432300 kB
MemFree:          212280 kB
MemAvailable:     256016 kB
Buffers:           10776 kB
Cached:           115720 kB
SwapCached:            0 kB
Active:           106388 kB
Inac...</msg>
<msg timestamp="20170708 06:20:42.884" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 06:20:42.884" starttime="20170708 06:20:42.575"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:42.894" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:42.894" starttime="20170708 06:20:42.893"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:42.894" starttime="20170708 06:20:42.892"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:42.894" starttime="20170708 06:20:42.885"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:42.895" starttime="20170708 06:20:42.574"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:42.895" starttime="20170708 06:20:42.573"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 06:20:42.896" level="INFO">${logpath} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170708 06:20:42.896" starttime="20170708 06:20:42.895"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:42.897" starttime="20170708 06:20:42.897"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:20:42.898" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170708 06:20:43.262" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 06:20:43.262" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170708 06:20:43.262" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 06:20:43.263" starttime="20170708 06:20:42.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:43.272" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:43.272" starttime="20170708 06:20:43.271"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:43.272" starttime="20170708 06:20:43.269"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:43.272" starttime="20170708 06:20:43.263"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:43.272" starttime="20170708 06:20:42.896"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:43.272" starttime="20170708 06:20:42.895"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 06:20:43.273" level="INFO">${logpath} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170708 06:20:43.273" starttime="20170708 06:20:43.273"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:43.275" starttime="20170708 06:20:43.275"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 06:20:43.275" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170708 06:20:44.380" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 06:20:44.381" level="INFO">${stdout} = -- Logs begin at Sat 2017-07-08 06:15:31 UTC, end at Sat 2017-07-08 06:20:51 UTC. --
Jul 08 06:15:31 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 08 06:15:31 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170708 06:20:44.381" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 06:20:44.381" starttime="20170708 06:20:43.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 06:20:44.389" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/20170708062018155579_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:44.389" starttime="20170708 06:20:44.388"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.389" starttime="20170708 06:20:44.387"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.389" starttime="20170708 06:20:44.382"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.389" starttime="20170708 06:20:43.274"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.389" starttime="20170708 06:20:43.273"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.389" starttime="20170708 06:20:38.284"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.390" starttime="20170708 06:20:38.283"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.390" starttime="20170708 06:20:38.283"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.390" starttime="20170708 06:20:38.282"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.390" starttime="20170708 06:20:36.954"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.390" starttime="20170708 06:20:36.933"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.390" starttime="20170708 06:20:36.930"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.390" starttime="20170708 06:20:36.930"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:44.392" starttime="20170708 06:20:44.392"></status>
</kw>
<msg timestamp="20170708 06:20:44.392" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:44.392" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 06:20:44.392" starttime="20170708 06:20:44.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:44.393" starttime="20170708 06:20:44.392"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:20:44.420" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:20:44.420" starttime="20170708 06:20:44.419"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:20:44.421" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:20:44.421" starttime="20170708 06:20:44.420"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:20:44.421" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:20:44.421" starttime="20170708 06:20:44.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:20:44.422" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:20:44.422" starttime="20170708 06:20:44.422"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:20:44.604" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:20:44.604" starttime="20170708 06:20:44.423"></status>
</kw>
<msg timestamp="20170708 06:20:44.604" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:44.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:44.604" starttime="20170708 06:20:44.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:20:44.605" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:44.605" starttime="20170708 06:20:44.605"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:44.606" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:44.606" starttime="20170708 06:20:44.606"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.607" starttime="20170708 06:20:44.418"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.607" starttime="20170708 06:20:44.416"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.607" starttime="20170708 06:20:44.415"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:20:44.608" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170708 06:20:44.608" starttime="20170708 06:20:44.607"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:44.609" starttime="20170708 06:20:44.608"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:20:44.652" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170708 06:20:44.652" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:44.653" starttime="20170708 06:20:44.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:44.653" starttime="20170708 06:20:44.653"></status>
</kw>
<msg timestamp="20170708 06:20:44.653" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:44.654" starttime="20170708 06:20:44.415"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:44.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 06:20:44.655" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 06:20:44.655" starttime="20170708 06:20:44.654"></status>
</kw>
<msg timestamp="20170708 06:20:44.655" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 06:20:44.655" starttime="20170708 06:20:44.654"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170708 06:20:44.656" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170708 06:20:44.656" starttime="20170708 06:20:44.655"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.656" starttime="20170708 06:20:44.414"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.656" starttime="20170708 06:20:44.393"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.656" starttime="20170708 06:20:44.390"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.656" starttime="20170708 06:20:44.390"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:44.658" starttime="20170708 06:20:44.658"></status>
</kw>
<msg timestamp="20170708 06:20:44.658" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:44.658" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 06:20:44.658" starttime="20170708 06:20:44.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:44.659" starttime="20170708 06:20:44.659"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170708 06:20:44.683" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170708 06:20:44.683" starttime="20170708 06:20:44.682"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.683" starttime="20170708 06:20:44.681"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.683" starttime="20170708 06:20:44.659"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.683" starttime="20170708 06:20:44.656"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.683" starttime="20170708 06:20:44.656"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.683" starttime="20170708 06:20:21.715"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.684" starttime="20170708 06:20:21.713"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.684" starttime="20170708 06:20:21.713"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:44.684" starttime="20170708 06:20:21.713"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170708 06:20:45.115" starttime="20170708 06:20:44.685"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:45.115" starttime="20170708 06:20:21.712"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:45.115" starttime="20170708 06:20:15.084"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:45.115" starttime="20170708 06:20:15.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:45.116" starttime="20170708 06:20:45.116"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170708 06:20:45.117" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170708 06:20:45.117" starttime="20170708 06:20:45.117"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170708 06:20:45.118" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170708 06:20:45.118" starttime="20170708 06:20:45.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:45.119" starttime="20170708 06:20:45.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:45.119" starttime="20170708 06:20:45.119"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170708 06:20:45.120" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170708 06:20:45.120" starttime="20170708 06:20:45.120"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170708 06:20:45.121" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170708 06:20:45.121" starttime="20170708 06:20:45.121"></status>
</kw>
<msg timestamp="20170708 06:20:45.121" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170708 06:20:45.121" starttime="20170708 06:20:45.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:45.122" starttime="20170708 06:20:45.122"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:45.122" starttime="20170708 06:20:45.122"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 06:20:45.123" level="INFO">${cur_time} = 2017-07-08 06:20:45:123177</msg>
<status status="PASS" endtime="20170708 06:20:45.123" starttime="20170708 06:20:45.123"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 06:20:45.124" level="INFO">${cur_time} = 20170708062045123177</msg>
<status status="PASS" endtime="20170708 06:20:45.124" starttime="20170708 06:20:45.124"></status>
</kw>
<msg timestamp="20170708 06:20:45.124" level="INFO">${cur_time} = 20170708062045123177</msg>
<status status="PASS" endtime="20170708 06:20:45.124" starttime="20170708 06:20:45.123"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170708 06:20:45.125" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:45.125" starttime="20170708 06:20:45.125"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:45.125" starttime="20170708 06:20:45.117"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:45.125" starttime="20170708 06:20:14.822"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:45.126" starttime="20170708 06:20:14.806"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:45.126" starttime="20170708 06:20:14.804"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>BIOS_Code_Update</tag>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="FAIL" endtime="20170708 06:20:45.126" critical="yes" starttime="20170708 06:17:25.504">Keyword 'Is PNOR Flashing' failed after retrying for 2 minutes. The last error was: Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:45.127" starttime="20170708 06:20:45.127"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170708 06:20:45.128" starttime="20170708 06:20:45.128"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 06:20:45.148" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 06:20:45.149" starttime="20170708 06:20:45.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 06:20:45.150" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 06:20:45.150" starttime="20170708 06:20:45.150"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 06:20:45.151" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 06:20:45.151" starttime="20170708 06:20:45.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 06:20:45.151" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 06:20:45.151" starttime="20170708 06:20:45.151"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 06:20:45.349" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 06:20:45.349" starttime="20170708 06:20:45.152"></status>
</kw>
<msg timestamp="20170708 06:20:45.349" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 06:20:45.350" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:45.350" starttime="20170708 06:20:45.152"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 06:20:45.350" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:45.350" starttime="20170708 06:20:45.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:45.351" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:45.351" starttime="20170708 06:20:45.351"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:45.351" starttime="20170708 06:20:45.147"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:45.351" starttime="20170708 06:20:45.144"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:45.351" starttime="20170708 06:20:45.144"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 06:20:45.352" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 06:20:45.352" starttime="20170708 06:20:45.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:45.353" starttime="20170708 06:20:45.352"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 06:20:46.623" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 06:20:46.623" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:46.623" starttime="20170708 06:20:45.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:46.624" starttime="20170708 06:20:46.624"></status>
</kw>
<msg timestamp="20170708 06:20:46.625" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 06:20:46.625" starttime="20170708 06:20:45.143"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 06:20:46.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 06:20:46.626" starttime="20170708 06:20:46.625"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 06:20:46.626" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 06:20:46.626" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 06:20:46.627" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170708 06:20:46.627" starttime="20170708 06:20:46.626"></status>
</kw>
<msg timestamp="20170708 06:20:46.627" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170708 06:20:46.627" starttime="20170708 06:20:45.142"></status>
</kw>
<msg timestamp="20170708 06:20:46.627" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170708 06:20:46.627" starttime="20170708 06:20:45.141"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170708 06:20:46.628" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170708 06:20:46.628" starttime="20170708 06:20:46.628"></status>
</kw>
<msg timestamp="20170708 06:20:46.629" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 06:20:46.629" starttime="20170708 06:20:46.627"></status>
</kw>
<msg timestamp="20170708 06:20:46.629" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 06:20:46.629" starttime="20170708 06:20:45.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:46.629" starttime="20170708 06:20:46.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:46.630" starttime="20170708 06:20:46.630"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170708 06:20:46.631" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170708 06:20:46.631" starttime="20170708 06:20:46.631"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170708 06:20:46.632" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170708062018155579_TestBiosUpdate/20170708062018155579_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170708 06:20:46.632" starttime="20170708 06:20:46.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:46.632" starttime="20170708 06:20:46.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:46.633" starttime="20170708 06:20:46.633"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170708 06:20:46.633" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170708 06:20:46.634" starttime="20170708 06:20:46.633"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170708 06:20:46.634" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170708 06:20:46.635" starttime="20170708 06:20:46.634"></status>
</kw>
<msg timestamp="20170708 06:20:46.635" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170708 06:20:46.635" starttime="20170708 06:20:46.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:46.635" starttime="20170708 06:20:46.635"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170708 06:20:46.636" starttime="20170708 06:20:46.636"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 06:20:46.637" level="INFO">${cur_time} = 2017-07-08 06:20:46:637109</msg>
<status status="PASS" endtime="20170708 06:20:46.637" starttime="20170708 06:20:46.637"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 06:20:46.638" level="INFO">${cur_time} = 20170708062046637109</msg>
<status status="PASS" endtime="20170708 06:20:46.638" starttime="20170708 06:20:46.638"></status>
</kw>
<msg timestamp="20170708 06:20:46.638" level="INFO">${cur_time} = 20170708062046637109</msg>
<status status="PASS" endtime="20170708 06:20:46.638" starttime="20170708 06:20:46.636"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170708 06:20:46.640" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 06:20:46.640" starttime="20170708 06:20:46.639"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:46.640" starttime="20170708 06:20:46.630"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:46.640" starttime="20170708 06:20:45.140"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:46.640" starttime="20170708 06:20:45.129"></status>
</kw>
<status status="PASS" endtime="20170708 06:20:46.641" starttime="20170708 06:20:45.128"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>BIOS_Code_Update</tag>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170708 06:20:46.641" critical="yes" starttime="20170708 06:20:45.126"></status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="FAIL" endtime="20170708 06:20:46.644" starttime="20170708 06:17:24.291"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="1">BIOS_Code_Update</stat>
<stat fail="0" pass="1">Host_BIOS_Power_On</stat>
<stat fail="1" pass="0">Host_BIOS_Update</stat>
<stat fail="1" pass="1">open-power</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Test Bios Update" pass="1">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
